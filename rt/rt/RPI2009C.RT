*
* skip intro
t18
* skip set program mask
t2
* skip initialize R2
t1
*
* ##############################
*
* Part 1 tests that set CC only
*
* ##############################
*
* LCR tests for CC 3
*
* ############################## (@98)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'f4f4f4f412345678'
  v 1r        = x'f4f4f4f480000000'
  v psw.cc    = x'0'
t1
  v 0r        = x'f4f4f4f480000000'
  v psw.cc    = x'3'
t1
  v 2r        = x'0000000030000000'
*
* ##############################
*
* LCR tests for CC 0 1 2
*
* ############################## (@105)
*
  v * 2       = x'1b00'
t3
  v 0r        = x'f4f4f4f412345678'
  v 1r        = x'f4f4f4f400000000'
  v psw.cc    = x'3'
t1
  v 0r        = x'f4f4f4f400000000'
  v psw.cc    = x'0'
t1
  v 2r        = x'0000000000000000'
* ############################## (@113)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'f4f4f4f412345678'
  v 1r        = x'f4f4f4f400000001'
  v psw.cc    = x'0'
t1
  v 0r        = x'f4f4f4f4ffffffff'
  v psw.cc    = x'1'
t1
  v 2r        = x'0000000010000000'
*
* ############################## (@120)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'f4f4f4f412345678'
  v 1r        = x'f4f4f4f4ffffffff'
  v psw.cc    = x'0'
t1
  v 0r        = x'f4f4f4f400000001'
  v psw.cc    = x'2'
t1
  v 2r        = x'0000000020000000'
*
* ##############################
*
* LCGR tests for CC 3
*
* ############################## (@135)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'12345678a1b2c3d4'
  v 1r        = x'8000000000000000'
  v psw.cc    = x'0'
t1
  v 0r        = x'8000000000000000'
  v psw.cc    = x'3'
t1
  v 2r        = x'0000000030000000'
*
* ##############################
*
* LCGR tests for CC 0 1 2
*
* ############################## (@142)
*
  v * 2       = x'1b00'
t3
  v 0r        = x'12345678a1b2c3d4'
  v 1r        = x'0000000000000000'
  v psw.cc    = x'3'
t1
  v 0r        = x'0000000000000000'
  v psw.cc    = x'0'
t1
  v 2r        = x'0000000000000000'
*
* ############################## (@150)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'12345678a1b2c3d4'
  v 1r        = x'0000000000000001'
  v psw.cc    = x'0'
t1
  v 0r        = x'ffffffffffffffff'
  v psw.cc    = x'1'
t1
  v 2r        = x'0000000010000000'
*
* ############################## (@157)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'12345678a1b2c3d4'
  v 1r        = x'ffffffffffffffff'
  v psw.cc    = x'0'
t1
  v 0r        = x'0000000000000001'
  v psw.cc    = x'2'
t1
  v 2r        = x'0000000020000000'
*
* ##############################
*
* Part 2 tests that overflow
*
* ##############################
*
  v 810c. 2   = x'1b00'
  a 810c.
  g
  v psw.addr  = x'0000810c'
*
* ##############################
*
* LCR tests that overflow
*
* ############################## (@201)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'f4f4f4f412345678'
  v 1r        = x'f4f4f4f480000000'
  v psw.cc    = x'0'
  v 8120. 4   = x'b2220020'
  a 8120.
g
  v psw.addr  = x'00008120'
  v 0r        = x'f4f4f4f480000000'
  v psw.cc    = x'3'
t1
  v 2r        = x'0000000038000000'
  v 8182. 1   = x'38'
*
* ##############################
*
* LCGR tests that overflow
*
* ############################## (@220)
*
  v * 2       = x'1b00'
t2
  v 0r        = x'12345678a1b2c3d4'
  v 1r        = x'8000000000000000'
  v psw.cc    = x'0'
  v 813c. 4   = x'b2220020'
  a 813c.
g
  v psw.addr  = x'0000813c'
  v 0r        = x'8000000000000000'
  v psw.cc    = x'3'
t1
  v 2r        = x'0000000038000000'
  v 8182. 1   = x'38'
*
* ##############################
* done
* ##############################
z
