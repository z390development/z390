#!/bin/bash

# runbr14owe: regression test IEFBR14 Okay / Warning / Error variants

# global variable containing name of script; used by error function
scriptName="runbr14owe"

########################################
# print error message and exit
#
# input:
#   $1 name of program for the error
#   $2 program expected return code
#   $3 program actual return code
########################################

function error {
    echo "$scriptName ERROR: $1 expected RC=$2 but actual RC=$3; exiting"
    exit 8
}


#set -e             # exit on all errors; not for this script
cd $(dirname $0)    # set to directory of script - rt/bash
cd ..               # up to rt
cd ..               # up to z390

bash/asm rt/mlc/IEFBR14O
rc=$?
if [ $rc -ne 0 ]; then error "IEFBR14O" 0 $rc; fi
bash/asml rt/mlc/IEFBR14O
rc=$?
if [ $rc -ne 0 ]; then error "IEFBR14O" 0 $rc; fi
bash/asmlg rt/mlc/IEFBR14O
rc=$?
if [ $rc -ne 0 ]; then error "IEFBR14O" 0 $rc; fi

bash/asm rt/mlc/IEFBR14W
rc=$?
if [ $rc -ne 4 ]; then error "IEFBR14W" 4 $rc; fi
bash/asml rt/mlc/IEFBR14W
rc=$?
if [ $rc -ne 0 ]; then error "IEFBR14W" 0 $rc; fi
bash/asmlg rt/mlc/IEFBR14W
rc=$?
if [ $rc -ne 0 ]; then error "IEFBR14W" 0 $rc; fi

bash/asm rt/mlc/IEFBR14E
rc=$?
if [ $rc -ne 12 ]; then error "IEFBR14E" 12 $rc; fi
bash/asml rt/mlc/IEFBR14E
rc=$?
if [ $rc -ne 12 ]; then error "IEFBR14E" 12 $rc; fi
bash/asmlg rt/mlc/IEFBR14E
rc=$?
if [ $rc -ne 12 ]; then error "IEFBR14E" 12 $rc; fi

# if we get here, there were no errors
rc=0
echo "$scriptName exiting with RC=$rc"
exit $rc
