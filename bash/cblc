#!/bin/bash

# cblc: translate CBL to MLC using zc390 and assemble using mz390 

# debug flag; 0=no debug, 1=debug
debug=0

rc=0
trace=0

if [ $# -gt 0 ]; then
    # save current nocasematch setting
    SHELLNOCASEMATCH=$(shopt -p nocasematch)
    shopt -s nocasematch
    case $1 in
        "tron")
            shift
            trace=1
            ;;
        "troff")
            shift
            trace=0
            ;;
    esac
    # restore nocasematch setting
    $SHELLNOCASEMATCH
fi

if [ $trace -eq 1 ]; then set -x; fi

if [ $# -eq 0 ] || [ -z "$1" ]; then echo "cblc ERROR: missing file name"; exit 16; fi

# extract longest substring that ends with "/"
dir=${0%/*}

# include the file containing the parsefilepath function
source ${dir}/parsefilepath

# input file path must not end with a period
if [[ $1 == *. ]]; then echo "cblc ERROR: file path ends with '.' - $1"; exit 16; fi

# parse file path to get path, name, and extension; sets global variables z_fpath, z_fname, z_fext
# Examples: if $1="zcobol/demo/HELLO", returned values: z_fpath="zcobol/demo/", z_fname="HELLO" z_fext=""
#           if $1="zcobol/demo/HELLO.CBL", returned values: z_fpath="zcobol/demo/", z_fname="HELLO" z_fext="CBL"
parsefilepath "$1"
if [ $debug -eq 1 ]; then echo "after parsefilepath; \$z_fpath: >$z_fpath<  \$z_fname: >$z_fname<  \$z_fext: >$z_fext<"; fi

# must have z_fname
if [ -z "$z_fname" ]; then echo "cblc ERROR: invalid/missing file name in file path- $1"; exit 16; fi
# must not have a period in z_fname
if [[ $z_fname == *.* ]]; then echo "cblc ERROR: invalid character '.' in file name \"$z_fname\"; file path - $1"; exit 16; fi
# if no z_fext, use default "CBL"
if [ -z "$z_fext" ]; then z_fext="CBL"; fi
zFile=${z_fpath}${z_fname}  # path, if any, followed by file name without extension
# make sure file, with extension, exists
if [ ! -f ${zFile}.${z_fext} ]; then echo "cblc ERROR: file $zFile.$z_fext not found"; exit 16; fi
if [ $debug -eq 1 ]; then echo "full file name with path and extension: >${zFile}.${z_fext}<"; fi

# remove previously created files, if any
if [ -f "$zFile.MLC" ]; then rm $zFile.MLC; fi
if [ -f "$zFile.BAL" ]; then rm $zFile.BAL; fi
if [ -f "$zFile.ERR" ]; then rm $zFile.ERR; fi
if [ -f "$zFile.LST" ]; then rm $zFile.LST; fi
if [ -f "$zFile.OBJ" ]; then rm $zFile.OBJ; fi
if [ -f "$zFile.PRN" ]; then rm $zFile.PRN; fi
if [ -f "$zFile.STA" ]; then rm $zFile.STA; fi
if [ -f "$zFile.390" ]; then rm $zFile.390; fi
if [ -f "$zFile.cpp" ]; then rm $zFile.cpp; fi
if [ -f "$zFile.java" ]; then rm $zFile.java; fi
if [ -f "$zFile.class" ]; then rm $zFile.class; fi
if [ -f "$zFile_ZC_LABELS.CPY" ]; then rm $zFile._ZC_LABELS.CPY; fi

# get the z390 directory
zdir=$(dirname $0)
zdir=$(cd $zdir && pwd)
zdir=$(dirname $zdir)

# invoke COBOL preprocessor: convert COBOL source to assembler source (MLC extension)
${dir}/zc390 $zFile.$z_fext $2 $3 $4 $5 $6 $7 $8 $9
rc=$?
if [ $debug -eq 1 ]; then echo "cblc: zc390 rc=$rc"; fi
if [ $rc -eq 0 ] || [ $rc -eq 4 ]; then
    if [ $rc -eq 4 ]; then
            echo "cblc WARNING: zc390 rc=$rc; see warnings in zc390 generated $zFile.MLC file and on console"
    fi
    cblopt='@'$zdir'/zcobol/opt/CBLOPT'
    sysmac='sysmac('$zdir'/zcobol/mac+'$zdir'/mac)'
    syscpy='syscpy(+'$zdir'/zcobol/cpy)'
    if [ $debug -eq 1 ]; then echo "cblc: cblopt=$cblopt"; fi
    # invoke macro processor with input the generated assembler source
    ${dir}/mz390 $zFile $cblopt $sysmac $syscpy $2 $3 $4 $5 $6 $7 $8 $9
    rc=$?
    if [ $debug -eq 1 ]; then echo "cblc: mz390 rc=$rc"; fi
    if [ $rc -ne 0 ]; then
        if [ $rc -eq 4 ]; then
            echo "cblc WARNING: mz390 rc=$rc; see warnings in mz390 generated $zFile.BAL/ERR/PRN file(s) and on console"
        else
            echo "cblc ERROR: mz390 rc=$rc; see errors in mz390 generated $zFile.BAL/ERR/PRN file(s) and on console"
            if [ -f "$zFile.OBJ" ]; then rm $zFile.OBJ; fi
        fi
    fi
else
    echo "cblc ERROR: zc390 rc=$rc; see errors in zc390 generated $zFile.MLC file and on console"
fi

exit $rc
