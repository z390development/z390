#!/bin/bash

# asmlg: assemble, link, and go from mlc to 390 to execution 

# debug flag; 0=no debug, 1=debug
debug=0

rc=0
trace=0

if [ $# -gt 0 ]; then
    # save current nocasematch setting
    SHELLNOCASEMATCH=$(shopt -p nocasematch)
    shopt -s nocasematch
    case $1 in
        "tron")
            shift
            trace=1
            ;;
        "troff")
            shift
            trace=0
            ;;
    esac
    # restore nocasematch setting
    $SHELLNOCASEMATCH
fi

if [ $trace -eq 1 ]; then set -x; fi

if [ $# -eq 0 ] || [ -z "$1" ]; then echo "asmlg ERROR: missing file name"; exit 16; fi

# extract longest substring that ends with "/"
dir=${0%/*}

# include the file containing the parsefilepath function
source ${dir}/parsefilepath

# input file path must not end with a period
if [[ $1 == *. ]]; then echo "asmlg ERROR: file path ends with '.' - $1"; exit 16; fi

# parse file path to get path, name, and extension; sets global variables z_fpath, z_fname, z_fext
# Examples: if $1="demo/HELLO", returned values: z_fpath="demo/", z_fname="HELLO" z_fext=""
#           if $1="demo/HELLO.MLC", returned values: z_fpath="demo/", z_fname="HELLO" z_fext="MLC"
#           if $1="HELLO", returned values: z_fpath="", z_fname="HELLO" z_fext=""
parsefilepath "$1"
if [ $debug -eq 1 ]; then echo "after parsefilepath; \$z_fpath: >$z_fpath<  \$z_fname: >$z_fname<  \$z_fext: >$z_fext<"; fi

# must have z_fname
if [ -z "$z_fname" ]; then echo "asmlg ERROR: invalid/missing file name in file path- $1"; exit 16; fi
# must not have a period in z_fname
if [[ $z_fname == *.* ]]; then echo "asmlg ERROR: invalid character '.' in file name \"$z_fname\"; file path - $1"; exit 16; fi
# if no z_fext, use default "MLC"
if [ -z "$z_fext" ]; then z_fext="MLC"; fi
zFile=${z_fpath}${z_fname}  # path, if any, followed by file name without extension
# make sure file, with extension, exists
if [ ! -f ${zFile}.${z_fext} ]; then echo "asmlg ERROR: file $zFile.$z_fext not found"; exit 16; fi
if [ $debug -eq 1 ]; then echo "full file name with path and extension: >${zFile}.${z_fext}<"; fi

# remove previously created files, if any
if [ -f "$zFile.BAL" ]; then rm $zFile.BAL; fi
if [ -f "$zFile.PRN" ]; then rm $zFile.PRN; fi
if [ -f "$zFile.OBJ" ]; then rm $zFile.OBJ; fi
if [ -f "$zFile.LST" ]; then rm $zFile.LST; fi
if [ -f "$zFile.390" ]; then rm $zFile.390; fi
if [ -f "$zFile.LOG" ]; then rm $zFile.LOG; fi
if [ -f "$zFile.ERR" ]; then rm $zFile.ERR; fi
if [ -f "$zFile.STA" ]; then rm $zFile.STA; fi
#if [ -f $zFile.TR* ]; then rm $zFile.TR*; fi
# .TR* file(s) exist if "ls" exit status is 0
if ls $zFile.TR* 1>/dev/null 2>&1; then rm -f $zFile.TR*; fi

# get the z390 directory
zdir=$(dirname $0)
zdir=$(cd $zdir && pwd)
zdir=$(dirname $zdir)

sysmac='sysmac(+'$zdir'/mac)'
syscpy='syscpy(+'$zdir'/mac)'

# invoke macro processor
${dir}/mz390 $zFile.$z_fext $sysmac $syscpy $2 $3 $4 $5 $6 $7 $8 $9
rc=$?
if [ $debug -eq 1 ]; then echo "asmlg: mz390 rc=$rc"; fi

if [ $rc -eq 0 ] || [ $rc -eq 4 ]; then
    if [ $rc -eq 4 ]; then
        echo "asmlg WARNING: mz390 rc=$rc; see warnings in mz390 generated $zFile.BAL/ERR/PRN file(s) and on console"    
    fi
    # invoke linker
    ${dir}/lz390 $zFile $2 $3 $4 $5 $6 $7 $8 $9
    rc=$?
    if [ $debug -eq 1 ]; then echo "asmlg: lz390 rc=$rc"; fi
    
    if [ $rc -eq 0 ] || [ $rc -eq 4 ]; then
        if [ $rc -eq 4 ]; then
            echo "asmlg WARNING: lz390 rc=$rc; see warnings in lz390 generated $zFile.LST file and on console"    
        fi 
        # invoke executor/emulator
        ${dir}/ez390 $zFile $2 $3 $4 $5 $6 $7 $8 $9
        rc=$?
        if [ $debug -eq 1 ]; then echo "asmlg: ez390 rc=$rc"; fi
        # rc is a user return code or an exit code from ez390.java; may not be an error!
        if [ $rc -ne 0 ]; then
            echo "asmlg ERROR: ez390 rc=$rc; see errors in $zFile.LOG file and on console"
        fi
    else
        echo "asmlg ERROR: lz390 rc=$rc; see errors in $zFile.LST file and on console"
        if [ -f "$zFile.390" ]; then rm $zFile.390; fi
    fi
else
    echo "asmlg ERROR: mz390 rc=$rc; see errors in $zFile.BAL/ERR/PRN file(s) and on console"
    if [ -f "$zFile.OBJ" ]; then rm $zFile.OBJ; fi
fi

exit $rc
