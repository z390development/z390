         TITLE 'Solution to Program 6, CSCI 360, Spring 2007 - M Stack'
*
*********0*****6*******************6**********************************1
*
* Function:    This program demonstrates a solution to the Program 6 
*              assignment for CSCI 360, Spring semester 2007. It builds
*              on Programs 4 and 5.
*
* Input:       Three groups of input records, separated by a record
*              with a zero publisher prefix.  Each of the first two
*              groups has no more than twenty records, each including
*              the ISBN Publisher Prefix, the number of titles
*              currently published, the number of titles being prepared
*              for publication, and the name of the publisher.
*
*              The third group of records is update transactions.
*              Each record represents a change in either or both the
*              titles published or titles in preparation, and each may
*              be a positive or negative value.
*
* Process:     This program will build a table of titles from each of
*              the first two groups of input records.  The tables are
*              then sorted and printed.  Following that, a merged
*              table is created and printed.  Finally, update
*              transactions are applied to the merge table, which is
*              printed once more at the end.
*
* Output:      1,2 - A report of each input table after sorting
*              3 - A report of the merged tables
*              4 - A report of transactions appied, with totals
*              5 - A report of the merged tables after transactions
*
*  Logic:
*  [1] Perform entry processing
*  [2] Call BUILD to read and construct first table
*  [3] Call SORT to sort first table by Publisher Name
*  [4] Print headers for display of first table
*  [5] Call PRINT to display the first table entries
*  [6] Call BUILD to read and construct the second table
*  [7] Call SORT to sort second table by Publisher Name
*  [8] Print headers for display of second table
*  [9] Call PRINT to display the second table entries
* [10] Call MERGE to merge the two tables into a third table
* [11] Print headers for display of merged table
* [12] Call PRINT to display the merged table
* [13] Print headers for the transaction report
* [14] Call UPDATE to read, process, and report any updates
* [15] Print headers for display of updated table
* [16] Call PRINT to display the updated table
* [17] Perform exit processing
*
*********0*****6*******************6**********************************1
*
*  [1] Perform entry processing
*
MAIN     CSECT ,
         USING MAIN,15             Temporary base
         STM   0,15,MAINSAVE       Save all registers at entry
         LR    11,15               Set program base register
         LA    12,4095(,11)        Get second base reg
         LA    12,1(,12)            at MAIN+4096
         USING MAIN,11,12            and tell assembler
         DROP  15
*
*  [2] Call BUILD to read and construct first table
*
         LA    1,PLST1A            Get parameter list for BUILD
         BAL   14,BUILD            Call BUILD
*
*  [3] Call SORT to sort first table by ticket property ID
*
         LA    1,PLST1             Get parameter list for SORT
         BAL   14,SORT             Call SORT
*
*  [4] Print headers for display of first table
*
         MVC   HDR2STAT,=C'  First' Set indicator
         XPRNT HDR1,133            Print
         XPRNT HDR2,133             all four
         XPRNT HDR3,133              headers
         XPRNT HDR4,133         
*
*  [5] Call PRINT to display the first table entries
*
         LA    1,PLST1             Get parameter list for PRINT
         BAL   14,PRINT            Call PRINT
*
*  [6] Call BUILD to read and construct the second table
*
         LA    1,PLST2A            Get parameter list for BUILD
         BAL   14,BUILD            Call BUILD
*
*  [7] Call SORT to sort second table by ticket request ID
*
         LA    1,PLST2             Get parameter list for SORT
         BAL   14,SORT             Call SORT
*
*  [8] Print headers for display of second table
*
         MVC   HDR2STAT,=C' Second' Set indicator
         XPRNT HDR1,133            Print
         XPRNT HDR2,133             all four
         XPRNT HDR3,133              headers
         XPRNT HDR4,133         
*
*  [9] Call PRINT to display the second table entries
*
         LA    1,PLST2             Get parameter list for PRINT
         BAL   14,PRINT            Call PRINT
*
* [10] Call MERGE to merge the two tables into a third table
*
         LA    1,PLST3             Get parameter list for MERGE
         BAL   14,MERGE            Call MERGE
*
* [11] Print headers for display of merged table
*
         MVC   HDR2STAT,=C' Merged' Set indicator
         XPRNT HDR1,133            Print
         XPRNT HDR2,133             all four
         XPRNT HDR3,133              headers
         XPRNT HDR4,133         
*
* [12] Call PRINT to display the merged table
*
         LA    1,PLST3A            Get parameter list for PRINT
         BAL   14,PRINT            Call PRINT
*
* [13] Print headers for the transaction report
*
         XPRNT HDR1,133            Print
         XPRNT HDR5,133             all four
         XPRNT HDR6,133              headers
         XPRNT HDR7,133
*
* [14] Call UPDATE to read, process, and report any updates
*
         LA    1,PLST3A            Get parameter list for UPDATE
         BAL   14,UPDATE           Call UPDATE
*
* [15] Print headers for display of updated table
*
         MVC   HDR2STAT,=C'Updated' Set indicator
         XPRNT HDR1,133            Print
         XPRNT HDR2,133             all four
         XPRNT HDR3,133              headers
         XPRNT HDR4,133   
*
* [16] Call PRINT to display the updated table
*
         LA    1,PLST3A            Get parameter list for PRINT
         BAL   14,PRINT            Call PRINT
*
* [17] Perform exit processing
*
         LM    0,15,MAINSAVE       Restore all registers
         BR    14                  Return to caller
         DC    H'0'
*
*********0*****6*******************6**********************************1
*
*  Parameter lists
*
PLST1    DC    A(TABLE1)           Parameter list
PLST1A   DC    A(NAV1)              for TABLE1
         DC    A(INPUT)              processing
*
PLST2    DC    A(TABLE2)           Parameter list
PLST2A   DC    A(NAV2)              for TABLE2
         DC    A(INPUT)              processing
*
PLST3    DC    A(TABLE1)           Parameter list
         DC    A(NAV1)              for merged table
         DC    A(TABLE2)             processing
         DC    A(NAV2)
PLST3A   DC    A(TABLE3)           Parameter list 
         DC    A(NAV3)              for TABLE3
         DC    A(INPUT)              PRINT 
*
*  Report Headers
*
HDR1     DC    C'1'                First report header
         DC    51C' '
         DC    CL30'Book Title Counts by Publisher'
         DC    51C' '
*
HDR2     DC    C' '                Second report header
         DC    48C' '
HDR2STAT DS    CL7
         DC    CL30' List of Publishers and Titles'
         DC    48C' '
*
HDR3     DC    C'0'                Third report header
         DC    9C' '
         DC    CL30'Publisher Name'
         DC    10C' '
         DC    CL16'Publisher Prefix'
         DC    10C' '
         DC    CL15'Titles in Print'
         DC    10C' '
         DC    CL21'Titles in Preparation'
         DC    11C' '
*
HDR4     DC    C' '                Fourth report header
         DC    9C' '
         DC    30C'-'
         DC    10C' '
         DC    16C'-'
         DC    10C' '
         DC    15C'-'
         DC    10C' '
         DC    21C'-'
         DC    11C' '
*
HDR5     DC    C' '                Transaction report header
         DC    45C' '
         DC    CL42'Updates to Titles in Print and Preparation'
         DC    45C' '
*
HDR6     DC    C'0'                Sixth report header
         DC    9C' '
         DC    CL30'Publisher Name'
         DC    10C' '
         DC    CL24'Added to Titles in Print'
         DC    10C' '
         DC    CL30'Added to Titles in Preparation'
         DC    19C' '
*
HDR7     DC    C' '                Seventh report header
         DC    9C' '
         DC    30C'-'
         DC    10C' '
         DC    24C'-'
         DC    10C' '
         DC    30C'-'
         DC    19C' '
*********0*****6*******************6**********************************1
*
*  Table entry format (eleven fullwords):
*
*PUBPREF DS    F                   ISBN publisher identifier
*PUBNAME DS    CL30                Publisher Name
*PUBTITL DS    F                   Number of titles currently published
*PUBPREP DS    F                   Number of titles being prepared
*
*********0*****6*******************6**********************************1
*
INPUT    DS    CL80                Input buffer
MAINSAVE DS    16F                 Save area
*
NAV1     DC    A(TABLE1)           Next available entry in TABLE1
NAV2     DC    A(TABLE2)           Next available entry in TABLE2
NAV3     DC    A(TABLE3)           Next available entry in TABLE3
TABLE1   DS    (20*11)F            First table
TABLE2   DS    (20*11)F            Second table
TABLE3   DS    (40*11)F            Merged table
*
         LTORG ,
         EJECT
*
*********0*****6*******************6**********************************1
*
*  Name:  BUILD
*
*  Function:  This routine reads the input file until EOF or a record 
*    with Publisher ID = 0000000 is encountered. Each record forms an
*    entry in the table passed to the routine.
*
*  Entry Cond: 0(1) - Address of the next available entry address
*              4(1) - Address of an input buffer
*
*  Register Usage:
*      0 - Scratch
*      1 - Input parameters
*      8 - Address of current table entry
*      9 - Address of ptr to next available
*     10 - Input buffer
*     11 - Program base
*     12 - Program base
*
*  Logic:
*  [1] Perform entry processing, read first record
*  [2] Do While (NOT End-of-File and NOT ID=0000000)
*  [3]    Save Pub ID, Pub Name, Pub Titles, and Pub Preps in table
*  [4]    Update pointer to next available entry
*  [5]    Read the next record
*  [6] End Do
*  [7] Perform exit processing
*  
*********0*****6*******************6**********************************1
*
*  [1] Perform entry processing, read first record
*
BUILD    DS    0H
         STM   0,15,BLDSAVE        Save all registers
*
         LM    9,10,0(1)           R9 = NAV Ptr, R10 = Input buffer
         L     8,0(,9)             R8 = Next available table entry
*
         XREAD 0(,10),80           Perform initial read
*
*  [2] Do While (NOT End-of-File and NOT ID=0000000)
*
BLDLOOP  BM    BLDEOF              Check for EOF
*
         XDECI 0,0(,10)            Get req no
         C     0,=F'0'             Is this the delimiter?
         BE    BLDEOF              Branch if so, done
*
*  [3]    Save Pub ID, Pub Name, Pub Titles, and Pub Preps in table
*
         ST    0,0(,8)             Else put Pub ID in table entry
         MVC   4(30,8),28(10)      Put Pub Name in table entry
         XDECI 0,0(,1)             Get number of titles in print
         ST    0,36(,8)             and place in table entry
         XDECI 0,0(,1)             Get number of titles in prep
         ST    0,40(,8)             and place in table entry
*
*  [4]    Update pointer to next available entry
*
         LA    8,44(,8)            Move to next table entry
*
*  [5]    Read the next record
*
         XREAD 0(,10),80           Get next input record
*
*  [6] End Do
*
         B     BLDLOOP             Continue
*
BLDEOF   DS    0H
*
*  [7] Perform exit processing
*
         ST    8,0(,9)            Return updated NAV value
         LM    0,15,BLDSAVE        Restore all registers
         BR    14                  Return to caller
*
BLDSAVE  DS    16F
         LTORG ,
         EJECT
*********0*****6*******************6**********************************1
*
* Name:        SORT
*
* Function:    Sort the table using the Insertion Sort algorithm
*
* Entry Cond: 0(1) - Address of the table
*             4(1) - Address of the next available entry address 
*
* Register Usage:
*      1 - Input parameters
*      7 - J
*      8 - I
*      9 - Table address
*     10 - Address of ptr to next available
*     11 - Program Base
*     12 - Program Base
*
* Logic (from Notes and Examples):
*  [0] Perform entry processing and initialization
*  [1] For ( J = 2 to N by 1 )
*  [2]     I = J - 1            Records up to I are already sorted
*  [3]     Key = Key(J)         Key portion of record to insert
*  [4]     Rec = Rec(J)         Record to insert at correct place
*  [5]     While ( Key < Key(I) and I > 0 )
*  [6]       Rec(I+1) = Rec(I)  Move Ith record up
*  [7]       I = I - 1
*  [8]     EndWhile
*  [9]     Rec (I+1) = Rec      Insert the new record and key
* [10] EndFor
* [11] Perform exit processing
*
*********0*****6*******************6**********************************1
*
*  [0] Perform entry processing and initialization
*
SORT     DS    0H
         STM   0,15,SORTSAVE       Save all registers
*
         LM    9,10,0(1)           R9 -> TABLE, R10 -> NAV
         L     0,0(,10)            Get address of next available entry
         ST    0,N                 Save address of last entry
*
*  [1] For ( J = 2 to N by 1 )
*
         LR    7,9                 Get first entry in table
*
INSFOR   LA    7,44(,7)            R7 = J ( = 2 )
         C     7,N                 Are we past the last entry?
         BNL   INSFORND            Done if so
*
*  [2]     I = J - 1            Records up to I are already sorted
*
         LR    8,7                 R8 = I
         S     8,=F'44'            Set to J - 1
*
*  [3]     Key = Key(J)         Key portion of record to insert
*  [4]     Rec = Rec(J)         Record to insert at correct place
*
         MVC   REC,0(7)            Move both key and data
*
*  [5]     While ( Key < Key(I) and I > 0 )
*
INSWHILE CLC   KEY,4(8)            Is Key < Key(J) ?
         BNL   INSWHEND            Branch if not
         CR    8,9                 Is I > 0 ? (1 is first entry)
         BL    INSWHEND            Branch if not
*
*  [6]       Rec(I+1) = Rec(I)  Move Ith record up
*
         MVC   44(44,8),0(8)       Copy REC(I) to REC(I+1)
*
*  [7]       I = I - 1
*
         S     8,=F'44'            Set I to I - 1
*
*  [8]     EndWhile
*
         B     INSWHILE            Continue
*
INSWHEND DS    0H                  End of WHILE
*
*  [9]     Rec (I+1) = Rec      Insert the new record and key
*
         MVC   44(44,8),REC        Copy saved REC to REC(I+1)
*
* [10] EndFor
*
         B     INSFOR              Continue
*
INSFORND DS    0H                  Done with insertion sort
*
* [11] Perform exit processing
*
         LM    0,15,SORTSAVE       Restore all registers
         BR    14                  Return to caller
*
*    Data areas for insertion sort only
*
SORTSAVE DS    16F                 Reg save area
N        DS    F                   
*
REC      DS    CL44
         ORG   REC+4
KEY      DS    CL30
         ORG   ,
         LTORG ,
         EJECT
*
*********0*****6*******************6**********************************1
*
*  Name:  PRINT
*
*  Function:  This routine prints each entry of the table passed to it.
*      (The headers are printed before PRINT is called.)
*
*  Entry Cond: 0(1) - Address of the table
*              4(1) - Address of the next available entry address
*
*  Register Usage:
*      0 - Scratch
*      1 - Input parameters
*      9 - Table Address
*     10 - Address of ptr to next available
*     11 - Program base
*     12 - Program base
*
*  Logic:
*  [1] Perform entry processing
*  [2] Do While (NOT End-of-Table)
*  [3]    Place Publisher Name in output line
*  [4]    Place Publisher Prefix in output line
*  [5]    Place Titles in Print in output line
*  [6]    Place Titles in Preparation in output line
*  [7]    Print report line
*  [8]    Get to the next table entry
*  [9] End Do
* [10] Perform exit processing
*  
*********0*****6*******************6**********************************1
*
*  [1] Perform entry processing
*
PRINT    DS    0H
         STM   0,15,PRTSAVE        Save all registers
*
         LM    9,10,0(1)           R9->Table  R10->NAV
*
*  [2] Do While (NOT End-of-Table)
*
PRTLOOP  C     9,0(,10)            Check address of next available
         BNL   PRTEND              Return if all done
*
*  [3]    Place Publisher Name in output line
*
         MVC   PRTNAME,4(9)        Publisher Name to line
*
*  [4]    Place Publisher Prefix in output line
*
         L     0,0(,9)             Get Publisher Prefix
         XDECO 0,PRTPREF            to report line
*
*  [5]    Place Titles in Print in output line
*
         L     0,36(,9)            Get Titles in Print
         XDECO 0,PRTINPRT           to report line
*
*  [6]    Place Titles in Preparation in output line
*
         L     0,40(,9)            Get Titles in Preparation
         XDECO 0,PRTPREP            to report line
*
*  [7]    Print report line
*
         XPRNT PRTLINE,133         Print report line
*
*  [8]    Get to the next table entry
*
         LA    9,44(,9)            Get to next table entry
*
*  [9] End Do
*
         B     PRTLOOP             Continue with next entry
*
PRTEND   DS    0H
*
* [10] Perform standard exit linkage
*
         LM    0,15,PRTSAVE        Restore all registers
         BR    14                  Return to caller
*
PRTSAVE  DS    16F                 Save area
         LTORG ,
*
PRTLINE  DC    C'0'                Item report line
         DC    9C' '
PRTNAME  DS    CL30                Publisher Name
         DC    14C' '
PRTPREF  DS    CL12                Publisher Prefix
         DC    13C' '
PRTINPRT DS    CL12                Number of titles in print
         DC    19C' '
PRTPREP  DS    CL12                Number of titles in preparation
         DC    11C' '
*
         EJECT
*
*********0*****6*******************6**********************************1
*
*  Name:   MERGE
*
*  Function:  This routine merges two sorted tables into one.
*
*  Entry Cond: 0(1) - Address of the first table
*              4(1) - Address of its next available entry address
*              8(1) - Address of the second table
*             12(1) - Address of its next available entry address
*             16(1) - Address of the third (merged) table
*             20(1) - Address of its next available entry address
*
*  Register Usage:
*      1 - Input parameters
*      5 - Address of current entry in TABLE1
*      6 - Address of NAV1
*      7 - Address of current entry in TABLE2
*      8 - Address of NAV2
*      9 - Address of current entry in TABLE3
*     10 - Address of NAV3
*     11 - Program base
*     12 - Program base
*
*  Logic (from Notes and Examples):
*  [1] Perform entry processing
*  [2] Do While (NOT End-of-TABLE1 AND NOT End-of-TABLE2)
*  [3]    If (TABLE1 KEY < TABLE2 KEY)
*  [4]       Copy TABLE1 entry to TABLE3
*  [5]       Increment TABLE1 pointer
*  [6]    Else
*  [7]       If (TABLE1 KEY > TABLE2 KEY)
*  [8]          Copy TABLE2 entry to TABLE3
*  [9]          Increment TABLE2 pointer
* [10]       Else
* [11]          Copy TABLE1 (or TABLE2) entry to TABLE3
* [12]          Increment TABLE1 pointer
* [13]          Increment TABLE2 pointer
* [14]       End If
* [15]    End If
* [16]    Increment TABLE3 pointer
* [17] End Do
* [18] Do While (NOT End-of-TABLE1)
* [19]    Copy TABLE1 entry to TABLE3
* [20]    Increment TABLE1 pointer
* [21]    Increment TABLE3 pointer
* [22] End Do
* [23] Do While (NOT End-of-TABLE2)
* [24]    Copy TABLE2 entry to TABLE3
* [25]    Increment TABLE2 pointer
* [26]    Increment TABLE3 pointer
* [27] End Do
* [28] Return address of next entry in TABLE3 as NAV3
* [29] Perform exit processing
*
*********0*****6*******************6**********************************1
*
*  [1] Perform entry processing
*
*
MERGE    DS    0H
         STM   0,15,MERGSAVE       Save all registers
*
         LM    5,10,0(1)           R5 -> TABLE1, R6 -> NAV1
*                                  R7 -> TABLE2, R8 -> NAV2
*                                  R9 -> TABLE3, R10-> NAV3
*
*  [2] Do While (NOT End-of-TABLE1 AND NOT End-of-TABLE2)
*
MGDO1    C     5,0(,6)             Check for end of TABLE1
         BNL   MGDO1END            Yes, end of phase 1
         C     7,0(,8)             Else check for end of TABLE2
         BNL   MGDO1END            Yes, end of phase 1
*
*  [3]    If (TABLE1 KEY < TABLE2 KEY)
*
         CLC   4(30,5),4(7)        Compare keys
         BNL   MGIF1ELS            Branch if Key 1 not less
*
*  [4]       Copy TABLE1 entry to TABLE3
*
         MVC   0(44,9),0(5)        Copy entry
*
*  [5]       Increment TABLE1 pointer
*
         LA    5,44(,5)            Increment address
*
*  [6]    Else
*
         B     MGIF1END            Continue
*
MGIF1ELS DS    0H
*
*  [7]       If (TABLE1 KEY > TABLE2 KEY)
*
         CLC   4(30,5),4(7)        Compare keys
         BNH   MGIF2ELS            Branch if Key 2 not less
*
*  [8]          Copy TABLE2 entry to TABLE3
*
         MVC   0(44,9),0(7)        Copy entry
*
*  [9]          Increment TABLE2 pointer
*
         LA    7,44(,7)            Increment address
*
* [10]       Else
*
         B     MGIF2END            Continue
*
MGIF2ELS DS    0H
*
* [11]          Copy TABLE1 (or TABLE2) entry to TABLE3
*
         MVC   0(44,9),0(5)        Copy entry
*
* [12]          Increment TABLE1 pointer
*
         LA    5,44(,5)            Increment address
*
* [13]          Increment TABLE2 pointer
*
         LA    7,44(,7)            Increment address
*
* [14]       End If
*
MGIF2END DS    0H
*
* [15]    End If
*
MGIF1END DS    0H
*
* [16]    Increment TABLE3 pointer
*
         LA    9,44(,9)            Increment address
*
* [17] End Do
*
         B     MGDO1               Continue
*
MGDO1END DS    0H
*
* [18] Do While (NOT End-of-TABLE1)
*
MGDO2    C     5,0(,6)             Check for end of TABLE1
         BNL   MGDO2END            Yes, end of phase 2
*
* [19]    Copy TABLE1 entry to TABLE3
*
         MVC   0(44,9),0(5)        Copy entry
*
* [20]    Increment TABLE1 pointer
*
         LA    5,44(,5)            Increment address
*
* [21]    Increment TABLE3 pointer
*
         LA    9,44(,9)           Increment address
*
* [22] End Do
*
         B     MGDO2               Continue
*
MGDO2END DS    0H
*
* [23] Do While (NOT End-of-TABLE2)
*
MGDO3    C     7,0(,8)             Check for end of TABLE2
         BNL   MGDO3END            Yes, end of phase 3
*
* [24]    Copy TABLE2 entry to TABLE3
*
         MVC   0(44,9),0(7)       Copy entry
*
* [25]    Increment TABLE2 pointer
*
         LA    7,44(,7)            Increment address
*
* [26]    Increment TABLE3 pointer
*
         LA    9,44(,9)            Increment address
*
* [27] End Do
*
         B     MGDO3               Continue
*
MGDO3END DS    0H
*
* [28] Return address of next entry in TABLE3 as NAV3
*
         ST    9,0(,10)            Return address of next entry
*
* [29] Perform exit processing
*
         LM    0,15,MERGSAVE       Restore all registers
         BR    14                  Return to caller
*
*********0*****6*******************6**********************************1
*
MERGSAVE DS    16F                 Save area
*
         LTORG
         EJECT
*
*********0*****6*******************6**********************************1
*
* Name:        UPDATE
*
* Function:    Applies updates to the table of publishers via
*              transactions read from the input file
*
* Entry Cond:  0(R1) - Address of the table
*              4(R1) - Address of next available entry address 
*              8(R1) - Address of the input buffer
*
* Input record format:
*              Character - Publisher Name
*              Numeric -   Change to count of Titles Published
*              Numeric -   Change to count of Titles in Preparation
*
* Register Usage:
*      0 - Temp
*      1 - Input parameters
*      5 - Current table entry during search
*      6 - Count of Titles Published from input record
*      7 - Count of Titles in Preparation from input record
*      8 - Input - Address of table
*      9 - Input - Address of ptr to next available entry in table
*     10 - Input - Address of buffer for reading records
*     11 - Program base
*     12 - Program base
*
* Logic:
*     [1] Initialization
*     [2] Read the first transaction into the passed buffer
*     [3] Do While ( NOT End-of-file )
*     [4]    Extract Published and In Process count changes
*     [5]    Do While ( NOT Publisher Name found AND NOT end-of-table )
*     [6]       Increment table pointer
*     [7]    EndDo
*     [8]    If Publisher Name found
*     [9]       Add change to 'Published' count and total
*    [10]       Add change to 'In Process' count and total
*    [11]       Format and print transaction message
*    [12]    Else
*    [13]       Print 'Not Found' error message
*    [14]    EndIf
*    [15]    Read the next transaction into the passed buffer
*    [16] EndDo
*    [17] Print totals detail lines
*    [18] Return to caller
*
*********0*****6*******************6**********************************1
*
*     [1] Initialization
*
UPDATE   STM   0,15,UPDTSAVE       Save all registers
         LM    8,10,0(1)           Table, next-available, buffer
*
*     [2] Read the first transaction into the passed buffer
*
         XREAD 0(,10),80           Read into passed buffer
*
*     [3] Do While ( NOT End-of-file )
*
UDO3     BC    B'0100',ENDUDO3  BM Check for end of file
*
*     [4]    Extract Published and In Process count changes
*
         XDECI 6,32(,10)           Get 'Published' change (+ or -)
         XDECI 7,0(,1)             Get 'In Process' change (+ or -)
*
*     [5]    Do While ( NOT Publisher Name found AND NOT end-of-table )
*
         LR    5,8                 Start of table
         SR    0,0                 'Publisher Name not found'
*
UDO5     C     5,0(,9)             If we are past the last entry
         BC    B'1011',ENDUDO5 BNL  then quit search
*
         LA    0,0(,10)            If found, remember this
         CLC   4(30,5),0(10)       Is this the publisher we want?
         BC    B'1000',ENDUDO5 BE  Quit search if it is
*
*     [6]       Increment table pointer
*
         LA    5,44(,5)            Move along to next table entry
         SR    0,0                 'Publisher Name not found'
*
*     [7]    EndDo
*
         BC    B'1111',UDO5  B     Continue search
*
ENDUDO5  DS    0H
*
*     [8]    If Publisher Name found
*
UIF8     LTR   0,0                 Was the publisher found?
         BC    B'1000',ELSUIF8 BZ  No, wasn't found in table
*
*     [9]       Add change to 'Published' count and total
*
         L     0,36(,5)            Get current 'Published' value
         AR    0,6                 Add change
         ST    0,36(,5)             and resave
*
         L     0,UPDPUBLT          Get total Published changes so far
         AR    0,6                 Add this change
         ST    0,UPDPUBLT           and resave
*
*    [10]       Add change to 'In Process' count and total
*
         L     0,40(,5)            Get current 'In Process' value
         AR    0,7                 Add change
         ST    0,40(,5)             and resave
*
         L     0,UPDPREPT          Get total In Prep changes so far
         AR    0,7                 Add this change
         ST    0,UPDPREPT           and resave
*
*    [11]       Format and print transaction message
*
         MVC   UPDPUBN,4(5)        Get Publisher Name
         XDECO 6,UPDPUBL           Get Published Titles
         XDECO 7,UPDPREP           Get In Preparation
*
         XPRNT UPDDET1,133         Print transaction information
*
*    [18]    Else
*
         BC    B'1111',ENDUIF8  B  All done, continue
ELSUIF8  DS    0H
*
*    [19]       Print 'Not Found' error message
*
         MVC   UPD2NAME,0(10)      Set sought brand in output buffer
         XPRNT UPDDET2,133         Print error message
*
*    [20]    EndIf
*
ENDUIF8  DS    0H
*
*    [21]    Read the next transaction into the passed buffer
*
         XREAD 0(,10),80           Get next record
*
*    [22] EndDo
*
         BC    B'1111',UDO3   B    Continue
*
ENDUDO3  DS    0H
*
*    [23] Print Total changes detail lines
*
         L     0,UPDPUBLT          Get total changes to Published
         XDECO 0,UPDSUMS           Place in report line
         XPRNT UPDSUM1,UPDSUM1L    Print report
*
         L     0,UPDPREPT          Get total received
         XDECO 0,UPDSUMR           Place in report line
         XPRNT UPDSUM2,UPDSUM2L    Print report
*
*    [24] Return to caller
*
         LM    0,15,UPDTSAVE       Reload the initial registers
         BR    14                  Return to calling routine
*
*********0*****6*******************6**********************************1
*
*  Storage areas for UPDATE
*
UPDTSAVE DS    16F                 Save all registers
*
UPDPUBLT DC    F'0'                Total changes to Published
UPDPREPT DC    F'0'                Total changes to In Preparation
*
UPDDET1  DC    C' '                Transaction detail line
         DC    9C' '
UPDPUBN  DS    CL30                Publisher Name
         DC    22C' '
UPDPUBL  DS    CL12                Change to Published Titles
         DC    28C' '
UPDPREP  DS    CL12                Change to In Preparation
         DC    19C' '
*
UPDDET2  DC    C' '                Record not found detail line
         DC    CL9' '
UPD2NAME DS    CL30                Publisher name
         DC    CL6' '
         DC    CL38'*** Error *** Publisher Name Not Found'
         DC    CL45' '
*
UPDSUM1  DC    C'-'               Update summary line 1
         DC    CL24' '
         DC    CL34'Total changes to Titles Published:'
         DC    CL3' '
UPDSUMS  DS    CL12               Published titles
UPDSUM1L EQU   *-UPDSUM1          Length of detail line
*
UPDSUM2  DC    C'0'               Update summary line 2
         DC    CL24' '
         DC    CL39'Total changes to Titles in Preparation:'
         DC    CL38' '
UPDSUMR  DS    CL12
UPDSUM2L EQU   *-UPDSUM2          Length of detail line
*
         LTORG
*
*    596    12345        0   O'Reilly
*    201    23456      111   Addison-Wesley
*    321    34567    65433   Addison-Wesley
*     13      123        0   Prentice-Hall
*     12   234567        0   Academic Press
*    387     9999        1   Springer-Verlag
*   8359     9999        1   Reston
*   7356     9876       99   Microsoft Press
*   7897     6543        0   Que
*    672    45678    11111   Sams
*     19   345678        1   Oxford
*    393    56789        0   Norton
*    521    98765      999   Cambridge
*    670    76543        0   Viking
*  87580      123       99   NIU Press
*   7167     5555     5555   Freeman
*    394        1        1   Knopf
*0000000
*   8021     5555     5555   Atlantic Monthly Press
*9666490        2        9   London Town Press
*   8126     6543        0   Cricket Books
*    684    12345        0   Scribner's
*    679    76543        0   Random House
*    399    56789        0   Putnam
* 935218       99        0   Insight Press
*   7924     9999        1   Thunder Bay Press
*9761989        9        0   Cosmo Dogood's Urban Almanac
*    385    34567    65433   Doubleday
* 913966       88        9   Liberty Press
*    440    45678    11111   Warner Books
*   8050     9876       99   Henry Holt
*  87000      123       99   Arlington House
*    374    98765      999   Farrar, Strauss and Giroux
*   7432     6543      123   Simon & Schuster
*    691      123        0   Princeton University Press
*    465   234567        0   Basic Books
*    684    12345       99   Simon & Schuster
*   8027     6543      999   Walker & Company
*0000000
*Thunder Bay Press               0000  0000
*NIU Press                         +2    -2
*Princeton University Press        25     0
*London Town Press                  9    -9
*Liberty PRess                     11     3
*Springer-Verlag                  -99   +19
*Putman                             0     1
*Academic Press                 -1234 +2345    
         END   MAIN
