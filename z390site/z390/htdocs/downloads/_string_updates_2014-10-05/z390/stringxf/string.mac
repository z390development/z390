*/GILBERTF JOB (ACCT#),STRINGXF,                                        00010001
*/ NOTIFY=&SYSUID,                                                      00020001
*/ CLASS=A,MSGCLASS=X,COND=(0,NE)                                       00030001
*/XFASM EXEC PGM=IFOX00,PARM=(OBJECT,NODECK,ESD,NORLD,NOXREF)           00040001
*/STEPLIB DD DSN=GSFSOFT.XFASM.LOAD,DISP=SHR                            00060001
*********************************************************************** 00080000
*                                                                     * 00090000
* MACRO NAME = STRING                                                 * 00100000
*                                                                     * 00110000
* DESCRIPTIVE NAME = STRING Macro Instruction for Assembler XF        * 00120001
*                                                                     * 00130000
* FUNCTION = Provide capabilities similar to PUT EDIT (of PL/I)       * 00140000
*            or STRING (of COBOL) to assembler programs.              * 00150000
*                                                                     * 00160000
* STATUS = R101                                                       * 00170001
*                                                                     * 00180000
* AUTHOR = Gilbert Saint-Flour <carlos@gsf-soft.com>                  * 00190000
*                                                                     * 00200000
* ENVIRONMENT = SEE BELOW                                             * 00210000
*                                                                     * 00220000
*    AMODE  = ANY                                                     * 00230001
*    RMODE  = ANY                                                     * 00240001
*     SCP   = S/360 OS, OS/VS, MVS/370                                * 00250001
* Processor = Assembler XF, Assembler H, High-Level Assembler         * 00260001
*     KEY   = ANY                                                     * 00270000
*     MODE  = ANY                                                     * 00280000
*     APF   = ANY                                                     * 00290001
*                                                                     * 00300000
* OPERATION = SEE DOCUMENTATION AT THE END OF THIS FILE               * 00310000
*                                                                     * 00320000
* INVOCATION = SEE DOCUMENTATION AT THE END OF THIS FILE              * 00330000
*                                                                     * 00340000
* NOTES = SEE DOCUMENTATION AT THE END OF THIS FILE                   * 00350000
*                                                                     * 00360000
* CHANGE ACTIVITY                                                     * 00370000
*                                                                     * 00380000
* $101 ASM XF version of STRING R514                                  * 00390001
*                   \  - Backport of (%TIME,LENGTH) syntax   / @GSFR518 00391002
* Juergen Winkelmann \   support from STRING version 518     \ @JW14278 00392002
* 2014/10/05         / - Date format DD.MM.YYYY support        @JW14278 00393002
*                   /  - Circumvention of not PoP compliant    @JW-Z390 00394002
*                  /     MVZ instruction emulation in z390     @JW-Z390 00395002
*********************************************************************** 00400000
         MACRO                                                          00410000
&NAME    STRING &INTO=,&PRINT=NOGEN                                     00420000
         GBLA  &$$LIT                                                   00430001
         GBLB  &$$FEAT(16)             FEATURES                         00440000
.*                                       1 LITERALS                     00450000
.*                                       2 REGISTER (BIN)               00460000
.*                                       3 REGISTER (HEX)               00470000
.*                                       4 PACKED                       00480000
.*                                       5 JDATE                        00490000
.*                                       6 BINARY                       00500000
.*                                       7 HEX                          00510000
.*                                       8 NUMERIC                      00520000
.*                                       9 LEFT JUST (NUMERIC)          00530000
.*                                       10 LEADING ZEROES              00540000
.*                                       11 TRUNCATE (CHAR STRING)      00550000
.*                                       12 %TIME                       00560000
         GBLC  &MACVERS                                                 00570001
         GBLC  &$$LITS(9999)           LITERALS                         00580000
         LCLA  &I,&J,&L,&N,&FLAG,&LEN2,&BLANKS                          00590001
         LCLB  &LAST,&BIN,&HEX,&REG,&PACKED,&LEFT,&ZERO,&TRUNC,&NUMERIC 00600001
         LCLC  &LABEL,&LQ,&STR,&TO1,&TO2,&P1S,&P2C,&P2L,&P3C,&P3L       00610001
         LCLC  &LIT,&ALLFEAT                                            00620001
&MACVERS SETC '101'                    current version                  00630001
         AIF   ('&PRINT' EQ 'NOGEN').NOGEN                              00640000
         PUSH  PRINT                                                    00650000
         PRINT GEN                                                      00660000
.NOGEN   ANOP                                                           00670001
         AIF   (T'&INTO EQ 'O' AND N'&SYSLIST EQ 1                     X00680000
               AND '&SYSLIST(1)' EQ 'GENERATE').GENL                    00690001
&LABEL   SETC  'IHB&SYSNDX'            STEM FOR LOCAL LABELS            00700000
&LQ      SETC  'L'''                   LENGTH ATTRIBUTE                 00710000
&STR     SETC  ' R&MACVERS XF '                                         00720001
&NAME    L     R15,=A(@STR002)&STR     Routine Address                  00730001
         BALR  R14,R15                 CALL @STRING Routine             00740001
         AIF   (N'&SYSLIST EQ 0).ERR1  NO POSITIONAL OPERANDS, ERROR    00750000
         AIF   (T'&INTO EQ 'O').ERR2   NO RECEIVING FIELD, ERROR        00760000
         AIF   (N'&INTO GT 2).ERR2     INTO=(A,32,BLURB)                00770000
         DC    AL2((&LABEL.P-@STRING)/2) OFFSET TO FIELD DESCRIPTORS    00780001
@STRING  CSECT                         NON-ADDRESSABLE CONSTANTS        00790001
&TO1     SETC  '&INTO(1)'                                               00800000
&TO2     SETC  '&LQ&INTO'                                               00810000
         AIF   (N'&INTO EQ 1).PUNTO8            JUMP IF INTO=XXX        00820000
         AIF   ('&INTO(1)'(1,1) NE '(').PUNTO3  JUMP IF INTO=(XXX,44)   00830000
&TO1     SETC  '0&INTO(1)'                              INTO=((R3),44)  00840000
.PUNTO3  ANOP                                                           00850000
&TO2     SETC  '&INTO(2)'                               INTO=(XXX,LL)   00860000
         AIF   ('&INTO(2)'(1,1) NE '(').PUNTO8  JUMP IF INTO=(XXX,44)   00870000
&TO2     SETC  '0&INTO(2)'                              INTO=(XXX,(R1)) 00880000
.PUNTO8  ANOP                                                           00890000
&LABEL.P DC    S(&TO1,&TO2)                                             00900000
.*--------------------------------------------------------------------* 00910000
.*-------      FIELDS       ------------------------------------------* 00920000
.*--------------------------------------------------------------------* 00930000
&I       SETA  1                                                        00940000
.*LOOP                                                                  00950000
.LOOP1   ANOP                                                           00960000
         ACTR  200                            SYSDEBUG/DIAG055          00970000
         AIF   (N'&SYSLIST(&I) GT 3).FLD990   TOO MANY SUB-OPERANDS     00980000
&LAST    SETB  (&I EQ N'&SYSLIST)                LOOP                   00990000
         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').LIT00                      01000000
         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').LIT01         01010000
.*--------------------------------------------------------------------* 01020000
.*       PROCESS FIRST SUBPARAMETER (ADDRESS)                         * 01030000
.*--------------------------------------------------------------------* 01040000
&P1S     SETC  '&SYSLIST(&I,1)'                                         01050000
&P2L     SETC  '0'                     INPUT LENGTH                     01060000
&P3L     SETC  '0'                     OUTPUT LENGTH                    01070000
         AIF   ('&SYSLIST(&I)'(1,1) GE '0').FLD180 SPACES               01080000
         AIF   ('&SYSLIST(&I,1)' EQ '%TIME').FLD190 %TIME      @GSFR518 01090002
         AIF   ('&SYSLIST(&I,1)'(1,1) NE '(').FLD115 (R2)               01100000
         AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD250                         01110000
&P1S     SETC  '0&SYSLIST(&I,1)'       CHANGE (R1) TO 0(R1)             01120000
.FLD115  ANOP                                                           01130000
.*                                                                      01140000
         AIF   (T'&SYSLIST(&I,2) NE 'O').FLD200                         01150000
.*                                                                      01160000
.*       EXTRACT RBCDE FROM PRB.RBCDE (HLASM)                           01170000
.*                                                                      01180000
&L       SETA  1                                                        01190000
.*--LOOP                                                                01200000
.FLD131  AIF   ('&P1S'(&L,1) EQ '.').FLD133                             01210000
&L       SETA  &L+1                                                     01220000
         AIF   (&L LT K'&P1S).FLD131                                    01230000
.*--ENDLOOP                                                             01240000
&P2L     SETC  '&P1S'                    ABCDEF FROM ABCDEF             01250000
         AGO   .FLD134                                                  01260000
.FLD133  ANOP                                                           01270000
&P2L     SETC  '&P1S'(&L+1,K'&P1S-&L)    RBCDE FROM PRB.RBCDE           01280000
.FLD134  ANOP                                                           01290000
.*                                                                      01300000
.*XF     AIF   (NOT D'&P2L).FLD140                                      01310001
&P2C     SETC  T'&P2L                                                   01320000
.*MNOTE *,'&P1 &P2C'                                                    01330000
         AIF   ('&P2C' EQ 'F' OR '&P2C' EQ 'H' OR '&P2C' EQ 'P').FLD220 01340000
         AIF   ('&P2C' EQ 'G').FLD210  FL2                              01350000
.FLD140  ANOP                                                           01360000
.*                                                                      01370000
.*       EXTRACT PSATOLD FROM PSATOLD-PSA                               01380000
.*                                                                      01390000
&L       SETA  1                                                        01400000
.*--LOOP                                                                01410000
.FLD141  AIF   ('&P2L'(&L,1) EQ '-').FLD143                             01420000
         AIF   ('&P2L'(&L,1) EQ '+').FLD143                             01430000
&L       SETA  &L+1                                                     01440000
         AIF   (&L LT K'&P2L).FLD141                                    01450000
.*--ENDLOOP                                                             01460000
&P2L     SETC  '&LQ&P2L'               L'ABCDEF                         01470000
         AGO   .FLD300                                                  01480000
.FLD143  ANOP                                                           01490000
&P2L     SETC  '&LQ'.'&P2L'(1,&L-1)    L'PSATOLD FROM PSATOLD-PSA       01500000
         AGO   .FLD300                                                  01510000
.*                                                                      01520000
.FLD180  AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) NE 'X').FLD800         01530000
&P2L     SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1) 12                    01540000
         AIF   (&LAST).FLD186                                           01550000
         DC    X'60',AL1(&P2L)         BLANKS                           01560000
         AGO   .LIT90                                                   01570000
.FLD186  DC    X'E0',AL1(&P2L),0S(0)   BLANKS                           01580000
         AGO   .LIT90                                                   01590000
.*                                                                      01600000
.FLD190  AIF   (N'&SYSLIST(&I) GT 2).FLD995                    @GSFR518 01610002
&P1S     SETC  '1(14)'                 %TIME                            01620000
&$$FEAT(12) SETB 1                     %TIME                            01630000
&P2L     SETC  '12'                    hh:mm:ss.hh             @GSFR518 01631002
         AIF   (N'&SYSLIST(&I) EQ 1).FLD1905                   @GSFR518 01632002
         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD1904               @GSFR518 01633002
&P2L     SETC  '&SYSLIST(&I,2)'        5,8,11,12               @GSFR518 01634002
&L       SETA  &SYSLIST(&I,2)                                  @GSFR518 01635002
         AIF   (&L EQ 5 OR &L EQ 8 OR &L EQ 11 OR &L EQ 12).FLD1905 518 01636002
.FLD1904 MNOTE 8,'Second sub-parameter is invalid: &SYSLIST(&I)'    518 01637002
.FLD1905 ANOP                                                  @GSFR518 01638002
.*MNOTE 1,'FLD1905 &SYSLIST(&I) &P1S &P2L '                    @GSFR518 01639002
         AGO   .FLD800                                                  01640000
.*--------------------------------------------------------------------* 01650000
.*       PROCESS SECOND SUBPARAMETER (LENGTH/TYPE)                    * 01660000
.*--------------------------------------------------------------------* 01670000
.FLD200  AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD300 NO LENGTH SPECIFIED     01680000
&P2C     SETC  '&SYSLIST(&I,2)'                                         01690000
         AGO   .FLD220                                                  01700000
.*T'&P1=G                                                               01710000
.FLD210  ANOP                                                           01720000
&L       SETA  L'&SYSLIST(&I)          T'&P1 = 'G'                      01730000
&P2C     SETC  'FL&L'                  T'&P1 = 'G'                      01740000
.*                                                                      01750000
.FLD220  ANOP                                                           01760000
&P2L     SETC  '0&P2C'                 (R2) LENGTH                      01770000
         AIF   ('&P2C'(1,1) EQ '(').FLD300                              01780000
&P2L     SETC  '&P2C'                  3(R2) LENGTH                     01790000
         AIF   ('&P2C'(K'&P2C,1) EQ ')').FLD300                         01800000
&P2L     SETC  '0'                                                      01810000
&PACKED  SETB  ('&P2C' EQ 'P')                                          01820000
         AIF   (&PACKED).FLD290                                         01830000
&P2L     SETC  '1'                                                      01840000
         AIF   ('&P2C' EQ 'FL1').FLD240                                 01850000
&P2L     SETC  '3'                                                      01860000
         AIF   ('&P2C' EQ 'FL2' OR '&P2C' EQ 'H').FLD240                01870000
&P2L     SETC  '7'                                                      01880000
         AIF   ('&P2C' EQ 'FL3').FLD240                                 01890000
&P2L     SETC  '15'                                                     01900000
         AIF   ('&P2C' EQ 'F').FLD240                                   01910000
&P2L     SETC  '&P2C'                  IMMEDIATE LENGTH, FIELD          01920000
         AGO   .FLD300                                                  01930000
.*                                                                      01940000
.FLD240  ANOP                          BINARY VARIABLE                  01950000
&BIN     SETB  1                                                        01960000
         AGO   .FLD300                                                  01970000
.*                                                                      01980000
.FLD250  ANOP                          REGISTER CONTENT                 01990000
&REG     SETB  1                                                        02000000
         AGO   .FLD300                                                  02010000
.*                                                                      02020000
.FLD290  ANOP                          PACKED                           02030000
&P2L     SETC  '1'                                                      02040000
.*--------------------------------------------------------------------* 02050000
.*       PROCESS THIRD SUBPARAMETER (OUTPUT FORMAT)                   * 02060000
.*--------------------------------------------------------------------* 02070000
.FLD300  AIF   (T'&SYSLIST(&I,3) EQ 'O').FLD800                         02080000
&HEX     SETB  ('&SYSLIST(&I,3)' EQ 'X') HEXADECIMAL                    02090000
&TRUNC   SETB  ('&SYSLIST(&I,3)' EQ 'T') TRUNCATE                       02100000
         AIF   (&HEX OR &TRUNC).FLD800                                  02110000
.*                                                                      02120000
&P3C     SETC  '&SYSLIST(&I,3)'                                         02130000
&P3L     SETC  '248'                                                    02140000
         AIF   ('&P3C' EQ 'YYYY-MM-DD' AND &PACKED).FLD308              02150000
&P3L     SETC  '249'                                                    02160000
         AIF   ('&P3C' EQ 'YYYYMMDD' AND &PACKED).FLD308                02170000
&P3L     SETC  '250'                                                    02180000
         AIF   ('&P3C' EQ 'YY/MM/DD' AND &PACKED).FLD308                02190000
&P3L     SETC  '251'                                                    02200000
         AIF   ('&P3C' EQ 'DD/MM/YY' AND &PACKED).FLD308                02210000
&P3L     SETC  '252'                                                    02220000
         AIF   ('&P3C' EQ 'MM/DD/YY' AND &PACKED).FLD308                02230000
&P3L     SETC  '253'                                                    02240000
         AIF   ('&P3C' EQ 'YYMMDD'   AND &PACKED).FLD308                02250000
&P3L     SETC  '254'                                           @JW14278 02253002
         AIF   ('&P3C' EQ 'DD.MM.YYYY' AND &PACKED).FLD308     @JW14278 02256002
&P3L     SETC  '0'                                                      02260000
         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD310                         02270000
         MNOTE 8,'EDIT PATTERN NOT ALLOWED WITH CHARACTER STRING'       02280000
         AGO   .FLD310                                                  02290000
.FLD308  ANOP                                                           02300000
&$$FEAT(5) SETB 1                      JDATE                            02310000
         AGO   .FLD800                                                  02320000
.*--LOOP                                                                02330000
.FLD310  AIF   ('&P3C'(1,1) EQ 'R').FLD318       DEFAULT                02340000
         AIF   ('&P3C'(1,1) EQ 'B').FLD318       DEFAULT                02350000
         AIF   ('&P3C'(1,1) NE 'L').FLD311                              02360000
&LEFT    SETB  1                                                        02370000
         AGO   .FLD318                                                  02380000
.FLD311  AIF   ('&P3C'(1,1) NE 'Z').FLD312                              02390000
&ZERO    SETB  1                                                        02400000
         AGO   .FLD318                                                  02410000
.FLD312  AIF   ('&P3C'(1,1) LT '0').FLD993       nn in RnnB is not num  02420000
         AIF   ('&P3C'(1,1) GT '9').FLD993       nn in RnnB is not num  02430000
&P3L     SETC  '&P3L'.'&P3C'(1,1)                                       02440000
.FLD318  ANOP                                                           02450000
.*MNOTE *,'&SYSLIST(&I) P3C=/&P3C/ P3L=/&P3L/'                          02460000
&P3C     SETC  '&P3C '(2,K'&P3C-1)     STRIP OFF FIRST CHARACTER        02470001
         AIF   (K'&P3C GT 0).FLD310                                     02480000
.*--ENDLOOP                                                             02490000
         AIF   (&P3L GT 16).FLD993               nn in RnnB is too big  02500000
.*--------------------------------------------------------------------* 02510000
.FLD800  ANOP                                                           02520000
&NUMERIC SETB  (&BIN OR &PACKED OR (&REG AND NOT &HEX))                 02530000
&TRUNC   SETB  (&TRUNC OR (&LEFT AND NOT &NUMERIC))                     02540000
&LEFT    SETB  (&LEFT AND &NUMERIC)                                     02550000
         AIF   (NOT &NUMERIC).FLD810                                    02560000
         AIF   (&LEFT OR '&P3L' NE '0').FLD810                          02570000
&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH ((R3))     02580000
         AIF   (&REG).FLD810                                            02590000
&P3L     SETC  '3'                     DEFAULT OUTPUT LENGTH            02600000
         AIF   ('&P2C' EQ 'FL1').FLD810                                 02610000
&P3L     SETC  '5'                     DEFAULT OUTPUT LENGTH            02620000
         AIF   ('&P2C' EQ 'H' OR '&P2C' EQ 'FL2').FLD810                02630000
&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH            02640000
.FLD810  ANOP                                                           02650000
&FLAG    SETA  &HEX*8+&BIN*4+&PACKED*2+&REG*1                           02660000
&LEN2    SETA  &TRUNC*128+&LEFT*128+&ZERO*64+&P3L                       02670000
&$$FEAT(2) SETB (&$$FEAT(2) OR (&REG AND NOT &HEX))   REGISTER (BIN)    02680000
&$$FEAT(3) SETB (&$$FEAT(3) OR (&REG AND &HEX))       REGISTER (HEX)    02690000
&$$FEAT(4) SETB (&$$FEAT(4) OR &PACKED)               PACKED            02700000
&$$FEAT(6) SETB (&$$FEAT(6) OR &BIN)                  BINARY            02710000
&$$FEAT(7) SETB (&$$FEAT(7) OR (&HEX AND NOT &REG))   HEX               02720000
&$$FEAT(8) SETB (&$$FEAT(8) OR &NUMERIC)              BIN,PACKED        02730000
&$$FEAT(9) SETB (&$$FEAT(9) OR (&LEFT AND &NUMERIC))                    02740000
&$$FEAT(10) SETB (&$$FEAT(10) OR &ZERO)                                 02750000
&$$FEAT(11) SETB (&$$FEAT(11) OR &TRUNC)                                02760000
&BIN     SETB  0                    RESET FLAGS                         02770000
&HEX     SETB  0                    RESET FLAGS                         02780000
&REG     SETB  0                    RESET FLAGS                         02790000
&PACKED  SETB  0                    RESET FLAGS                         02800000
&LEFT    SETB  0                    RESET FLAGS                         02810000
&ZERO    SETB  0                    RESET FLAGS                         02820000
&TRUNC   SETB  0                    RESET FLAGS                         02830000
         AIF   (&FLAG GE 10).FLD995                                     02840000
         AIF   (&LAST).FLD816                                           02850000
         DC    X'0&FLAG',AL1(&LEN2),SL2(&P1S,&P2L)                      02860000
         AGO   .LIT99                                                   02870000
.FLD816  DC    X'8&FLAG',AL1(&LEN2),SL2(&P1S,&P2L),0S(0)                02880000
         AGO   .LIT99                                                   02890000
.FLD990  MNOTE 12,'OPERAND &I HAS TOO MANY SUB-OPERANDS'                02900000
         AGO   .LIT99                                                   02910000
.FLD993  MNOTE 8,'THIRD SUBPARAMETER IS INVALID: ''&SYSLIST(&I,3)'''    02920000
         AGO   .LIT99                                                   02930000
.FLD995  MNOTE 8,'Invalid Combination of Attributes: &SYSLIST(&I)'      02940000
         AGO   .LIT99                                                   02950000
.*--------------------------------------------------------------------* 02960000
.*------------ LITERALS ----------------------------------------------* 02970000
.*--------------------------------------------------------------------* 02980000
.LIT00   ANOP                                                           02990000
&LIT     SETC  'C&SYSLIST(&I)'                                          03000000
         AGO   .LIT09                                                   03010000
.LIT01   ANOP                                                           03020000
&LIT     SETC  '&SYSLIST(&I)'                                           03030000
.LIT09   ANOP                              calculate length of literal  03040000
&J       SETA  3                                                        03050000
&L       SETA  0                                                        03060000
         ACTR  K'&LIT+K'&LIT+100                                        03070000
         AIF   ('&LIT'(1,1) EQ 'X').LIT11X                              03080000
.*LOOP                                                                  03090000
.LIT11C AIF ('&LIT'(&J,1) NE '''' AND '&LIT'(&J,1) NE '&&'(1,1)).LIT12C 03100000
&J       SETA  &J+1                                                     03110000
.LIT12C  ANOP                                                           03120000
&J       SETA  &J+1                                                     03130000
&L       SETA  &L+1                                                     03140000
         AIF   (&J LT K'&LIT).LIT11C                                    03150000
.*ENDLOOP                                                               03160000
         AGO   .LIT15                                                   03170000
.*LOOP                                                                  03180000
.LIT11X  AIF   ('&LIT'(&J,1) EQ ',').LIT12X                             03190000
&L       SETA  &L+1                                                     03200000
.LIT12X  ANOP                                                           03210000
&J       SETA  &J+1                                                     03220000
         AIF   (&J LT K'&LIT).LIT11X                                    03230000
.*ENDLOOP                                                               03240000
&L       SETA  (&L+1)/2                                                 03250000
.LIT15   ANOP                               generate in-line literal    03260000
         AIF   (&L GT 5).LIT40                                          03270000
         AIF   (&LAST).LIT16                                            03280000
         DC    X'4&L',&LIT                                              03290001
         AGO   .LIT90                                                   03300000
.LIT16   DC    X'C&L',&LIT,0S(0)                                        03310000
         AGO   .LIT90                                                   03320000
.LIT40   ANOP                                  check literal table      03330000
         AIF   (&$$LIT EQ 0).LIT50                                      03340000
&N       SETA  1                                                        03350000
         ACTR  &$$LIT*3+200                                             03360000
.LIT41   AIF   ('&LIT' EQ '&$$LITS(&N)').LIT80       LOOP               03370000
&N       SETA  &N+1                                  LOOP               03380000
         AIF   (&N LE &$$LIT).LIT41                  LOOP               03390000
.LIT50   ANOP                                                           03400000
&$$LIT   SETA  &$$LIT+1                                                 03410000
&$$LITS(&$$LIT) SETC '&LIT'                                             03420000
&N       SETA  &$$LIT                                                   03430000
.LIT80   ANOP                               generate remote literal     03440000
&N       SETA  &N+1000                                                  03450000
         AIF   (&LAST).LIT86                                            03460000
         DC    X'40',AL1(&L),AL2($LIT&N-*)                              03470001
         AGO   .LIT90                                                   03480000
.LIT86   DC    X'C0',AL1(&L),AL2($LIT&N-*),0S(0)                        03490001
.LIT90   ANOP                                                           03500000
&$$FEAT(1) SETB 1                      LITERAL                          03510000
.LIT99   ANOP                                                           03520000
.*--------------------------------------------------------------------* 03530000
&I       SETA  1+&I                              LOOP                   03540000
         AIF   (&I LE N'&SYSLIST).LOOP1          LOOP                   03550000
.*ENDLOOP                                                               03560000
&SYSECT  CSECT                                                          03570001
         AGO   .MEND                                                    03580000
.ERR1    MNOTE 12,'AT LEAST ONE INPUT FIELD MUST BE SPECIFIED'          03590000
         AGO   .MEND                                                    03600000
.ERR2    MNOTE 12,'INVALID OUTPUT AREA SPECIFICATION'                   03610000
         AGO   .MEND                                                    03620000
.********************************************************************** 03630000
.*       GENERATE: GENERATE LITERALS AND PROCESSING ROUTINE           * 03640000
.********************************************************************** 03650000
.GENL    ANOP                                                           03660000
&ALLFEAT SETC  '&$$FEAT(1)&$$FEAT(2)&$$FEAT(3)&$$FEAT(4)'               03670000
&ALLFEAT SETC  '&ALLFEAT&$$FEAT(5)&$$FEAT(7)&$$FEAT(6)&$$FEAT(8)'       03680000
&ALLFEAT SETC  '&ALLFEAT&$$FEAT(9)&$$FEAT(10)&$$FEAT(11)&$$FEAT(12)'    03690000
&BLANKS  SETA  2                                                        03700001
         MNOTE *,'STRING R&MACVERS - FEATURES GENERATED: &ALLFEAT'      03710001
@STRING  CSECT                                                          03720001
         AIF   (&$$LIT EQ 0).GENL3                                      03730000
.GENL2   ANOP                                LOOP                       03740000
&N       SETA  &N+1                          LOOP                       03750000
&I       SETA  &N+1000                       LOOP                       03760000
$LIT&I   DC    &$$LITS(&N)                                              03770000
         AIF   (&N LT &$$LIT).GENL2          LOOP                       03780000
.GENL3   DC    0H'0'                                                    03790001
.********************************************************************** 03800000
.*                                                                    * 03810000
.*       STRING SUB-ROUTINE                                           * 03820000
.*                                                                    * 03830000
.*             CAUTION: BYTES 49-72 OF THE CALLER'S SAVE AREA         * 03840000
.*                      (R7-R12 SLOTS) ARE USED AS WORK SPACE         * 03850000
.*                                                                    * 03860000
.********************************************************************** 03870000
@00      EQU   0                       WORK REGISTER                    03880000
@01      EQU   1                       WORK REGISTER                    03890000
@02      EQU   2                       WORK REGISTER                    03900000
@03      EQU   3                       WORK REGISTER                    03910000
@04      EQU   4                       WORK REGISTER                    03920000
@05      EQU   5                       WORK REGISTER                    03930000
@06      EQU   6                       WORK REGISTER                    03940000
@13      EQU   13                      CALLER'S SAVE AREA               03950000
@14      EQU   14                      WORK REGISTER                    03960000
@15      EQU   15                      BASE REG                         03970000
         USING @STR002,@15                                              03980001
         USING @STRSAVE,@13                                             03990000
@STR002  B     @STR011                 BRANCH AROUND EYE-CATCHER        04000001
         DC    AL1(@STR003-*),C'@STRING/XF R&MACVERS &ALLFEAT',0H'0'    04010001
@STR003  DC    Y(@STR002-@STRING)      Offset to @STRING                04020001
@STR011  STM   @14,@06,12(@13)         Save caller's registers          04030001
         SLR   @06,@06                 R6=0                             04040000
         ICM   @06,B'0011',0(@14)      PICK UP PARM-LIST 1/2 OFFSET     04050000
         ALR   @06,@06                 PICK UP PARM-LIST OFFSET         04060000
         ALR   @06,@15                 R6 NOW POINTS TO PARM LIST       04070001
         SH    @06,@STR003             R6 NOW POINTS TO PARM LIST       04080001
         USING @STRSCON,@06                                             04090000
         LA    @02,@STRSCON            RESOLVE FIRST SCON (ADDR)        04100000
         BAL   @14,@STRS2A             GET ADDRESS IN R2                04120000
         LA    @04,0(,@02)             KEEP ADDRESS OF "INTO" FIELD     04130000
         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO     04140000
         OI    0(@04),0                GET CLEAN S0C4 IF ADDRESS IS BAD 04150000
         LA    @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)       04160000
         BAL   @14,@STRS2A             GET LENGTH IN R2                 04170000
         LR    @05,@02                 KEEP LENGTH OF "INTO" FIELD      04180000
         CR    @05,@04                 END ADDRESS?                     04190000
         BL    @STR282                 NO, JUMP                         04200000
         SR    @05,@04                 CALCULATE LENGTH                 04210000
@STR282  ST    @04,8(,@13)             SAVE ADDRESS FOR LATER           04220000
.********************************************************************** 04230000
.*       MOVE FIELDS TO OUTPUT AREA                                   * 04240000
.********************************************************************** 04250000
         LA    @06,@STRNEXT            POINT TO 1ST FIELD DESC          04260000
         USING @STRPARM,@06                                             04270000
.*LOOP                                                                  04280000
@STR310  EQU   *                                                        04290000
         AIF   (NOT &$$FEAT(1)).FEAT1A                                  04300000
         TM    @STRFLAG,@STRLIT        IS THIS A LITERAL?               04310000
         BO    @STR372                 YES, JUMP                        04320000
.FEAT1A  ANOP                                                           04330000
         AIF   (NOT &$$FEAT(2) AND NOT &$$FEAT(3)).FEAT23A              04340000
         TM    @STRFLAG,@STRREG        REGISTER?                        04350000
         BO    @STR323                 YES, JUMP                        04360000
.FEAT23A ANOP                                                           04370000
         AIF   (NOT &$$FEAT(12)).FEAT12A                                04380000
         CLI   @STRSCON,X'E0'          IS IT %TIME ?                    04390000
         BE    @STR378                 YES, JUMP                        04400000
.FEAT12A ANOP                                                           04410000
.*                                                                      04420000
.*       IT'S A FIELD (SCON)                                            04430000
.*                                                                      04440000
         LA    @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)       04450000
         BAL   @14,@STRS2A             GET LENGTH IN R2                 04460000
         AIF   (&$$FEAT(9)).FEAT9E1    (LEFT JUSTIFICATION, NUMERIC)    04470000
         LTR   @03,@02                 KEEP/TEST LENGTH                 04480000
         BZ    @STR398                 ZERO LENGTH, DO NOT EDIT         04490000
         AGO   .FEAT9E2                                                 04500000
.FEAT9E1 LTR   @03,@02                 KEEP/TEST LENGTH                 04510000
         BP    @STR313                 LENGTH POSITIVE, JUMP            04520000
         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?              04530000
         BNO   @STR398                 NO, ZERO LENGTH IS NOT OK        04540000
@STR313  EQU   *                                                        04550000
.FEAT9E2 ANOP                                                           04560000
         LA    @02,@STRSCON            RESOLVE FIRST SCON (ADDR)        04570000
         BAL   @14,@STRS2A             GET ADDRESS IN R2                04580000
         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO     04590000
         CLI   0(@02),0                GET CLEAN S0C4 IF ADDRESS IS BAD 04600000
         CR    @03,@02                 END ADDRESS?                     04610000
         BL    @STR314                 NO, JUMP                         04620000
         LA    @00,X'0080'             PSA ADDRESS                      04630000
         CLR   @02,@00                 PSA REFERENCE?                   04640000
         BL    @STR314                 YES, JUMP                        04650000
         SR    @03,@02                 CALCULATE LENGTH                 04660000
@STR314  EQU   *                                                        04670000
         AIF   (NOT &$$FEAT(6)).FEAT6A                                  04680000
         TM    @STRFLAG,@STRBIN        BINARY FIELD?                    04690000
         BO    @STR328                 YES, JUMP                        04700000
.FEAT6A  ANOP                                                           04710000
         AIF   (NOT &$$FEAT(4)).FEAT4A                                  04720000
         TM    @STRFLAG,@STRPACK       PACKED FIELD?                    04730000
         BO    @STR351                 YES, JUMP                        04740000
.FEAT4A  ANOP                                                           04750000
         AIF   (NOT &$$FEAT(7)).FEAT7A                                  04760000
         TM    @STRFLAG,@STRHEX        EDIT IN HEX?                     04770000
         BO    @STR376                 YES, JUMP                        04780000
.FEAT7A  ANOP                                                           04790000
.*                                                                      04800000
.*       TRUNCATE CHARACTER STRING                                      04810000
.*                                                                      04820000
         AIF   (NOT &$$FEAT(11)).FEAT11A                                04830000
         CLI   @STRLEN2,@STRLEFT       CHECK JUSTIFICATION, OUTPUT LEN  04840000
         BNE   @STR390                 NO STRING TRUNCATION, JUMP       04850000
         LA    @01,0(@03,@02)          FIRST BYTE AFTER FIELD           04860000
@STR318  BCTR  @01,0                   DOWN 1 BYTE                 LOOP 04870000
         CLI   0(@01),C' '             IS IT A SPACE ?             LOOP 04880000
         BNE   @STR390                 LAST NON-BLANK BYTE         LOOP 04890000
         BCT   @03,@STR318             LOOP UNTIL 1ST NON-BLANK    LOOP 04900000
         B     @STR398                 BLANK FIELD, DO NOT EDIT         04910000
         AGO   .FEAT11B                                                 04920000
.FEAT11A ANOP                                                           04930000
         AIF (&$$FEAT(2)+&$$FEAT(3)+&$$FEAT(4)+&$$FEAT(6) EQ 0).FEAT11B 04940000
         B     @STR390                 EDIT                             04950000
.FEAT11B ANOP                                                           04960000
.*                                                                      04970000
.*       REGISTER (R0-R13)                                              04980000
.*                                                                      04990000
         AIF   (NOT &$$FEAT(2) AND NOT &$$FEAT(3)).FEAT23B              05000000
@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT              05010000
@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31         05020000
         EX    @01,@STR323L            COPY R7-R13 INTO R0              05030000
         CLI   @STRSCON+1,@06+1        IS THIS R7-R13?                  05040000
         BNL   @STR323T                YES, JUMP                        05050000
         SLL   @01,2                   R1= 000000BB BASE * 4            05060000
         L     @00,20(@01,@13)         PICK UP VALUE FOR R0-R6          05070000
@STR323T EQU   *                                                        05080000
         AIF   (NOT &$$FEAT(3)).FEAT3R REG,HEX                          05090000
         AIF   (NOT &$$FEAT(2)).FEAT2H REG,BIN                          05100000
         TM    @STRFLAG,@STRHEX        EDIT IN HEX?                     05110000
         BNO   @STR330                 NO, EDIT FWD                     05120000
.FEAT2H  ANOP                                                           05130000
         STCM  @00,B'1111',@STRDWD-1   STORE IT FOR CVD/UNPK            05140000
         LA    @03,8                   OUTPUT LENGTH                    05150000
         B     @STR376X                EDIT IN HEX                      05160000
.FEAT3R  ANOP                                                           05170000
         AIF   (NOT &$$FEAT(6)).FEAT23B                                 05180000
         B     @STR330                 EDIT R0                          05190000
.FEAT23B ANOP                                                           05200000
.*                                                                      05210000
.*       BINARY VARIABLE: @03 CONTAINS THE ICM MASK (1 3 7 F)           05220000
.*                                                                      05230000
         AIF   (NOT &$$FEAT(6)).FEAT6B                                  05240000
@STR328M ICM   @00,*-*,0(@02)          **EXECUTED INSTRUCTION**         05250000
@STR328  SLR   @00,@00                                                  05260000
         EX    @03,@STR328M            LOAD THE BINARY VARIABLE         05270000
.FEAT6B  ANOP                                                           05280000
.*                                                                      05290000
         AIF   (NOT &$$FEAT(2) AND NOT &$$FEAT(6)).FEAT6C               05300000
@STR330  CVD   @00,@STRDWD             CONVERT VALUE TO DECIMAL         05310000
         AIF   (NOT &$$FEAT(4)).FEAT6C                                  05320000
         B     @STR361                 EDIT DWD                         05330000
.FEAT6C  ANOP                                                           05340000
.*                                                                      05350000
.*       PACKED FIELD                                                   05360000
.*                                                                      05370000
         AIF   (NOT &$$FEAT(4)).FEAT4B                                  05380000
@STRZAP  ZAP   @STRDWD,0(*-*,@02)      MOVE TO @STRDWD                  05390000
@STR351  LA    @03,0(,@02)             FIRST BYTE OF PACKED FIELD       05400000
         BALR  @14,0                                                    05410000
         TM    0(@03),X'0C'            IS THIS THE SIGN BYTE?           05420000
         LA    @03,1(,@03)              (NEXT BYTE)                     05430000
         BNOR  @14                     NO, LOOP MORE                    05440000
         SLR   @03,@02                 GET LENGTH OF PACKED FIELD       05450000
         BCTR  @03,0                                                    05460000
         EX    @03,@STRZAP             EXECUTE ZAP                      05470000
         AIF   (NOT &$$FEAT(5)).FEAT4B                                  05480000
         CLI   @STRLEN2,248            JULIAN-TO-YYMMDD CONV?           05490000
         BNL   @STR375                 YES, JUMP                        05500000
.FEAT4B  ANOP                          PACKED                           05510000
.*                                                                      05520000
.*       EDIT @STRDWD (BIN, REG, PACKED)                                05530000
.*                                                                      05540000
         AIF   (NOT &$$FEAT(8)).FEAT8B                                  05550000
@STR361  IC    @00,@STRLEN2            OUTPUT LENGTH                    05560000
         LA    @03,X'003F'             MASK FOR "AND"                   05570000
         NR    @03,@00                 OUTPUT LENGTH                    05580000
         MVC   @STRWK16(16),@STRMASK   EDIT MASK                        05590000
.*                                                                      05600000
.*       LEFT-JUSTIFICATION (NUMERIC)                                   05610000
.*                                                                      05620000
         AIF   (NOT &$$FEAT(9)).FEAT9B                                  05630000
         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?              05640000
         BNO   @STR367                 NO, JUMP                         05650000
         LA    @01,@STRWK16+15         PREVENT BAD R1                   05660000
         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL                    05670000
         LA    @02,0(,@01)             FIRST STRING POSITION            05680000
         LTR   @03,@03                 CHECK OUTPUT LENGTH              05690000
         BNZ   @STR363                 JUMP IF NOT ZERO                 05700000
.*       L0    (LEFT JUSTIFIED, NO PADDING)                             05710000
         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING      05720000
         SR    @03,@02                 COMPUTE STRING LENGTH            05730000
         B     @STR390                 MOVE FIELD TO OUTPUT LINE        05740000
.*       L1-L63 (LEFT JUSTIFIED, PADDING)                               05750000
@STR363  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN  05760000
         BNH   @STR364                 LARGE ENOUGH, JUMP               05770000
         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.   05780000
@STR364  SR    @05,@03                 COMPUTE REMAINING LENGTH         05790000
         LR    @00,@04                 POINTER IN OUTPUT LINE           05800000
         LR    @01,@03                 LENGTH WITH PADDING              05810000
         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING      05820000
         SR    @03,@02                 COMPUTE STRING LENGTH            05830000
         B     @STR392                 MOVE FIELD TO OUTPUT LINE        05840000
@STR367  EQU   *                                                        05850000
.FEAT9B  ANOP                                                           05860000
         AIF   (NOT &$$FEAT(10)).FEAT10B                                05870000
         TM    @STRLEN2,@STRZERO       LEADING ZEROES REQ'D?            05880000
         BNO   @STR368                 NO, JUMP                         05890000
         MVI   @STRWK16,C'0'           YES, CHANGE X'40' TO C'0'        05900000
@STR368  EQU   *                                                        05910000
.FEAT10B ANOP                                                           05920000
         ED    @STRWK16(16),@STRDWD    ZONED DECIMAL                    05930000
         LA    @02,@STRWK16+16         FIRST POSITION AFTER STRING      05940000
         SR    @02,@03                 FIRST STRING POSITION            05950000
.FEAT8B  ANOP                                                           05970000
.*                                                                      05980000
.*       LITERAL (@STRSCON IS A 16-BIT OFFSET)                          05990000
.*       Short Literal (low-order 4 bits of @STRFLAG contains length)   06000000
.*       BLANKS  (@STRSCON=ZERO)                                        06010000
.*                                                                      06020000
         AIF   (NOT &$$FEAT(1)).FEAT1B                                  06030000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06040000
@STR372  LA    @01,7                   mask for NR                      06050000
         LA    @02,@STRLEN2            1st byte of short literal        06060000
         IC    @03,@STRFLAG            pick up flags+length             06070000
         NR    @03,@01                 R3 has length of short literal   06080000
         BNZ   @STR390                 short literal, go move it        06090000
         SLR   @02,@02                 Clear Address Register           06100000
         IC    @03,@STRLEN2            GET LITERAL LENGTH               06110000
         TM    @STRFLAG,@STRX40        string of spaces?                06120000
         BO    @STR390                 yes, go move them                06130000
         ICM   @02,B'0011',@STRSCON    LOAD LITERAL OFFSET              06140000
         LA    @02,@STRSCON(@02)       CONVERT OFFSET TO FULL ADDRESS   06150000
.FEAT1B  ANOP                                                           06160000
.*                                                                      06170000
.*       CONVERT JULIAN DATE TO YYMMDD                                  06180000
.*                                                                      06190000
         AIF   (NOT &$$FEAT(5)).FEAT5F                                  06200000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06210000
@STR375  LA    @00,248                 MASK FOR 'SLR'                   06220000
         SLR   @01,@01                                                  06230000
         IC    @01,@STRLEN2            248-255                          06240000
         SLR   @01,@00                 000-007                          06250000
         LA    @00,12                  L'@STR375W                       06260000
         MR    @00,@00                 COMPUTE OFFSET                   06270000
         LA    @01,@STR375W(@01)       ENTRY IN "TR" MASK TABLE         06280000
         SLR   @03,@03                                                  06290000
         IC    @03,0(,@01)             LENGTH OF DATE (6, 8 OR 10)      06300000
         ZAP   @STRDWD,@STRDWD         DATE=0000000?               @JDT 06310000
         BNZ   @STR375B                NO, JUMP                    @JDT 06320000
@STR375Z LA    @02,@BLANKS             WORK AREA                        06330001
&BLANKS  SETA  10                      WE NEED AT LEAST 10 BLANKS       06340001
         B     @STR390                 MOVE FIELD TO OUTPUT LINE        06350000
@STR375W DC    AL1(10,C'-',0,1,2,3,8,4,5,8,6,7) YYYY-MM-DD   248        06360000
         DC    AL1(8,C' ',0,1,2,3,4,5,6,7,8,8)  YYYYMMDD//   249        06370000
         DC    AL1(8,C'/',2,3,8,4,5,8,6,7,8,8)  YY/MM/DD//   250        06380000
         DC    AL1(8,C'/',6,7,8,4,5,8,2,3,8,8)  DD/MM/YY//   251        06390000
         DC    AL1(8,C'/',4,5,8,6,7,8,2,3,8,8)  MM/DD/YY//   252        06400000
         DC    AL1(6,C' ',2,3,4,5,6,7,8,8,8,8)  YYMMDD       253        06410000
         DC    AL1(10,C'.',6,7,8,4,5,8,0,1,2,3) DD.MM.YYYY 254 @JW14278 06420002
.*       DC    AL1(6,C' ',4,5,6,7,2,3,8,8,8,8)  MMDDYY       255        06430000
@STR375T DC    P'59,31,29,31,30,31,30,31,31,30,31,30,31'                06440000
         DC    P'999'                  Prevent S0C7 with 90366          06450000
@STR375B CLI   @STRDWD+4,X'01'         YEAR 2000 OR ABOVE?              06460000
         BH    @STR375C                CC>01, JUMP (MUST BE 19 OR 20)   06470000
         MVI   @STRDWD+4,X'20'         CC=01, CHANGE TO CC=20           06480000
         BE    @STR375C                CC=01, USE CC=20                 06490000
         CLI   @STRDWD+4+1,X'50'       YY<50?                           06500000
         BL    @STR375C                YES, USE CC=20                   06510000
         MVI   @STRDWD+4,X'19'         NO, FORCE CC=19                  06520000
@STR375C UNPK  @STRWK16(5),@STRDWD+4(3) CCYY?                           06530000
         ZAP   @STRDWD+1(2),@STR375T+9(1) INIT MONTH COUNTER            06540000
         LA    @02,@STR375T            TABLE OF MONTHS (NUMBER OF DAYS) 06550000
         TM    @STRDWD+4+1,X'01'       ODD YEARS                        06560000
         BO    @STR375N                  AREN'T LEAP YEARS              06570000
         TM    @STRDWD+4+1,X'12'       ZEROES IN 1980, ALL ONES IN 1992 06580000
         BNM   @STR375L                MIXED IN 1982/1990               06590000
.*       IF IT'S NOT A LEAP YEAR AND DDD>59, THEN ADD 1 TO DDD          06600000
@STR375N CP    @STRDWD+4+2(2),@STR375T ARE WE PAST FEB 28 (DDD>59) ?    06610000
         BNH   @STR375L                NO, JUMP                         06620000
         AP    @STRDWD+4+2(2),@STR375T+3(1) ADD 1 (FROM 31) TO DDD      06630000
.*--LOOP WHILE DDD > 0                                                  06640000
@STR375L AP    @STRDWD+1(2),@STR375T+3(1)   ADD 1 (FROM 31) TO MONTH    06650000
         LA    @02,2(,@02)             NEXT ENTRY IN "MONTHS" TABLE     06660000
         SP    @STRDWD+4+2(2),0(2,@02) SUB DAYS-IN-MONTH FROM DDD       06670000
         BP    @STR375L                                                 06680000
.*--ENDLOOP                                                             06690000
         AP    @STRDWD+4+2(2),0(2,@02) UNDO LAST "SP" INSTRUCTION       06700000
         UNPK  @STRWK16+4(2),@STRDWD+1(2) FYFYFYFY,FMCM??               06710000
         UNPK  @STRWK16+6(2),@STRDWD+6(2) FYFYFYFY,FMCMFDCD             06720000
         MVZ   @STRWK16+1(5),@STRWK16  temporary circumvention @JW-Z390 06730002
         MVZ   @STRWK16+6(2),@STRWK16  of MVZ bug under z390   @JW-Z390 06733002
         MVC   @STRWK16+8(1),1(@01)    SEPARATOR                        06740000
         LA    @02,@STRWK16+9          WORK AREA                        06750000
         MVC   0(10,@02),2(@01)        MOVE CORRESPONDING MASK          06760000
         TR    0(10,@02),@STRWK16      CONVERT DATE TO THE RIGHT FORMAT 06770000
.FEAT5F  ANOP                          JDATE                            06780000
.*                                                                      06790000
.*       HEX STRING                                                     06800000
.*                                                                      06810000
         AIF   (NOT &$$FEAT(7)).FEAT7B                                  06820000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06830000
@STR376M MVC   @STRDWD-1(*-*),0(@02)   PREVENT S0C4 IN UNPK             06840000
@STR376  LA    @00,8                   MAX LENGTH                       06850000
         CLR   @03,@00                 CHECK LENGTH                     06860000
         BNH   @STR376B                JUMP IF LE 8                     06870000
         LR    @03,@00                 TRUNCATE TO MAXIMUM LENGTH       06880000
@STR376B LR    @01,@03                 INPUT LENGTH                     06890000
         BCTR  @01,0                                                    06900000
         EX    @01,@STR376M            MOVE DATA TO SAFE STORAGE        06910000
         ALR   @03,@03                 OUTPUT LENGTH                    06920000
         AGO   .FEAT37B                                                 06930000
.FEAT7B  ANOP                                                           06940000
         AIF   (NOT &$$FEAT(3)).FEAT37C                                 06950000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       06960000
.FEAT37B ANOP                                                           06970000
@STR376X LA    @02,@STRWK16            WORK AREA                        06980000
         UNPK  0(9,@02),@STRDWD-1(5)   EXPAND SOURCE BYTES FOR "TR"     06990000
         UNPK  8(9,@02),@STRDWD+3(5)   EXPAND SOURCE BYTES FOR "TR"     07000000
         TR    0(16,@02),@STRHEXT-240  =C'0123456789ABCDEF'             07010000
.FEAT37C ANOP                                                           07020000
.*                                                                      07030000
.*       %TIME                                                          07040000
.*                                                                      07050000
         AIF   (NOT &$$FEAT(12)).FEAT12B                                07060000
         B     @STR390                 MOVE STRING TO OUTPUT LINE       07070000
@STRTIME DC    X'4021207A20207A20204B20204000'    0X:XX:XX.XX  @GSFR518 07080002
@STR378  LR    @02,@15                 SAVE BASE REG                    07090000
         TIME  DEC                     GET HHMMSSHH                     07100000
         LR    @15,@02                 RESTORE BASE REG                 07110000
         ST    @00,@STRDWD             STORE HHMMSSHH                   07120000
         MVC   @STRWK16(13),@STRTIME   MOVE EDIT MASK                   07130000
         ED    @STRWK16(13),@STRDWD    EDIT HH:MM:SS.HH        @GSFR518 07140002
         LA    @02,@STRFLEN            RESOLVE SECOND S-CON    @JW14278 07145002
         BAL   @14,@STRS2A             GET LENGTH IN R2        @JW14278 07150002
         LR    @03,@02                 GET LENGTH IN R3        @JW14278 07155002
         LA    @02,@STRWK16+1          WORK AREA               @JW14278 07160002
.FEAT12B ANOP                                                           07170000
.*MOVE                                                                  07180000
@STR390  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN  07190000
         BNH   @STR391                 LARGE ENOUGH, JUMP               07200000
         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.   07210000
@STR391  SR    @05,@03                 COMPUTE REMAINING LENGTH         07220000
         LR    @00,@04                 POINTER IN OUTPUT LINE           07230000
         LR    @01,@03                 PASS REMAINING LENGTH            07240000
         LTR   @02,@02                 BLANKS?                          07250000
         BNZ   @STR392                 NO, JUMP                         07260000
         SLR   @03,@03                 YES, ZERO LENGTH                 07270000
@STR392  ICM   @03,B'1000',@BLANKS     PAD WITH BLANKS                  07280001
         MVCL  @00,@02                 MOVE FIELD TO OUTPUT LINE        07290000
         LR    @04,@00                 NEW POINTER IN OUTPUT LINE       07300000
@STR398  TM    @STRFLAG,@STRLAST       TEST LAST-ENTRY INDICATOR        07310000
         BO    @STR399                 Done, exit                       07320000
         AIF   (NOT &$$FEAT(1)).FEAT1C                                  07330000
         TM    @STRFLAG,@STRLIT+@STRX40 literal or spaces?              07340000
         BM    @STR398L                Literal, not spaces              07350000
         BZ    @STR398X                Neither literal nor spaces       07360000
         LA    @06,@STRSCON            2-byte entry for blank spaces    07370000
         B     @STR310                 PROCESS NEXT ENTRY               07380000
@STR398L LA    @01,7                   mask for NR                      07390000
         IC    @03,@STRFLAG            pick up flags+length             07400000
         NR    @03,@01                 R3 has length of short literal   07410000
         BZ    @STR398T                not an in-line literal, jump     07420000
         LA    @06,@STRLEN2(@03)       Skip VL parm for in-line literal 07430000
         B     @STR310                 PROCESS NEXT ENTRY               07440000
@STR398T LA    @06,@STRFLEN            4-byte parm for remote literal   07450000
         B     @STR310                 PROCESS NEXT ENTRY               07460000
.FEAT1C  ANOP                                                           07470000
@STR398X LA    @06,@STRNEXT            BUMP UP TO NEXT ENTRY            07480000
         B     @STR310                 PROCESS NEXT ENTRY               07490000
.*ENDLOOP                                                               07500000
.*                                                                      07510000
.*       END-OF-LINE PROCESSING - PAD WITH BLANKS                       07520000
.*                                                                      07530000
@STR399  SLR   @01,@01                 SET UP R1 FOR PADDING            07540000
         ICM   @01,B'1000',@BLANKS     SET UP R1 FOR PADDING            07550001
.***     DROP  @06,@13,@15                                              07560000
         LA    @14,2                   INCREMENT                        07570000
         AL    @14,12(,@13)            RETURN ADDRESS                   07580000
         LR    @15,@04                 CURRENT POINTER IN OUTPUT FIELD  07590000
         SL    @15,8(,@13)             CALCULATE LENGTH USED            07600000
         MVCL  @04,@00                 PAD WITH BLANKS                  07610000
         LM    @00,@06,20(@13)         RESTORE WORK REGISTERS           07620000
         STM   @06+1,@13-1,48(@13)     MAKE SAVE AREA LOOK NORMAL       07630000
         OI    15(@13),1               SIMULATE "T" OPTION OF RETURN    07640000
         BR    @14                     RETURN TO CALLER                 07650000
.*                                                                      07660000
         AIF   (NOT (&$$FEAT(3) OR &$$FEAT(7))).FEAT37T                 07670000
@STRHEXT DC    C'0123456789ABCDEF'     HEX-TO-EBCDIC CONVERSION         07680000
.FEAT37T ANOP                                                           07690000
         AIF   (NOT &$$FEAT(8)).FEAT8T                                  07700000
@STRMASK DC    X'4020202020202020,2020202020202120'                     07710000
.FEAT8T  ANOP                                                           07720000
.********************************************************************** 07730000
.*       Convert S-con to address                                     * 07740000
.*             Input: GPR2 points to an S-CON in the remote parm list * 07750000
.*             Output: GPR2 contains the address                      * 07760000
.********************************************************************** 07770000
@STRS2A  SLR   @00,@00                                                  07780000
         ICM   @00,B'0011',0(@02)      R0 = 0000BDDD                    07790000
         SRDL  @00,12                  R0 = 0000000B, R1= DDD.....      07810000
         SRL   @01,20                  R1 = 00000DDD (DISPLACEMENT)     07820000
         CLI   0(@02),@06*16+15        R7-R13?                          07830000
         BH    @STRS2A3                YES, JUMP                        07840000
.*BASE REG IS R0-R6                                                     07850000
         LTR   @02,@00                 IS R0 THE BASE REG?              07860000
         BNZ   @STRS2A2                NO, JUMP                         07870000
         LTR   @02,@01                 IS THIS A PSA ADDRESS?           07880000
         BNZR  @14                     YES, GOBACK                      07890000
@STRS2A2 SLL   @02,2                   R2= 000000BB BASE * 4            07900000
         L     @02,20(@02,@13)         PICK UP BASE REG VALUE           07910000
         LA    @02,0(@02,@01)          ADD BASE REG VALUE TO DISPL      07920000
         BR    @14                                                      07930000
.*BASE REG IS R7-R13                                                    07940000
@STRS2A3 LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)   07950000
         EX    @02,@STRS2A4            ADD BASE REG VALUE TO DISPL      07960000
         BR    @14                                                      07970000
@STRS2A4 LA    @02,0(*-*,@01)          ADD BASE REG VALUE TO DISPL      07980000
@BLANKS  DC    CL((((*+&BLANKS+7-@STRING)/8)*8)-(*-@STRING))' '         07990001
@STRSIZE EQU   *-@STRING               SIZE OF GENERATED CSECT          08000001
         DROP  @06,@13,@15                                              08010000
.********************************************************************** 08020000
.*       WORK AREA (CALLER'S SAVE AREA)                               * 08030000
.********************************************************************** 08040000
@STRSAVE DSECT                         24-BYTE WORK AREA                08050000
         DS    A(0,@STRSAVE,@STRSAVE,14,15,0,1,2,3,4,5,6)               08060000
@STRWK16 DS    F'7,8,9,10'             WORK AREA                        08070000
@STRDWD  DS    D'1112'                 WORK AREA                        08080000
@STRPARM DSECT                                                          08090000
@STRFLAG DS    B                   +0  FORMAT, FLAGS                    08100000
@STRLAST EQU   X'80'                     LAST ENTRY                     08110000
@STRLIT  EQU   X'40'                     LITERAL, @STRSCON IS AN OFFSET 08120000
@STRX40  EQU   X'20'                   String of Spaces                 08130000
.*             X'0F'                   CONVERSION REQUIRED              08140000
.*                                     or length of short literal       08150000
@STRHEX  EQU   X'08'                     HEXADECIMAL                    08160000
@STRBIN  EQU   X'04'                     BINARY                         08170000
@STRPACK EQU   X'02'                     PACKED                         08180000
@STRREG  EQU   X'01'                     REGISTER                       08190000
@STRLEN2 DS    B                   +1  FORMAT, OUTPUT LENGTH            08200000
.*                                     or start of short literal        08210000
@STRLEFT EQU   X'80'                     LEFT JUSTIFICATION             08220000
@STRZERO EQU   X'40'                     LEADING ZEROES                 08230000
.*             X'3F'                     OUTPUT LENGTH, 0 MEANS TRUNC.  08240000
@STRSCON DS    S                   +2  FIELD ADDRESS                    08250000
@STRFLEN DS    S                   +4  FIELD LENGTH                     08260000
@STRNEXT EQU   *                   +6                                   08270000
.MEND    AIF   ('&PRINT' EQ 'NOGEN').MEND99                             08280000
         POP   PRINT                                                    08290000
.MEND99  MEND                                                           08300000
         EJECT                                                          08310000
**********************************************************************  08320000
**********************************************************************  08330000
********* TEST PROGRAM FOR THE 'STRING' MACRO ************************  08340000
**********************************************************************  08350000
**********************************************************************  08360000
         MACRO                                            JDATE MACRO   08370001
        @JDATE &DATE                                      JDATE MACRO   08380001
         LA    R1,=P'&DATE'                               JDATE MACRO   08390001
*** STRING ((R1),P),2X,((R1),P),INTO=XXX                  JDATE MACRO   08400001
         STRING ((R1),P),2X,((R1),P,YYMMDD),INTO=XXX,     JDATE MACRO  X08410001
               3X,((R1),P,YY/MM/DD),                      JDATE MACRO  X08420001
               3X,((R1),P,DD/MM/YY),                      JDATE MACRO  X08430001
               3X,((R1),P,MM/DD/YY),                      JDATE MACRO  X08440001
               3X,((R1),P,YYYYMMDD),                      JDATE MACRO  X08450001
               3X,((R1),P,YYYY-MM-DD)                     JDATE MACRO   08460001
         PUT   SYSPRINT,XXX                               JDATE MACRO   08470001
         MEND                                             JDATE MACRO   08480001
**********************************************************************  08490001
         LCLC  &SYSVER,&SYSDATC                                         08500001
&SYSVER  SETC  'XF'                                                     08510001
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)       08520000
TESTPGM  START X'015000'                                                08530001
         BALR  R12,0                                                    08540000
         USING *,R12                                                    08550000
*LOAD EP=SYSDEBUG                                                       08560001
*LR R15,R0                                                              08570001
*BASSM R14,R15                                                          08580001
*STRING 1X,INTO=XXX                                                     08590000
*RC8     STRING ((R1),,R**B),((R1),,R22Z),((R1),,R16B),INTO=XXX         08600000
         OPEN  (SYSPRINT,OUTPUT)                                        08610000
         STRING 'Assembler is &SYSVER, DATE is &SYSDATC',INTO=XXX       08620000
         PUT   SYSPRINT,XXX                                             08630000
         STRING 'AMPERSAND=&& AND APOSTROPHE='' ',INTO=XXX              08640000
         PUT   SYSPRINT,XXX                                             08650000
RBPREFIX EQU   *                                                        08660000
RBINTCOD EQU   *+6,2,C'H'                                               08670000
         L     R1,PSATOLD-PSA(0,0)                                      08680000
         L     R1,0(,R1)               TCBRBP                           08690000
         L     R2,PSAAOLD-PSA(0,0)     ASCB                             08700000
         STRING 'SVC',(RBINTCOD-RBPREFIX(R1),H,R3Z),                   X08710000
               1X,(WWWW,,T),' - ',     VV.MM OF SVC RTNE               X08720000
               ((R8),,X),1X,           COM-REG ADDR                    X08730000
               'ASID=',(ASCBASID-ASCB(R2),,X),1X,                      X08740001
               PARM1,1X,               MAIN PGM NAME                   X08750000
               INTO=XXX                                                 08760000
         PUT   SYSPRINT,XXX                                             08770000
*                                                                       08780000
         LA    R2,XXX                                                   08790000
         STRING 1X,INTO=((R2),8)                                        08800000
        @JDATE 90058                                                    08810000
        @JDATE 91059                                                    08820000
        @JDATE 93060                                                    08830000
        @JDATE 94365                                                    08840000
        @JDATE 80058                                                    08850000
        @JDATE 84059                                                    08860000
        @JDATE 88060                                                    08870000
        @JDATE 92061                                                    08880000
        @JDATE 00366                                                    08890000
         LA    R2,1234                                                  08900000
         STRING 'CVTPTR=X''',(CVTPTR,4,X),'''',INTO=XXX,               X08910000
               ' 1234=',((R2),,R4Z)                                     08920000
         PUT   SYSPRINT,XXX                                             08930000
         L     R1,CVTPTR(0,0)                                           08940000
         STRING 'CVTDATE=',(56(R1),P,YYMMDD),INTO=XXX                   08950000
         PUT   SYSPRINT,XXX                                             08960000
         LA    R0,1000                                                  08970000
         LA    R3,0033                                                  08980000
         STRING 'D1=/',D1,'/,WWWW=/',WWWW,'/',                         X08990000
               ((R3),,L),'/',((R3),,X),'/',((R0),,L),'/',              X09000000
               ((R3),,R9B),'/',INTO=XXX                                 09010000
         LR    R4,R15                   LENGTH USED                     09020000
         PUT   SYSPRINT,XXX                                             09030000
         STRING WWWW,                                                  X09040000
               (4(R13),4,X),'''',(4(R13),F),'''',                      X09050000
               (4(R13),F,L),'''',                                      X09060000
               (4(R13),F,L11),'''',                                    X09070000
               (4(R13),F,Z9),'''',                                     X09080000
               8X,'R4=',((R4),,L),      LENGTH USED                    X09090000
               INTO=XXX                                                 09100000
         PUT   SYSPRINT,XXX                                             09110000
         STRING %TIME,D1,'B12345678B',5X,(CTR1,P),1X,PARM1,1X,PARM2,   X09120000
               INTO=XXX                                                 09130000
         PUT   SYSPRINT,XXX                                             09140000
         LA    R3,17                                                    09150001
         STRING INTO=XXX,'CCC1234A',(D1,(R3)),'.',(CTR1,P,R7Z)          09160000
         PUT   SYSPRINT,XXX                                             09170000
         STRING C'DDN2(',(D1,,T),')',X'40C1C2,C3C4',                   +09180000
               ' PSATOLD=',(PSATOLD-PSA,,X),                           +09190000
               INTO=XXX                                                 09200000
         PUT   SYSPRINT,XXX                                             09210000
         BALR  R0,0                                                     09220000
         STRING 'R0=',((R0),,X),'   16(R0)=',(16(R0),4,X),INTO=XXX      09230000
         PUT   SYSPRINT,XXX                                             09240000
         STRING 'R0=',((R0),,X),'   CTR1=',(CTR1,P,R5B),INTO=XXX        09250000
         PUT   SYSPRINT,XXX                                             09260000
         SLR   R0,R0                                                    09270000
         STRING 'R0=',((R0),,X),'   CTR1=',(CTR1,P,R5B),INTO=XXX        09280000
         PUT   SYSPRINT,XXX                                             09290000
*                                                                       09300000
EXIT     SLR   R15,R15                                                  09310000
         SVC   3                       GOBACK                           09320000
D1       DC    C'D1-----D1    '                                         09330000
WWWW     DC    C'WWWW'                                                  09340000
CTR1     DC    P'1'                                                     09350000
PARM1    DC    C'<-PARM1->'                                             09360000
PARM2    DC    C'<-PARM2->'                                             09370000
XXX      DS    CL132                                                    09380000
CVTPTR   EQU   0016,4,C'A'                                              09390000
SYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FB,LRECL=121     09400000
         STRING GENERATE                                                09410000
R0       EQU   0                                                        09420001
R1       EQU   1                                                        09430001
R2       EQU   2                                                        09440001
R3       EQU   3                                                        09450001
R4       EQU   4                                                        09460001
R5       EQU   5                                                        09470001
R6       EQU   6                                                        09480001
R7       EQU   7                                                        09490001
R8       EQU   8                                                        09500001
R9       EQU   9                                                        09510001
R10      EQU   10                                                       09520001
R11      EQU   11                                                       09530001
R12      EQU   12                                                       09540001
R13      EQU   13                                                       09550001
R14      EQU   14                                                       09560001
R15      EQU   15                                                       09570001
PSA      DSECT                                                          09580000
PSATOLD  EQU   *+X'21C',4,C'A'                                          09590000
PSAAOLD  EQU   *+X'224',4,C'A'                                          09600000
ASCB     DSECT                                                          09610000
ASCBASID EQU   *+36,2,C'X'                                              09620000
         END                                                            09630000
//SYSPRINT DD SYSOUT=*                                                  09640000
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR                                  09670000
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)                                    09680000
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,2)                                    09690001
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,2)                                    09700001
//SYSGO    DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3120      09710001
//*                                                                     09720000
//GO      EXEC PGM=LOADER,PARM=PRINT,TIME=(,2)                          09730000
//SYSLIN   DD DSN=*.XFASM.SYSGO,DISP=(OLD,DELETE)                       09740001
//SYSLOUT  DD SYSOUT=*                                                  09750000
//SYSPRINT DD SYSOUT=*                                                  09760000
//ABNLTERM DD SYSOUT=*                                                  09770000
//ABNLIGNR DD DUMMY                                                     09780000
//SYSDEBUG DD SYSOUT=*                                                  09790000
//SYSUDUMP DD SYSOUT=*                                                  09800000
                                                                        09810000
          +----------------------------------------+                    09820000
          +                                        +                    09830000
          +  Documentation for the STRINGXF macro  +                    09840001
          +                                        +                    09850000
          +       Last update: 30 July 2006        +                    09860001
          +                                        +                    09870001
          +----------------------------------------+                    09880000
                                                                        09890000
  The STRING macro is functionally similar to the COBOL DISPLAY         09900000
  or PL/I PUT EDIT instructions.                                        09910000
                                                                        09920000
  Using STRING, the assembler programmer can concatenate                09930000
  any number of fields, edit each of them if necessary,                 09940000
  and receive the result in the specified work area.                    09950000
                                                                        09960000
  Formats:                                                              09970000
                                                                        09980000
    (1) label  STRING {field_specification1}                            09990000
                      {,field_specification2}...                        10000000
                      ,INTO=workarea|(workarea,length)                  10010000
                      {,PRINT=GEN|NOGEN}                                10020000
                                                                        10030000
    (2) label  STRING GENERATE                                          10040000
                      {,PRINT=GEN|NOGEN}                                10050000
                                                                        10060000
                                                                        10070000
  field_specification                                                   10080000
                                                                        10090000
    Each field to be printed is described as a positional               10100000
    operand.  Each operand specifies the field address, its             10110000
    length, and its formatting requirements.                            10120000
                                                                        10130000
    Four field description formats are supported:                       10140000
                                                                        10150000
      1.   symbol                                                       10160000
      2.   (symbol,length,format)                                       10170000
      3.   (d(r)|(r),length,format)                                     10180000
      4.   ((r),,format)                                                10190000
      5.   'character string'                                           10200000
                                                                        10210000
  Symbol specifies the field address.  It must be an                    10220000
    S-type (relocatable) address.                                       10230000
                                                                        10240000
  d(r) may be used to specify the field address in S/370                10250000
    base-displacement format.  If d is zero, it may be omitted.         10260000
    If d(r) or (r) is used, length must also be specified.  R14         10270000
    and R15 may not be used.  If d(0) is used, it is handled the        10280000
    way the assembler does, i.e. R0 as a base register is assumed       10290000
    to contain zero: 16(0) is equivalent to 16, CVTPTR or, X'10'.       10300000
                                                                        10310000
  ((r),,format) specifies that (r) contains the value                   10320000
    itself, not an address.  R14 and R15 may not be used.               10330000
                                                                        10340000
  'character string' specifies a literal enclosed in single quotes      10350000
    as specified in a DC instruction.  Hex strings or character         10360000
    strings are supported.  The following expressions are equivalent:   10370000
    'ABC' C'ABC' X'C1C2C3'                                              10380000
                                                                        10390000
  Length specifies the length and/or the type of the input field.       10400000
    It may be specified as an integer, a symbol, a register, or a       10410000
    constant.  When used with symbol, it overrides the assembled        10420000
    length and/or type.  Length is required if field is specified       10430000
    as d(r) or (r).  If a zero length is specified, the field is        10440000
    ignored.                                                            10450000
                                                                        10460000
        nn   field length in bytes                                      10470000
        H    half-word                                                  10480000
        F    full-word                                                  10490000
        FL1  1-byte binary integer                                      10500000
        FL3  3-byte binary integer                                      10510000
        P    packed field                                               10520000
        (r)  length of character string (R0 thru R12)                   10530000
        d(r) length of character string (R1 thru R12)                   10540000
                                                                        10550000
  Notes:  If the field address is specified as a symbol that            10560000
          has been defined previously in the program, the symbol        10570000
          type is known and there is no need to specify it.             10580000
                                                                        10590000
          If the length is specified as (r) or d(r) and the value       10600000
          is greater than the address itself, (r) or d(r) is            10610000
          considered to be the end address +1 instead of the length.    10620000
                                                                        10630000
          The length is not specified for packed fields.  The           10640000
          @STRING subroutine scans the field left-to-right until it     10650000
          finds a byte with a valid sign in the low-order 4 bits.       10660000
                                                                        10670000
          If symbol is an arithmetic expression and no length is coded, 10680000
          the implicit length will be that of the first symbol in the   10690000
          expression;  for example, if symbol is coded as PSATOLD-PSA,  10700000
          then the implicit length will be L'PSATOLD.                   10710000
                                                                        10720000
          All numeric items are assumed positive.                       10730000
                                                                        10740000
  format  optionally indicates editing options that must                10750000
          be applied to a field.                                        10760000
                                                                        10770000
      L        left justified                                           10780000
      R        right justified                                          10790000
      nn       output length                                            10800000
      0        adjust length                                            10810000
      Z        leading zeroes                                           10820000
      B        leading/trailing blanks                                  10830000
      T        truncate character string after last non-blank           10840000
      X        display in hexadecimal                                   10850000
      YYMMDD   convert julian date to YYMMDD                            10860000
      YY/MM/DD convert julian date to YY/MM/DD                          10870000
      DD/MM/YY convert julian date to DD/MM/YY                          10880000
      MM/DD/YY convert julian date to MM/DD/YY                          10890000
      YYYYMMDD convert julian date to YYYYMMDD                          10900000
      YYYY-MM-DD convert julian date to YYYY-MM-DD                      10910000
                                                                        10920000
    The default format depends on the field type:                       10930000
                                                                        10940000
        Type                   Default Format                           10950000
                                                                        10960000
        character string             L                                  10970000
        FL1                          R3B                                10980000
        H or FL2                     R5B                                10990000
        other numeric fields         R7B                                11000000
                                                                        11010000
    Note: L0 and T are equivalent for character strings.                11020000
                                                                        11030000
  'character string' is any character string enclosed in                11040000
  single quotes.  Blank spaces may be specified as nnX,                 11050000
  where nn is the number of X'40' bytes you want to be                  11060000
  inserted in the output line.  %TIME may be specified to               11070000
  obtain the current time in hh.mm.ss.hh format.                        11080000
                                                                        11090000
INTO=workarea|(workarea,length)                                         11100000
                                                                        11110000
  INTO indicates the address and length of the output work area         11120000
  into which the result of the concatenation should be placed           11130000
  (left justified).  If the work area is too small, truncation          11140000
  will occur.  If it is too large, it is padded with blanks.            11150000
                                                                        11160000
  The address may be a symbol, d(r) (S-type address) or (r).            11170000
                                                                        11180000
  The length may be specified as an integer, a symbol, a register,      11190000
  or a constant; it is required if the address is coded as d(r) or      11200000
  (r).  If length is not specified for a symbol-type address, the       11210000
  assembled length of the symbol is used.                               11220000
                                                                        11230000
  Upon return from STRING, R15 contains the length actually used        11240000
  in the output work area (before padding).                             11250000
                                                                        11260000
PRINT=GEN|NOGEN                                                         11270000
                                                                        11280000
  This operand allows you to temporarily override the PRINT             11290000
  specification (GEN or NOGEN).                                         11300000
                                                                        11310000
GENERATE (format 2)                                                     11320000
                                                                        11330000
  The GENERATE format must be specified once at the end of the          11340000
  program.  It generates the @STRING sub-routine as well as all         11350000
  the literals specified in previous invocations of the macro.          11360000
                                                                        11370000
  The GENERATE format is specified as follows:                          11380001
                                                                        11390000
         STRING GENERATE                                                11400000
                                                                        11410000
Examples:                                                               11420000
                                                                        11430000
     STRING 'ERROR===>',LINE1,'<=== POS ',((R6),,L0),INTO=WORKAREA      11440000
                                                                        11450000
     STRING 8X,C'ERRORS FOUND: ',(ERRORS,,L0),INTO=((R7),44)            11460000
                                                                        11470000
     STRING 'CVT ADDR IS ',(CVTPTR,4,X),X'40C1C2C3C4',INTO=LINE         11480000
                                                                        11490000
     LA    R5,WORK+16              end addr +1                          11500000
     STRING 'R4=',((R4),,X),INTO=(WORK,(R5)),PRINT=GEN                  11510000
                                                                        11520000
     STRING '//JOBLIB DD DSN=',(DSN1,,T),',DISP=SHR',INTO=((R2),72)     11530000
                                                                        11540000
     PUT   SYSLIN                  PUT Locate                           11550000
     LH    R0,SYSLIN+82            LRECL                                11560000
     STRING '   NAME  ',(4(R3),8,T),'(R)',INTO=((R1),(R0))              11570000
                                                                        11580000
     STRING GENERATE         Generate literals and sub-routine          11590000
                                                                        11600000
                                                                        11610000
Programming Notes:                                                      11620000
                                                                        11630000
  A STRING macro generates only 8 bytes that need to be covered by      11640001
  base registers.  More code is generated at the beginning of the       11650001
  @STRING CSECT, but this code does not require addressability.         11660001
  This is particularly useful when STRING calls specify a large         11670001
  number of literals.                                                   11680001
                                                                        11690000
  Additionally, STRING does not use A-type constants (ACON), but        11700000
  S-type constants (SCON) which require symbols to be addressable       11710000
  at the point in the program where STRING is issued.                   11720000
                                                                        11730000
  While these addressing techniques reduce the number of base           11740000
  registers required to cover the program's code and make it easier     11750000
  to write reentrant programs, they will produce assembly errors in     11760000
  the following situations:                                             11770000
                                                                        11780000
  a.  the CSECT in which STRING is used is longer than 64K              11790001
                                                                        11800000
  b.  symbols are not addressable at the point in the program           11810001
      where STRING is issued                                            11820000
