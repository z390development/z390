         TITLE 'SUPERZAP - Z390 UTILITY TO VER/REP/DUMP ANY FILE'
*********************************************************************
* z390 - Mainframe assembler emulator and run-time engine
* Copyright (C) 2021 z390 Assembler LLC
*
* This file is part of z390.
*
* z390 is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
* z390 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License 
* along with this program; if not, see https://www.gnu.org/licenses.
*********************************************************************
* Author - Don Higgins                                              *
* Date   - 04/07/07                                                 *
* 04/13/07 INITIAL CODING OF SUPERZAP V1,0               
* 07/11/07 RPI 654 REMOVE LOCAL PM, PENTRY, PEXIT AND USE MAC VERSIONS
* 10/01/07 RPI 684 TEST FOR SYSIN DD AND IF NONE, DEFAULT TO CONSOLE.  
* 09/27/08 RPI 909 CORRECT DO WHILE= TO INCLUDE IN (...)               
*********************************************************************
*
*  SUPERZAP - UPDATE OR DUMP SECTIONS OF ANY FILE
*
*  PARM(CON) - EXEC OPTION TO USE WTO/WTOR CONSOLE VS SYSIN/SYSPRINT
*  MEM(MB)   - SET MEM TO MB REQUIRED TO LOAD FILE (DEFAULT IS 1 MB)
*
* COMMANDS FROM CONSOLE OR SYSIN FILE:
*
*   NAME FILE - LOAD FILE IN MEMORY
*     1. FILE - FILE SPEC WITH OR WITHOUT "..."
*     2. IF LOAD IS SUCCESSFUL, SET BASE TO STARTING ADDRESS
*        (SUPPORTS FILES UP TO 2G IF MEMORY AVAILABLE)
*     3. RESET FILE ERROR IF OK
*
*   VER  OFFSET VALUE - VERIFY FILE CONTENT AT OFFSET
*     1.  VALUE IS HEX OR 'TEXT' WITH '' EMBEDDED QUOTES
*     2.  SET FILE ERROR IF NO MATCH OR NO FILE LOADED
*
*   REP  OFFSET VALUE - REPLACE FILE CONTENT AT OFFSET IF NO ERRORS
*
*   DUMP OFFSET LENGTH - DUMP FILE CONTENT IN HEX AND TEXT
*
*   BASE OFFSET - SET BASE ADDRESS TO HEX OFFSET OR *+HEX OR *-HEX
*     1.  OFFSET IS HEX OFFSET FROM START OR FROM CURRENT BASE
*
*   FIND VALUE - FIND NEXT OCCURANCE OF VALUE AND SET BASE
*
*   ASCII  - SET ASCII TEXT MODE
*
*   EBCDIC - SET EBCDIC TEXT MODE (DEFAULT)
*
*   *      - COMMENT
*
*  EXAMPLES:
*
*    1.  D:\WORK\Z390>EXEC UTIL\SUPERZAP\SUPERZAP PARM(CON)  MEM(1)
*        D:\WORK\Z390>NAME UTIL\SUPERZAP\SUPERZAP.390
*        D:\WORK\Z390>FIND 50
*        D:\WORK\Z390>DUMP * 4 DUMP FIRST LOAD ON CONSOLE AND LOG
*
*    2.  D:\WORK\Z390>SET SYSIN=UTIL\SUPERZAP\ZAPDEMO1.ZAP
*        D:\WORK\Z390>SET SYSPRINT=UTIL\SUPERZAP\ZAPDEMO1.RPT
*        D:\WORK\Z390>EXEC UTIL\SUPERZAP\SUPERZAP MEM(1)
*        ZAPDEMO1.ZAP INPUT FILE CONTAINS:
*            * ZAPDEMO1.ZAP DEMO INPUT FILE
*            * TEST CHANGING AAA TO BBB
*            * RUN AGAIN TO SEE FAILED FIND AND VER DUE TO CHANGE
*            NAME UTIL\SUPERZAP\ZAPDEMO1.ZAP
*            ASCII 
*            FIND 'AAA'  
*            VER  * 'AAA'
*            REP  * 'BBB'  CHANGE AAA TEXT IN COMMENT TO BBB
*            DUMP * 3      DUMP CHANGED SECTION OF FILE
*
* REGISTER USAGE
*  R0-R6 WORK
*  R7-R8 EXTENDED BASE REGISTERS
*  R9    START OF FILE CONTENT
*  R10   END OF FILE CONTENT + 1
*  R13   CODE BASE AND SAVE AREA
*  R14-R15 WORK
*********************************************************************
SUPERZAP SUBENTRY BASES=(R13,R7,R8)
         COPY  ASMMSP
         LR    R2,R1
         PM    CMD_INIT
         LA    R2,=CL80'SUPERZAP V1.1 11/11/07 Z390 FILE UTILITY'
         PM    DISPLAY
         PM    GET_CMD
         DO    UNTIL=(CLI,EOF,EQ,TRUE)
               PM   CMD_PROCESS
               PM   GET_CMD
         ENDDO
         PM    CMD_CLOSE
         IF    (CP,TOTAL_ERRORS,NE,=P'0')
               SUBEXIT RC=4
         ELSE 
               SUBEXIT RC=0
         ENDIF
CMD_INIT PENTRY
         L     R1,0(R2)
         IF    (CLC,0(2,R1),NE,=H'0') IF THERE PARM(...)
               MVI CONSOLE,TRUE
               PEXIT
         ENDIF
         GETENV SYSINDD
         IF    (LTR,R15,NE,R15)
               WTO 'SUPERZAP SYSIN NOT FOUND DEFAULTING TO CONSOLE'
               MVI CONSOLE,TRUE
               PEXIT
         ENDIF
         OPEN  (SYSIN,(INPUT),SYSPRINT,(OUTPUT))
         PEXIT

*
* CMD CLOSE - SAVE FILE IF UPDATED AND CLOSE OPEN FILES
*
CMD_CLOSE PENTRY
         LA   R2,=CL80'SUPERZAP ENDING'
         PM   DISPLAY     
         IF   (CLI,FILE_UPDATE,EQ,TRUE)
              PM CMD_UPDATE_FILE
         ENDIF
         IF   (CLI,CONSOLE,NE,TRUE)
              CLOSE (SYSIN,,SYSPRINT)
         ENDIF
         PEXIT
GET_CMD  PENTRY 
         IF    (CLI,EOF,EQ,TRUE)  SET BY END FROM CONSOLE?
               PEXIT
         ENDIF
         IF    (CLI,LOOP,EQ,TRUE)
               IF (CLC,CUR_CMD,LT,NEXT_CMD)
                  L   R1,CUR_CMD
                  MVC CMD,0(R1)
                  AHI R1,80
                  ST  R1,CUR_CMD
                  PEXIT
               ELSE
                  MVI LOOP,FALSE
               ENDIF
         ENDIF
         IF    (CLI,CONSOLE,EQ,TRUE)
               XC   WTORECB,WTORECB
               WTOR 'ENTER SUPERZAP COMMAND OR HELP',CMD,80,WTORECB 
               WAIT ECB=WTORECB
         ELSE 
               GET   SYSIN,CMD
         ENDIF
         IF    (CLC,NEXT_CMD,GT,=A(CMD_LIST))  ARE WE SAVING FIND CMDS
               IF  (CLC,NEXT_CMD,GE,=A(CMD_LIST_END))
                   LA  R2,=CL80'LOOP CMD LIST EXCEEDED'
                   PM  DISPLAY_ERROR
               ELSE
                   L   R1,NEXT_CMD
                   MVC 0(80,R1),CMD
                   AHI R1,80
                   ST  R1,NEXT_CMD
               ENDIF
         ENDIF                  
         PEXIT     
GET_EOF  DS    0H
         MVI   EOF,TRUE
         PEXIT     
CMD_PROCESS  PENTRY
         IF    (CLI,CONSOLE,NE,TRUE)
               LA    R2,CMD
               PM    DISPLAY
         ENDIF
         MVI   PARM_ERROR,FALSE   
         LA    R2,CMD
         PM    FIND_OP
         IF    (CLC,OP(5),EQ,=C'ASCII')   SWITCH TO ASCII TEXT MODE
               PM  CMD_ASCII
         ELSEIF (CLC,OP(6),EQ,=C'EBCDIC') SWITCH TO EBCDIC TEXT (DEF)
               PM  CMD_EBCDIC
         ELSEIF (CLC,OP(4),EQ,=C'NAME')   NAME FILE-SPEC
               PM  CMD_NAME
         ELSEIF (CLC,OP(3),EQ,=C'VER')    VER  HEX-OFFSET VALUE
               PM  CMD_VERIFY
         ELSEIF (CLC,OP(3),EQ,=C'REP')    REP  HEX-OFFSET VALUE
               PM  CMD_REPLACE
         ELSEIF (CLC,OP(4),EQ,=C'DUMP')   DUMP HEX-OFFSET HEX-LENGTH
               PM  CMD_DUMP
         ELSEIF (CLC,OP(4),EQ,=C'FIND')   FIND HEX-LENGTH VALUE
               PM  CMD_FIND
         ELSEIF (CLC,OP(4),EQ,=C'BASE')   BASE HEX-OFFSET
               PM  CMD_BASE
         ELSEIF (CLC,OP(4),EQ,=C'HELP')   HELP 
               PM  CMD_HELP
         ELSEIF (CLC,OP(4),EQ,=C'LOOP')   LOOP 
               PM  CMD_LOOP
         ELSEIF (CLC,OP(3),EQ,=C'END')    END CONSOLE INPUT
               MVI EOF,TRUE
         ELSEIF (CLI,OP,NE,C'*')          * COMMENT ELSE ERROR
               LA  R2,=CL80'UNKNOWN COMMAND'
               PM  DISPLAY_ERROR                      
         ENDIF
         PEXIT
*
* SWITCH TO ASCII MODE
*
CMD_ASCII PENTRY
         MVI  EBCDIC_TEXT,FALSE
         PEXIT
*
* SWITCH TO EBCDIC MODE
*
CMD_EBCDIC PENTRY
         MVI  EBCDIC_TEXT,TRUE
         PEXIT
*
* FIND OPERATON, PLACE IN OP, AND SKIP TO NEXT SPACE
*
FIND_OP  PENTRY
         MVC   OP,=CL8' '
         PM    FIND_CHAR
         LR    R3,R2
         DO    WHILE=((C,R2,LT,=A(CMD+80)),AND,(CLI,0(R2),NE,C' '))
               AHI R2,1
         ENDDO
         LR    R1,R2
         SR    R1,R3
         IF    (C,R1,LE,=F'8'),AND,(C,R1,GT,=F'0')
               AHI R1,-1
               EX  R1,FIND_OP_MVC
         ENDIF
         OC    OP,=CL8' ' FORCE UPPER CASE OPCODE
         PEXIT
FIND_OP_MVC MVC OP(0),0(R3)
*
* FIND NEXT SPACE CHAR IN CMD AT R2
*
FIND_SPACE PENTRY
         DO    WHILE=(CLI,0(R2),NE,C' ')
               AHI  R2,1
         ENDDO
         PEXIT
*
* FIND NEXT NON SPACE CHAR IN CMD AT R2
*
FIND_CHAR PENTRY
         DO    WHILE=(CLI,0(R2),EQ,C' ')
               AHI  R2,1
         ENDDO
         PEXIT
*
* DUMP OFFSET LENGTH
*
CMD_DUMP PENTRY
         IF    (CLI,FILE_LOADED,NE,TRUE)
               LA  R2,=CL80'DUMP SKIPPED DUE TO FILE ERROR'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         PM    FIND_CHAR
         IF    (C,R2,LT,=A(CMD+80))
               PM    GET_OFFSET
               ST    R0,OFFSET
               PM    GET_HEX
               ST    R0,LENGTH
         ELSE
               SR    R0,R0
               ST    R0,OFFSET
               LR    R0,R10
               SR    R0,R9
               ST    R0,LENGTH
         ENDIF
         IF    (CLI,PARM_ERROR,EQ,TRUE)
               LA  R2,=CL80'DUMP SKIPPED DUE TO INVALID PARM'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         L     R2,OFFSET
         LA    R3,0(R2,R9)  R1 = BASE + OFFSET
         L     R4,LENGTH
         PM    DUMP_REQ DUMP MEMORY AT R3 FOR LENGTH R4
         PEXIT
*
* BASE OFFSET OR *-+OFFSET = SET CURRENT BASE AND LOCATION
*
CMD_BASE PENTRY
         IF    (CLI,FILE_LOADED,NE,TRUE)
               LA  R2,=CL80'BASE SKIPPED DUE TO FILE ERROR'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         PM    GET_OFFSET
         ST    R0,BASE
         PEXIT
*
*
*
GET_OFFSET PENTRY
         PM    FIND_CHAR 
         IF    (CLI,0(R2),EQ,C'*')
               IF  (CLI,1(R2),EQ,C'+')
                   AHI  R2,2
                   PM   GET_HEX
                   A    R0,BASE
               ELSEIF (CLI,1(R2),EQ,C'-')
                   AHI  R2,2
                   PM   GET_HEX
                   L    R1,BASE
                   SR   R1,R0
                   LR   R0,R1
               ELSE
                   L    R0,BASE      
               ENDIF
         ELSE
               PM  GET_HEX
         ENDIF
         LR    R1,R9
         AR    R1,R0
         IF    (CR,R1,LT,R9),OR,(CR,R1,GE,R10)
               MVI PARM_ERROR,TRUE
               LA  R2,=CL80'OFFSET OUT OF RANGE'
               PM  DISPLAY_ERROR
         ENDIF   
         ST    R0,OFFSET
         PM    FIND_SPACE
         PEXIT
*
* FIND VALUE - SET BASE TO NEXT OCCURANCE OF VALUE STARTING AT BASE+1
*
CMD_FIND PENTRY
         IF    (CLI,LOOP,NE,TRUE) RESTART SAVING CMDS FOR LOOP
               MVC CMD_LIST,CMD
               MVC NEXT_CMD,=A(CMD_LIST+80)
         ENDIF
         IF    (CLI,FILE_LOADED,NE,TRUE)
               LA  R2,=CL80'FIND SKIPPED DUE TO FILE ERROR'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         PM    GET_VALUE
         L     R2,BASE
         AHI   R2,1
         AR    R2,R9
         DO    WHILE=((CLI,PARM_ERROR,NE,TRUE),AND,                    X
               (CR,R2,GE,R9),AND,(CR,R2,LT,R10))
               L   R1,LVALUE
               LA  R0,0(R1,R2) END OF VALUE + 1
               AHI R1,-1
               IF  (CR,R0,LE,R10),AND,(EX,R1,EQ,FIND_CLC)
                   SR  R2,R9
                   ST  R2,BASE
                   PEXIT
               ELSE
                   AHI R2,1
               ENDIF
         ENDDO
         MVI   VER_ERROR,TRUE
         LA    R2,=CL80'FIND VALUE NOT FOUND'
         PM    DISPLAY_ERROR
         PEXIT
FIND_CLC CLC   0(0,R2),VALUE
*
* HELP - LIST SUPERZAP COMMANDS
*
CMD_HELP PENTRY
  LA   R2,=CL80'SUPERZAP COMMANDS'
  PM   DISPLAY
  LA   R2,=CL80'  ASCII    (SWITCH TO ASCII TEXT)'
  PM   DISPLAY
  LA   R2,=CL80'  BASE OFFSET OR *+OFFSET OR *-OFFSET'
  PM   DISPLAY
  LA   R2,=CL80'  DUMP OFFSET LENGTH (NO OPERANDS DUMPS FILE)'
  PM   DISPLAY
  LA   R2,=CL80'  EBCDIC   (SWITCH TO EBCDIC TEXT)'
  PM   DISPLAY
  LA   R2,=CL80'  END      (END CONSOLE INPUT)'
  PM   DISPLAY
  LA   R2,=CL80'  FIND VALUE (HEX OR ''...'', RESET BASE IF FOUND)'
  PM   DISPLAY
  LA   R2,=CL80'  LOOP (REPEAT FROM LAST SUCCESSFUL FIND IF NO ERRORS)'
  PM   DISPLAY
  LA   R2,=CL80'  NAME FILE (USE "..." FOR SPACEY FILES, RESET BASE)'
  PM   DISPLAY
  LA   R2,=CL80'  REP  OFFSET VALUE (HEX OR ''...'' FOR TEXT)'
  PM   DISPLAY
  LA   R2,=CL80'  VER  OFFSET VALUE (HEX OR ''...'' FOR TEXT)'
  PM   DISPLAY
  PEXIT
*
* LOOP - REPEAT COMMANDS FROM LAST FIND IF NO ERRORS
*
CMD_LOOP PENTRY
         IF    (CLI,FILE_LOADED,EQ,TRUE),AND,                          X
               (CLI,VER_ERROR,NE,TRUE),AND,                            X
               (CLC,NEXT_CMD,GT,=A(CMD_LIST))
               MVI LOOP,TRUE
               MVC CUR_CMD,=A(CMD_LIST)
         ELSE         
               LA  R2,=CL80'LOOP SKIPPED DUE TO ERROR'
               PM  DISPLAY_ERROR
         ENDIF 
         PEXIT
*
* NAME FILE - LOAD FILE INTO MEMORY AND SET BASE AND MAX LENGTH
*
CMD_NAME PENTRY
         IF    (CLI,FILE_LOADED,EQ,TRUE)
               IF (CLI,FILE_UPDATE,EQ,TRUE)
                  PM  CMD_UPDATE_FILE
               ENDIF
               PM CMD_CLOSE
         ENDIF
         MVI   FILE_LOADED,FALSE
         MVI   FILE_UPDATE,FALSE
         PM    FIND_CHAR
         LR    R3,R2
         IF    (CLI,0(R2),EQ,C'"')  LONG SPACEY NAME
               AHI  R2,1
               DO    WHILE=((CLI,0(R2),NE,C'"'),                       X
               AND,(CLI,0(R2),NE,C'*'))
                     AHI  R2,1
               ENDDO
         ELSE
               DO    WHILE=((CLI,0(R2),NE,C' '),                       X
               AND,(CLI,0(R2),NE,C'*'))   RPI 909 MISSING (
                     AHI  R2,1
               ENDDO
         ENDIF
         SR    R2,R3
         AHI   R2,-1
         EX    R2,NAME_MVC
         PM    OPEN_SYSUT1
         IF    (C,R15,EQ,=F'0')
               IF  (CG,R0,GT,=AD(X'7FFFFFFF'))
                   SR  R9,R9
                   SR  R10,R10
                   LA  R2,=CL80'FILE TOO BIG (OVER 2G)'
                   PM  DISPLAY_ERROR
                   PEXIT
               ENDIF
               ST  R0,FILE_SIZE
               L   R1,FILE_SIZE
               GETMAIN RC,LV=(1)
               IF  (C,R15,NE,=F'0')
                   SR  R9,R9
                   SR  R10,R10
                   LA  R2,=CL80'FILE TOO BIG FOR AVAILABLE MEMORY'
                   PM  DISPLAY_ERROR
                   PEXIT
               ENDIF
               LR  R9,R1
               LR  R10,R1
               A   10,FILE_SIZE
               MVC SYSUT1+(DCBLRECLF-IHADCB)(4),FILE_SIZE
               GET SYSUT1,(R9)
               CLOSE (SYSUT1)
               MVI FILE_LOADED,TRUE
         ELSE
               SR  R9,R9
               SR  R10,R10
               LA  R2,=CL80'FILE NOT FOUND'
               PM  DISPLAY_ERROR
         ENDIF
         PEXIT
NAME_MVC MVC   FILE_NAME(0),0(R3) MOVE FILE NAME
*
* OPEN SYSUT1 FOR INPUT ELSE RETURN RC=12
*
OPEN_SYSUT1 PENTRY
         OPEN  (SYSUT1,(INPUT))
         PEXIT
SYSUT1_ERR DS 0H
         LHI   R15,12
         PEXIT
*
* UPDATE FILE                                                        
*
CMD_UPDATE_FILE PENTRY
         PM    OPEN_SYSUT2
         IF    (C,R15,NE,=F'0')
               LA  R2,=CL80'FILE UPDATE OPEN FOR UPDATE FAILED'
               PM  DISPLAY_ERROR
               PEXIT
         ENDIF
         MVC SYSUT2+(DCBLRECLF-IHADCB)(4),FILE_SIZE
         PUT SYSUT2,(R9)
         CLOSE (SYSUT2)
         MVI FILE_LOADED,FALSE
         PEXIT
*
* OPEN SYSUT2 FOR INPUT ELSE RETURN RC=12
*
OPEN_SYSUT2 PENTRY
         OPEN  (SYSUT2,(UPDATE))
         PEXIT
SYSUT2_ERR DS 0H
         LHI   R15,12
         PEXIT
*
* REP OFFSET VALUE
*
CMD_REPLACE PENTRY
         IF    (CLI,FILE_LOADED,NE,TRUE)
               LA  R2,=CL80'REPLACE SKIPPED DUE TO FILE ERROR'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         PM    GET_OFFSET
         PM    GET_VALUE
         IF    (CLI,PARM_ERROR,EQ,TRUE)
               LA  R2,=CL80'REPLACE SKIPPED DUE TO PARM ERROR'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         IF    (CLI,VER_ERROR,EQ,TRUE)
               LA  R2,=CL80'REPLACE SKIPPED DUE TO VERIFY ERROR'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         L     R2,OFFSET
         LA    R3,0(R2,R9)  R1 = START + OFFSET
         L     R4,LVALUE
         AHI   R4,-1
         EX    R4,REP_MVC
         MVI   FILE_UPDATE,TRUE
         PEXIT  
REP_MVC  MVC   0(0,R3),VALUE
*
*  VER OFFSET VALUE
* 
CMD_VERIFY PENTRY
         IF    (CLI,FILE_LOADED,NE,TRUE)
               MVI VER_ERROR,TRUE
               LA  R2,=CL80'VERIFY SKIPPED DUE TO FILE ERROR'
               PM  DISPLAY_ERROR
               PEXIT
         ENDIF
         PM    GET_OFFSET
         PM    GET_VALUE
         IF    (CLI,PARM_ERROR,EQ,TRUE)
               LA  R2,=CL80'VERIFY SKIPPED DUE INVALID PARMS'
               PM  DISPLAY_ERROR                  
               PEXIT
         ENDIF
         L     R2,OFFSET
         LA    R3,0(R2,R9)  R1 = START + OFFSET
         L     R4,LVALUE
         AHI   R4,-1
         IF    (EX,R4,NE,VER_CLC)
               MVC  VER_ERROR,TRUE
               LA   R2,=CL80'VERIFY FAILED'
               PM   DISPLAY_ERROR
               AHI  R4,1
               PM   DUMP_REQ
         ENDIF
         PEXIT
VER_CLC  CLC   0(0,R3),VALUE
*
*  GET HEX VALUE IN R0
*
GET_HEX  PENTRY
         SR    R3,R3
         PM    FIND_CHAR
         DO    WHILE=((CLI,PARM_ERROR,NE,TRUE),AND,                    X
               (CLI,0(R2),NE,C' '))
               MVC HEX_DIGIT,0(R2)
               OI  HEX_DIGIT,C' ' FORCE UPPER CASE
               TR  HEX_DIGIT,HEX_DIGIT_TABLE
               IF  (CLI,HEX_DIGIT,EQ,X'FF')
                   LA R2,=CL80'INVALID HEX DIGIT'
                   PM DISPLAY_ERROR
                   MVI PARM_ERROR,TRUE
                   PEXIT
               ENDIF
               SLL R3,4
               AH  R3,HEX_HWORD
               AHI R2,1
         ENDDO
         LR    R0,R3
         PEXIT
*
* GET VALUE UP TO 256 CHAR HEX OR 'TEXT'
*
GET_VALUE PENTRY
         PM    FIND_CHAR
         IF    (CLI,0(R2),EQ,C'''')
               PM  GET_TEXT_VALUE
         ELSE  
               PM  GET_HEX_VALUE
         ENDIF
         PEXIT
*
* GET TEXT VALUE - STORE TEXT IN VALUE FIELD
*
GET_TEXT_VALUE PENTRY
         AHI   R2,1
         LA    R3,VALUE
         MVI   TEXT_CHAR,TRUE
         DO    WHILE=(CLI,TEXT_CHAR,EQ,TRUE)
               IF  (CLI,0(R2),EQ,C'''')                                   
                   IF (CLI,1(R2),EQ,C'''')
                      MVI  0(R3),C''''
                      AHI  R3,1
                      AHI  R2,2
                   ELSE
                      MVI  TEXT_CHAR,FALSE
                   ENDIF
               ELSEIF (C,R2,GE,=A(CMD+80))
                   LA  R2,=CL80'VALUE TOO LONG'
                   PM  DISPLAY_ERROR
                   MVI PARM_ERROR,TRUE
                   MVI TEXT_CHAR,FALSE
               ELSE
                  MVC  0(1,R3),0(R2)
                  AHI  R3,1
                  AHI  R2,1
               ENDIF
         ENDDO
         S     R3,=A(VALUE)
         ST    R3,LVALUE
         IF    (CLI,EBCDIC_TEXT,NE,TRUE)
               AHI R3,-1
               EX  R3,VALUE_TR
         ENDIF
         PEXIT
VALUE_TR TR    VALUE(0),EBCDIC_TO_ASCII
*
* GET HEX VALUE - STORE UP TO 256 HEX BYTES IN VALUE AND SET LVALUE
*
GET_HEX_VALUE PENTRY
         PM    FIND_CHAR
         LA    R3,VALUE
         DO    WHILE=(CLI,0(R2),NE,C' ')
               IF  (C,R2,GE,=A(CMD+79)))
                   LA  R2,=CL80'HEX VALUE TOO LONG'
                   PM  DISPLAY_ERROR
                   MVI PARM_ERROR,TRUE
                   PEXIT
               ENDIF
               MVC HEX_DIGIT,0(R2)
               TR  HEX_DIGIT,HEX_DIGIT_TABLE
               IF  (CLI,HEX_DIGIT,EQ,X'FF')
                   LA R2,=CL80'INVALID HEX DIGIT'
                   PM DISPLAY_ERROR
                   MVI PARM_ERROR,TRUE
                   PEXIT
               ENDIF
               IC  R0,HEX_DIGIT
               SLL R0,4
               AHI R2,1
               MVC HEX_DIGIT,0(R2)
               TR  HEX_DIGIT,HEX_DIGIT_TABLE
               IF  (CLI,HEX_DIGIT,EQ,X'FF')
                   LA R2,=CL80'INVALID HEX DIGIT'
                   PM DISPLAY_ERROR
                   MVI PARM_ERROR,TRUE
                   PEXIT
               ENDIF
               STC R0,HEX_HWORD
               OC  HEX_DIGIT,HEX_HWORD
               MVC 0(1,R3),HEX_DIGIT
               AHI R3,1
               AHI R2,1
         ENDDO
         S     R3,=A(VALUE)
         ST    R3,LVALUE
         PEXIT
*
* DUMP MEMORY AT R3 FOR R4 VIA DISPLAY
*
DUMP_REQ PENTRY
         MVI   DUMP_FIRST,TRUE
         DO    WHILE=(C,R4,GT,=F'0')
               IF (C,R4,GT,=F'16')
                  LA  R5,16
               ELSE
                  LR  R5,R4
               ENDIF
               SR   R4,R5
               MVC  DUMP_MEM,=XL16'00'
               AHI  R5,-1
               EX   R5,DUMP_MVC_MEM
               AHI  R5,1
               IF   (CLI,DUMP_FIRST,EQ,TRUE),      PRINT FIRST LINE    X
               OR,(CLC,DUMP_MEM,NE,LAST_MEM),      PRINT DIFF  LINE    X
               OR,(C,R4,EQ,=F'0')                  PRINT LAST  LINE
                    IF (CLI,DUMP_SKIP,EQ,TRUE)
                       MVI DUMP_SKIP,FALSE
                       LA  R2,=CL80'........'
                       PM  DISPLAY
                    ENDIF
                    MVI  DUMP_FIRST,FALSE
                    MVC  LAST_MEM,DUMP_MEM
                    LR   R0,R3
                    SR   R0,R9
                    ST   R0,DUMP_HEX
                    UNPK DUMP_ADDR(9),DUMP_HEX(5)
                    TR   DUMP_ADDR,HEX_TAB-240
                    MVI  DUMP_ADDR+8,C' '
                    UNPK DUMP_HEX(9),DUMP_MEM(5)
                    UNPK DUMP_HEX+8(9),DUMP_MEM+4(5)
                    UNPK DUMP_HEX+16(9),DUMP_MEM+8(5)
                    UNPK DUMP_HEX+24(9),DUMP_MEM+12(5)
                    TR   DUMP_HEX,HEX_TAB-240
                    MVI  DUMP_HEX+32,C'*' 
                    IF   (CLI,EBCDIC_TEXT,NE,TRUE)
                         TR  DUMP_MEM,ASCII_TO_EBCDIC
                    ENDIF
                    TR    DUMP_MEM,EBCDIC_PRINT
                    IF    (CHI,R5,LT,16)  BLANK OUT SHORT LINE
                          LA  R2,0(R5,R5)
                          LA  R2,DUMP_HEX(R2)  OFFSET TO END
                          LHI R1,15
                          SR  R1,R5
                          LA  R14,1(R1,R1)     LENGTH OF BLANKS-1
                          EX  R14,DUMP_MVC_HEX_BLANKS
                          LA  R2,DUMP_MEM(R5)
                          EX  R1,DUMP_MVC_TEXT_BLANKS
                    ENDIF
                    LA    R2,DUMP_LINE
                    PM    DISPLAY 
               ELSE
                    MVI   DUMP_SKIP,TRUE
               ENDIF
               AR   R3,R5
         ENDDO
         PEXIT
DUMP_MVC_MEM         MVC  DUMP_MEM(0),0(R3)  MOVE MEM TO DUMP TEXT
DUMP_MVC_HEX_BLANKS  MVC  0(0,R2),=CL32' '   CLEAR HEX  BEYOND END
DUMP_MVC_TEXT_BLANKS MVC 0(0,R2),=CL16' '    CLEAR TEXT BEYOND END
*
* DISPLAY ERROR 80 CHAR AT R2 ON CONSOLE OR SYSPRINT
* 
DISPLAY_ERROR PENTRY
         MVI  VER_ERROR,TRUE      FORCE VERIFY ERROR
         AP   TOTAL_ERRORS,=P'1'
         PM   DISPLAY
         PEXIT 
*
* DISPLAY 80 CHAR AT R2 ON CONSOLE OR SYSPRINT
* 
DISPLAY  PENTRY
         MVC  DISPLAY_TEXT,0(R2)
         WTO MF=(E,DISPLAY_WTO)
         IF    (CLI,CONSOLE,NE,TRUE)
               PUT SYSPRINT,(R2)
         ENDIF
         PEXIT 
SYSIN_ERR DS 0H
         WTO   'I/O ERROR ON SYSIN - ABORTING'
         ABEND 111
SYSPRINT_ERR DS 0H
         WTO   'I/O ERROR ON SYSPRINT - ABORTING'
         ABEND 222
*
* SHARED DATA AREAS
*
SHARED_DATA DS 0D
         LTORG
         EQUREGS
CONSOLE      DC AL1(FALSE) USE WTO/WTOR TO CONSOLE IF PARM(CON)
EOF          DC AL1(FALSE) END OF SYSIN INPUT
EBCDIC_TEXT  DC AL1(TRUE)  EBCDIC TEXT MODE VS ASCII
FILE_LOADED  DC AL1(FALSE) FILE LOADED  IN MEMORY
FILE_UPDATE  DC AL1(FALSE) FILE UPDATED IN MEMORY
FILE_ERROR   DC AL1(TRUE)  FILE ERROR (RESET AT EACH NAME FILE)
PARM_ERROR   DC AL1(FALSE) PARM ERROR ON COMMAND
VER_ERROR    DC AL1(FALSE) VERIFY ERROR
TEXT_CHAR    DC AL1(TRUE)  FIND END OF TEXT
LOOP         DC AL1(FALSE) REPEAT CMDS FROM LAST FIND IF OK
TOTAL_ERRORS DC   PL4'0'
FALSE    EQU   0
TRUE     EQU   1
SYSINDD  DC    C'SYSIN',X'00'
SYSIN    DCB   DSORG=PS,MACRF=GM,RECFM=FT,BLKSIZE=80,                  X
               EODAD=GET_EOF,DDNAME=SYSIN,SYNAD=SYSIN_ERR
SYSPRINT DCB   DSORG=PS,MACRF=PM,RECFM=FT,BLKSIZE=80,                  X
               DDNAME=SYSPRINT,SYNAD=SYSPRINT_ERR
SYSUT1   DCB   DSORG=PS,MACRF=GM,RECFM=F,LRECL=0,BLKSIZE=0,            X
               DSNAME=FILE_NAME,SYNAD=SYSUT1_ERR
SYSUT2   DCB   DSORG=PS,MACRF=RW,RECFM=F,LRECL=0,BLKSIZE=0,            X
               DSNAME=FILE_NAME,SYNAD=SYSUT2_ERR
WTORECB  DC    F'0'
CMD      DC    CL80' ',C'*'
CUR_CMD  DC   A(CMD_LIST)
NEXT_CMD DC   A(CMD_LIST)
OP       DC   CL8' '
LENGTH   DC   A(0)
BASE     DC   A(0)
OFFSET   DC   A(0)
VALUE    DC   XL256'00'
LVALUE   DC   A(0)
DUMP_FIRST DC  AL1(TRUE)   PRINT FIRST LINE OF DUMP
DUMP_SKIP  DC  AL1(FALSE)  SKIP 1 OR MORE DUP LINES BEFORE LAST
DUMP_LINE EQU *
DUMP_ADDR DC  CL8' ',C' *'
DUMP_HEX DC  CL32' ',C'* *'
DUMP_MEM DC  XL16'00',C'*'
         DC  (DUMP_LINE+80-*)C' '
LAST_MEM DC  CL16' '
HEX_TAB  DC  C'0123456789ABCDEF'
HEX_HWORD DC H'0'
HEX_DIGIT EQU HEX_HWORD+1,1
HEX_DIGIT_TABLE DC XL256'FF'
         ORG  HEX_DIGIT_TABLE+C'0'
         DC   X'00010203040506070809'
         ORG  HEX_DIGIT_TABLE+C'A'
         DC   X'0A0B0C0D0E0F'
         ORG
DISPLAY_WTO     DC  AL2(DISPLAY_WTO_END-*,0)
DISPLAY_TEXT    DC  CL80' '
DISPLAY_WTO_END EQU *
FILE_SIZE  DC  F'0'
FILE_NAME  DC  CL256' ',C'"'''
ASCII_TO_EBCDIC EQU * 
           DC X'00010203372D2E2F1605250B0C0D0E0F' 00 ................ 
           DC X'101112003C3D322618193F2722003500' 10 ................ 
           DC X'405A7F7B5B6C507D4D5D5C4E6B604B61' 20  !"#$%&'()*+,-./ 
           DC X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F' 30 0123456789:;<=>? 
           DC X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6' 40 @ABCDEFGHIJKLMNO  
           DC X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D' 50 PQRSTUVWXYZ.\.._  
           DC X'79818283848586878889919293949596' 60 `abcdefghijklmno 
           DC X'979899A2A3A4A5A6A7A8A98B4F9BA107' 70 pqrstuvwxyz.|.~. 
           DC X'00010203372D2E2F1605250B0C0D0E0F' 80 ................  
           DC X'101112003C3D322618193F2722003500' 90 ................ 
           DC X'405A7F7B5B6C507D4D5D5C4E6B604B61' A0  !"#$%&'()*+,-./ 
           DC X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F' B0 0123456789:;<=>? 
           DC X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6' C0 @ABCDEFGHIJKLMNO 
           DC X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D' D0 PQRSTUVWXYZ.\.._ 
           DC X'79818283848586878889919293949596' E0 `abcdefghijklmno 
           DC X'979899A2A3A4A5A6A7A8A98B4F9BA107' F0 pqrstuvwxyz.|.~. 
EBCDIC_TO_ASCII EQU    *
           DC X'000102030009007F0000000B0C0D0E0F' 00 ................ 
           DC X'10111200000008001819000000000000' 10 ................ 
           DC X'00001C00000A171B0000000000050607' 20 ................ 
           DC X'00001600001E0004000000001415001A' 30 ................ 
           DC X'20000000000000000000002E3C282B7C' 40  ...........<(+| 
           DC X'2600000000000000000021242A293B5E' 50 &.........!$*);^ 
           DC X'2D2F0000000000000000002C255F3E3F' 60 -/.........,%_>? 
           DC X'000000000000000000603A2340273D22' 70 .........`:#@'=" 
           DC X'00616263646566676869007B00000000' 80 .abcdefghi.{.... 
           DC X'006A6B6C6D6E6F707172007D00000000' 90 .jklmnopqr.}.... 
           DC X'007E737475767778797A0000005B0000' A0 .~stuvwxyz...[.. 
           DC X'000000000000000000000000005D0000' B0 .............].. 
           DC X'00414243444546474849000000000000' C0 .ABCDEFGHI...... 
           DC X'004A4B4C4D4E4F505152000000000000' D0 .JKLMNOPQR...... 
           DC X'5C00535455565758595A000000000000' E0 \.STUVWXYZ...... 
           DC X'30313233343536373839000000000000' F0 0123456789..
EBCDIC_PRINT EQU *
           DC C'................'   //00
           DC C'................'   //10
           DC C'................'   //20
           DC C'................'   //30
           DC C' ...........<(+|'   //40
           DC C'&&.........!$*);.'  //50 WITH &&
           DC C'-/.........,%_>?'   //60
           DC C'.........`:#@''="'  //70 WITH ''
           DC C'.abcdefghi......'   //80
           DC C'.jklmnopqr......'   //90
           DC C'.~stuvwxyz......'   //A0
           DC C'^.........[]....'   //B0
           DC C'{ABCDEFGHI......'   //C0
           DC C'}JKLMNOPQR......'   //D0
           DC C'\.STUVWXYZ......'   //E0        
           DC C'0123456789......'   //F0
CMD_LIST DC   100CL80' ' SAVE CMDS FOLLOWING FIND FOR LOOP
CMD_LIST_END EQU *
         DCBD
         END                                                
