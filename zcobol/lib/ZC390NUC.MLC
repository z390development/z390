*********************************************************************
* Copyright 2008 Automated Software Tools Corporation               *
* This source code is part of z390 zCOBOL/assembler/emulator package*
* The z390 package is distributed under GNU general public license  *
* Author - Don Higgins                                              *
* Date   - 04/07/08                                                 *
*********************************************************************
* 11/22/08 initial coding for ZC390NUC zcobol runtime routines
* 03/12/09 RPI 1004 add CVTLHTQ and CVTQTLH                      
* 03/12/09 RPI 1004 use CVTQTOLB/CVTLBTQ for Q and CVTLDTP for P 
* 06/18/09 RPI 1042 move z390 version and CICS check to ZC390NUC rtn
* 05/25/10 RPI 1118 set ZCVT_PVTMAXDL max dipslay line from PVT options
* 09/27/11 RPI 1180 round FP to integer for CONVLDTP convert to PD
* 2021-01-02 DSH RPI 2225 CORRECT INCORRECT USE OF BR? TO B?R
*********************************************************************
ZC390NUC CSECT                  
         USING ZC390CVT,R9
         ENTRY CALL          DYNAMIC CALL
         ENTRY CMP64R32      COMPARE G64 NOR64 R0-1=FD1, R2-3=FD2        
         ENTRY CVTLBTQ       CVT LB IN F4-6 TO Q IN R0-1
         ENTRY CVTLDTP       CVT LD IN F4-6 TO PL31 IN R0-1
         ENTRY CVTQTLB       CVT Q IN R0-1 TO LB IN F4-6
         ENTRY DIV64R32      DIVIDE  G64 NOR64 R0-1=N64, R2-3=MAX64      
         ENTRY DIVQ128       DIVIDE  Q128 IN R0-R1 BY Q128 IN R2-R3      
         ENTRY GOBACK        GOBACK
         ENTRY MPYQ128       MULTIPLY Q128 IN R0-R1 BY Q128 IN R2-R3      
         ENTRY OSE64R32      ON SIZE ERR G64 NOR64 R0-1=N64, R2-3=MAX64      
         ENTRY PERFORM       PERFORM
         ENTRY PMCHECK       CHECK FOR PERFORM EXIT AT PG
         ENTRY ROUNDF        ROUND FIXED
         ENTRY STOPRUN       STOP RUN
         ENTRY STACKORG      START OF PERFORM STACK
         ENTRY STACKPTR      CURRENT  PERFORM STACK PTR
         ENTRY STACKEND      END OF   PERFORM STACK
         ENTRY TALPHAX       TEST ALPHABETIC X
         ENTRY TNUMP         TEST NUMERIC PACKED P
         ENTRY TNUMX         TEST NUMERIC CHARACTERS X
         ENTRY TNUMZ         TEST NUMERIC ZONED DECIMAL Z
*
* INIT ZC390NUC - VERIFY ZCOBOL CALLER COMPATIBILITY WITH VER IN R1
*
         USING ZC390NUC,R15
         USING ZC390PVT,R8     ZCOBOL PGM VECTOR TABLE RPI 1042
         MVC   ZCVT_PVTMAXDL,PVTMAXDL SET MAX DISPLAY LINE FROM OPTIONS
         IF    (CLC,PVTVER,NE,ZCVT_VER) VERIFY Z390 COMP/RUN VERSIONS
               LA    R1,ZCVT_ABORT_VERSION  REBUILD ZCOBOL/ZC390LIB
               L     R15,ZCVT_ABORT
               BR    R15
         ELSEIF (CLI,PVTCICS,NE,C'0') IS THIS ZCOBOL EXEC CICS PGM
               IF    (LTR,R11,Z,R11),OR,(CL,R11,EQ,=X'F4F4F4F4')
                     LA    R1,ZCVT_ABORT_CICS CICS R11 DFHEIBLK NOT SET 
                     L     R15,ZCVT_ABORT
                     BR    R15
               ENDIF
         ENDIF
         BR    R14    EXIT OK    
         DROP  R15,R8
*
* GEN CALL - DYNAMICALLY LOAD AND CALL PROGRAM
*
CALL     DS    0H
         BASR  R2,0
         USING *,R2
         LR    R3,R0   R3=A(PGMNAME)
         ST    R1,CALLPARM
         ST    R14,CALLRTN
         LOAD  EPLOC=(R3)
         IF    (LTR,R15,NZ,R15)
               LA  R1,ZCVT_ABORT_CALL
               L   R15,ZCVT_ABORT
               BR  R15
         ENDIF
         LR    R15,R0       SET CALLED PROGRAM ENTRY
         L     R1,CALLPARM  SET CALLED PROGRAM PARM LIST
         L     R14,CALLRTN  SET RETURN
         BR    R15
         DROP  R2
CALLPARM DS    A
CALLRTN  DS    A
*
* GEN CMP64R32 COMPARE 64 BIT FLD IN R0-R1 WITH FLD IN R2-R3
*
CMP64R32 DS    0H
         USING *,R15
         CR    R0,R2              COMPARE ARIM FIRST HALF
         BNER  R14                EXIT WITH CC IF NOT EQUAL
         CLR   R1,R3              COMPARE LOGICAL 2ND HALF
         BER   R14                EXIT CC0 IF EQUAL
         BH    CMP64R32_H         BRANCH IF 2ND HALF LOG HIGH
CMP64R32_L DS  0H                               
         LTR   R0,R0              ARE BOTH NEG
         BMR   R14                YES, EXIT WITH CC LOW 
         CLR   R3,R1              FORCE CC HIGH
         BR    R14
CMP64R32_H DS  0H
         LTR   R0,R0              ARE BOTH POS
         BPR   R14                YES, EXIT WITH CC HIGH
         CLR   R3,R1              FORCE CC LOW
         BR    R14
         DROP  R15
*
* CVTLBTQ - CONVERT LB IN F0-F2 TO Q IN R0-R1
*
CVTLBTQ  DS    0H
         USING *,R15
         STMG  R2,R3,ZCSAVE
         STD   F0,ZCWORK
         STD   F2,ZCWORK+8
         LMG   R0,R1,ZCWORK
         IF    (CLC,ZCWORK(16),EQ,ZCVT_ZERO) IS THIS ZERO
               BR  14  YES RETURN WITH R0-R1 ZERO
         ENDIF
         LGR   R2,R0           
         SRLG  R2,R2,48
         NILL  R2,X'7FFF'            R3    = BIASED EXPONENT
         IIHH  R0,1                  R0-R1 = MANTISSA WITH 1 BIT
         IF    (AHI,R2,NM,-16383) REMOVE BIAS AND TEST IF ANY INT BITS
               IF   (CHI,R2,GE,112)  IS THIS SHIFT LEFT
*
*                   SHIFT LEFT WITH POSSIBLE OVERFLOW
*
                    AHI  R2,-112
                    SLAG R0,R0,0(R2) SHIFT HIGH HALF POSS OVF ERR
                    RLLG R1,R1,0(R2) ROTATE LOW HALF LEFT
                    LGFI R3,-1       R3=ALL 1'S
                    SLLG R2,R3,0(R2) R2=1'S FOR REMAINING R1 BITS
                    XGR  R3,R2       R3=1'S FOR BITS GOING TO R0
                    NGR  R3,R1       R3=JUST BITS GOING TO R0
                    OGR  R0,R3       OR BITS FROM LOWER HALF 
                    NGR  R1,R2       CLEAR BITS SHIFTED OUT OF R1
               ELSE
*
*                   SHIFT RIGHT 
*
                    LA   R3,112
                    SR   R3,R2
                    IF   (CHI,R3,GE,64) ARE ALL BITS IN HIGH HALF
                         LGR R1,R0
                         SGR R0,R0
                         AHI R3,-64
                         SRLG R1,R1,0(R3) SHIFT RIGHT                     
                    ELSE
                         SRLG R1,R1,0(R3) SHIFT LOW HALF BITS RIGHT   
                         LA   R2,64
                         SR   R2,R3 
                         RLLG R0,R0,0(R2) ROTATE HIGH BITS HALF RIGHT 
                         LGFI R2,-1       R2=ALL 1'S
                         SRLG R3,R2,0(R3) R3=1'S FOR REMAINING R0 BITS
                         XGR  R2,R3       R2=1'S FOR BITS GOING TO R1
                         NGR  R2,R0       R2=JUST BITS GOING TO R1
                         OGR  R1,R2       OR BITS FROM LOWER HALF 
                         NGR  R0,R3       CLEAR BITS SHIFTED OUT OF R1
                    ENDIF
               ENDIF
               IF   (TM,ZCWORK,O,X'80') IS RESULT NEG
                    LGFI  R2,-1
                    XGR   R0,R2
                    XGR   R1,R2
                    ALGFI R1,1
                    ALCG  R0,ZCVT_ZERO
               ENDIF
         ELSE
               SGR  R0,R0  RETURN ZERO FOR FRACTIONAL LH
               SGR  R1,R1
         ENDIF
         LMG   R2,R3,ZCSAVE
         BR    R14
         DROP  R15
*
* CVTLDTP - CONVERT LD IN F0-F2 TO PL31 IN R0-R1
*
CVTLDTP  DS    0H
         USING *,R15
         STMG  R2,R3,ZCSAVE
         FIXTR F0,0,F0,0  ROUND TO INTEGER  RPI 1180
         EEXTR R2,F0      EXTRACT LD BIAS EXPONENT
         IF    (AGFI,R2,NM,-6176)   REMOVE BIAS AND CHECK IF POS
               SLXT  F0,F0,0(R2)      SHIFT SIG DIGITS LEFT
         ELSE
               LCR   R2,R2
               SRXT  F0,F0,0(R2)      SHIFT SIG DIGITS RIGHT
         ENDIF
         CSXTR R0,F0,0
         LMG   R2,R3,ZCSAVE
         BR    R14
         DROP  R15
*
* CVTQTLB - CONVERT Q IN R0-R1 TO LB IN F4-F6
*
CVTQTLB  DS    0H
         USING *,R15
         STMG  R2,R4,ZCSAVE
         IF    (LTGR,R0,M,R0)      COMPLIMENT IF NEGATIVE
               XG   R0,=FL8'-1'
               XG   R1,=FL8'-1'
               ALGFI  R1,1
               ALCG   R0,ZCVT_ZERO
               BAS  R2,CVTLB_NORM  MORMAIZE AND SET BIAS EXP
               OIHH R0,X'8000'     SET SIGN BIT
         ELSEIF 
               BAS  R2,CVTLB_NORM  MORMAIZE AND SET BIAS EXP
         ENDIF
         STMG  R0,R1,ZCWORK
         LD    F4,ZCWORK
         LD    F6,ZCWORK+8
         LMG   R2,R4,ZCSAVE
         BR    R14
CVTLB_NORM DS  0H
         IF    (CLGFI,R0,EQ,0),AND,(CLGFI,R1,EQ,0)
               BR    R2   EXIT WITH ZERO IF ZERO
         ENDIF
         LHI   R3,16383+112           INIT BIAS EXPONENT FOR INT128
         DO    WHILE=(TMHH,R0,NZ,X'FFFE')  NEED TO SHIFT RIGHT? 
               SRLG  R1,R1,1          SHIFT RIGHT LOW 64 BY 1
               IF    (TMLL,R0,NZ,1)   IS LOW BIT ON IN HIGH 64
                     OIHH R1,X'8000'  YES MOVE IT TO LOW 64
               ENDIF
               SRLG  R0,R0,1          SHIFT RIGHT HIGH 64
               AHI   R3,1             DEC EXP
         ENDDO
         DO    WHILE=(TMHH,R0,Z,1)  NEED TO SHIFT LEFT   
         DO    WHILE=(TMHL,R0,Z,X'FFFF')  SHITF 16 IF POSSIBLE
               SLLG  R0,R0,16
                     RISBG R0,R1,48,63,16
                     SLLG  R1,R1,16     
                     AHI  R3,-16    
               ENDDO
               SLLG  R0,R0,1
               RISBG R0,R1,63,63,1
               SLLG  R1,R1,1         
               AHI   R3,-1                INCR EXP
         ENDDO
         SLLG  R3,R3,48  MOVE BIAS EXPONENT TO HH
         NIHH  R0,0      CLEAR THE ASSUMED LEADING BIT
         OGR   R0,R3     REPLACE WITH LD BIAS EXPONENT
         BR    R2
         DROP  R15
*
* DIV64N32 DIVIDE N64 IN R0-R1 BY MAX64 IN R2-R3 GIVING REMAINDER R0-R1
* (USE DXR TO AVOID USE OF H32 GPRS)
*
DIV64R32 DS    0H
         USING *,R15
         STG   R12,ZCSAVE
         STCM  R0,8,SIGN         SAVE HIGH BYTE WITH N64 SIGN
         BAS   R12,DIV64R32_LCR  COMPLIMENT IF NEGATIVE
         STM   R0,R1,ZCWORK+1
         MVI   ZCWORK,X'50'   EXP = X'40' + 16 NIBBLES
         MVI   ZCWORK+8,X'42' EXP = X'40' + 16 - 14 NIBBLES
         STC   R1,ZCWORK+9    LOW BYTE IN 2ND HALF
         XC    ZCWORK+10(6),ZCWORK+10 CLEAR LAST 6
         LD    F0,ZCWORK
         LD    F2,ZCWORK+8
         STM   R2,R3,ZCWORK+1
         MVI   ZCWORK,X'50'   EXCESS X'40' + 16 NIBBLES FOR FL8
         MVI   ZCWORK+8,X'42' + 14 NIBBLES FOR 2ND HALF
         STC   R3,ZCWORK+9    LOW BYTE IN 2ND HALF
         LD    F1,ZCWORK
         LD    F3,ZCWORK+8
         DXR   F0,F1                 F0-2 = N64/MAX64
         FIXR  F4,R0                 F4-6 = INTEGER
         SXR   F0,F4                 F0-2 = FRACTION OF MAX64
         MXR   F0,F1                 F0-2 = MOD(MAX64,N64)
         LD    F4,=X'5110000000000000'  FORCE EXP 51 AND ROUND TO INT
         LD    F6,=X'4300080000000000'
         AXR   F0,F4                 F0-2 = MOD(MAX64,N64) SET EXP+RND     
         STD   F0,ZCWORK      STORE HFP RESULT LT WITH EXP X'51'
         STD   F2,ZCWORK+8
         LM    R0,R2,ZCWORK   LOAD R0-R2 WITH 12 BYTES OF RESULT
         SLDL  R0,12                 ALIGN FIRST 13 NIBBLES N64 FROM F0
         SRL   R2,12                 ALIGN LAST 3 NIBBLES FROM F2
         N     R2,=X'00000FFF'
         OR    R1,R2                 OR 16 NIBLES TO FORM N64 RESULT
         BAS   R12,DIV64R32_LCR
         LG    R12,ZCSAVE
         BR    R14
DIV64R32_LCR DS 0H             COMP R0-R1 IF SIGN NEG
         TM    SIGN,X'80'
         BZR   R12
         X     R0,=F'-1'
         X     R1,=F'-1'
         ALFI  R1,1
         ALC   R0,ZCVT_ZERO
         BR    R12
SIGN     DS    X        HIGH BYTE OF R0 WITH SIGN BIT
         DROP  R15
*
* DIVQ128 DIVIDE Q128 IN R0-R1 BY Q128 IN R2-R3 > REM=R0-R1,QUO=R2-R3            
*
* NOTES:
*  1.  CURRENT RESTRICTION DIVIOR 0 OR > 2**63 CAUSES 0C4
*
DIVQ128  DS 0H
         USING *,R15
         STMG  R4,R6,ZCSAVE
         LGFI  R4,-1
         IF    (TMHH,R0,O,X'8000')    IS DIVIDEND NEG
               MVI DIVQ_REM_NEG,TRUE     YES, REMAINDER NEG
               XGR  R0,R4                YES, COMPLIMENT DIVIDEND
               XGR  R1,R4
               ALGFI R1,1
               ALCG  R0,ZCVT_ZERO
               IF (TMHH,R2,O,X'8000')  IS DIVISOR NEG
                  XGR  R2,R4              YES, COMPLIMENT DIVSOR
                  XGR  R3,R4
                  ALGFI R3,1
                  ALCG  R2,ZCVT_ZERO
                  MVI DIVQ_QUO_NEG,FALSE  BOTH  NEG   > +QUO
               ELSE
                  MVI DIVQ_QUO_NEG,TRUE   MIXED DD/DR > -QUO
               ENDIF
         ELSE
               MVI DIVQ_REM_NEG,FALSE  ELSE +DD > +REM
               IF (TMHH,R2,O,X'8000')  IS DIVISOR NEG AND DD POS
                  MVI DIVQ_QUO_NEG,TRUE   THEN QUO MUST BE NEG
                  XGR  R2,R4              COMPLIENT DIVISOR
                  XGR  R3,R4
                  ALGFI R3,1
                  ALCG  R2,ZCVT_ZERO
               ELSE
                  MVI DIVQ_QUO_NEG,FALSE  BOTH POS > QUO POS
               ENDIF
         ENDIF  
         IF    (LTGR,R2,Z,R2)
               IF    (LTGR,R3,Z,R3)
                     LA    R1,ZCVT_ABORT_DIVQ  DIVSOR 0 
                     L     R15,ZCVT_ABORT
                     BR    R15
               ENDIF
               IF    (CLGR,R3,GT,R0)
*
* USE SINGLE DLGR WHEN DIVISOR < 64 BITS AND > HIGH 64 DIVIDEND                              
*
                     DLGR  R0,R3  R0 = REM, R1 = QUOTIENT
                     LGR   R3,R1
                     SGR   R2,R2  R2-R3 = QUOTIENT
                     LGR   R1,R0
                     SGR   R0,R0  R0-R1 = REMAINDER
               ELSE
*
* USE 2 DLGR FOR DIVISOR < HIGH 64 DIVIDEND
*
                     STMG R0,R3,ZCWORK  SAVE DIVIDEND & DIVISOR
                     LGR   R1,R0
                     SGR   R0,R0
                     DLGR  R0,R3  R0 = REM, R1 = QUOTIENT
                     LGR   R2,R1  R2 = HIGH QUOTIENT
                     LG    R1,ZCWORK+8 RELOAD LOW DIVIDEND
                     DLGR  R0,R3  R0 = REM, R1 = QUOTIENT
                     LGR   R3,R0  R3 = LOW QUOTIENT
                     LGR   R3,R1
                     LGR   R1,R0
                     SGR   R0,R0  R0-R1 = REMAINDER
               ENDIF
         ELSE
*
* CALC FIRST EST FOR DIVISOR > 64 AND CHECK IF HIGH BY 1
*             
               STMG R0,R3,ZCWORK  SAVE Q DIVIDEND AND DIVISOR
               LGR  R1,R0
               DSGR R0,R2  
               LGR  R3,R1             
               SGR  R2,R2                    R2-R3 = TRIAL QUOTIENT
               BAS  R6,DIVQ_CALC_REM         R0-R1 = REM, R2-R3 = QUO
               IF   (LTGR,R0,M,R0)  
*
* REDUCE QUOTIENT BY 1 IF REMAINDER NEG
*
                    SRLG  R1,R1,1          SHIFT RIGHT LOW 64 BY 1
                    IF    (TMLL,R0,NZ,1)   IS LOW BIT ON IN HIGH 64
                          OIHH R1,X'8000'  YES MOVE IT TO LOW 64
                    ENDIF
                    SRAG  R0,R0,1          SHIFT RIGHT HIGH 64
                    ALGR  R3,R1
                    ALCGR R2,R0
                    BAS  R6,DIVQ_CALC_REM R0-R1 = REM, R2-R3 = QUO
               ENDIF
         ENDIF
         IF    (CLI,DIVQ_REM_NEG,EQ,TRUE)  IS REMAINDER NEG
               LGFI  R4,-1                    YES, COMPLIMENT
               XGR  R0,R4
               XGR  R1,R4
               ALGFI R1,1
               ALCG  R0,ZCVT_ZERO
         ENDIF
         IF    (CLI,DIVQ_QUO_NEG,EQ,TRUE) IS QUOTIENT NEG
               LGFI  R4,-1                    YES, COMPLIMENT
               XGR  R2,R4
               XGR  R3,R4
               ALGFI R3,1
               ALCG  R2,ZCVT_ZERO
         ENDIF
         LMG   R4,R6,ZCSAVE
         BR    R14
*
* CALC REMAINDER IN R0-R1 FOR TRIAL QUOTIENT IN R2-R3
*   1.  USERS DIVIDEND AND DIVISOR IN WORKAREA
*   2,  USES  R6 LINK
*
DIVQ_CALC_REM DS 0H
         STMG R2,R3,DIVQ_TRIAL
         LMG  R0,R1,ZCWORK+16  R2-R3 = DIVISOR
         STM  R14,R15,DIVQ_SAVE
         L    R15,ZCVT_MPYQ128
         BASR R14,R15                 R0-R1 = QUO * DIVR
         BASR R14,0
         USING *,R14
         LM   R14,R15,DIVQ_SAVE
         DROP R14
         LMG   R2,R3,ZCWORK    R2-R3 = DIVIDEND
         SLGR  R3,R1
         SLBGR R2,R0                  R2-R3 = REMAINDER
         LGR   R0,R2
         LGR   R1,R3
         LMG   R2,R3,DIVQ_TRIAL
         BR    R6
         DROP  R15
DIVQ_REM_NEG DC    AL1(FALSE) REMAINDER NEGATIVE
DIVQ_QUO_NEG DC    AL1(FALSE) QUOTIENT  NEGATIVE
DIVQ_SAVE    DC    2F'0'      SAVE R14-R15 ACROSS MPYQ128
DIVQ_TRIAL   DC    XL16'00'   SAVE TRIAL DIVISOR 
*
* GEN GOBACK AND STOP RUN FOR FALL THROUGH LAST PARAGRAPH.
*
GOBACK   DS 0H
STOPRUN  DS 0H
         USING *,R15
         L     R13,4(R13)
         L     R14,12(R13)
         LR    R15,R1            
         LM    2,12,28(R13)
         BR    R14
         DROP  R15
*
* MPYQ128 MULTIPLY Q128 IN R0-R1 BY Q128 INR2-R3             
*
MPYQ128  DS 0H
         USING *,R15
         STMG  R4,R7,ZCSAVE
         LGFI  R4,-1
         IF    (TMHH,R0,O,X'8000')
               XGR  R0,R4
               XGR  R1,R4
               ALGFI R1,1
               ALCG  R0,ZCVT_ZERO
               IF (TMHH,R2,O,X'8000')
                  XGR  R2,R4
                  XGR  R3,R4
                  ALGFI R3,1
                  ALCG  R2,ZCVT_ZERO
                  MVI MPYQ_NEG,FALSE
               ELSE
                  MVI MPYQ_NEG,TRUE
               ENDIF
         ELSE
               IF (TMHH,R2,O,X'8000')
                  XGR  R2,R4
                  XGR  R3,R4
                  ALGFI R3,1
                  ALCG  R2,ZCVT_ZERO
                  MVI MPYQ_NEG,TRUE
               ELSE
                  MVI MPYQ_NEG,FALSE
               ENDIF
         ENDIF  
         LGR   R4,R0         R4-R5 = R0-R1
         LGR   R5,R1
         MLGR  R0,R3         R0-R1 = R1 * R3
         LGR   R7,R4
         MLGR  R6,R3         R6-R7 = R0 * R3
         ALGR  R0,R7         R0-R1 = Q128 = + R0 * R3 * 2**64
         LGR   R7,R5
         MLGR  R6,R2         R6-R7 = R1 * R2
         ALGR  R0,R7         R0-R1 = Q128 = + R1 * R2 * 2**64
         IF    (CLI,MPYQ_NEG,EQ,TRUE)
               LGFI  R4,-1
               XGR  R0,R4
               XGR  R1,R4
               ALGFI R1,1
               ALCG  R0,ZCVT_ZERO
         ENDIF
         LMG   R4,R7,ZCSAVE
         BR    R14
         DROP  R15
MPYQ_NEG DC    AL1(FALSE)
*
* ON SIZE ERROR 64 BIT USING ONLY 32 BIT REGS 
*    R0-R1 = A(TARGET 64 BIT)
*    R2-R3 = A(MAXDIG 64 BIT)
*
OSE64R32 DS    0H
         USING *,R15
         STMG  R14,R12,ZCSAVE
         BALR  R12,0
         USING *,R12
         DROP  R15
         BO    OSE64R32_EXIT   EXIT IF OVERFLOW FROM ADD
         LR    R4,R0           R4-R5 = TARGET
         LR    R5,R1  
         TMHH  R4,X'8000'
         JNM   OSE64R32_CR
         LHI   R6,-1
         LHI   R7,-1           COMPLIMENT TARGET IF NEG.
         XR    R4,R6
         XR    R5,R7
         ALFI  R5,1
         ALC   R4,ZCVT_ZERO
OSE64R32_CR DS    0H            COMPARE POS N64 WITH MAX64
         CR    R4,R2
         BL    OSE64R32_EXIT    EXIT WITHOUT CC3 IF N64 < MAX64
         BH    OSE64R32_CC3     SET CC3 IF HIGH
         CLR   R5,R3
         BL    OSE64R32_EXIT
OSE64R32_CC3 DS 0H
         TM    *,X'91'          SET CC3 ALL SEL BITS 1 FOR N64 >= MAX64
OSE64R32_EXIT DS 0H
         LMG   R14,R12,ZCSAVE
         BR    R14
*
* GEN PERFORM
*
PERFORM  DS 0H
         USING *,R15
         LM    R2,R3,STACKPTR         R2=CUR STACK ENTRY,R3=END STACK   
         USING PM_STACK_ENTRY,R2
         AHI   R2,PM_STACK_ENTRY_LEN  INC TO NEXT PERFORM STACK ENTRY
         IF    (CLR,R2,NL,R3)
               LA  R1,ZCVT_ABORT_STACK
               L   R15,ZCVT_ABORT
               BR  R15
         ENDIF
         ST    R2,STACKPTR            UPDATE STACK PTR
         OILH  R0,X'8000'             TURN ON AMODE31 IN PG_EXIT+6 ADDR
         STM   R0,R1,PM_STACK_ENTRY   STORE PG_EXIT+6 AND RETURN ADDRS
         LR    R15,R14
         DROP  R15
         BR    R15                    BRANCH TO STARTING PARAGRAPH
*
* GEN END PERFORM CHECK ENTERED VIA BAL R14,END_PERFORM_CHECK
*
PMCHECK  DS 0H
         USING *,R15
         L     R2,STACKPTR
         USING PM_STACK_ENTRY,R2
         CL    R14,PM_STACK_PGEND6  DOES THIS PMCHECK MATCH ENDING PG
         BNER  R14          NO, EXIT TO NEXT SEQ. INSTRUCTION  
         L     R14,PM_STACK_RETURN YES, SET R14 TO PERFORM EXIT ADDRESS
         AHI   R2,-PM_STACK_ENTRY_LEN REMOVE PERFORM ENTRY FROM STACK
         ST    R2,STACKPTR
         BR    R14        EXIT FROM PERFORM
         DROP  R15
         DC    0D,CL8'**STACK*'
MAX_PM   EQU   20  MAXIMUM NESTED PERFORMS
STACK_ENTRY_LEN EQU 8 A(PG-EXIT+6,RETURN)
STACKPTR DC    A(STACKORG,STACKEND)  CUR STACK PTR AND STACK END ADDRS
STACKORG DS    0D
         DC    (MAX_PM)XL(STACK_ENTRY_LEN)'00' STACK ENTRIES
STACKEND EQU *
*
* GEN ZC_RND_F ROUND R0=REMAINDER,R1=QUOTIENT,R2=DIVISOR
*
ROUNDF   DS 0H
         USING *,R15
         LTR   R3,R0   MOVE REMAINDER TO WORK
         BRM   RND_F_NR
         SLA   R3,1    DOUBLE POS REMAINDER
         LTR   R2,R2
         BRM   RND_F_PR_ND
RND_F_PR_PD DS 0H
         CR    R3,R2   IS REMAINDER GE HALF OF DIVISOR
         BLR   R14     NO, EXIT RPI 2225
         AHI   R1,1    ADD 1 TO QUOTIENT (MUST BE POS TOO)
         SR    R0,R2   SUB DIVIDOR FROM REMAINDER
         BR    R14     EXIT RPI 2225
RND_F_PR_ND DS 0H
         CR    R3,R2   IS REMAINDER GE HALF OF DIVISOR
         BLR   R14     NO, EXIT RPI 2225
         AHI   R1,1    ADD 1 TO QUOTIENT (MUST BE POS TOO)
         AR    R0,R2   ADD DIVIDOR TO REMAINDER
         BR    R14     EXIT RPI 2225
RND_F_NR DS 0H
         SLA   R3,1    DOUBLE NEG REMAINDER
         LTR   R2,R2   IS DIVISOR POS
         BRM   RND_F_NR_ND
RND_F_NR_PD DS 0F
         LCR   R3,R3   GET POS 2*REMAINDER
         CR    R3,R2   IS REMAINDER GE HALF OF DIVISOR
         BLR   R14     NO, EXIT RPI 2225
         AHI   R1,1    ADD 1 TO QUOTIENT (MUST BE MEG TOO)
         SR    R0,R2   SUB DIVIDOR FROM REMAINDER
         BR    R14     EXIT
RND_F_NR_ND DS 0H
         CR    R3,R2   IS REMAINDER LE HALF OF DIVISOR
         BHR   R14     NO, EXIT RPI 2225
         AHI   R1,-1   SUB 1 FROM QUOTIENT (MUST BE NEG TOO)
         AR    R0,R2   ADD DIVIDOR TO REMAINDER
         BR    R14     EXIT RPI 2225
         DROP  R15
*
* TEST ALPHABETIC X   R1=A(FIELD) R2=LENGTH
*
TALPHAX  DS    0H
         USING *,R15
         BCTR  R2,0
         EX    R2,TRTALPHA
         BR    R14
TRTALPHA TRT   0(0,R1),TABALPHA
         DROP
TABALPHA DC    256X'FF'  
         ORG   TABALPHA+C'A'
         DC    9X'00'          A-I                  
         ORG   TABALPHA+C'J'
         DC    9X'00'          J-R                  
         ORG   TABALPHA+C'S'
         DC    8X'00'          S-Z                  
         ORG   TABALPHA+C'a'
         DC    9X'00'          a-i                  
         ORG   TABALPHA+C'j'
         DC    9X'00'          j-r                  
         ORG   TABALPHA+C's'
         DC    8X'00'          s-z
         ORG                  
*
* TEST NUMERIC PACKED   R1=A(FIELD) R2=LENGTH
*
TNUMP    DS    0H
         USING *,R15
         BCT   R2,TRTPN
         TRT   0(1,R1),TABNUMPS  TEST SINGLE BYTE FIELD
         BR    R14
TRTPN    DS    0H
         LA    R3,0(R1,R2)
         TRT   0(1,R3),TABNUMPS  TEST LOW DIGIT AND SIGN FIRST
         BNZR  R14
         BCTR  R2,0
         EX    R2,TRTNUMP
         BR    R14
TRTNUMP  TRT   0(0,R1),TABNUMP
         DROP
*                         A B C D E F
TABNUMPS DC    10X'FF',X'FFFF0000FF00' 00-0F
         DC    10X'FF',X'FFFF0000FF00' 10-1F
         DC    10X'FF',X'FFFF0000FF00' 20-2F
         DC    10X'FF',X'FFFF0000FF00' 30-3F
         DC    10X'FF',X'FFFF0000FF00' 40-4F
         DC    10X'FF',X'FFFF0000FF00' 50-5F
         DC    10X'FF',X'FFFF0000FF00' 60-6F
         DC    10X'FF',X'FFFF0000FF00' 70-7F
         DC    10X'FF',X'FFFF0000FF00' 80-8F
         DC    10X'FF',X'FFFF0000FF00' 90-9F
         DC    10X'FF',X'FFFFFFFFFFFF' A0-AF
         DC    10X'FF',X'FFFFFFFFFFFF' B0-BF
         DC    10X'FF',X'FFFFFFFFFFFF' C0-CF
         DC    10X'FF',X'FFFFFFFFFFFF' D0-DF
         DC    10X'FF',X'FFFFFFFFFFFF' E0-EF
         DC    10X'FF',X'FFFFFFFFFFFF' F0-FF
TABNUMP  DC    10X'00',X'FFFFFFFFFFFF' 00-0F
         DC    10X'00',X'FFFFFFFFFFFF' 10-1F
         DC    10X'00',X'FFFFFFFFFFFF' 20-2F
         DC    10X'00',X'FFFFFFFFFFFF' 30-3F
         DC    10X'00',X'FFFFFFFFFFFF' 40-4F
         DC    10X'00',X'FFFFFFFFFFFF' 50-5F
         DC    10X'00',X'FFFFFFFFFFFF' 60-6F
         DC    10X'00',X'FFFFFFFFFFFF' 70-7F
         DC    10X'00',X'FFFFFFFFFFFF' 80-8F
         DC    10X'00',X'FFFFFFFFFFFF' 90-9F
         DC    10X'FF',X'FFFFFFFFFFFF' A0-AF
         DC    10X'FF',X'FFFFFFFFFFFF' B0-BF
         DC    10X'FF',X'FFFFFFFFFFFF' C0-CF
         DC    10X'FF',X'FFFFFFFFFFFF' D0-DF
         DC    10X'FF',X'FFFFFFFFFFFF' E0-EF
         DC    10X'FF',X'FFFFFFFFFFFF' F0-FF
*
* TEST NUMERIC CHARACTERS   R1=A(FIELD) R2=LENGTH
*
TNUMX    DS    0H
         USING *,R15
         BCTR  R2,0    
         EX    R2,TRTNUMX 
         BR    R14
TRTNUMX  TRT   0(0,R1),TABNUMZ
         DROP
*
* TEST NUMERIC ZONED   R1=A(FIELD) R2=LENGTH
*
TNUMZ    DS    0H
         USING *,R15
         BCT   R2,TRTZN
         TRT   0(1,R1),TABNUMZS  TEST SINGLE BYTE FIELD
         BR    R14
TRTZN    DS    0H
         LA    R3,0(R1,R2)
         TRT   0(1,R3),TABNUMZS  TEST LOW DIGIT AND SIGN FIRST
         BNZR  R14
         BCTR  R2,0
         EX    R2,TRTNUMZ
         BR    R14
TRTNUMZ  TRT   0(0,R1),TABNUMZ
         DROP
*                         A B C D E F
TABNUMZS DC    10X'FF',X'FFFFFFFFFFFF' 00-0F
         DC    10X'FF',X'FFFFFFFFFFFF' 10-1F
         DC    10X'FF',X'FFFFFFFFFFFF' 20-2F
         DC    10X'FF',X'FFFFFFFFFFFF' 30-3F
         DC    10X'FF',X'FFFFFFFFFFFF' 40-4F
         DC    10X'FF',X'FFFFFFFFFFFF' 50-5F
         DC    10X'FF',X'FFFFFFFFFFFF' 60-6F
         DC    10X'FF',X'FFFFFFFFFFFF' 70-7F
         DC    10X'FF',X'FFFFFFFFFFFF' 80-8F
         DC    10X'FF',X'FFFFFFFFFFFF' 90-9F
         DC    10X'FF',X'FFFFFFFFFFFF' A0-AF
         DC    10X'FF',X'FFFFFFFFFFFF' B0-BF
         DC    10X'00',X'FFFFFFFFFFFF' C0-CF  C ZONE POS
         DC    10X'00',X'FFFFFFFFFFFF' D0-DF  D ZONE NEG
         DC    10X'FF',X'FFFFFFFFFFFF' E0-EF
         DC    10X'00',X'FFFFFFFFFFFF' F0-FF  F ZONE POS
TABNUMZ  DC    240X'FF',10X'00',6X'FF'        F0-F9 ONLY
*     
* SHARED DATA
*
ZCSAVE   DS      16XL8 SAVE 64 BIT REGS 
ZCWORK   DS      2XL16 SAVE WORK FOR 2 QW
TRUE     EQU     1
FALSE    EQU     0
         EQUREGS REGS=GPR
         EQUREGS REGS=FPR
         ZSTREQU
*
* SHARED DSECTS
*
PM_STACK_ENTRY DSECT
PM_STACK_PGEND6  DS    A  ADDRESS OF ENDING PG LABEL+6
PM_STACK_RETURN  DS    A  ADDRESS OF PERFORM RETURN WHEN PGEND6 MATCHES
PM_STACK_ENTRY_LEN EQU *-PM_STACK_ENTRY
ZC390CVT DSECT
         COPY ZC390CVT CVT IN R9 AFTER LOADING linklib\ZC390LIB.390
ZC390PVT DSECT
         COPY ZC390PVT PVT IN R9 WHEN ZC390NUC CALLED FROM ZCOBOL PGM
         END
