         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 zCOBOL/assembler/emulator package*
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/07/08                                                 *
.*********************************************************************
.* 01/21/09 initial coding for edit to X field with picture with z/9's
.* 07/15/09 RPI 1065 support fixed/floating insert 'B+-z$*' and CR/DB
.* 11/26/10 RPI 1138 align decimal via SRP if specified
.* 04/06/11 RPI FIX SETA STRING USAGE FOR HLASM COMP.
.*********************************************************************
         GEN_EDIT &T_NAME,&T_IX,&P_NAME,&P_LEN,&D_TARGET,&D_SOURCE
         COPY  ZC_WS
         AIF   (K'&D_TARGET GT 0)  RPI 1138
               :&DEC_OFF SETA &D_TARGET-&D_SOURCE
               AIF (&DEC_OFF GT 0)
         SRP   &P_NAME.(&P_LEN),&DEC_OFF,0
               AELSEIF (&DEC_OFF LT 0)
                  :&DEC_OFF SETA &DEC_OFF+64
         SRP   &P_NAME.(&P_LEN),&DEC_OFF,0
               AEND
         AEND
         :&PIC  SETC '&SYM_PIC(&T_IX)'
         :&FIRST_9 SETB 1    TURN OFF AFTER FIRST 9
         :&DIGITS  SETA 0    DIGITS IN MASK Z OR 9
         :&PERIOD  SETB 0    SET IF PERIOD
         :&INTEGER SETA 0    INTEGER DIGITS IN PIC
         :&MASK    SETC ''   C'?' OR X'??' WITH , SEPARATORS
         :&LMASK   SETA 2    BYTES IN MASK INCLUDING 2 BYTE FILL+SEL
         :&GEN_OI  SETB 0    SET IF OI REQUIRED FOR FIRST SIG. DIGIT
         :&OFF_OI  SETA 0    OFFSET TO FIRST SIG. DIGIT
         :&INSERT  SETC ' '  INSERT CHAR (+,-,$, OR DEFAULT SPACE)
         :&FIXED   SETA -1   OFFSET TO INSERT CHAR (+,-,$) ELSE -1
         :&FLOAT   SETB 0    SET IF FLOATING INSERT CHAR (+,-,$)
         :&LAST_MASK SETC '' MASK CHARACTERS IN SDT FORM WITH LEADING ,
         :&I    SETA 1
         AWHILE (&I LE K'&PIC)
                :&CHAR SETC '&PIC'(&I,1)
                AIF (('&CHAR' FIND 'Z$*+-') GT 0)
                    AIF (&I EQ 1)
                        :&INSERT SETC '&CHAR'
                        :&FIXED  SETA 1
                        :&DIGITS SETA &DIGITS+1
                        :&LAST_MASK SETC ',X''20'''
                    AELSEIF ('&CHAR' EQ '&INSERT')
                        :&FLOAT SETB 1
                        :&DIGITS SETA &DIGITS+1
                        :&LAST_MASK SETC ',X''20'''
                    AELSEIF ('&CHAR' EQ 'Z')
                        :&DIGITS SETA &DIGITS+1
                        :&LAST_MASK SETC ',X''20'''
                    AELSE
                        AIF ('&CHAR' EQ 'B')
                            :&LAST_MASK SETC ',C'' '''
                        AELSE
                            :&LAST_MASK SETC ',C''&CHAR'''
                        AEND
                    AEND
                AELSEIF ('&CHAR' EQ '9')
                    :&DIGITS SETA &DIGITS+1
                    AIF (&FIRST_9)
                        :&FIRST_9 SETB 0
                        :&GEN_OI SETB 1 REQUEST OI TARGET+OFF,C'F0'
                        :&OFF_OI SETA &LMASK-2
                        :&LAST_MASK SETC ',X''21'''
                        AIF  (K'&MASK GE 6)  IS PREV MASK BYTE X'20'
                             AIF ('&MASK'(K'&MASK-4,5) EQ 'X''20''') 
                                 :&GEN_OI SETB 0         NO OI REQ'D
                                 :&MASK SETC '&MASK'(1,K'&MASK-2).'1'''
                                 :&LAST_MASK SETC ',X''20'''
                             AEND
                        AEND
                    AELSE
                        :&LAST_MASK SETC ',X''20'''
                    AEND
                AELSEIF ('&CHAR' EQ '(')    RPI 1139 DSH SETA
                    :&DUP SETA D2A('&PIC'(&I+1,1))  FIRST DIGIT
                    :&I SETA &I+2
                    :&CHAR SETC '&PIC'(&I,1)
                    AWHILE (&I LE K'&PIC AND '&CHAR' NE ')')
                        :&DUP SETA &DUP*10+&CHAR
                        :&I SETA &I+1
                        :&CHAR SETC '&PIC'(&I,1)
                    AEND
                    AIF (&DUP GT 1)
                        :&DIGITS SETA &DIGITS+&DUP-1
                        :&LMASK SETA &LMASK+&DUP-2
                        :&MASK SETC '&MASK'.(&DUP-2)'&LAST_MASK'
                    AEND
                AELSE  
                    AIF ('&CHAR' EQ 'B')
                        :&LAST_MASK SETC ',C'' '''
                    AELSE
                        :&LAST_MASK SETC ',C''&CHAR'''
                    AEND
                AEND
                :&MASK SETC '&MASK.&LAST_MASK'
                :&LMASK SETA &LMASK+1
                :&I SETA &I+1
         AEND
         AIF   (&FLOAT AND '&INSERT' EQ '*')
               :&FILL SETC '*'
         AELSE
               :&FILL SETC ' '
         AEND
         AIF   (&DIGITS GT 31)
               MNOTE 8,'GEN_EDIT DIGITS > 31 = &DIGITS'
               MEXIT
         AEND
         AIF   (&DIGITS/2*2 EQ &DIGITS) ADD PREFIX SELECT IF EVEN       
               AIF (&GEN_OI AND &OFF_OI EQ 1)
                   :&GEN_OI SETB 0
                   :&MASK SETC '=AL1(C''&FILL'',X''21''&MASK' FILL+SIGD
               AELSE
                   :&MASK SETC '=AL1(C''&FILL'',X''20''&MASK' FILL+SELD
               AEND
         AELSE
               :&MASK SETC '=AL1(C''&FILL'',C''&FILL''&MASK'  2 FILLS
         AEND
         AIF   (&LMASK/2*2 NE &LMASK) ADD MASK PAD BYTE IF ODD LEN
               :&MASK SETC '&MASK,0)'  ADD PAD BYTE FOR EVEN LARL LEN
         AELSE       
               :&MASK SETC '&MASK)'
         AEND
         LARL  ZC_R1,&MASK
         MVC   ZCVT_WORKAREA(&LMASK),0(ZC_R1) MOVE MASK FOR ED
       :&P_SEL_BYTES SETA &DIGITS/2+1
     AIF (&P_SEL_BYTES GT &P_LEN)
         ZAP   ZCVT_PWORK1(&P_SEL_BYTES),&P_NAME
       AIF (&FLOAT)
         LA    ZC_R1,ZCVT_WORKAREA+&FIXED+1
         EDMK  ZCVT_WORKAREA(&LMASK),ZCVT_PWORK1
       AELSE
         ED    ZCVT_WORKAREA(&LMASK),ZCVT_PWORK1
       AEND
     AELSE
       AIF (&FLOAT)
         LA    ZC_R1,ZCVT_WORKAREA+&FIXED+1
         EDMK  ZCVT_WORKAREA(&LMASK),&P_LEN-&P_SEL_BYTES+&P_NAME
       AELSE
         ED    ZCVT_WORKAREA(&LMASK),&P_LEN-&P_SEL_BYTES+&P_NAME
       AEND
     AEND
     AIF (&FLOAT)
       GBLA &ZC_EDIT_INSERT
       :&ZC_EDIT_INSERT SETA &ZC_EDIT_INSERT+1
       AIF ('&INSERT' EQ '+')
         JM    ZC_EDIT_INS_M_&ZC_EDIT_INSERT
         BCTR  ZC_R1,0
         MVI   0(ZC_R1),C'+'
         J     ZC_EDIT_INS_E_&ZC_EDIT_INSERT
ZC_EDIT_INS_M_&ZC_EDIT_INSERT DS 0H
         BCTR  ZC_R1,0
         MVI   0(ZC_R1),C'-'
ZC_EDIT_INS_E_&ZC_EDIT_INSERT DS 0H
       AELSEIF ('&INSERT' EQ '-')
         JNM    ZC_EDIT_INS_E_&ZC_EDIT_INSERT
         BCTR  ZC_R1,0
         MVI   0(ZC_R1),C'-'
ZC_EDIT_INS_E_&ZC_EDIT_INSERT DS 0H
       AELSEIF ('&INSERT' EQ '$')
         BCTR  ZC_R1,0
         MVI   0(ZC_R1),C'$'
       AEND
     AELSEIF   (&FIXED NE -1)
       GBLA &ZC_EDIT_INSERT
       :&ZC_EDIT_INSERT SETA &ZC_EDIT_INSERT+1
       AIF ('&INSERT' EQ '+')
         JM    ZC_EDIT_INS_M_&ZC_EDIT_INSERT
         MVI   ZCVT_WORKAREA+1+&FIXED,C'+'
         J     ZC_EDIT_INS_E_&ZC_EDIT_INSERT
ZC_EDIT_INS_M_&ZC_EDIT_INSERT DS 0H
         MVI   ZCVT_WORKAREA+1+&FIXED,C'-'
ZC_EDIT_INS_E_&ZC_EDIT_INSERT DS 0H
       AELSEIF ('&INSERT' EQ '-')
         JNM   ZC_EDIT_INS_E_&ZC_EDIT_INSERT
         MVI   ZCVT_WORKAREA+1+&FIXED,C'-'
ZC_EDIT_INS_E_&ZC_EDIT_INSERT DS 0H
       AELSEIF ('&INSERT' EQ '$')
         MVI   ZCVT_WORKAREA+1+&FIXED,C'$'
       AEND
     AEND
         MVC   &T_NAME,ZCVT_WORKAREA+2
     AIF   (&GEN_OI)
         OI    &OFF_OI+&T_NAME,C'0'
     AEND
         MEND
