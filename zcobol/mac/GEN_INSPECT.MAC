         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 zCOBOL/assembler/emulator package*
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/16/08                                                 *
.*********************************************************************
.* 01/14/09 initial code                                                 
.* 04/05/11 RPI 1139 FIX SETA STRINGS FOR HLASM COMP.
.*********************************************************************
.* ZC_R2=V1,ZC_R3=V2 THESE MAY BE PASSED MULTIPLE TIMES TO GEN/ZC390LIB
.* ZC_R14=V3,ZC_R15=V4 THESE MUST BE RESET FOR EACH CALL TO GEN
.* ZC_R1,ZC_R14,ZC_R15 USED IN STANDARD LINKAGE FROM GEN TO ZC390LIB
.* INSPECT.MLC
.*********************************************************************
         GEN_INSPECT &MTYPE           
         COPY  ZC_WS
         LCLC  &VAR
         LCLA  &VAR_IX,&VAR_OFF
         AIF   ('&MTYPE' EQ 'TALLYING')
               ACALL GEN_TALLYING
         AELSEIF ('&MTYPE' EQ 'REPLACING')
               ACALL GEN_REPLACING
         AELSEIF ('&MTYPE' EQ 'CONVERTING')
               ACALL GEN_CONVERTING
         AELSE
               MNOTE 8,'GEN_INSPECT UNKNOWN MYTPE - &MTYPE'
         AEND
         MEXIT
.*
.* GEN TALLYING
.*
.* INSPECT V1 TALLYING V2 FOR CHARACTERS BEFORE/AFTER TEST_VAR
.* INSPECT V1 TALLYING V2 FOR ALL     V3 BEFORE/AFTER TEST_VAR
.* INSPECT V1 TALLYING V2 FOR LEADING V3 BEFORE/AFTER TEST_VAR
.* CALL TALLY,(V1,L'V1,V2,L'V2,B/A+STYPE,V3,L'V3,TEST_VAR,L'TEST_VAR 
.* PARM        P1 P2   P3 P4   P5        P6 P7   P8       P9
.* OFFSET       0  4    8 12   16        20 24   28       32
.*
         AENTRY GEN_TALLYING
         :&STYPE SETC '&SYSLIST(2)'
         :&V1    SETC '&SYSLIST(3)'
         :&V1_IX SETA D2A('&SYSLIST(4)') RPI 1139
         :&V2    SETC '&SYSLIST(5)'
         :&V2_IX SETA D2A('&SYSLIST(6)') RPI 1139
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,&V1
         ST    ZC_R0,0(ZC_R1)             P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),&SYM_LEN(&V1_IX)  P2=L'V1  INSPECT FIELD LENGTH
         LA    ZC_R0,&V2
         ST    ZC_R0,8(ZC_R1)                 P3=A(V2) INSPECT V2            
         MVHI  12(ZC_R1),&SYM_LEN(&V2_IX)  P4=L'V2  INSPECT L'V2
         :&STYPE_SDT SETC 'C'''.'&STYPE'(1,1).''''
         LA    ZC_R0,&STYPE_SDT
         ST    ZC_R0,16(ZC_R1)        P5= TALLYING SUBTYPE C'C/A/L'
         AIF   ('&STYPE' EQ 'CHARACTERS') ADD CHAR CNT MEETING TEST
               :&TEST_TYPE SETC '&SYSLIST(7)'
               :&TEST_VAR  SETC '&SYSLIST(8)'
               :&TEST_IX   SETA D2A('&SYSLIST(9)') RPI 1139
               ACALL SET_TEST_PARMS
         AELSE
               :&VAR_OFF SETA 20  P6/P7=V3/V3L
               :&VAR     SETC '&SYSLIST(7)'
               :&VAR_IX SETA &SYSLIST(8)
               ACALL GEN_VAR_PARM
               :&TEST_TYPE SETC '&SYSLIST(9)'
               :&TEST_VAR  SETC '&SYSLIST(10)'
               :&TEST_IX   SETA D2A('&SYSLIST(11)') RPI 1139
               ACALL SET_TEST_PARMS
         AEND
         LA    ZC_R0,ZCVT_TALLYING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
         ACASE (C2A('&SYM_PIC_TYPE(&V2_IX)'))
         AWHEN C'F'
         A     ZC_R0,&V2
         ST    ZC_R0,&V2
         AWHEN C'G'
         AG    ZC_R0,&V2
         STG   ZC_R0,&V2
         AWHEN C'H'
         AH    ZC_R0,&V2
         STH   ZC_R0,&V2
         AELSE
               MNOTE 8,'GEN_INSPECT INVALID TALLY VAR TYPE &SYM_PIC_TYPX
               E(&V2_IX)'
         AEND
         AEND
.*
.* GEN REPLACING
.*
.* INSPECT V1 REPLACING CHARACTERS BY V3 BEFORE/AFTER TEST_VAR
.* INSPECT V1 REPLACING ALL     V2 BY V3 BEFORE/AFTER TEST_VAR
.* INSPECT V1 REPLACING LEADING V2 BY V3 BEFORE/AFTER TEST_VAR
.* INSPECT V1 REPLACING FIRST   V2 BY V3 BEFORE/AFTER TEST_VAR
.* CALL TALLY,(V1,L'V1,V2,L'V2,B/A+STYPE,V3,L'V3,TEST_VAR,L'TEST_VAR 
.* PARM        P1 P2   P3 P4   P5        P6 P7   P8       P9
.* OFFSET       0  4    8 12   16        20 24   28       32
.*
         AENTRY GEN_REPLACING
               :&STYPE SETC '&SYSLIST(2)'
               :&V1    SETC '&SYSLIST(3)'
               :&V1_IX SETA D2A('&SYSLIST(4)') RPI 1139
               :&V2    SETC '&SYSLIST(5)'
               :&V2_IX SETA D2A('&SYSLIST(6)') RPI 1139
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,&V1
         ST    ZC_R0,0(ZC_R1)                 P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),&SYM_LEN(&V1_IX) P2=L'V1 INSPECT FIELD LENGTH
               :&VAR_OFF SETA 8      P3/P4=V2/V2L
               :&VAR     SETC '&V2'
               :&VAR_IX  SETA &V2_IX
               ACALL GEN_VAR_PARM
               :&STYPE_SDT SETC 'C'''.'&STYPE'(1,1).''''
         LA    ZC_R0,&STYPE_SDT
         ST    ZC_R0,16(ZC_R1)       P5= REPLACING STYPE C'C/A/L/F'
               :&VAR_OFF SETA 20  P6/P7=V3/V3L
               :&VAR     SETC '&SYSLIST(7)'
               :&VAR_IX SETA &SYSLIST(8)
               ACALL GEN_VAR_PARM
               AIF   ('&STYPE'(1,1) EQ 'C') REP CHARACTERS 
                    :&TEST_TYPE SETC '&SYSLIST(9)'
                    :&TEST_VAR  SETC '&SYSLIST(10)'
                    :&TEST_IX   SETA D2A('&SYSLIST(11)') RPI 1130
                    ACALL SET_TEST_PARMS
               AELSE
                    :&TEST_TYPE SETC '&SYSLIST(9)'
                    :&TEST_VAR  SETC '&SYSLIST(10)'
                    :&TEST_IX   SETA D2A('&SYSLIST(11)') RPI 1139
                    ACALL SET_TEST_PARMS
               AEND
         LA    ZC_R0,ZCVT_REPLACING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
         AEND
.*
.* GEN CONVERTING
.*
         AENTRY GEN_CONVERTING
               :&STYPE SETC 'X'
               :&V1    SETC '&SYSLIST(2)'
               :&V1_IX SETA D2A('&SYSLIST(3)') RPI 1139
               :&V2    SETC '&SYSLIST(4)'
               :&V2_IX SETA D2A('&SYSLIST(5)') RPI 1139
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,&V1
         ST    ZC_R0,0(ZC_R1)                 P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),&SYM_LEN(&V1_IX) P2=L'V1  INSPECT FIELD LENGTH
               :&VAR_OFF SETA 8      P3/P4=V2/V2L
               :&VAR     SETC '&V2'
               :&VAR_IX  SETA &V2_IX
               ACALL GEN_VAR_PARM
               :&STYPE_SDT SETC 'C'''.'&STYPE'(1,1).''''
         LA    ZC_R0,&STYPE_SDT
         ST    ZC_R0,16(ZC_R1)           P5= REPLACING STYPE C'C/A/L/F'
               :&VAR_OFF SETA 20  P6/P7=V3/V3L
               :&VAR     SETC '&SYSLIST(6)'
               :&VAR_IX SETA &SYSLIST(7)
               ACALL GEN_VAR_PARM
               :&TEST_TYPE SETC '&SYSLIST(8)'
               :&TEST_VAR  SETC '&SYSLIST(9)'
               :&TEST_IX   SETA D2A('&SYSLIST(10)') RPI 1139
               ACALL SET_TEST_PARMS
         LA    ZC_R0,ZCVT_CONVERTING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
         AEND
.*
.* SET TEST PARMS
.*         
         AENTRY SET_TEST_PARMS
               AIF ('&TEST_TYPE' EQ 'AFTER')
         MVI   16(ZC_R1),X'80'           P5=AFTER = NEG SIGN+STYPE
               AEND
               AIF   (&TEST_IX GT 0) TESTVAR HAS CHARS
         LA    ZC_R0,&TEST_VAR
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         MVHI  32(ZC_R1),&SYM_LEN(&TEST_IX)  P9=LENGTH OF TEST_VAR
               AELSEIF ('&TEST_VAR' EQ '')
         SR    ZC_R0,ZC_R0
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         ST    ZC_R0,32(ZC_R1)                  P9=L'TEST_VAR   NO TEST
               AELSEIF ('&TEST_VAR'(1,1) EQ '''')
         :&LLIT SETA K'&TEST_VAR-2
         :&LLITE SETA (&LLIT+1)/2*2
         LARL  ZC_R0,=CL&LLITE&TEST_VAR
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         MVHI  32(ZC_R1),&LLIT               P9=LENGTH OF TEST_VAR
               AELSEIF  ('&TEST_VAR' EQ 'ZERO'                         X
                         OR '&TEST_VAR' EQ 'ZEROS'                     X
                         OR '&TEST_VAR' EQ 'ZEROES')                          
         LARL  ZC_R0,=CL2'0 '
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         MVHI  32(ZC_R1),1                   P9=LENGTH OF TEST_VAR
               AELSEIF ('&TEST_VAR' EQ 'SPACES'                        X
                         OR '&TEST_VAR' EQ 'SPACE')
         LARL  ZC_R0,=CL2'  '
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         MVHI  32(ZC_R1),1                   P9=LENGTH OF TEST_VAR
               AELSEIF ('&TEST_VAR' EQ 'HIGH_VALUES'                   X
                         OR '&TEST_VAR' EQ 'HIGH_VALUE')
         LARL  ZC_R0,=XL2'FFFF'
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         MVHI  32(ZC_R1),1                   P9=LENGTH OF TEST_VAR
               AELSEIF ('&TEST_VAR' EQ 'LOW_VALUES'                    X
                         OR '&TEST_VAR' EQ 'LOW_VALUE')
         LARL  ZC_R0,=XL2'0000'
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         MVHI  32(ZC_R1),1                   P9=LENGTH OF TEST_VAR
               AELSE
                    MNOTE 8,'GEN_INSPECT UNKNOWN LIT - &LIT'
               AEND
         AEND
.*
.* GEN VAR PARM - STORE VAR/LIT ADDR AND LENGTH AT OFFSET
.*
         AENTRY GEN_VAR_PARM
               AIF       ('&VAR' EQ '')
         MVHI  &VAR_OFF.(ZC_R1),0   NO PARM
         MVHI  &VAR_OFF+4(ZC_R1),0
               AELSEIF   (&VAR_IX GT 0) VAR HAS CHARS
         LA    ZC_R0,&VAR
         ST    ZC_R0,&VAR_OFF.(ZC_R1)           
         MVHI  &VAR_OFF+4(ZC_R1),&SYM_LEN(&VAR_IX)             
               AELSEIF ('&VAR'(1,1) EQ '''')
                 :&LLIT SETA K'&VAR-2
                 :&LLITE SETA (&LLIT+1)/2*2
         LARL  ZC_R0,=CL&LLITE&VAR
         ST    ZC_R0,&VAR_OFF.(ZC_R1)                  
         MVHI  &VAR_OFF+4(ZC_R1),&LLIT              
               AELSEIF  ('&VAR' EQ 'ZERO'                              X
                         OR '&VAR' EQ 'ZEROS'                          X
                         OR '&VAR' EQ 'ZEROES')                          
         LARL  ZC_R0,=CL2'0 '
         ST    ZC_R0,&VAR_OFF.(ZC_R1)                  
         MVHI  &VAR_OFF+4(ZC_R1),1                  
               AELSEIF ('&VAR' EQ 'SPACES'                             X
                         OR '&VAR' EQ 'SPACE')
         LARL  ZC_R0,=CL2'  '
         ST    ZC_R0,&VAR_OFF.(ZC_R1)               
         MVHI  &VAR_OFF+4(ZC_R1),1               
               AELSEIF ('&VAR' EQ 'HIGH_VALUES'                        X
                         OR '&VAR' EQ 'HIGH_VALUE')
         LARL  ZC_R0,=XL2'FFFF'
         ST    ZC_R0,&VAR_OFF.(ZC_R1)               
         MVHI  &VAR_OFF+4(ZC_R1),1               
               AELSEIF ('&VAR' EQ 'LOW_VALUES'                         X
                         OR '&VAR' EQ 'LOW_VALUE')
         LARL  ZC_R0,=XL2'0000'
         ST    ZC_R0,&VAR_OFF.(ZC_R1)               
         MVHI  &VAR_OFF+4(ZC_R1),1               
               AELSEIF ('&VAR'(1,2) EQ 'X''')
                    :&LHEX SETA K'&VAR-3
                    :&HEX  SETC '&VAR'(3,&LHEX)
                    AIF (&LHEX/2*2 NE &LHEX)
                        :&HEX SETC '0&HEX'  ADD MISSING LEADING 0
                        :&LHEX SETA &LHEX+1
                    AEND
                    :&LHEX SETA &LHEX/2
                    AIF (&LHEX/2*2 NE &LHEX)
                        :&HEX SETC '&HEX.00' PAD WITH X'00'
                    AEND
         LARL  ZC_R0,=X'&HEX'
         ST    ZC_R0,&VAR_OFF.(ZC_R1)               
         MVHI  &VAR_OFF+4(ZC_R1),&LHEX               
               AELSE
                    MNOTE 8,'GEN_INSPECT UNKNOWN LIT - &VAR'
               AEND
         AEND
         MEND
