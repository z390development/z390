         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 zCOBOL/assembler/emulator package*
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/07/08                                                 *
.*********************************************************************
.* 04/28/12 RPI 1211 copied from GEN_ADD and changed add to sub opcode
.* 05/17/12 RPI 1217 remove erroneous LR r0,r1 from case F - Q
.*********************************************************************
.* Notes:
.*  1.  ROUNDED not supported yet.
.*********************************************************************
         GEN_SUB &T_NAME,&T_IX,&S_NAME,&S_IX,&ROUNDED,&ONSIZE
         COPY  ZC_WS
         :&NT_IX SETA -D2A('&T_IX')                    RPI 1202
         :&NS_IX SETA -D2A('&S_IX')                    RPI 1202
         AIF (&T_IX GT 0)
             :&N_TARGET SETC '&T_NAME'
             :&L_TARGET SETA  &SYM_LEN(&T_IX)
             :&S_TARGET SETB  &SYM_PIC_SIGN(&T_IX)
             :&T_TARGET SETC '&SYM_PIC_TYPE(&T_IX)'
             :&P_TARGET SETC '&SYM_PIC(&T_IX)'
             :&D_TARGET SETA &SYM_PIC_DEC(&T_IX) RPI 1211
             AIF ('&T_TARGET' NE 'P')
                 :&LAB SETC '&N_TARGET'
                 ACALL RESET_LAB_LEN
                 :&N_TARGET SETC '&LAB'
             AEND
         AELSEIF (&NT_IX GT 0)                        RPI 1202
             :&N_TARGET SETC '&TMP_NAME(&NT_IX)'      RPI 1202
             :&L_TARGET SETA  &TMP_LEN(&NT_IX)        RPI 1202
             :&S_TARGET SETB  &TMP_SIGN(&NT_IX)       RPI 1202
             :&T_TARGET SETC '&TMP_TYPE(&NT_IX)'      RPI 1202
             :&D_TARGET SETA  &TMP_PIC_DEC(&NT_IX)    RPI 1211
             :&P_TARGET SETC ''
             AIF ('&T_TARGET' EQ 'P')
                 :&N_TARGET SETC '&N_TARGET.(&L_TARGET)'
             AEND
         AELSE
            MNOTE 8,'GEN_ADD MISSING TARGET INDEX FOR &T_NAME'
            MEXIT
         AEND
         :&N_SOURCE SETC '&S_NAME'
         AIF (&S_IX GT 0)
             :&L_SOURCE SETA  &SYM_LEN(&S_IX)
             :&S_SOURCE SETB  &SYM_PIC_SIGN(&S_IX)
             :&T_SOURCE SETC '&SYM_PIC_TYPE(&S_IX)'
             :&D_SOURCE SETA  &SYM_PIC_DEC(&S_IX)     RPI 1211
         AELSEIF (&NS_IX GT 0)                        RPI 1202
             :&N_SOURCE SETC '&TMP_NAME(&NS_IX)'      RPI 1202
             :&L_SOURCE SETA  &TMP_LEN(&NS_IX)        RPI 1202
             :&S_SOURCE SETB  &TMP_SIGN(&NS_IX)       RPI 1202
             :&T_SOURCE SETC '&TMP_TYPE(&NS_IX)'      RPI 1202
             :&D_SOURCE SETA  &TMP_PIC_DEC(&NS_IX)    RPI 1211
             AIF ('&T_SOURCE' EQ 'P')
                 :&N_SOURCE SETC '&N_SOURCE.(&L_SOURCE)'
             AEND
         AEND
         AIF   (&ROUNDED EQ 1)
               MNOTE 8,'GEN_ADD ROUNDED NOT SUPPORTED YET'
               MEXIT
         AEND
         AIF   (&NS_IX NE 0)  RPI 1202
               :&SCALE SETA &D_TARGET-&D_SOURCE  RPI 1211
               ACALL SUB_FLD
         AELSE
               :&LIT SETC '&N_SOURCE'
               ACALL SUB_LIT
         AEND
         MEXIT
.*
.* ADD LITERAL
.* 
         AENTRY SUB_LIT
         AIF  ('&LIT'(1,1) GE '0'                                      X
                OR '&LIT'(1,1) EQ '+'                                  X
                OR '&LIT'(1,1) EQ '-'                                  X
                OR '&LIT'(1,1) EQ '.')  RPI 1002, RPI 1065           
               :&NUM SETC '&LIT'
               :&DEC_SYM SETA &D_TARGET  RPI 1211
               AIF ('&T_TARGET' LT '1')  SKIP IF FP RPI 1211
                 ACALL SCALE_NUM_LIT
               AEND
               ACALL SUB_NUM_LIT
         AELSEIF  ('&LIT' EQ 'ZERO'                                    X
                   OR '&LIT' EQ 'ZEROES')                          
               :&NUM SETC '0'
               ACALL SUB_NUM_LIT
         AELSE
               MNOTE 8,'GEN_ADD UNKNOWN LITERAL &LIT'
               MEXIT
         AEND
         AEND
.*
.* ADD NUMERIC LIT 
.*
      AENTRY SUB_NUM_LIT
      ACASE (C2A('&T_TARGET'))
      AWHEN C'1' EH
         LE    ZC_F0,&N_TARGET
         LARL  ZC_R14,=E'&NUM'
         SE    ZC_F0,0(ZC_R14)
         STE   ZC_F0,&N_TARGET
      AWHEN C'2' DH
         LD    ZC_F0,&N_TARGET
         LARL  ZC_R14,=D'&NUM'
         SD    ZC_F0,0(ZC_R14)
         STD   ZC_F0,&N_TARGET
      AWHEN C'3' LH
         LD    ZC_F0,&N_TARGET
         LD    ZC_F2,8+&N_TARGET
         LARL  ZC_R14,=LH'&NUM'
         LD    ZC_F1,0(ZC_R14)        
         LD    ZC_F3,8(ZC_R14)          
         SXR   ZC_F0,ZC_F1     
         STD   ZC_F0,&N_TARGET
         STD   ZC_F2,8+&N_TARGET
      AWHEN C'4' EB
         LE    ZC_F0,&N_TARGET
         LARL  ZC_R14,=EB'&NUM'
         SEB   ZC_F0,0(ZC_R14)
         STE   ZC_F0,&N_TARGET
      AWHEN C'5' DB
         LD    ZC_F0,&N_TARGET
         LARL  ZC_R14,=DB'&NUM'
         ADB   ZC_F0,0(ZC_R14)
         STD   ZC_F0,&N_TARGET
      AWHEN C'6' LB
         LD    ZC_F0,&N_TARGET
         LD    ZC_F2,8+&N_TARGET
         LARL  ZC_R14,=LB'&NUM'
         LD    ZC_F1,0(ZC_R14)        
         LD    ZC_F3,8(ZC_R14)          
         SXBR  ZC_F0,ZC_F1     
         STD   ZC_F0,&N_TARGET
         STD   ZC_F2,8+&N_TARGET
      AWHEN C'7' ED
         LE    ZC_F0,&N_TARGET
         LDETR ZC_F0,ZC_F0,0
         LARL  ZC_R14,=DD'&NUM'
         LD    ZC_F1,0(ZC_R14)
         SDTR  ZC_F0,ZC_F0,ZC_F1
         LEDTR ZC_F0,0,ZC_F0,0
         STE   ZC_F0,&N_TARGET
      AWHEN C'8' DD
         LD    ZC_F0,&N_TARGET
         LARL  ZC_R14,=DD'&NUM'
         LD    ZC_F1,0(ZC_R14)
         SDTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,&N_TARGET
      AWHEN C'9' LD
         LD    ZC_F0,&N_TARGET
         LD    ZC_F2,8+&N_TARGET
         LARL  ZC_R14,=LD'&NUM'
         LD    ZC_F1,0(ZC_R14)        
         LD    ZC_F3,8(ZC_R14)          
         SXTR  ZC_F0,ZC_F0,ZC_F1     
         STD   ZC_F0,&N_TARGET
         STD   ZC_F2,8+&N_TARGET
.*
.* SUB_NUM_LIT F A I
.*
      AWHEN C'F',C'A',C'I'
       AIF (&ONSIZE EQ 1 OR (&ZC_TRUNC AND '&P_TARGET' NE ''))
         SR    ZC_R0,ZC_R0
         L     ZC_R1,&N_TARGET
         ZC_PIC_DIGITS &T_IX
         :&TRUNC_DIV SETA ('1'.(&PIC_DIGITS)'0')
         LARL  ZC_R14,=F'&TRUNC_DIV'
         AFI   ZC_R1,-&NUM
        AIF   (&ONSIZE EQ 1)
              :&STX SETC 'ST'
               ACALL SET_ON_SIZE_F32
        AELSE  
         D     ZC_R0,0(ZC_R14)
         ST    ZC_R0,&N_TARGET
        AEND 
       AELSE
        AIF (K'&NUM LE 2)
         ASI   &N_TARGET,-&NUM
        AELSE
         L     ZC_R0,&N_TARGET
         AFI   ZC_R0,-&NUM
         ST    ZC_R0,&N_TARGET
        AEND
       AEND
.*
.* SUB_NUM_LIT G
.*
      AWHEN C'G'
       AIF (&ONSIZE EQ 1 OR (&ZC_TRUNC AND '&P_TARGET' NE ''))
         ZC_PIC_DIGITS &T_IX
         :&TRUNC_DIV SETC '1'.(&PIC_DIGITS)'0'
        AIF (&ZC_R64)
         LG    ZC_R1,&N_TARGET
         LGRL  ZC_R0,=FL8'&TRUNC_DIV'
         AGFI  ZC_R1,-&NUM
          AIF  (&ONSIZE EQ 1)
               :&STX SETC 'STG'
               ACALL SET_ON_SIZE_G64
          AELSE  
         DSGR  ZC_R0,ZC_R0
         STG   ZC_R0,&N_TARGET
          AEND
        AELSE
         LM    ZC_R0,ZC_R1,&N_TARGET
         LARL  ZC_R14,=FL8'&NUM'
         S     ZC_R1,4(ZC_R14)
         SLC   ZC_R0,0(ZC_R14)
         LARL  ZC_R14,=FL8'&TRUNC_DIV'
         LM    ZC_R2,ZC_R3,0(ZC_R14)
          AIF  (&ONSIZE EQ 1)
         L     ZC_R15,ZCVT_OSE64R32
         BASR  ZC_R14,ZC_R15
               ACALL SET_ON_SIZE_G64_R32
          AELSE
         L     ZC_R15,ZCVT_DIV64R32
         BASR  ZC_R14,ZC_R15
         STM   ZC_R0,ZC_R1,&N_TARGET
          AEND
        AEND  
       AELSE
        AIF (K'&NUM LE 2)
         AGSI  &N_TARGET,-&NUM
        AELSE
          AIF  (&ZC_R64)
         LG    ZC_R0,&N_TARGET
         LARL  ZC_R14,=FL8'&NUM'
         SG    ZC_R0,0(ZC_R14)
         STG   ZC_R0,&N_TARGET
          AELSE
         LM    ZC_R0,ZC_R1,&N_TARGET
         LARL  ZC_R14,=FL8'&NUM'
         S     ZC_R1,4(ZC_R14)
         SLC   ZC_R0,0(ZC_R14)
         STM   ZC_R0,ZC_R1,&N_TARGET
          AEND
        AEND
       AEND
.*
.* SUB_NUM_LIT H
.*
      AWHEN C'H'
       AIF (&ONSIZE EQ 1 OR (&ZC_TRUNC AND '&P_TARGET' NE ''))
         SR    ZC_R0,ZC_R0
         LH    ZC_R1,&N_TARGET
         ZC_PIC_DIGITS &T_IX
         :&TRUNC_DIV SETA ('1'.(&PIC_DIGITS)'0')
         LARL  ZC_R14,=F'&TRUNC_DIV'
         AFI   ZC_R1,-&NUM
        AIF   (&ONSIZE EQ 1)
              :&STX SETC 'STH'
               ACALL SET_ON_SIZE_F32
        AELSE  
         D     ZC_R0,0(ZC_R14)
         STH   ZC_R0,&N_TARGET
        AEND 
       AELSE
         LH    ZC_R0,&N_TARGET
         AHI   ZC_R0,-&NUM
         STH   ZC_R0,&N_TARGET
       AEND
.*
.* SUB_NUM_LIT P
.*
      AWHEN C'P'
         :&LPNUM SETA (K'&NUM/2+3)/2*2 ROUNDED EVEN FOR LARL
        AIF (&LPNUM EQ 2)
         BRAS  ZC_R14,3 SET ZC_R1 TO A(INLINE LIT) AND SKIP OVER IT
         DC    PL2'&NUM'
        AELSE
         AIF (&LPNUM GT 16)
             :&LPNUM SETA 16
         AEND
         LARL  ZC_R14,=PL&LPNUM'&NUM'
        AEND
         SP    &N_TARGET,0(&LPNUM,ZC_R14)
.*
.* SUB_NUM_LIT Q
.*
      AWHEN C'Q'
         LMG  ZC_R0,ZC_R1,&N_TARGET
         LARL ZC_R14,=FL16'&NUM'
         SLG  ZC_R1,8(ZC_R14)
         SLBG ZC_R0,0(ZC_R14)
         STMG ZC_R0,ZC_R1,&N_TARGET
.*
.* SUB_NUM_LIT Z
.*
      AWHEN C'Z'
         :&PLEN SETA &L_TARGET/2+1
         ZC_PACK31  ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         :&LPNUM SETA (K'&NUM/2+3)/2*2 ROUNDED EVEN FOR LARL
         AIF (&LPNUM GT 16)
             :&LPNUM SETA 16
         AEND
         LARL  ZC_R14,=PL&LPNUM'&NUM'
         SP    ZCVT_PWORK1(&PLEN),0(&LPNUM,ZC_R14)
         :&ST SETB &S_TARGET
         ZC_UNPK31  &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
      AELSE
         MNOTE 8,'GEN_ADD INVALID DATA TYPE FOR &N_TARGET'
      AEND
      AEND
.*
.* SUB_FLD
.*
         AENTRY SUB_FLD
         ACASE (C2A('&T_TARGET'))
.*
.*  SUB_FLD ?? TO EH 
.*
         AWHEN C'1'                     ADD ?? TO EH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO EH
         LE    ZC_F0,&N_SOURCE
               AWHEN C'2'               ADD DH TO EH
         ZC_CONV EH,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO EH
         ZC_CONV EH,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO EH
         ZC_CONV EH,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO EH
         ZC_CONV EH,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO EH
         ZC_CONV EH,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO EH
         ZC_CONV EH,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO EH
         ZC_CONV EH,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO EH
         ZC_CONV EH,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
         CEFR  ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CEGR  ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
         CEFR  ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV EH,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV EH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV EH,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '         
                    MEXIT
               AEND 
               ACALL SCALE_EH
         LE    ZC_F1,&N_TARGET
         SER   ZC_F1,ZC_F0
         STE   ZC_F1,&N_TARGET
.*
.*  SUB_FLD ?? TO DH
.*
         AWHEN C'2'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DH
         LE    ZC_F0,&N_SOURCE
         LDER  ZC_F0,ZC_F0
               AWHEN C'2'               ADD DH TO DH
         LD    ZC_F0,&N_SOURCE
               AWHEN C'3'               ADD LH TO DH
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
         LDXR  ZC_F0,ZC_F0
               AWHEN C'4'               ADD EB TO DH
         ZC_CONV DH,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DH
         ZC_CONV DH,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DH
         ZC_CONV DH,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DH
         ZC_CONV DH,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DH
         ZC_CONV DH,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DH
         ZC_CONV DH,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
         CDFR  ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CDGR  ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
         CDFR  ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV DH,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV DH,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_DH
         LD    ZC_F1,&N_TARGET
         SDR   ZC_F1,ZC_F0
         STD   ZC_F1,&N_TARGET
.*
.*  SUB_FLD ?? TO LH
.*
         AWHEN C'3'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO LH
         LE    ZC_F0,&N_SOURCE
         LXER  ZC_F0,ZC_F0
               AWHEN C'2'               ADD DH TO LH
         LD    ZC_F0,&N_SOURCE
         LXDR  ZC_F0,ZC_F0
               AWHEN C'3'               ADD LH TO LH
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               AWHEN C'4'               ADD EB TO LH
         ZC_CONV LH,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO LH
         ZC_CONV LH,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO LH
         ZC_CONV LH,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO LH
         ZC_CONV LH,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO LH
         ZC_CONV LH,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO LH
         ZC_CONV LH,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
         CXFR  ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CXGR  ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
         CXFR  ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV LH,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV LH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV LH,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_LH
         LD    ZC_F1,&N_TARGET
         LD    ZC_F3,8+&N_TARGET
         SXR   ZC_F1,ZC_F0
         STD   ZC_F1,&N_TARGET
         STD   ZC_F3,8+&N_TARGET
.*
.*  SUB_FLD ?? TO EB 
.*
         AWHEN C'4'                     ADD ?? TO EB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO EB
         ZC_CONV DB,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO EB
         ZC_CONV DB,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO EB
         ZC_CONV DB,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO EB
         ZC_CONV DB,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO EB
         ZC_CONV DB,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO EB
         ZC_CONV DB,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO EB
         ZC_CONV DB,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO EB
         ZC_CONV DB,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO EB
         ZC_CONV DB,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
         CDFBR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CDGBR ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
         CDFBR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV DB,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DB,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV DB,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_DB
         LEDBR ZC_F0,ZC_F0
         LE    ZC_F1,&N_TARGET
         SEBR  ZC_F1,ZC_F0
         STE   ZC_F1,&N_TARGET
.*
.*  SUB_FLD ?? TO DB
.*
         AWHEN C'5'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DB
         ZC_CONV DB,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO DB
         ZC_CONV DB,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO DB
         ZC_CONV DB,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO DB
         ZC_CONV DB,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DB
         ZC_CONV DB,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DB
         ZC_CONV DB,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DB
         ZC_CONV DB,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DB
         ZC_CONV DB,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DB
         ZC_CONV DB,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
         CDFBR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CDGBR ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
         CDFBR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV DB,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DB,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV DB,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_DB
         LD    ZC_F1,&N_TARGET
         SDBR  ZC_F1,ZC_F0
         STD   ZC_F1,&N_TARGET
.*
.*  SUB_FLD ?? TO LB
.*
         AWHEN C'6'
         LD    ZC_F1,&N_TARGET
         LD    ZC_F3,8+&N_TARGET
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO LB
         ZC_CONV LB,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO LB
         ZC_CONV LB,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO LB
         ZC_CONV LB,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO LB  
         ZC_CONV LB,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO LB
         ZC_CONV LB,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO LB
         ZC_CONV LB,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO LB
         ZC_CONV LB,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO LB
         ZC_CONV LB,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO LB
         ZC_CONV LB,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
         CXFBR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CXGBR ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
         CXFBR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV LB,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV LH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV LB,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_LB
         LD    ZC_F1,&N_TARGET
         LD    ZC_F3,8+&N_TARGET
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,&N_TARGET
         STD   ZC_F3,8+&N_TARGET
.*
.*  SUB_FLD ?? TO ED (FIRST TO DD, THEN ADD DD, THEN CVT TO ED)
.*
         AWHEN C'7'                     ADD ?? TO ED
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DD
         ZC_CONV DD,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO DD
         ZC_CONV DD,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO DD
         ZC_CONV DD,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO DD
         ZC_CONV DD,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DD
         ZC_CONV DD,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DD
         ZC_CONV DD,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DD
         ZC_CONV DD,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DD
         ZC_CONV DD,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DD
         ZC_CONV DD,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         LGF   ZC_R0,&N_SOURCE
         CDGTR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CDGTR ZC_F0,ZC_R0
               AWHEN C'H'
         LGH   ZC_R0,&N_SOURCE
         CDGTR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV DD,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DD,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_DD
         LE    ZC_F1,&N_TARGET
         LDETR ZC_F1,ZC_F1,0
         SDTR  ZC_F1,ZC_F1,ZC_F0
         LEDTR ZC_F1,0,ZC_F1,0
         STE   ZC_F1,&N_TARGET
.*
.*  SUB_FLD ?? TO DD
.*
         AWHEN C'8'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DD
         ZC_CONV DD,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO DD
         ZC_CONV DD,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO DD
         ZC_CONV DD,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO DD
         ZC_CONV DD,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DD
         ZC_CONV DD,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DD
         ZC_CONV DD,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DD
         ZC_CONV DD,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DD
         ZC_CONV DD,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DD
         ZC_CONV DD,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         LGF   ZC_R0,&N_SOURCE
         CDGTR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CDGTR ZC_F0,ZC_R0
               AWHEN C'H'
         LGH   ZC_R0,&N_SOURCE
         CDGTR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV DD,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DD,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_DD
         LD    ZC_F1,&N_TARGET
         SDTR  ZC_F1,ZC_F1,ZC_F0                
         STD   ZC_F1,&N_TARGET
.*
.*  SUB_FLD ?? TO LD
.*
         AWHEN C'9'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO LD
         ZC_CONV LD,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO LD
         ZC_CONV LD,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO LD
         ZC_CONV LD,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO LD
         ZC_CONV LD,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO LD
         ZC_CONV LD,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO LD
         ZC_CONV LD,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO LD
         ZC_CONV LD,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO LD
         ZC_CONV LD,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO LD
         ZC_CONV LD,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         LGF   ZC_R0,&N_SOURCE
         CXGTR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
         CXGTR ZC_F0,ZC_R0
               AWHEN C'H'
         LGH   ZC_R0,&N_SOURCE
         CXGTR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
               AWHEN C'Q'  RPI 1004
         ZC_CONV LD,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
               ACALL SCALE_LD
         LD    ZC_F1,&N_TARGET
         LD    ZC_F3,8+&N_TARGET
         SXTR  ZC_F1,ZC_F1,ZC_F0
         STD   ZC_F1,&N_TARGET
         STD   ZC_F3,8+&N_TARGET
.*
.*  SUB_FLD ?? TO F/A/I
.*
         AWHEN C'F',C'A',C'I'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    ZC_F0,&N_SOURCE
               ACALL SCALE_EH
         CFER  ZC_R0,0,ZC_F0
               AWHEN C'2'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DH
         CFDR  ZC_R0,0,ZC_F0
               AWHEN C'3'
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LH
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         ZC_CONV Q,LH
         LR    ZC_R0,ZC_R1
               AWHEN C'4' 
         LE    ZC_F0,&N_SOURCE
         LDEBR ZC_F0,ZC_F0
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
         ZC_CONV Q,DB
         LR    ZC_R0,ZC_R1
               AWHEN C'5'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
         ZC_CONV Q,DB
         LR    ZC_R0,ZC_R1
               AWHEN C'6'  
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LB
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         ZC_CONV Q,LB
         LR    ZC_R0,ZC_R1
               AWHEN C'7' 
         LE    ZC_F0,&N_SOURCE
         LDETR ZC_F0,ZC_F0,0
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
         ZC_CONV Q,DD
         LR    ZC_R0,ZC_R1
               AWHEN C'8' 
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
         ZC_CONV Q,DD
         LR    ZC_R0,ZC_R1
               AWHEN C'9' 
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LD
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         ZC_CONV Q,LD
         LR    ZC_R0,ZC_R1
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
               ACALL SCALE_F
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE  
               ACALL SCALE_G
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
               ACALL SCALE_F
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
                    AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK1,&SCALE,0                  
                    AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK1,64-&SCALE,0               
                    AEND           RPI 1178                
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV Q,LD
         LR    ZC_R0,ZC_R1
               AWHEN C'Q'
         LG    ZC_R0,8+&N_SOURCE
               ACALL SCALE_G
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
                    AIF (&SCALE GT 0)             
         SRP ZCVT_PWORK1,&SCALE,0                  
                    AELSEIF (&SCALE LT 0)         
         SRP ZCVT_PWORK1,64-&SCALE,0               
                    AEND                          
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV Q,LD
         LR    ZC_R0,ZC_R1
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND
         L     ZC_R1,&N_TARGET
         SR    ZC_R1,ZC_R0
         ST    ZC_R1,&N_TARGET             
.*
.*  SUB_FLD ?? TO G    
.*
         AWHEN C'G'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    ZC_F0,&N_SOURCE
               ACALL SCALE_EH
         CGER  ZC_R0,0,ZC_F0
               AWHEN C'2'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DH
         CGDR  ZC_R0,0,ZC_F0
               AWHEN C'3'   
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LH
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LH 
         LGR   ZC_R0,ZC_R1
               AWHEN C'4'                 
         LE    ZC_F0,&N_SOURCE
         LDEBR ZC_F0,ZC_F0
               ACALL SCALE_DB 
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DB 
         LGR   ZC_R0,ZC_R1
               AWHEN C'5'               
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DB 
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DB 
         LGR   ZC_R0,ZC_R1
               AWHEN C'6'               
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LB
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LB 
         LGR   ZC_R0,ZC_R1
              AWHEN C'7'               
         LE    ZC_F0,&N_SOURCE
         LDETR ZC_F0,ZC_F0,0
               ACALL SCALE_DD 
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DD 
         LGR   ZC_R0,ZC_R1
               AWHEN C'8'               
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DD 
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DD 
         LGR   ZC_R0,ZC_R1
               AWHEN C'9'               
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LD
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LD 
         LGR   ZC_R0,ZC_R1
               AWHEN C'F',C'A',C'I'
         LGF   ZC_R0,&N_SOURCE
               ACALL SCALE_G
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
               ACALL SCALE_G                          
               AWHEN C'H'
         LGH   ZC_R0,&N_SOURCE
               ACALL SCALE_G
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
                    AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK1,&SCALE,0                  
                    AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK1,64-&SCALE,0               
                    AEND           RPI 1178                
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV Q,LD
         LGR   ZC_R0,ZC_R1
               AWHEN C'Q'
         LG    ZC_R0,8+&N_SOURCE IGNORE HIGH 64 BITS
               ACALL SCALE_G
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
                    AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK1,&SCALE,0                  
                    AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK1,64-&SCALE,0               
                    AEND           RPI 1178                
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1   
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV Q,LD
         LGR   ZC_R0,ZC_R1
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         LG    ZC_R1,&N_TARGET
         SGR   ZC_R1,ZC_R0
         STG   ZC_R1,&N_TARGET
.*
.*  SUB_FLD ?? TO H    
.*
         AWHEN C'H'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    ZC_F0,&N_SOURCE
               ACALL SCALE_EH
         CFER  ZC_R0,0,ZC_F0
               AWHEN C'2'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DH
         CFDR  ZC_R0,0,ZC_F0
               AWHEN C'3'
         LD    ZC_F0,&N_SOURCE
         LD    ZC_R2,8+&N_SOURCE
               ACALL SCALE_LH
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LH
         LR    ZC_R0,ZC_R1
               AWHEN C'4' 
         LE    ZC_F0,&N_SOURCE
         LDEBR ZC_F0,ZC_F0
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DB
         LR    ZC_R0,ZC_R1
               AWHEN C'5'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DB
         LR    ZC_R0,ZC_R1
               AWHEN C'6'  
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LB
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LB
         LR    ZC_R0,ZC_R1
               AWHEN C'7' 
         LE    ZC_F0,&N_SOURCE
         LDETR ZC_F0,ZC_F0,0
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DD
         LR    ZC_R0,ZC_R1
               AWHEN C'8' 
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DD
         LR    ZC_R0,ZC_R1
               AWHEN C'9' 
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LD
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LD
         LR    ZC_R0,ZC_R1
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE
               ACALL SCALE_F
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE  
               ACALL SCALE_G
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
               ACALL SCALE_F
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
                    AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK1,&SCALE,0                  
                    AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK1,64-&SCALE,0               
                    AEND           RPI 1178                
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         ZC_CONV Q,LD
         LR    ZC_R0,ZC_R1
               AWHEN C'Q'
         LG    ZC_R0,8+&N_SOURCE
               ACALL SCALE_G
         LR    ZC_R0,ZC_R1
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
                    AIF (&SCALE GT 0)             
         SRP ZCVT_PWORK1,&SCALE,0                  
                    AELSEIF (&SCALE LT 0)         
         SRP ZCVT_PWORK1,64-&SCALE,0               
                    AEND                          
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                   ZC_CONV Q,LD
         LR    ZC_R0,ZC_R1
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND
         LH    ZC_R1,&N_TARGET
         SR    ZC_R1,ZC_R0
         STH   ZC_R1,&N_TARGET
     
.*
.*  SUB_FLD ?? TO P    
.*
         AWHEN C'P'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    ZC_F0,&N_SOURCE
               ACALL SCALE_EH
         LER   ZC_F4,ZC_F0
               ZC_CONV P,EH
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'2'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DH
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DH
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'3'    
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LH
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV P,LH
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'4'  
         LE    ZC_F0,&N_SOURCE
         LDEBR ZC_F0,ZC_F0
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DB
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'5'   
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DB
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'6'   
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LB
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV P,LB
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'7'  
         LE    ZC_F0,&N_SOURCE
         LDETR ZC_F0,ZC_F0,0
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'8'  
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'9' 
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LD
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV P,LD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'F',C'A',C'I'
         L     ZC_R0,&N_SOURCE  
               ACALL SCALE_F
         CVD   ZC_R0,ZCVT_PWORK
         SP    &N_TARGET,ZCVT_PWORK
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
               ACALL SCALE_G
         CVDG  ZC_R0,ZCVT_PWORK1
         SP    &N_TARGET,ZCVT_PWORK1
               AWHEN C'H'
         LH    ZC_R0,&N_SOURCE
               ACALL SCALE_F
         CVD   ZC_R0,ZCVT_PWORK
         SP    &N_TARGET,ZCVT_PWORK
               AWHEN C'P'
               AIF (&SCALE EQ 0)
         SP    &N_TARGET,&N_SOURCE
               AELSE
         ZAP   ZCVT_PWORK2,&N_SOURCE
                  AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK2,&SCALE,0                  
                  AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK2,64-&SCALE,0               
                  AEND                           
         SP    &N_TARGET,ZCVT_PWORK2
               AEND
               AWHEN C'Q'
         ZC_CONV P,Q,&N_SOURCE
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
                    AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK2,&SCALE,0                  
                    AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK2,64-&SCALE,0               
                    AEND           RPI 1178                
         SP    &N_TARGET,ZCVT_PWORK2         
               AWHEN C'Z'
                 AIF (&SCALE EQ 0)
                   :&PLEN SETA &L_SOURCE/2+1
                   ZC_PACK31  ZCVT_PWORK1,&PLEN,&N_SOURCE,&L_SOURCE
         SP    &N_TARGET,ZCVT_PWORK1(&PLEN)
                 AELSE
                   :&PLEN SETA &L_SOURCE/2+1
                   ZC_PACK31  ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
                   AIF (&SCALE GT 0)              
        SRP ZCVT_PWORK2,&SCALE,0                  
                   AELSEIF (&SCALE LT 0)          
        SRP ZCVT_PWORK2,64-&SCALE,0               
                   AEND                           
        SP    &N_TARGET,ZCVT_PWORK2
                 AEND
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
.*
.* ADD FLD ?? TO Q
.*
         AWHEN C'Q'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    ZC_F0,&N_SOURCE
               ACALL SCALE_EH
         LER   ZC_F4,ZC_F0
               ZC_CONV Q,EH
               AWHEN C'2'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DH
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DH
               AWHEN C'3'    
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LH
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LH
               AWHEN C'4'  
         LE    ZC_F0,&N_SOURCE
         LDEBR ZC_F0,ZC_F0
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DB
               AWHEN C'5'   
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DB
               AWHEN C'6'   
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LB
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LB
               AWHEN C'7'  
         LE    ZC_F0,&N_SOURCE
         LDETR ZC_F0,ZC_F0,0
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DD
               AWHEN C'8'  
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV Q,DD
               AWHEN C'9' 
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LD
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV Q,LD
               AWHEN C'F',C'A',C'I'
         LGF   ZC_R0,&N_SOURCE
               ACALL SCALE_G
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
               AWHEN C'G'
         LG    ZC_R0,&N_SOURCE
               ACALL SCALE_G
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
               AWHEN C'H'
         LGH   ZC_R0,&N_SOURCE
               ACALL SCALE_G
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&N_SOURCE
               AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK2,&SCALE,0                  
               AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK2,64-&SCALE,0               
               AEND             
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
               ZC_CONV Q,LD
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&N_SOURCE
               ACALL SCALE_Q
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
               AIF (&SCALE GT 0)              
         SRP ZCVT_PWORK2,&SCALE,0                  
               AELSEIF (&SCALE LT 0)          
         SRP ZCVT_PWORK2,64-&SCALE,0               
               AEND             
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
               ZC_CONV Q,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         LMG   ZC_R2,ZC_R3,&N_TARGET
         SLGR  ZC_R3,ZC_R1
         SLBGR ZC_R2,ZC_R0            
         STMG  ZC_R2,ZC_R3,&N_TARGET
.*
.*  SUB_FLD Z    
.*
         AWHEN C'Z'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    ZC_F0,&N_SOURCE
               ACALL SCALE_EH
         LER   ZC_F4,ZC_F0
               ZC_CONV P,EH
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'2'
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DH
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DH
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'3'    
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LH
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV P,LH
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'4'  
         LE    ZC_F0,&N_SOURCE
         LDEBR ZC_F0,ZC_F0
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DB
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'5'   
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DB
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DB
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'6'   
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LB
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV P,LB
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'7'  
         LE    ZC_F0,&N_SOURCE
         LDETR ZC_F0,ZC_F0,0
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'8'  
         LD    ZC_F0,&N_SOURCE
               ACALL SCALE_DD
         LDR   ZC_F4,ZC_F0
               ZC_CONV P,DD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
               AWHEN C'9' 
         LD    ZC_F0,&N_SOURCE
         LD    ZC_F2,8+&N_SOURCE
               ACALL SCALE_LD
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
               ZC_CONV P,LD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
           AWHEN C'F',C'A',C'I'
         LGF   ZC_R0,&N_SOURCE
         CVDG  ZC_R0,ZCVT_PWORK2
                  AIF (&SCALE GT 0)              
         SRP   ZCVT_PWORK2,&SCALE,0                  
                  AELSEIF (&SCALE LT 0)          
         SRP   ZCVT_PWORK2,64-&SCALE,0               
                  AEND         
              AWHEN C'G'
                     :&PLEN SETA &L_TARGET/2+1
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         LG    ZC_R0,&N_SOURCE
         CVDG  ZC_R0,ZCVT_PWORK2
                  AIF (&SCALE GT 0)              
         SRP   ZCVT_PWORK2,&SCALE,0                  
                  AELSEIF (&SCALE LT 0)          
         SRP   ZCVT_PWORK2,64-&SCALE,0               
                  AEND         
              AWHEN C'H'
         LGH   ZC_R0,&N_SOURCE
         CVDG  ZC_R0,ZCVT_PWORK2
                  AIF (&SCALE GT 0)              
         SRP   ZCVT_PWORK2,&SCALE,0                  
                  AELSEIF (&SCALE LT 0)          
         SRP   ZCVT_PWORK2,64-&SCALE,0               
                  AEND         
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&N_SOURCE
                  AIF (&SCALE GT 0)              
         SRP   ZCVT_PWORK2,&SCALE,0                  
                  AELSEIF (&SCALE LT 0)          
         SRP   ZCVT_PWORK2,64-&SCALE,0               
                  AEND         
                AWHEN C'Q'
                  ZC_CONV P,Q,&N_SOURCE
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
                  AIF (&SCALE GT 0)              
         SRP   ZCVT_PWORK2,&SCALE,0                  
                  AELSEIF (&SCALE LT 0)          
         SRP   ZCVT_PWORK2,64-&SCALE,0               
                  AEND                           
               AWHEN C'Z'
                  ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
                  AIF (&SCALE GT 0)              
         SRP   ZCVT_PWORK2,&SCALE,0                  
                  AELSEIF (&SCALE LT 0)          
         SRP   ZCVT_PWORK2,64-&SCALE,0               
                  AEND                           
                AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
                AEND 
               :&PLEN1 SETA &L_TARGET/2+1
               ZC_PACK31 ZCVT_PWORK1,&PLEN1,&N_TARGET,&L_TARGET
         SP    ZCVT_PWORK1(&PLEN1),ZCVT_PWORK2
               :&ST SETB &S_TARGET
               ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN1        
         AELSE
               MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCE'           
               MEXIT
         AEND
         AEND
.*
.* SCALE R0/F0 BY 1E&SCALE
.* 
         AENTRY SCALE_EH
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=EH'1E&SCALE'
         ME    ZC_R0,0(ZC_R1)
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R1,=EH'1E&SCALE'
         DE    ZC_R0,0(ZC_R1)
               AEND
         AEND
         AENTRY SCALE_DH
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=DH'1E&SCALE'
         MD    ZC_R0,0(ZC_R1)
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R1,=DH'1E&SCALE'
         DD    ZC_R0,0(ZC_R1)
               AEND
         AEND
         AENTRY SCALE_LH
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=LH'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXR   ZC_F0,ZC_F1
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R1,=LH'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXR   ZC_F0,ZC_F1
               AEND
         AEND
         AENTRY SCALE_DB
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=DB'1E&SCALE'
         MDB   ZC_R0,0(ZC_R1)
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R1,=DB'1E&SCALE'
         DDB   ZC_R0,0(ZC_R1)
               AEND
         AEND
         AENTRY SCALE_LB
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=LB'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXBR  ZC_R0,ZC_R1
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R1,=LB'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXBR  ZC_R0,ZC_R1
               AEND
         AEND
         AENTRY SCALE_DD
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=DD'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         MDTR  ZC_F0,ZC_F0,ZC_F1
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R1,=DD'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         DDTR  ZC_F0,ZC_F0,ZC_F1
               AEND
         AEND
         AENTRY SCALE_LD
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=LD'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXTR  ZC_F0,ZC_F0,ZC_F1
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R1,=LD'1E&SCALE'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXTR  ZC_F0,ZC_F0,ZC_F1
               AEND
         AEND
         AENTRY SCALE_F
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=F'1E&SCALE'
         MS    ZC_R0,0(ZC_R1)
               AELSEIF (&SCALE LT 0)
         LGFR  ZC_R1,ZC_R0
         LARL  ZC_R2,=FL8'1E&SCALE'
         DSG   ZC_R0,0(ZC_R2)
         LR    ZC_R0,ZC_R1
               AEND
         AEND
         AENTRY SCALE_G
               AIF (&SCALE GT 0)
         LARL  ZC_R1,=FL8'1E&SCALE'
         MSG   ZC_R0,0(ZC_R1)
               AELSEIF (&SCALE LT 0)
         LGR   ZC_R1,ZC_R0
         LARL  ZC_R2,=FL8'1E&SCALE'
         DSG   ZC_R0,0(ZC_R2)
         LGR   ZC_R0,ZC_R1
               AEND
         AEND
         AENTRY SCALE_Q
               AIF (&SCALE GT 0)
         LARL  ZC_R2,=FL8'1E&SCALE'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
               AELSEIF (&SCALE LT 0)
         LARL  ZC_R2,=FL8'1E&SCALE'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_DIVQ128
         BASR  ZC_R14,ZC_R15
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
               AEND
         AEND
.*
.* SET ON SIZE ERROR USING G64 WITH PENDING END_ADD OR PERIOD
,*
         AENTRY SET_ON_SIZE_G64
         JO    PG_SUB_&SUB_LAB._ON_SIZE    ERROR IF OVERFLOW
         LPGR  ZC_R15,ZC_R1
         CGR   ZC_R15,ZC_R0                COMPARE ABS RESULT TO MAX
         JNL   PG_SUB_&SUB_LAB._ON_SIZE    ERROR IF TOO BIG
         &STX   ZC_R1,&N_TARGET            STORE RESULT
         AEND
.*
.* SET ON SIZE ERROR USING ZC_F32 WITH PENDING END_ADD OR PERIOD
,*
         AENTRY SET_ON_SIZE_F32
         JO    PG_SUB_&SUB_LAB._ON_SIZE    ERROR IF OVERFLOW
         LPR   ZC_R15,ZC_R1
         C     ZC_R15,0(ZC_R14)           COMPARE ABS RESULT TO MAX
         JNL   PG_SUB_&SUB_LAB._ON_SIZE   ERROR IF TOO BIG
         &STX  ZC_R1,&N_TARGET            STORE RESULT
         AEND
.*
.* SET ON SIZE ERROR USING G64_R32 WITH PENDING END_ADD OR PERIOD
,*
         AENTRY SET_ON_SIZE_G64_R32
         JO    PG_SUB_&SUB_LAB._ON_SIZE    ERROR IF OVERFLOW SET 
         STM   ZC_R0,ZC_R1,&N_TARGET
         AEND
         COPY ZCRSTLAB
         COPY ZCNUMLIT
         MEND
