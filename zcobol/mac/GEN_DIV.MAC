        MACRO
.*********************************************************************
.* z390 - Mainframe assembler emulator and run-time engine
.* Copyright (C) 2021 z390 Assembler LLC
.*
.* This file is part of z390.
.*
.* z390 is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License, or
.* (at your option) any later version.
.* z390 is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.* GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License 
.* along with this program; if not, see https://www.gnu.org/licenses.
.*********************************************************************
.* Author - Don Higgins                                              *
.* Date   - 04/07/08                                                 *
.*********************************************************************
.* 10/31/08 initial coding for Z390 GEN_DIV using GEN_MPY as model    
.* 02/25/09 RPI 1004 add support for types 1,2,E,D,L &ZC_FLOAT type    
.* 03/17/09 RPI 1004 add support for types 1-9,Q                       
.* 04/28/09 RPI 1003 add support for ne
.* 08/08/09 RPI 1065 correct negative SRP shift to 5 bit disp.
.* 09/03/09 RPI 1065 reset ss1 length if any on &NQ and &NR for stores
.* 05/02/12 RPI 1211 add support for implied decimal points
.* 05/18/12 RPI 1217 replace SCALE_F with SCALE_G to prevent F/H ovf.
.* 17-01-22 JH RPI 1559 Error in GEN_DIV where &LNQ should be &LQ
.* 17-01-22 JH RPI 1560 Error in GEN_DIV where &LNR should be &LR
.*                      (two locations)
.*********************************************************************
       GEN_DIV &NDD,&TDD,&LDD,&PDD, DIVIDEND  NAME/LIT,TYPE,LEN,PLACES X                  
               &NDR,&TDR,&LDR,&PDR, DIVISOR   NAME/LIT,TYPE,LEN,PLACES X                  
               &NQ,&TQ,&LQ,&SQ,&PQ, QUOTIENT  NAME, TYPE,LEN,SIGN,PLCS X                  
               &NR,&TR,&LR,&SR,&PR, REMAINDER NAME, TYPE,LEN,SIGN,PLCS X
               &ROUNDED,        1 IF ROUNDED SPECIFIED                 X
               &ON_SIZE,        1 IF ON SIZE SPECIFIED                 X
               &NOT_ON_SIZE     1 IF NOT_ON_SIZE SPECIFIED            
       :&LAB SETC '&NQ'
       ACALL RESET_LAB_LEN   RPI 1065
       :&NQ_ST SETC '&LAB'
       :&LAB SETC '&NR'
       ACALL RESET_LAB_LEN
       :&NR_ST SETC '&LAB'
.*
.* SET NDDX TO ZC_R2 FOR LIT AND SET LDDP IF P, LDDZ IF Z 
.*
      AIF (&LDD EQ 0)                                                  
       ACASE (C2A('&TDD'))
       AWHEN C'1'
         LARL  ZC_R2,=EH'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'2'
         LARL  ZC_R2,=DH'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'3'
         LARL  ZC_R2,=LH'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'4'
         LARL  ZC_R2,=EB'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'5'
         LARL  ZC_R2,=DB'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'6'
         LARL  ZC_R2,=LB'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'7'
         LARL  ZC_R2,=ED'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'8'
         LARL  ZC_R2,=DD'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'9'
         LARL  ZC_R2,=LD'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'F',C'H'
         LARL  ZC_R2,=&TDD'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'G'
         LARL  ZC_R2,=FL8'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'P'
         :&LDDP SETA K'&NDD
         AIF ('&NDD'(1,1) LT '0')
             :&LDDP SETA &LDDP-1
         AEND
         :&LDDP SETA &LDDP/2+1
         :&LDDP SETA (&LDDP+1)/2*2 ROUNDED EVEN FOR LARL
         AIF (&LDDP GT 16)
             :&LDDP SETA 16
         AEND
         LARL  ZC_R2,=&TDD.L&LDDP'&NDD'
         :&NDDX SETC '0(&LDDP,ZC_R2)'
       AWHEN C'Q'
         LARL  ZC_R2,=FL16'&NDD'
         :&NDDX SETC '0(ZC_R2)'
       AWHEN C'Z'
         :&LDDZ SETA K'&NDD
         AIF ('&NDD'(1,1) LT '0')
             :&LDDZ SETA &LDDZ-1
         AEND
         :&LDDZ SETA (&LDDZ+1)/2*2 ROUNDED EVEN FOR LARL
         LARL  ZC_R2,=&TDD.L&LDDZ'&NDD'
         AIF (&LDDZ EQ 32)
           :&LDDZ SETA 31
           :&NDDX SETC '1(ZC_R2)'
         AELSE
           :&NDDX SETC '0(ZC_R2)'
         AEND
       AELSE
               MNOTE 8,'GEN_DIV INVALID DIVIDEND TYPE - &TDD' 
       AEND
      AELSE
         :&NDDX SETC '&NDD'
         :&LDDP SETA &LDD
         :&LDDZ SETA &LDD
      AEND
.*
.* SET NDRX TO ZC_R1 FOR LIT AND SET LDRP IF P, LDRZ IF Z 
.*
      AIF (&LDR EQ 0)                                     
       ACASE (C2A('&TDR'))
       AWHEN C'1'
         LARL  ZC_R1,=EH'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'2'
         LARL  ZC_R1,=DH'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'3'
         LARL  ZC_R1,=LH'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'4'
         LARL  ZC_R1,=EB'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'5'
         LARL  ZC_R1,=DB'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'6'
         LARL  ZC_R1,=LB'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'7'
         LARL  ZC_R1,=ED'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'8'
         LARL  ZC_R1,=DD'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'9'
         LARL  ZC_R1,=LD'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'F',C'H'
         LARL  ZC_R1,=&TDR'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'G'
         LARL  ZC_R1,=FL8'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'P'
         :&LDRP SETA K'&NDR
         AIF ('&NDR'(1,1) LT '0')
             :&LDRP SETA &LDRP-1
         AEND
         :&LDRP SETA &LDRP/2+1
         :&LDRP SETA (&LDRP+1)/2*2 ROUNDED EVEN FOR LARL
         AIF (&LDRP GT 16)
             :&LDRP SETA 16
         AEND
         LARL  ZC_R1,=&TDR.L&LDRP'&NDR'
         :&NDRX SETC '0(&LDRP,ZC_R1)'
       AWHEN C'Q'
         LARL  ZC_R1,=FL16'&NDR'
         :&NDRX SETC '0(ZC_R1)'
       AWHEN C'Z'
         :&LDRZ SETA K'&NDR
         AIF ('&NDR'(1,1) LT '0')
             :&LDRZ SETA &LDRZ-1
         AEND
         :&LDRZ SETA (&LDRZ+1)/2*2 ROUNDED EVEN FOR LARL
         LARL  ZC_R1,=&TDR.L&LDRZ'&NDR'
         AIF (&LDRZ EQ 32)
           :&LDRZ SETA 31
           :&NDRX SETC '1(ZC_R1)'
         AELSE
           :&NDRX SETC '0(ZC_R1)'
         AEND
         :&NDRX SETC '0(ZC_R1)'
       AEND
      AELSE
         :&NDRX SETC '&NDR'
         :&LDRP SETA &LDR
         :&LDRZ SETA &LDR
      AEND
.*
.* SELECT TYPE OF DIVIVISION BASED ON DIVIDEND TYPE
.*
         ACASE (C2A('&TDD'))
.*
.* DIVIDE DIVIDEND TYPE EH QUOTIENT IN ZC_F0 NO REMAINDER
.*
         AWHEN C'1'                 DIVIDE EH BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV EH,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV EH,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV EH,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV EH,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV EH,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV EH,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV EH,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV EH,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV EH,LD,&NDRX
               AWHEN C'F'
         L     ZC_R0,&NDRX
         CEFR  ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CEGR  ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&NDRX
         CEFR  ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EH,LD        
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&NDRX
                  ZC_CONV EH,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
               ZC_CONV EH,LD
                  AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-1'
               AEND
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,&NDDX
                    ACALL SFT_RND_EH
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE EH QUOTIENT FROM ZC_F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LER   ZC_F4,ZC_F0
                 ZC_CONV DH,EH
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LER   ZC_F4,ZC_F0
                 ZC_CONV LH,EH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LER   ZC_F4,ZC_F0
                 ZC_CONV EB,EH
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LER   ZC_F4,ZC_F0
                 ZC_CONV DB,EH
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LER   ZC_F4,ZC_F0
                 ZC_CONV LB,EH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LER   ZC_F4,ZC_F0
                 ZC_CONV ED,EH
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LER   ZC_F4,ZC_F0
                 ZC_CONV DD,EH
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LER   ZC_F4,ZC_F0
                 ZC_CONV LD,EH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFER  0,0,0
         ST    0,&NQ_ST
               AWHEN C'G'
         CGER  0,0,0
         STG   0,&NQ_ST
               AWHEN C'H'
         CFER  0,0,0
         STH   0,&NQ_ST
               AWHEN C'P'
         CFER  0,0,0
         CVD   0,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPER   ZC_F4,ZC_F0
                   AELSE
         LER    ZC_F4,ZC_F0
                   AEND
                   ZC_CONV Q,EH
         STMG  ZC_R0,ZC_R1,&NQ_ST
               AWHEN C'Z'
         CFER  0,0,0
         CVD   0,ZCVT_PWORK
                  ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE DH WITH QUOTIENT IN ZC_F0 NO REMAINDER
.*
         AWHEN C'2'                    DIV DH BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DH,EH,&NDRX
               AWHEN C'2'
.*                 ZC_CONV DH,DH,&NDRX
         LD    ZC_F0,&NDRX
               AWHEN C'3'          
                 ZC_CONV DH,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DH,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DH,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DH,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DH,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DH,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DH,LD,&NDRX
               AWHEN C'F'
         L     ZC_R0,&NDRX
         CDFR  ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CDGR  ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&NDRX
         CDFR  ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DH,LD
               AWHEN C'Q'
                 ZC_CONV DH,Q,&NDRX
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DH,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,&NDDX
                    ACALL SFT_RND_DH
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE DH QUOTIENT FROM ZC_F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EH,DH
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
.*       LDR   ZC_F4,ZC_F0
.*               ZC_CONV DH,DH
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LH,DH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EB,DH
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DB,DH
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LB,DH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV ED,DH
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DD,DH
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LD,DH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFDR  ZC_R0,ZC_F0,0
         ST    ZC_R0,&NQ_ST
               AWHEN C'G'
         CGDR  ZC_R0,ZC_F0,0
         STG   ZC_R0,&NQ_ST
               AWHEN C'H'
         CFDR  ZC_R0,ZC_F0,0
         STH   ZC_R0,&NQ_ST
               AWHEN C'P'
         CGDR  ZC_R0,ZC_F0,0
         CVDG  ZC_R0,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR  ZC_F4,ZC_R0
                   AELSE
         LDR   ZC_F4,ZC_F0
                   AEND
                   ZC_CONV Q,DH
         STMG  0,1,&NQ_ST                             
               AWHEN C'Z'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV P,DH
         STMG   ZC_R0,ZC_R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE LH WITH QUOTIENT IN ZC_F0-ZC_F2 NO REMAINDER
.*
         AWHEN C'3'                    DIV LH BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV LH,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV LH,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV LH,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV LH,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV LH,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV LH,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV LH,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV LH,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV LH,LD,&NDRX
               AWHEN C'F'
         L     ZC_R0,&NDRX
         CXFR  ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CXGR  ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&NDRX
         CXFR  ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LH,LD
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&NDRX
                 ZC_CONV LH,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LH,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,&NDDX
         LD    ZC_F2,8+&NDDX
                    ACALL SFT_RND_LH
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE LH QUOTIENT FROM ZC_F0-ZC_F2 REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV EH,LH
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DH,LH
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV EB,LH
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DB,LH
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV LB,LH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV ED,LH
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DD,LH
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV LD,LH
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFXR  ZC_R0,ZC_F0,0
         ST    ZC_R0,&NQ_ST
               AWHEN C'G'
         CGXR  ZC_R0,ZC_F0,0
         STG   ZC_R0,&NQ_ST
               AWHEN C'H'
         CFXR  ZC_R0,ZC_F0,0
         STH   ZC_R0,&NQ_ST
               AWHEN C'P'
         CGXR  ZC_R0,ZC_F0,0
         CVDG  ZC_R0,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPXR  ZC_F4,ZC_R0
                   AELSE
         LDR   ZC_F4,ZC_F0
                   AEND
         LDR   ZC_F6,ZC_F2
                   ZC_CONV Q,LH
         STMG  0,1,&NQ_ST                             
               AWHEN C'Z'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV P,LH
         STMG   ZC_R0,ZC_R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE EB QUOTIENT IN ZC_F0 NO REMAINDER
.*
         AWHEN C'4'                 DIVIDE EB BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV EB,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV EB,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV EB,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV EB,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV EB,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV EB,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV EB,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV EB,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV EB,LD,&NDRX
               AWHEN C'F'
         L     ZC_R0,&NDRX
         CEFBR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CEGBR ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&NDRX
         CEFBR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EB,LD        
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&NDRX
                  ZC_CONV EB,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
               ZC_CONV EB,LD
                  AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-1'
               AEND
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,&NDDX
                    ACALL SFT_RND_EB
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE EB QUOTIENT FROM ZC_F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LER   ZC_F4,ZC_F0
                 ZC_CONV EH,EB
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LER   ZC_F4,ZC_F0
                 ZC_CONV DH,EB
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LER   ZC_F4,ZC_F0
                 ZC_CONV LH,EB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LER   ZC_F4,ZC_F0
                 ZC_CONV DB,EB
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LER   ZC_F4,ZC_F0
                 ZC_CONV LB,EB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LER   ZC_F4,ZC_F0
                 ZC_CONV ED,EB
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LER   ZC_F4,ZC_F0
                 ZC_CONV DD,EB
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LER   ZC_F4,ZC_F0
                 ZC_CONV LD,EB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFEBR 0,0,0
         ST    0,&NQ_ST
               AWHEN C'G'
         CGEBR 0,0,0
         STG   0,&NQ_ST
               AWHEN C'H'
         CFEBR 0,0,0
         STH   0,&NQ_ST
               AWHEN C'P'
         CFEBR 0,0,0
         CVD   0,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPER   ZC_F4,ZC_F0
                   AELSE
         LER    ZC_F4,ZC_F0
                   AEND
                   LE ZC_F4,ZC_F0
                   ZC_CONV Q,EB
         STMG  ZC_R0,ZC_R1,&NQ_ST
               AWHEN C'Z'
         CFEBR 0,0,0
         CVD   0,ZCVT_PWORK
                  ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE DB WITH QUOTIENT IN ZC_F0 NO REMAINDER
.*
         AWHEN C'5'                    DIV DB BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DB,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV DB,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV DB,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DB,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DB,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DB,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DB,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DB,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DB,LD,&NDRX
               AWHEN C'F'
         L     ZC_R0,&NDRX
         CDFBR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CDGBR ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&NDRX
         CDFBR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DB,LD
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&NDRX
                 ZC_CONV DB,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DB,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,&NDDX
                    ACALL SFT_RND_DB
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE DB QUOTIENT FROM ZC_F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EH,DB
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DH,DB
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LH,DB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EB,DB
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LB,DB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV ED,DB
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DD,DB
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LD,DB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFDBR ZC_R0,ZC_F0,0
         ST    ZC_R0,&NQ_ST
               AWHEN C'G'
         CGDBR ZC_R0,ZC_F0,0
         STG   ZC_R0,&NQ_ST
               AWHEN C'H'
         CFDBR ZC_R0,ZC_F0,0
         STH   ZC_R0,&NQ_ST
               AWHEN C'P'
         CGDBR ZC_R0,ZC_F0,0
         CVDG  ZC_R0,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR  ZC_F4,ZC_R0
                   AELSE
         LDR   ZC_F4,ZC_F0
                   AEND
                   ZC_CONV Q,DB
         STMG  0,1,&NQ_ST                             
               AWHEN C'Z'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV P,DB
         STMG   ZC_R0,ZC_R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE LB WITH QUOTIENT IN ZC_F0-ZC_F2 NO REMAINDER
.*
         AWHEN C'6'                    DIV LB BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV LB,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV LB,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV LB,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV LB,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV LB,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV LB,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV LB,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV LB,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV LB,LD,&NDRX
               AWHEN C'F'
         L     ZC_R0,&NDRX
         CXFBR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CXGBR ZC_F0,ZC_R0
               AWHEN C'H'
         LH    ZC_R0,&NDRX
         CXFBR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LB,LD
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&NDRX
                 ZC_CONV LB,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LB,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,&NDDX
         LD    ZC_F2,8+&NDDX
                    ACALL SFT_RND_LB
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE LB QUOTIENT FROM ZC_F0-ZC_F2 REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV EH,LB
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DH,LB
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV LH,LB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV EB,LB
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DB,LB
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV LB,LB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV ED,LB
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DD,LB
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV LD,LB
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFXBR ZC_R0,ZC_F0,0
         ST    ZC_R0,&NQ_ST
               AWHEN C'G'
         CGXBR ZC_R0,ZC_F0,0
         STG   ZC_R0,&NQ_ST
               AWHEN C'H'
         CFXBR ZC_R0,ZC_F0,0
         STH   ZC_R0,&NQ_ST
               AWHEN C'P'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV P,LB
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPXR  ZC_F4,ZC_R0
                   AELSE
         LDR   ZC_F4,ZC_F0
                   AEND
         LDR   ZC_F6,ZC_F2
                   ZC_CONV Q,LB
         STMG  0,1,&NQ_ST                             
               AWHEN C'Z'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV P,LB
         STMG   ZC_R0,ZC_R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE ED QUOTIENT IN ZC_F0 NO REMAINDER
.*
         AWHEN C'7'                 DIVIDE ED BY ?? (USE DD)
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DD,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV DD,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV DD,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DD,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DD,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DD,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DD,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DD,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DD,LD,&NDRX
               AWHEN C'F'
         LGF   ZC_R0,&NDRX
         CDGTR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CDGTR ZC_F0,ZC_R0
               AWHEN C'H'
         LGH   ZC_R0,&NDRX
         CDGTR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DD,LD        
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&NDRX
                  ZC_CONV DD,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
               ZC_CONV DD,LD
                  AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-1'
               AEND
         LDR   ZC_F1,ZC_F0
         LE    ZC_F0,&NDDX
         LDETR ZC_F0,ZC_F0,0
                    ACALL SFT_RND_DD
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE ED QUOTIENT FROM ZC_F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EH,DD
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DH,DD
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LH,DD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EB,DD
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DB,DD
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LB,DD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV ED,DD
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LD,DD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFDTR 0,0,0
         ST    0,&NQ_ST
               AWHEN C'G'
         CGDTR 0,0,0
         STG   0,&NQ_ST
               AWHEN C'H'
         CGDTR 0,0,0
         STH   0,&NQ_ST
               AWHEN C'P'
         CFDTR 0,0,0
         CVD   0,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR   ZC_F4,ZC_F0
                   AELSE
         LDR    ZC_F4,ZC_F0
                   AEND
                   LE ZC_F4,ZC_F0
                   ZC_CONV Q,DD
         STMG  ZC_R0,ZC_R1,&NQ_ST
               AWHEN C'Z'
         CFDTR 0,0,0
         CVD   0,ZCVT_PWORK
                  ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE DD WITH QUOTIENT IN ZC_F0 NO REMAINDER
.*
         AWHEN C'8'                    DIV DD BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DD,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV DD,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV DD,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DD,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DD,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DD,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DD,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DD,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DD,LD,&NDRX
               AWHEN C'F'
         LGF   ZC_R0,&NDRX
         CDGTR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CDGTR ZC_F0,ZC_R0
               AWHEN C'H'
         LGH   ZC_R0,&NDRX
         CDGTR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DD,LD
               AWHEN C'Q'
         LMG   ZC_R0,ZC_R1,&NDRX
                 ZC_CONV DD,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,&NDDX
                    ACALL SFT_RND_DD
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE DD QUOTIENT FROM ZC_F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EH,DD
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DH,DD
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LH,DD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV EB,DD
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DB,DD
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LB,DD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV ED,DD
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV DD,DD
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV LD,DD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFDTR ZC_R0,ZC_F0,0
         ST    ZC_R0,&NQ_ST
               AWHEN C'G'
         CGDTR ZC_R0,ZC_F0,0
         STG   ZC_R0,&NQ_ST
               AWHEN C'H'
         CGDTR ZC_R0,ZC_F0,0
         STH   ZC_R0,&NQ_ST
               AWHEN C'P'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV P,DD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR  ZC_F4,ZC_R0
                   AELSE
         LDR   ZC_F4,ZC_F0
                   AEND
                   ZC_CONV Q,DD
         STMG  0,1,&NQ_ST                             
               AWHEN C'Z'
         LDR   ZC_F4,ZC_F0
                 ZC_CONV P,DD
         STMG   ZC_R0,ZC_R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE LD WITH QUOTIENT IN ZC_F0-ZC_F2 NO REMAINDER
.*
         AWHEN C'9'                    DIV LD BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV LD,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV LD,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV LD,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV LD,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV LD,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV LD,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV LD,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV LD,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV LD,LD,&NDRX
               AWHEN C'F'
         LGF   ZC_R0,&NDRX
         CXGTR ZC_F0,ZC_R0
               AWHEN C'G'
         LG    ZC_R0,&NDRX
         CXGTR ZC_F0,ZC_R0
               AWHEN C'H'
         LGH   ZC_R0,&NDRX
         CXGTR ZC_F0,ZC_R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F0,ZC_R0
               AWHEN C'Q'
                 ZC_CONV LD,Q,&NDRX
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F0,ZC_R0
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,&NDDX
         LD    ZC_F2,8+&NDDX
                    ACALL SFT_RND_LD
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE LD QUOTIENT FROM ZC_F0-ZC_F2 REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV EH,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DH,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV LH,LD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV EB,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DB,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV LB,LD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV ED,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV DD,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         CFXTR ZC_R0,ZC_F0,0
         ST    ZC_R0,&NQ_ST
               AWHEN C'G'
         CGXTR ZC_R0,ZC_F0,0
         STG   ZC_R0,&NQ_ST
               AWHEN C'H'
         CGXTR ZC_R0,ZC_F0,0
         STH   ZC_R0,&NQ_ST
               AWHEN C'P'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV P,LD
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPXR  ZC_F4,ZC_R0
                   AELSE
         LDR   ZC_F4,ZC_F0
                   AEND
         LDR   ZC_F6,ZC_F2
                   ZC_CONV Q,LD
         STMG  0,1,&NQ_ST                             
               AWHEN C'Z'
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
                 ZC_CONV P,LD
         STMG   ZC_R0,ZC_R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE F WITH QUOTIENT IN ZC_R1 AND REMAINDER IN ZC_R0
.*
         AWHEN C'F'
         MVC   ZCVT_NDDX(4),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96 BITS
               AWHEN C'F'
         LGF   ZC_R2,&NDRX
               AWHEN C'G'
         LG    ZC_R2,&NDRX    HIGH 32 BITS IGNORED
               AWHEN C'H'
         LGH   ZC_R2,&NDRX
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&NDRX
         CVBG  ZC_R2,ZCVT_PWORK1
               AWHEN C'Q'
         LG    ZC_R2,8+&NDRX  IGNORE HIGH 96 BITS
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK1,16,&NDRX,&LDR
         CVBG  ZC_R2,ZCVT_PWORK1
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         LGF   ZC_R1,ZCVT_NDDX
                    ACALL SFT_RND_G
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
               ACALL STORE_FH_QR
.*
.* DIVIDE DIVIDEND TYPE G WITH QUOTIENT IN ZC_R1 AND REMAINDER IN ZC_R0
.*
         AWHEN C'G'
         MVC   ZCVT_NDDX(8),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
                 LGR ZC_R2,ZC_R1 IGNORE HIGH 64 BITS
               AWHEN C'F'
         LGF   2,&NDRX
               AWHEN C'G'
         LG    2,&NDRX
               AWHEN C'H'
         LGH   2,&NDRX
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&NDRX
         CVBG  2,ZCVT_PWORK1
               AWHEN C'Q'
         LG    2,8+&NDRX  IGNORE HIGH 64 BITS
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK1,16,&NDRX,&LDR
         CVBG  2,ZCVT_PWORK1
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         LG    1,ZCVT_NDDX
                    ACALL SFT_RND_G
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE G QUOTIENT FROM ZC_R1
.*
               AIF (&SQ EQ 0)
         LPGR  1,1
               AEND
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV EH,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DH,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LH,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV EB,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DB,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LB,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV ED,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DD,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LD,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         ST    1,&NQ_ST
               AWHEN C'G'
         STG   1,&NQ_ST
               AWHEN C'H'
         STH   1,&NQ_ST
               AWHEN C'P'
         CVDG  1,ZCVT_PWORK1
         ZAP   &NQ,ZCVT_PWORK1
               AWHEN C'Q'
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,&NQ_ST
               AWHEN C'Z'
         CVDG  1,ZCVT_PWORK1
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE G REMAINDER FROM ZC_R0  (NO REMAINDERS FOR FP)
.*
             AIF ('&TR' NE '')
               ACASE (C2A('&TR'))  
               AWHEN C'F'
               AIF (&SR EQ 0)
         LPGR  0,0
               AEND
         ST    0,&NR_ST      IGNORE HIGH 32 BITS
               AWHEN C'G'
               AIF (&SR EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NR_ST
               AWHEN C'H'
               AIF (&SR EQ 0)
         LPGR  0,0
               AEND
         STH   0,&NR_ST      IGNORE HIGH 48 BITS
               AWHEN C'P'
         CVDG  0,ZCVT_PWORK1
         ZAP   &NR,ZCVT_PWORK1
               AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
               AEND
               AWHEN C'Q'
               AIF (&SQ EQ 0)
         LPGR  1,1
               AEND
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,&NR_ST
               AWHEN C'Z'
         CVDG  0,ZCVT_PWORK1
         :&PLEN SETA &LR/2+1
         :&POFF SETA 16-&PLEN
               ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* DIVIDE DIVIDEND TYPE H WITH QUOTIENT IN ZC_R1 AND REMAINDER IN ZC_R0
.*
         AWHEN C'H'
         MVC   ZCVT_NDDX(2),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
         LGR   ZC_R2,ZC_R1 IGNORE HIGH 96
               AWHEN C'F'
         LGF   ZC_R2,&NDRX
               AWHEN C'G'
         LG    ZC_R2,&NDRX
               AWHEN C'H'
         LGH   ZC_R2,&NDRX
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&NDRX
         CVBG  ZC_R2,ZCVT_PWORK1
               AWHEN C'Q'
         LG    ZC_R2,8+&NDRX  IGNORE HIGH 64 BITS
               AWHEN C'Z'
                ZC_PACK31 ZCVT_PWORK1,16,&NDRX,&LDR
         CVBG  ZC_R2,ZCVT_PWORK1
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         LGH   ZC_R1,ZCVT_NDDX
                    ACALL SFT_RND_G
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
               ACALL STORE_FH_QR
.*
.* DIVIDE DIVIDEND TYPE P LEAVING 
.*   Q=ZCVT_PWORK4(&LDD) R=ZCVT_PWORK4+&LDD.(&LDR)
.*
         AWHEN C'P'
         ZAP ZCVT_PWORK1(&LDDP),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV P,EH,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'2'
                 ZC_CONV P,DH,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'3'          
                 ZC_CONV P,LH,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'4'
                 ZC_CONV P,EB,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'5'
                 ZC_CONV P,DB,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'6'
                 ZC_CONV P,LB,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'7'
                 ZC_CONV P,ED,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'8'
                 ZC_CONV P,DD,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'9'
                 ZC_CONV P,LD,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'F'
         L     0,&NDRX
         CVD   0,ZCVT_PWORK2
         :&LDRP SETA 8
               AWHEN C'G'
         LG    0,&NDRX
         CVDG  0,ZCVT_PWORK2    IGNORE HIGH 32
         :&LDRP SETA 16
               AWHEN C'H'
         LH    0,&NDRX
         CVD   0,ZCVT_PWORK2
         :&LDRP SETA 8
               AWHEN C'P'
         ZAP   ZCVT_PWORK2(&LDRP),&NDRX    
               AWHEN C'Q'
                   ZC_CONV P,Q,&NDRX
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2    
         :&LDRP SETA 16
               AWHEN C'Z'
                    :&LDRP SETA &LDR/2+1
                    ZC_PACK31 ZCVT_PWORK2,&LDRP,&NDRX,&LDR
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
               ACALL SFT_RND_P
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE P QUOTIENT FROM ZCVT_PWORK4(LDDP)
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EH,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DH,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LH,LD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EB,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DB,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LB,LD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV ED,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DD,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F0,ZC_R0
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDR)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         ST    0,&NQ_ST
               AWHEN C'G'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDR)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
               ZC_CONV Q,LD
               AIF (&SQ EQ 0)
         LPGR  0,1
               AEND
         STG   0,&NQ_ST
               AWHEN C'H'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDR)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NQ_ST
               AWHEN C'P'
         ZAP   &NQ,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
               AEND
               AWHEN C'Q'
         ZAP   ZCVT_PWORK1,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK1+15,X'F'
               AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV Q,LD
         STMG  ZC_R0,ZC_R1,&NQ_ST
               AWHEN C'Z'
.***********   ZC_UNPK31 &NQ,&LNQ,&SQ,ZCVT_PWORK4,&LDDP // jclh(RPI 1559)
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK4,&LDDP  // jclh(RPI 1559)
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE P REMAINDER FROM ZCVT_PWORK4+LDDP.(LDRP) OR ZCVT_PWORK2
.*
             AIF ('&TR' NE '')
               AIF (&LDRP EQ 16)
                 :&RX SETC 'ZCVT_PWORK2'
               AELSE
                 :&RX SETC 'ZCVT_PWORK4+&LDDP.(&LDRP)'
               AEND
               ACASE (C2A('&TR'))  
               AWHEN C'1'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EH,LD
         STE   ZC_F0,&NR_ST
               AWHEN C'2'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DH,LD
         STD   ZC_F0,&NR_ST
               AWHEN C'3'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LH,LD
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'4'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EB,LD
         STE   ZC_F0,&NR_ST
               AWHEN C'5'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DB,LD
         STD   ZC_F0,&NR_ST
               AWHEN C'6'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LB,LD
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'7'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV ED,LD
         STE   ZC_F0,&NR_ST
               AWHEN C'8'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DD,LD
         STD   ZC_F0,&NR_ST
               AWHEN C'9'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F0,ZC_R0
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'F'
         ZAP   ZCVT_PWORK,&RX                         
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         ST    0,&NR_ST
               AWHEN C'G'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         CVBG  0,ZCVT_PWORK2
               AIF (&SQ EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NR_ST
               AWHEN C'H'
         ZAP   ZCVT_PWORK,&RX                         
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NR_ST
               AWHEN C'P'
         ZAP   &NR,&RX                         
               AIF (&SQ EQ 0)
         OI    &NR+&LR-1,X'0F'
               AEND
               AWHEN C'Q'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK2+15,X'F'
               AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV Q,LD
         STMG  0,1,&NR_ST
               AWHEN C'Z'
                 AIF (&LDRP EQ 16)
.**************    ZC_UNPK31 &NR,&LNR,&SR,ZCVT_PWORK2,16    // jclh(RPI 1560)
                   ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK2,16     // jclh(RPI 1560)
                 AELSE
.**************    ZC_UNPK31 &NR,&LNR,&SR,ZCVT_PWORK4,&LDRP // jclh(RPI 1560)
                   ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK4,&LDRP  // jclh(RPI 1560)
                 AEND
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* DIVIDE DIVIDEND TYPE Q WITH QUOTIENT IN ZC_R2-ZC_R3 
.* AND REMAINDER IN ZC_R0-ZC_R1
.*
         AWHEN C'Q'
         MVC   ZCVT_NDDX,&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'F'
         LGF   ZC_R3,&NDRX
         SGR   ZC_R2,ZC_R2
               AWHEN C'G'
         LG    ZC_R3,&NDRX
         SGR   ZC_R2,ZC_R2
               AWHEN C'H'
         LGH   ZC_R3,&NDRX
         SGR   ZC_R2,ZC_R2
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
               ZC_CONV Q,LD
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AWHEN C'Q'
         LMG   ZC_R2,ZC_R3,&NDRX
               AWHEN C'Z'
               ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
               ZC_CONV Q,LD
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         LMG   ZC_R0,ZC_R1,ZCVT_NDDX
                    ACALL SFT_RND_Q
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE Q REMAINDER FROM ZC_R0-ZC_R1                            
.*
             AIF (&SR EQ 0)
               ZC_LPQR ZC_R0,ZC_R0
             AEND
             AIF ('&TR' NE '')
               ACASE (C2A('&TR'))  
               AWHEN C'1'
                 ZC_CONV EH,Q
         STE   ZC_F0,&NR_ST
               AWHEN C'2'
                 ZC_CONV DH,Q
         STD   ZC_F0,&NR_ST
               AWHEN C'3'
                 ZC_CONV LH,Q
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'4'
                 ZC_CONV EB,Q
         STE   ZC_F0,&NR_ST
               AWHEN C'5'
                 ZC_CONV DB,Q
         STD   ZC_F0,&NR_ST
               AWHEN C'6'
                 ZC_CONV LB,Q
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'7'
                 ZC_CONV ED,Q
         STE   ZC_F0,&NR_ST
               AWHEN C'8'
                 ZC_CONV DD,Q
         STD   ZC_F0,&NR_ST
               AWHEN C'9'
                 ZC_CONV LD,Q
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'F'
         ST    ZC_R1,&NR_ST         IGNORE HIGH 96
               AWHEN C'G'
         STG   ZC_R1,&NR_ST         IGNORE HIGH 64
               AWHEN C'H'
         STH   ZC_R1,&NR_ST      IGNORE HIGH 112 BITS
               AWHEN C'P'
                 ZC_CONV P,Q
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK1
         ZAP   &NR,ZCVT_PWORK1
               AWHEN C'Q'
         STMG  ZC_R0,ZC_R1,&NR_ST
               AWHEN C'Z'
                 ZC_CONV P,Q
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK1
                 ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* STORE TYPE Q QUOTIENT FROM ZC_R2-ZC_R3
.*
               AIF (&SQ EQ 0)
                ZC_LPQR  ZC_R2,ZC_R2
               AEND
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV EH,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV DH,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV LH,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV EB,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV DB,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV LB,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV ED,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV DD,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
                 ZC_CONV LD,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         ST    ZC_R3,&NQ_ST
               AWHEN C'G'
         STG   ZC_R3,&NQ_ST
               AWHEN C'H'
         STH   ZC_R3,&NQ_ST
               AWHEN C'P'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
               ZC_CONV P,Q
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK1
         ZAP   &NQ,ZCVT_PWORK1
               AWHEN C'Q'
         STMG  ZC_R2,ZC_R3,&NQ_ST
               AWHEN C'Z'
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
               ZC_CONV P,Q      
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK1
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE Z WITH 
.*  Q=ZCVT_PWORK4(&LDDP) R=ZCVT_PWORK4+&LDDP.(&LDRP)
.*
         AWHEN C'Z'
               :&LDDP SETA &LDDZ/2+1
               ZC_PACK31 ZCVT_PWORK1,&LDDP,&NDDX,&LDDZ
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV P,EH,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16
               AWHEN C'2'
                 ZC_CONV P,DH,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'3'          
                 ZC_CONV P,LH,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'4'
                 ZC_CONV P,EB,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'5'
                 ZC_CONV P,DB,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'6'
                 ZC_CONV P,LB,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'7'
                 ZC_CONV P,ED,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'8'
                 ZC_CONV P,DD,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'9'
                 ZC_CONV P,LD,&NDRX
         STMG    ZC_R0,ZC_R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'F'
         L     0,&NDRX
         CVD   0,ZCVT_PWORK2
         :&LDRP SETA 8
               AWHEN C'G'
         LG    0,&NDRX
         CVDG  0,ZCVT_PWORK2 
         :&LDRP SETA 16
               AWHEN C'H'
         LH    0,&NDRX
         CVD   0,ZCVT_PWORK2                          
         :&LDRP SETA 8
               AWHEN C'P'
                :&LDRP SETA &LDR/2+1
         ZAP    ZCVT_PWORK2(&LDRP),&NDRX
               AWHEN C'Q'
                 ZC_CONV P,Q,&NDRX
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         :&LDRP SETA 16        
               AWHEN C'Z'
                    :&LDRP SETA &LDRZ/2+1
                    ZC_PACK31 ZCVT_PWORK2,&LDRP,&NDRX,&LDRZ
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
               ACALL SFT_RND_P
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE Z QUOTIENT FROM Q=ZCVT_PWORK4(LDDP)
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EH,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DH,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LH,LD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EB,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DB,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LB,LD
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV ED,LD
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DD,LD
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F0,ZC_R0
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDDP)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         ST    0,&NQ_ST
               AWHEN C'G'
         ZAP   ZCVT_PWORK1,ZCVT_PWORK4(&LDDP)
         CVBG  0,ZCVT_PWORK1
               AIF (&SQ EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NQ_ST
               AWHEN C'H'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDDP)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NQ_ST
               AWHEN C'P'
         ZAP   &NQ,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
               AEND
               AWHEN C'Q'
         ZAP   ZCVT_PWORK1,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK1+15,X'F'
               AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
                  ZC_CONV Q,LD
         STMG  ZC_R0,ZC_R1,&NQ_ST
               AWHEN C'Z'
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK4,&LDDP
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE Z REMAINDER FROM ZCVT_PWORK4(LDDP)
.*
             AIF ('&TR' NE '')
               AIF (&LDRP EQ 16)
                 :&RX SETC 'ZCVT_PWORK2'
               AELSE
                 :&RX SETC 'ZCVT_PWORK4+&LDDP.(&LDRP)'
               AEND
               ACASE (C2A('&TR'))  
               AWHEN C'1'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EH,LD
         STE   ZC_F0,&NR_ST
               AWHEN C'2'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DH,LD
         STD   ZC_F0,&NR_ST
               AWHEN C'3'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LH,LD
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'4'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV EB,LD
         STE   ZC_F0,&NR_ST
               AWHEN C'5'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DB,LD
         STD   ZC_F0,&NR_ST
               AWHEN C'6'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV LB,LD
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'7'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV ED,LD
         STE   ZC_F0,&NR_ST
               AWHEN C'8'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV DD,LD
         STD   ZC_F0,&NR_ST
               AWHEN C'9'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F0,ZC_R0
         STD   ZC_F0,&NR_ST
         STD   ZC_F2,8+&NR_ST
               AWHEN C'F'
         ZAP   ZCVT_PWORK,&RX                                  
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STD   0,&NR_ST
               AWHEN C'G'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         CVBG  0,ZCVT_PWORK2
               AIF (&SQ EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NR_ST
               AWHEN C'H'
         ZAP   ZCVT_PWORK,&RX                                  
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NR_ST
               AWHEN C'P'
         ZAP   &NR,&RX                                  
               AIF (&SQ EQ 0)
         OI    &NR+&LR-1,X'0F'
               AEND
               AWHEN C'Q'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK2+15,X'F'
               AEND
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
                 ZC_CONV Q,LD
         STMG  ZC_R0,ZC_R1,&NR_ST
               AWHEN C'Z'
                 AIF (&LDRP EQ 16)
                   ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK2,16
                 AELSE
                   ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK4+&LDDP,&LDRP
                 AEND
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* END OF DIVIDEND TYPE PROCESSING
.*
         AELSE
               MNOTE 8,'GEN_DIV INVALID DIVIDEND TYPE &TDD'
               MEXIT
         AEND
         MEXIT
.*
.* STORE TYPE F/H QUOTIENT FROM ZC_R1 AND REMAINDER FROM ZC_R0
.*
         AENTRY STORE_FH_QR
               AIF   ('&TR' NE '')
         ST    ZC_R0,ZCVT_WORKAREA  SAVE REMAINDER
               AEND
               AIF (&SQ EQ 0)
         LPR   1,1
               AEND
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV EH,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DH,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LH,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV EB,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DB,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LB,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV ED,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DD,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LGFR  ZC_R1,ZC_R1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LD,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         ST    1,&NQ_ST
               AWHEN C'G'
         LGFR  1,1
         STG   1,&NQ_ST
               AWHEN C'H'
         STH   1,&NQ_ST
               AWHEN C'P'
         CVD   1,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
               AWHEN C'Q'
         LGFR  1,1
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,&NQ_ST
               AWHEN C'Z'
         CVD   1,ZCVT_PWORK
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE F/H REMAINDER FROM ZC_R0
.*
             AIF ('&TR' NE '')
         L     ZC_R0,ZCVT_WORKAREA RESTORE REMAINDER
               AIF (&SR EQ 0)
         LPR   0,0
               AEND
               ACASE (C2A('&TR'))  
               AWHEN C'1'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV EH,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'2'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DH,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'3'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LH,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'4'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV EB,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'5'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DB,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'6'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LB,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'7'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV ED,Q
         STE   ZC_F0,&NQ_ST
               AWHEN C'8'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV DD,Q
         STD   ZC_F0,&NQ_ST
               AWHEN C'9'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
                 ZC_CONV LD,Q
         STD   ZC_F0,&NQ_ST
         STD   ZC_F2,8+&NQ_ST
               AWHEN C'F'
         ST    0,&NR_ST
               AWHEN C'G'
         LGFR  0,0
         STG   0,&NR_ST
               AWHEN C'H'
         STH   0,&NR_ST
               AWHEN C'P'
         CVD   0,ZCVT_PWORK
         ZAP   &NR,ZCVT_PWORK
               AWHEN C'Q'
         LGFR  ZC_R1,ZC_R0
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,&NR_ST
               AWHEN C'Z'
         CVD   0,ZCVT_PWORK
               ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
         AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE EH ZC_F0,ZC_F1 
.*
     AENTRY SFT_RND_EH
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=EH'1E&SFT'
         ME    0,0(ZC_R15)
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=EH'1E-&SFT'
         ME    0,0(ZC_R15)
       AEND
         DER   0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=E'0.5'
         AE    0,0(ZC_R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE DH ZC_F0,ZC_F1 
.*
     AENTRY SFT_RND_DH
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=DH'1E&SFT'
         MD    0,0(ZC_R15)
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=DH'1E-&SFT'
         MD    0,0(ZC_R15)
       AEND
         DDR   0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=D'0.5'
         AD    0,0(ZC_R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE LH ZC_F0-ZC_F2 BY ZC_F1=ZC_F3
.*
     AENTRY SFT_RND_LH
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=LH'1E&SFT'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         MXR   ZC_F0,ZC_F4
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=LH'1E-&SFT'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         MXR   ZC_F0,ZC_F4
       AEND
         DXR   ZC_F0,ZC_F1
        AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=LH'0.5'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         AXR   ZC_F0,ZC_F4
        AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE EB ZC_F0,ZC_F1 
.*
     AENTRY SFT_RND_EB
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=EB'1E&SFT'
         MEEB  ZC_F0,0(ZC_R15)
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=EB'1E-&SFT'
         MEEB  ZC_F0,0(ZC_R15)
       AEND
         DEBR  0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=EB'0.5'
         AEB   0,0(ZC_R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE DB ZC_F0,ZC_F1 
.*
     AENTRY SFT_RND_DB 
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=DB'1E&SFT'
         MDB   0,0(ZC_R15)
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=DB'1E-&SFT'
         MDB   0,0(ZC_R15)
       AEND
         DDBR  0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=D'0.5'
         ADB   0,0(ZC_R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE LB ZC_F0-ZC_F2 BY ZC_F1=ZC_F3
.*
     AENTRY SFT_RND_LB
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=LB'1E&SFT'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         MXBR  ZC_F0,ZC_F4
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=LB'1E-&SFT'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         MXBR  ZC_F0,ZC_F4
       AEND
         DXBR  ZC_F0,ZC_F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=LB'0.5'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         AXBR  ZC_F0,ZC_F4
         AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE ED ZC_F0,ZC_F1 
.*
     AENTRY SFT_RND_ED
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=DD'1E&SFT'
         LD    ZC_F4,0(ZC_R15)
         MDTR  ZC_F0,ZC_F4
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=DD'1E-&SFT'
         LD    ZC_F4,0(ZC_R15)
         MDTR  ZC_F0,ZC_F4
       AEND
         DDTR  ZC_F0,ZC_F0,ZC_F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=DD'0.5'
         LD    ZC_F4,0(ZC_R15)
         ADTR  ZC_F0,ZC_F4
         LEDTR ZC_F0,ZC_F0,0
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE DD ZC_F0,ZC_F1 
.*
     AENTRY SFT_RND_DD 
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
        AIF   (&SFT GT 0)
         LARL  ZC_R2,=DD'1E&SFT'
         LD    ZC_F4,0(ZC_R2)
         MDTR  ZC_F0,ZC_F0,ZC_F4
       AELSEIF (&SFT LT 0)
         LARL  ZC_R2,=DD'1E-&SFT'
         LD    ZC_F4,0(ZC_R2)
         MDTR  ZC_F0,ZC_F0,ZC_F4
       AEND
         DDTR  ZC_F0,ZC_F0,ZC_F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R2,=DD'0.5'
         LD    ZC_F4,0(ZC_R2)
         ADTR  ZC_F0,ZC_F0,ZC_F4
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE LD ZC_F0-ZC_F2 BY ZC_F1=ZC_F3
.*
     AENTRY SFT_RND_LD
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
        AIF   (&SFT GT 0)
         LARL  ZC_R15,=LD'1E&SFT'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         MXTR  ZC_F0,ZC_F0,ZC_F4
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=LD'1E-&SFT'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         MXTR  ZC_F0,ZC_F0,ZC_F4
       AEND
         DXTR  ZC_F0,ZC_F0,ZC_F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  ZC_R15,=LD'0.5'
         LD    ZC_F4,0(ZC_R15)
         LD    ZC_F6,8(ZC_R15)
         AXTR  ZC_F0,ZC_F4
         AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE G ZC_R0,ZC_R2
.*
     AENTRY SFT_RND_G
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
       AIF   (&SFT GT 0)
         LARL  ZC_R15,=FL8'1E&SFT'
         MSG   1,0(ZC_R15)
       AELSEIF (&SFT LT 0)
         LARL  ZC_R15,=FL8'1E&SFT'
         MSG   2,0(ZC_R15)
       AEND
         DSGR    0,2
         AIF   (&ROUNDED EQ 1)
         BRAS  ZC_R14,ZC_RND_G
         AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE P 
.*   DIVIDEND  = ZCVT_PWORK1(LDDP)
.*   DIVISOR   = ZCVT_PWORK2(LDRP)
.*   QUOTIENT  = ZCVT_PWORK4(LDDP)
.*   REMAINDER = ZCVT_PWORK4+LDDP(&LDRP) OR ZCVT_PWORK2 IF LDRP=16
.*
     AENTRY SFT_RND_P
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211
        AIF (&LDDP+&LDRP GT 16 OR &SFT GT 0) RPI 1211
            ACALL DFP_DIVP       USE DFP LD IF TOO BIG OR SHIFT
        AELSE
         ZAP   ZCVT_PWORK4(&LDDP+&LDRP),ZCVT_PWORK1(&LDDP)
         DP    ZCVT_PWORK4(&LDDP+&LDRP),ZCVT_PWORK2(&LDRP)
          AIF (&SFT LT 0)
           AIF   (&ROUNDED EQ 1)
         SRP   ZCVT_PWORK4(&LDDP),32-&SFT,5 RPI 1065     
                 AIF   (&LR GT 0)
         SRP   ZCVT_PWORK4+&LDDP.(&LDRP),32-&SFT,5 RPI 1065
                 AEND
           AELSE
         SRP   ZCVT_PWORK4(&LDDP),32-&SFT,0 RPI 1065     
               AIF   (&LR GT 0)
         SRP   ZCVT_PWORK4+&LDDP.(&LDRP),32-&SFT,0 RPI 1065
               AEND
           AEND
          AEND
        AEND
     AEND
.*
.* DIVIDE AND ROUND P USING DFP LD IF TOO BIG
.*
         AENTRY DFP_DIVP
       AIF   (&LDDP EQ 16)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
       AELSE
         ZAP   ZCVT_PWORK4,ZCVT_PWORK1(&LDDP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK4
         CXSTR ZC_F0,ZC_R0
       AEND
       AIF   (&LDRP EQ 16)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F1,ZC_R0
       AELSE
         ZAP   ZCVT_PWORK4,ZCVT_PWORK2(&LDRP)
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK4
         CXSTR ZC_F1,ZC_R0
       AEND
       AIF (&SFT GT 0)  RPI 1211
         LARL  ZC_R2,=LD'1E&SFT'
         LD    ZC_F4,0(ZC_R2)
         LD    ZC_F6,8(ZC_R2)
         MXTR  ZC_F0,ZC_F0,ZC_F4
       AELSEIF (&SFT LT 0)
         LARL  ZC_R2,=LD'1E&SFT'
         LD    ZC_F4,0(ZC_R2)
         LD    ZC_F6,8(ZC_R2)
         MXTR  ZC_F1,ZC_F1,ZC_F4
       AEND
         DXTR  ZC_F0,ZC_F0,ZC_F1
         L     ZC_R15,ZCVT_CVTLDTP
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK4                   PW4=QUOTIENT
        AIF ('&TR' NE '')
         ZAP   ZCVT_PWORK3,ZCVT_PWORK4        
         MP    ZCVT_PWORK3,ZAP,ZCVT_PWORK2(&LDRP)  PW3=QUOTIENT*DIVISOR
         ZAP   ZCVT_PWORK2,ZCVT_PWORK1(&LDDP)   
         SP    ZCVT_PWORK2,ZCVT_PWORK3             PW2=REMAINDER  
        AEND
        :&LDRP SETA 16 USED BY STORE P TO STORE FULL ZCVT_PWORK4 QUO
        :&LDDP SETA 16 USED BY STORE P TO STORE FULL ZCVT_PWORK2 REM
        AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE Q ZC_R0-ZC_R1 
.* BY ZC_R2-ZC_R3 > RM=ZC_R0-ZC_R1 Q=ZC_R2-ZC_R3
.*
     AENTRY SFT_RND_Q
       :&SFT SETA (&PQ-&PDD)+&PDR  RPI 1211 
       AIF   (&SFT GT 0)
         STMG  ZC_R2,ZC_R3,ZCVT_WORKAREA
         LARL  ZC_R15,=FL16'1E&SFT'                           
         LMG   ZC_R2,ZC_R3,0(ZC_R15)
         L     ZC_R15,ZCVT_MPYQ128      MPY DIVIDEND 
         BASR  ZC_R14,ZC_R15
         LMG   ZC_R2,ZC_R3,ZCVT_WORKAREA   REST0RE DIVISOR
       AELSEIF (&SFT LT 0)
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA   SAVE DIVIDEND
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
         LARL  ZC_R15,=FL16'1E&SFT'                           
         LMG   ZC_R2,ZC_R3,0(ZC_R15)
         L     ZC_R15,ZCVT_MPYQ128      MPY DIVISOR
         BASR  ZC_R14,ZC_R15
         LGR   ZC_R2,ZC_R0
         LGR   ZC_R3,ZC_R1
         LMG   ZC_R0,ZC_R1,ZCVT_WORKAREA   RESTORE DIVIDEND
       AEND
         L     ZC_R15,ZCVT_DIVQ128 DIVIDE SCALED DIVIDEND BY QUOTIENT
         BASR  ZC_R14,ZC_R15
         AIF   (&ROUNDED EQ 1)
         BRAS  ZC_R14,ZC_RND_G                             
         AEND
     AEND
         COPY ZCRSTLAB
         MEND
