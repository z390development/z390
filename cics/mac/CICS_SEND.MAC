.**********************************************************************
.* Copyright 2006 Automated Software Tools Corporation                *
.* This source code is part of z390 assembler/emulator package        *
.* The z390 package is distributed under GNU general public license   *
.* Author - Don Higgins                                               *
.**********************************************************************
.* 05/05/06 RPI 308 CICS RETURN CALLED FROM EXEC                      *
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY         *
.**********************************************************************
         MACRO
         CICS_SEND
         GBLB  &PARMS_0404,&PARMS_1804,&PARMS_1812
         GBLB  &ZC_CICS
         LCLB  &ALARM,&CURSSYM,&DATONLY,&ERASE,&ERASAUP
         LCLB  &FREEKB,&FRSET,&MAPONLY,&CONTROL,&NOEDF,&NOHAND
         LCLB  &ZCOBOL
         LCLC  &FROM,&LENGTH,&MAP,&MAPSET,&CURSPOS,&SET,&RESP,&RESP2
&NP      SETA  N'&SYSLIST
&IP      SETA  0
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  '&SYSLIST(&IP)'
         AIF   ('&PARM'(1,5) EQ 'FROM(').FROM
         AIF   ('&PARM'(1,7) EQ 'LENGTH(').LENGTH
         AIF   ('&PARM'(1,5) EQ 'NOEDF').NOEDF
         AIF   ('&PARM'(1,8) EQ 'NOHANDLE').NOHAND
         AIF   ('&PARM'(1,5) EQ 'RESP(').RESP
         AIF   ('&PARM'(1,6) EQ 'RESP2(').RESP2
.* ADDED FOR MAPPING SUPPORT
         AIF   ('&PARM'(1,4) EQ 'MAP(').MAP
         AIF   ('&PARM'(1,7) EQ 'MAPSET(').MAPSET
         AIF   ('&PARM'(1,5) EQ 'ALARM').ALARM
         AIF   ('&PARM'(1,7) EQ 'CURSOR(').CURSPOS
         AIF   ('&PARM'(1,6) EQ 'CURSOR').CURSSYM
         AIF   ('&PARM'(1,8) EQ 'DATAONLY').DATONLY
         AIF   ('&PARM'(1,8) EQ 'ERASEAUP').ERASAUP
         AIF   ('&PARM'(1,5) EQ 'ERASE').ERASE
         AIF   ('&PARM'(1,6) EQ 'FREEKB').FREEKB
         AIF   ('&PARM'(1,5) EQ 'FRSET').FRSET
         AIF   ('&PARM'(1,7) EQ 'MAPONLY').MAPONLY
         AIF   ('&PARM'(1,4) EQ 'SET(').SET
         AIF   ('&PARM'(1,7) EQ 'CONTROL').CONTROL
.* DISCARDED PARMS
         AIF   ('&PARM'(1,8) EQ 'TERMINAL').PLOOP
         AIF   ('&PARM'(1,4) EQ 'WAIT').PLOOP
         AIF   ('&PARM'(1,7) EQ 'DEFAULT').PLOOP
         AIF   ('&PARM'(1,4) EQ 'TEXT').PLOOP
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.FROM    ANOP
&FROM    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.LENGTH  ANOP
&LENGTH  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.NOEDF   ANOP
&NOEDF   SETB  1
         AGO   .PLOOP
.*
.NOHAND  ANOP
&NOHAND  SETB  1
         AGO   .PLOOP
.*
.RESP    ANOP
&RESP    SETC  '&PARM'(6,K'&PARM-6)
&NOHAND  SETB  1
         AGO   .PLOOP
.*
.RESP2   ANOP
&RESP2   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.MAP     ANOP
&MAP     SETC  '&PARM'(5,K'&PARM-5)
         AGO   .PLOOP
.*
.MAPSET  ANOP
&MAPSET  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.ALARM   ANOP
&ALARM   SETB  1
         AGO   .PLOOP
.*
.CURSPOS ANOP
&CURSPOS SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.CURSSYM ANOP
&CURSSYM SETB  1
         AGO   .PLOOP
.*
.DATONLY ANOP
&DATONLY SETB  1
         AGO   .PLOOP
.*
.ERASE   ANOP
&ERASE   SETB  1
         AGO   .PLOOP
.*
.ERASAUP ANOP
&ERASAUP SETB  1
         AGO   .PLOOP
.*
.FREEKB  ANOP
&FREEKB  SETB  1
         AGO   .PLOOP
.*
.FRSET   ANOP
&FRSET   SETB  1
         AGO   .PLOOP
.*
.MAPONLY ANOP
&MAPONLY SETB  1
         AGO   .PLOOP
.*
.CONTROL ANOP
&CONTROL SETB  1
         AGO   .PLOOP
.*
.SET     ANOP
&SET     SETC  '&PARM'(5,K'&PARM-5)
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   ('&MAP' EQ '' AND '&MAPSET' EQ '').NOTMAP
         AGO   .MAPPING
.*
.NOTMAP  ANOP
         AIF   (&CONTROL).SENDCON
.*
.* NORMAL SEND (NOT MAP OR CONTROL)
.*
         GEN_XC P0404,P0404END-P0404,P0404 CLEAR PARMS
         GEN_MVC P0404FN,,=X'0404' SET FUNCTION CODE
         AIF   ('&FROM' EQ '').BADFROM
         AIF   ('&LENGTH' EQ '').BADLEN
         AIF   ('&LENGTH'(2,1) EQ '''').LENNUM
         AIF   (T'&LENGTH NE 'N').LENLABL
.LENNUM  ANOP
         GEN_MVC P0404LEN,,=AL2(&LENGTH) SET LENGTH
         AGO   .ALLDONE
.*
.LENLABL ANOP
         AIF   (&ZC_CICS)
         AIF   ('&LENGTH'(1,10) EQ 'LENGTH,OF,')
.* COBOL LENGTH OF EXTRACT
&LENLSL  SETC  '&LENGTH'(11,K'&LENGTH-10)
         GEN_MVC P0404LEN,,=AL2(L'&LENLSL) SET LENGTH
         AELSE
.* COBOL LENGTH AS LABEL
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),&LENGTH   SET LENGTH FROM LABEL
         AEND
         AELSE
.* ASM LENGTH AS LABEL
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),&LENGTH   SET LENGTH FROM LABEL
         AEND
.ALLDONE ANOP
&FROMTQ  SETC  T'&FROM
         AIF   ('&FROM'(1,1) EQ '='                                    X
               OR '&FROMTQ' EQ 'A'                                     X
               OR '&FROMTQ' EQ 'R').FRMADLIT
         LA    R0,&FROM           FROM ADDRESS
         GEN_ST R0,P0404FRM       SAVE IT
         AGO   .FROMOK
.*
.FRMADLIT ANOP
         L     R0,&FROM           INDIRECT FROM ADDRESS
         GEN_ST R0,P0404FRM       SAVE IT
.FROMOK  ANOP
         GEN_ST DFHEIBR,P0404EIB  SET EIB ADDRESS
         GEN_ST TCTTEAR,P0404TCT  SET TCTTE ADDRESS
         AIF   (&SYSEDF AND NOT &NOEDF)
         GEN_ST R13,P0404EDS      SET DSA ADDRESS FOR EDF
         L     R0,DFHEILEN        DSA LENGTH
         GEN_STH R0,P0404EDL      SET DSA LENGTH FOR EDF
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         GEN_STH R0,P0404EDC      SET CICS DSA LENGTH FOR EDF
         AELSE
         GEN_MVI P0404NED,X'FF'   SET NOEDF
         AEND
         AIF   (NOT &NOHAND).DUNNOH
         GEN_MVI P0404NOH,X'FF'   SET NOHANDLE
.DUNNOH  ANOP
         AIF   ('&RESP' EQ '').NORESP
         GEN_ST R0,P0404RSP       SAVE IT
.NORESP  ANOP
         AIF   ('&RESP2' EQ '').NORESP2
         GEN_ST R0,P0404RS2       SAVE IT
.NORESP2 ANOP
         LARL  R0,P0404EDF_&SYSNDX ADDRESS ORIGIN FOR CEDF
         GEN_ST R0,P0404EDF       SAVE IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_&SYSNDX DS 0H
         BAKR  0,R15              STACK REGS AND GO
.*
         GEN_CLI P0404NOH,X'FF'   NOHANDLE ?
         JE    P0404BYP_&SYSNDX   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_&SYSNDX   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_&SYSNDX) ENTRYPOINT FOR IGNORE CONDITION
*
         AIF   (&PARMS_0404).BYP0404
         J     P0404BYP_&SYSNDX   EXIT
*
&PARMS_0404 SETB 1
         P0404
*
.BYP0404 ANOP
P0404BYP_&SYSNDX DS 0H
         MEXIT
.*
.BADFROM ANOP
         MNOTE 12,'FROM IS MANDATORY'
         MEXIT
.*
.BADLEN  ANOP
         MNOTE 12,'LENGTH IS MANDATORY'
         MEXIT
.*
.SENDCON ANOP
.*
.* SEND CONTROL
.*
.* ONLY THESE PARAMETERS ARE PROCESSED:
.*    CURSOR, CURSOR(), ERASE, ERASEAUP, FREEKB, ALARM, FRSET
         AIF   ('&CURSPOS' NE '' AND &CURSSYM).CURSERR
         AIF   (&ERASE AND &ERASAUP).ERASERR
.*
         GEN_XC P1812,P1812END-P1812,P1812 CLEAR PARMS
         GEN_MVC P1812FN,,=X'1812' SET FUNCTION CODE
         GEN_ST DFHEIBR,P1812EIB  SET EIB ADDRESS
         GEN_ST TCTTEAR,P1812TCT  SET TCTTE ADDRESS
         AIF   (&SYSEDF AND NOT &NOEDF)
         GEN_ST R13,P1812EDS      SET DSA ADDRESS FOR EDF
         L     R0,DFHEILEN        DSA LENGTH
         GEN_STH R0,P1812EDL      SET DSA LENGTH FOR EDF
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         GEN_STH R0,P1812EDC      SET CICS DSA LENGTH FOR EDF
         AELSE
         GEN_MVI P1812NED,X'FF'   SET NOEDF
         AEND
         AIF   (NOT &NOHAND).DUNNOH2
         GEN_MVI P1812NOH,X'FF'   SET NOHANDLE
.DUNNOH2 ANOP
         AIF   ('&RESP' EQ '').NORESPC
         LA    R0,&RESP           ADDRESS OF RESP
         GEN_ST R0,P1812RSP       SAVE IT
.NORESPC ANOP
         AIF   ('&RESP2' EQ '').NORSP2C
         LA    R0,&RESP2          ADDRESS OF RESP2
         GEN_ST R0,P1812RS2       SAVE IT
.NORSP2C ANOP
         GEN_MVC P1812CRS,,=X'FFFF' INVALIDATE CURSOR POSITION
         AIF   ('&CURSPOS' EQ '').NOCURSC
         LA    R0,&CURSPOS        SET NUMERIC CURSOR POSITION
         GEN_STH R0,P1812CRS      SAVE IT
.NOCURSC ANOP
         GEN_MVI P1812OPT,B'&ERASE&ERASAUP&CURSSYM.00&ALARM&FREEKB&FRSE-
               T' SET OPTION BITS
.* TURN OFF COBOL, THIS IS AN ASSEMBLER COMMAND
         AIF   (&ZC_CICS)
&ZC_CICS SETB  0
&ZCOBOL  SETB  1
         AEND
         EXEC  CICS GETMAIN SET(R15) LENGTH(7) INITIMG(0) NOEDF
         AIF   (&ZCOBOL)
&ZC_CICS SETB  1
         AEND
         GEN_ST R15,P1812OUT      SET OUTPUT AREA ADDRESS
         LARL  R0,P1812EDF_&SYSNDX ADDRESS ORIGIN FOR CEDF
         GEN_ST R0,P1812EDF       SAVE IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1812)       R1=LCL MODULE PARAMETER LIST
P1812EDF_&SYSNDX EQU *
         BAKR  0,R15              STACK REGS AND GO
.*
         GEN_CLI P1812NOH,X'FF'   NOHANDLE ?
         JE    P1812BYP_&SYSNDX   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1812BYP_&SYSNDX   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1812BYP_&SYSNDX) ENTRYPOINT FOR IGNORE CONDITION
*
         AIF   (&PARMS_1812).BYP1812
         J     P1812BYP_&SYSNDX   EXIT
*
&PARMS_1812 SETB 1
         P1812
*
.BYP1812 ANOP
P1812BYP_&SYSNDX DS 0H
         MEXIT
.*
.MAPPING ANOP
.*
.* SEND MAP
.*
         AIF   (NOT &CONTROL).NOCTRL
         MNOTE 12,'CONTROL IS NOT COMPATIBLE WITH SEND MAP'
         MEXIT
.*
.NOCTRL  ANOP
         AIF   ('&MAP' NE '').MAPOK
         MNOTE 12,'MAP IS MANDATORY'
         MEXIT
.*
.MAPOK   ANOP
         AIF   ('&CURSPOS' NE '' AND &CURSSYM).CURSERR
         AIF   (&ERASE AND &ERASAUP).ERASERR
         AIF   (&DATONLY AND &MAPONLY).ONLYERR
.*
         GEN_XC P1804,P1804END-P1804,P1804
         GEN_MVC P1804FN,,=X'1804' SET FUNCTION CODE
         AIF   ('&MAPSET' NE '').MSETOK
&MAPSET  SETC  '&MAP'
.MSETOK  ANOP
         AIF   ('&MAP'(1,1) EQ '''').MAPSTRG
.* MAP FROM LABEL
         LARL  R15,P1804MAP       ADDRESS TARGET
         MVC   0(7,R15),&MAP      MOVE MAPNAME FROM LABEL
         AIF   ('&FROM' EQ '').BADFRM2
         AIF   (&MAPONLY).DOLEN
         LAY   R0,&FROM           R0=MAP STRUCTURE ADDRESS
         GEN_ST R0,P1804DSC       SAVE IT
         AGO   .DOLEN
.*
.MAPSTRG ANOP
.* MAP AS STRING
&MAPLEN  SETA  K'&MAP
         AIF   (&MAPLEN LT 3 OR &MAPLEN GT 9).BADMAP
         GEN_MVC P1804MAP,,=CL8&MAP MOVE MAPNAME AS STRING
&MAPANDO SETC  '&MAP'(2,&MAPLEN-2).'O'
&MAPANDL SETC  '&MAP'(2,&MAPLEN-2).'L'
         AIF   (&MAPONLY).DOLEN
         LAY   R0,&MAPANDO        R0=DEFAULT MAP STRUCTURE ADDRESS
         GEN_ST R0,P1804DSC       SAVE IT
.DOLEN   ANOP
         AIF   ('&LENGTH' EQ '').NOLEN
         AGO   .GOTLEN
.*
.NOLEN   ANOP
.* LENGTH OMITTED
         AIF   (&MAPONLY).DEFMPST
         AIF   (&ZC_CICS)
.* IF COBOL AND MAP IS A LABEL DON'T GEN LENGTH, WE NEVER USE IT
         AIF   ('&MAP'(1,1) NE '''').DEFMPST
         LA    R0,L'&MAPANDO      SET DEFAULT MAP STRUC LENGTH (COBOL)
         AELSE
         LA    R0,&MAPANDL        SET DEFAULT MAP STRUC LENGTH (ASM)
         AEND
         GEN_STH R0,P1804DSL      SAVE IT
         AGO   .DEFMPST
.*
.GOTLEN  ANOP
.* LENGTH MAY BE L' OR CONSTANT LIKE X'..'
         AIF   ('&LENGTH'(2,1) EQ '''').LENNUM2
         AIF   (T'&LENGTH NE 'N').LENLAB2
.LENNUM2 ANOP
         LA    R0,&LENGTH         SET NUMERIC LENGTH
         GEN_STH R0,P1804DSL      SAVE IT
         AGO   .DEFMPST
.*
.LENLAB2 ANOP
         AIF   (&ZC_CICS)
         AIF   ('&LENGTH'(1,10) EQ 'LENGTH,OF,')
.* COBOL LENGTH OF EXTRACT
&LENLSL  SETC  '&LENGTH'(11,K'&LENGTH-10)
         LAY   R0,L'&LENLSL       SET NUMERIC LENGTH
         GEN_STH R0,P1804DSL      SAVE IT
         AELSE
.* COBOL LENGTH AS LABEL
         LH    R0,&LENGTH         SET LENGTH FROM LABEL
         GEN_STH R0,P1804DSL      SAVE IT
         AEND
         AELSE
.* ASM LENGTH AS LABEL
         LH    R0,&LENGTH         R0=LENGTH FROM LABEL
         GEN_STH R0,P1804DSL      SAVE IT
         AEND
.DEFMPST ANOP
         AIF   ('&MAPSET'(1,1) NE '''').LOADIT
.* MAPSET AS STRING
&MAPSLEN SETA  K'&MAPSET
         AIF   (&MAPSLEN LT 3 OR &MAPSLEN GT 9).BADMAPS
.LOADIT  ANOP
.* TURN OFF COBOL, THIS IS AN ASSEMBLER COMMAND
         AIF   (&ZC_CICS)
&ZC_CICS SETB  0
&ZCOBOL  SETB  1
         AEND
         EXEC  CICS LOAD PROGRAM(&MAPSET) ENTRY(R14) LENGTH(P1804MLN)  X
               NOEDF
         AIF   (&ZCOBOL)
&ZC_CICS SETB  1
&ZCOBOL  SETB  0
         AEND
         GEN_ST R14,P1804MSA      SAVE MAPSET ADDRESS
.*
.DUNMAP  ANOP
         GEN_MVC P1804CRS,,=X'FFFF' INVALIDATE CURSOR POSITION
         AIF   ('&CURSPOS' EQ '').NOCURS
         LA    R0,&CURSPOS        SET NUMERIC CURSOR POSITION
         GEN_STH R0,P1804CRS      SAVE IT
.NOCURS  ANOP
         GEN_MVI P1804OPT,B'&ERASE&ERASAUP&CURSSYM&MAPONLY&DATONLY&ALAR-
               M&FREEKB&FRSET' SET OPTION BITS
.* TURN OFF COBOL, THIS IS AN ASSEMBLER COMMAND
         AIF   (&ZC_CICS)
&ZC_CICS SETB  0
&ZCOBOL  SETB  1
         AEND
         EXEC  CICS GETMAIN SET(R15) LENGTH(4000) INITIMG(0) NOEDF
         AIF   (&ZCOBOL)
&ZC_CICS SETB  1
&ZCOBOL  SETB  0
         AEND
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         GEN_ST R0,P1804OUT       SAVE OUTPUT AREA ADDRESS
         GEN_ST DFHEIBR,P1804EIB  SET EIB ADDRESS
         GEN_ST TCTTEAR,P1804TCT  SET TCTTE ADDRESS
         AIF   (&SYSEDF AND NOT &NOEDF)
         GEN_ST R13,P1804EDS      SET DSA ADDRESS FOR EDF
         L     R0,DFHEILEN        DSA LENGTH
         GEN_STH R0,P1804EDL      SET DSA LENGTH FOR EDF
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         GEN_STH R0,P1804EDC      SET CICS DSA LENGTH FOR EDF
         AELSE
         GEN_MVI P1804NED,X'FF'   SET NOEDF
         AEND
         AIF   ('&SET' NOT EQ '')
         GEN_MVI P1804SET,X'FF'   SET SET
         AEND
         AIF   (NOT &NOHAND).DUNNOH3
         GEN_MVI P1804NOH,X'FF'   SET NOHANDLE
.DUNNOH3 ANOP
         AIF   ('&RESP' EQ '').NORSPM
         LA    R0,&RESP           ADDRESS OF RESP
         GEN_ST R0,P1804RSP       SAVE IT
.NORSPM  ANOP
         AIF   ('&RESP2' EQ '').NORSP2M
         LA    R0,&RESP2          ADDRESS OF RESP2
         GEN_ST R0,P1804RS2       SAVE IT
.NORSP2M ANOP
         LARL  R0,P1804EDF_&SYSNDX ADDRESS ORIGIN FOR CEDF
         GEN_ST R0,P1804EDF       SAVE IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
P1804EDF_&SYSNDX DS 0H
         BAKR  0,R15              STACK REGS AND GO
.*
         GEN_CLI P1804NOH,X'FF'   NOHANDLE ?
         JE    P1804BYP_&SYSNDX   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_&SYSNDX   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_&SYSNDX) ENTRYPOINT FOR IGNORE CONDITION
*
         AIF   (&PARMS_1804).BYP1804
&PARMS_1804 SETB 1
         P1804
*
.BYP1804 ANOP
P1804BYP_&SYSNDX DS 0H
         LARL  R1,P1804RSP_&SYSNDX ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1804RS2_&SYSNDX ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         AIF   ('&SET' EQ '')
         EXEC  CICS FREEMAIN DATA(P1804OUT) NOEDF
         AELSE
         GEN_L &SET,P1804OUT      SET SET REG
         AEND
         EXEC  CICS RELEASE PROGRAM(&MAPSET) NOEDF
         LARL  R1,P1804RSP_&SYSNDX ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1804RS2_&SYSNDX ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1804MRS_&SYSNDX   EXIT
*
P1804RSP_&SYSNDX DS F             SAVED EIBRESP
P1804RS2_&SYSNDX DS F             SAVED EIBRESP2
P1804MRS_&SYSNDX DS 0H
         MEXIT
.*
.CURSERR ANOP
         MNOTE 12,'CURSOR POSITION AND SYMBOLIC CURSOR SPECIFIED'
         MEXIT
.*
.ERASERR ANOP
         MNOTE 12,'ERASE AND ERASEAUP SPECIFIED'
         MEXIT
.*
.ONLYERR ANOP
         MNOTE 12,'DATAONLY AND MAPONLY SPECIFIED'
         MEXIT
.*
.BADMAP  ANOP
         MNOTE 12,'INVALID MAP NAME'
         MEXIT
.*
.BADMAPS ANOP
         MNOTE 12,'INVALID MAPSET NAME'
         MEXIT
.*
.BADFRM2 ANOP
         MNOTE 12,'FROM IS REQUIRED WHEN MAP IS A LABEL'
         MEXIT
.*
         MEND
