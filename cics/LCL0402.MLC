***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
LCL0402  CSECT
*
* FN=0402  EXEC CICS RECEIVE
*
* R1  >>> P0402 BLOCK POINTER
*
         USING *,R13
         B     12(R15)            BYPASS EYECATCHER
         DC    CL8'LCL0402'
         LR    R13,R15            R13 AS BASE
         LR    R3,R1              SET BASE
         L     R3,0(R3)                    FOR PARMS
         USING (P0402,P0402END),R3
         L     DFHEIBR,P0402EIB   LOAD EIB ADDRESS
         USING DFHEIBLK,DFHEIBR
         L     TCTTEAR,P0402TCT   LOAD TCT ADDRESS
         USING DFHTCTTE,TCTTEAR
         L     R4,P0402ADB        LOAD AID BLOCK ADDRESS
         USING DFHADBLK,R4
         MVC   EIBFN,P0402FN      SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
         ICM   R1,15,P0402RSP     R1=RESP ADDRESS
         BZ    NORESP             EXIT IF NONE
         XC    0(4,R1),0(R1)      CLEAR RESP
NORESP   EQU   *
         ICM   R1,15,P0402RS2     R1=RESP2 ADDRESS
         BZ    NORESP2            EXIT IF NONE
         XC    0(4,R1),0(R1)      CLEAR RESP2
NORESP2  EQU   *
         CLI   P0402NED,X'FF'     NOEDF ?
         BE    NOEDFB             EXIT IF IT IS
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         BNE   NOEDFB             EXIT IF NOT
         MVI   TCTTEEBA,X'00'     SET 'BEFORE' INTERCEPT
         MVI   TCTTEEDL,X'00'     SET NORMAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
*
NOEDFB   EQU   *
         CLI   TCTTETI,C'!'       NON-TERMINAL ?
         BE    NOTALLOC           ERROR IF IT IS
         CLC   TCTTETI,=C'SQ01'   SEQUENTIAL TERMINAL ?
         BNE   NOTSEQ             EXIT IF NOT
* SEQUENTIAL TERMINAL PROCESSING
         L     R1,TCTTEQDI        RECEIVE DCB
         USING IHADCB,R1
         LA    R2,EODAD           EODAD ADDRESS
         ST    R2,DCBEODAD        SAVE IN DCB
         LA    R2,SYNAD           SYNAD ADDRESS
         ST    R2,DCBSYNAD        SAVE IN DCB
         DROP  R1
NEWFILE  EQU   *
         CLI   TCTTEQFO,X'FF'     INPUT FILE OPEN ?
         BE    OPENOK             EXIT IF IT IS
* OPEN SEQUENTIAL FILE
         L     R2,TCTTEQFL        R2 POINTS TO SEQ?NNNN
         MVC   3(5,R2),=X'2120202020' MOVE EDIT WORD
         ED    3(5,R2),TCTTEQFN   EDIT FILE NUMBER
         MVI   3(R2),C'I'         SET INPUT FILE
         OPEN  ((R1),INPUT)       OPEN IT
         MVI   TCTTEQFO,X'FF'     SET OPEN
OPENOK   EQU   *
         L     R2,P0402INT        R2=INPUT AREA
         SR    R14,R14            CLEAR LENGTH
GETBYTE  EQU   *
         GET   (R1),(R2)          GET INPUT STREAM ONE BYTE
         CLI   0(R2),X'0D'        IS IT CR ?
         LA    R2,1(R2)           BUMP INPUT POINTER ANYWAY
         LA    R14,1(R14)         BUMP BYTE COUNT
         BNE   GETBYTE            EXIT IF NOT
         GET   (R1),(R2)          GET THE X'0A'
         AHI   R14,-1             -1 FOR THE X'0D'
         AHI   R2,-1              BACK TO CRLF
         XC    0(2,R2),0(R2)      CLEAR CRLF
         LR    R1,R14             SAVE LENGTH
         L     R6,P0402INT        R6=A(INTO)
         B     DUNGET             EXIT
*
EODAD    EQU   *
         CLOSE ((R1))             CLOSE IT
         AP    TCTTEQFN,=P'1'     INCREMENT FILE NUMBER
         MVI   TCTTEQFO,X'00'     SET FILE CLOSED
         B     NEWFILE            EXIT
*
SYNAD    EQU   *
* NO MORE SEQUENTIAL TERMINAL INPUT, REVERT TO GUI
         MVI   TCTTETS,X'FF'      SET SHUTTERM REQUEST
*
NOTSEQ   EQU   *
         L     R6,P0402INT        R6=A(INTO)
         LH    R7,P0402INL        R7=L'INTO
         CLI   P0402NOW,X'FF'     NOWAIT ?
         BE    DONOWAIT           EXIT IF IT IS
* IF WE HAVE A CWA SEND IT BACK AND DEQ
         OC    TCTTECWA,TCTTECWA  ANY CWA ?
         BZ    DOCONVR            EXIT IF NONE
         LA    R5,CWPREFIX        R5=PREFIX LENGTH
         A     R5,TCTTECWL        + CWA LENGTH
         GETMAIN R,LV=(R5)
         LR    R9,R1              SAVE GETMAIN ADDRESS
         USING DFHCWBLK,R9
         ST    R5,CWATCPIO        SET LENGTH TO SEND
         MVC   CWAFN,=C'FE07'     SET FN
         MVC   CWATERM,TCTTETI    SET TERMINAL ID
         MVC   CWATRAN,EIBTRNID   SET TRANSID
         MVC   CWATASKN,EIBTASKN  SET TASK NUMBER
         MVI   CWARDWRT,X'FF'     SET CWA PUT
         LA    R0,CWPREFIX(R1)    SET TARGET ADDRESS
         L     R1,TCTTECWL        SET TARGET LENGTH
         L     R14,TCTTECWA       R14=CWA ADDRESS
         LR    R15,R1             R15=CWA LENGTH
         MVCL  R0,R14             MOVE CWA
         L     R8,0(R9)           R8=MESSAGE LENGTH
         TCPIO SEND,MSG=(R9),LMSG=(R8),PORT=3900
         EXEC  CICS DEQ RESOURCE(CWALOCK) LENGTH(7) NOHANDLE NOEDF
         OC    EIBRESP,EIBRESP    ANY CONDITION RAISED ?
         BNZ   EDFA               EXIT IF THERE IS
         MVI   CWAIND,X'FF'       SET RE-ACQUIRE CWA FLAG
DOCONVR  EQU   *
* CONVERSATIONAL RECEIVE
         TGET  (R6),(R7),ASIS
         STH   R1,CWASAVR1        SAVE R1
         CLI   CWAIND,X'00'       NEED TO RE-ACQUIRE CWA ?
         MVI   CWAIND,X'00'       CLEAR RE-ACQUIRE CWA FLAG
         BE    DUNGET             EXIT IF NOT
* RE-ACQUIRE THE CWA
         EXEC  CICS ENQ RESOURCE(CWALOCK) LENGTH(7) INT0402 NOEDF
         MVC   CWAFN,=C'FE07'     SET FUNCTION CODE
         MVC   CWATERM,TCTTETI    SET TERMINAL ID
         MVC   CWATRAN,EIBTRNID   SET TRANSID
         MVC   CWATASKN,EIBTASKN  SET TASK NUMBER
         MVI   CWARDWRT,X'00'     SET CWA GET
         TCPIO SEND,MSG=(R9),LMSG==A(CWPREFIX),PORT=3900
CWARCV   EQU   *
* ONLY THE PREFIX IS RECEIVED, WE GET THE CWA LATER
         TCPIO RECEIVE,MSG=(R9),LMSG==A(CWPREFIX),PORT=3900
         CLC   CWAFN,=C'10FF'     UNSOL IC SCAN ?
         BE    CWARCV             EXIT IF IT IS
         CLC   CWAFN,=C'FE07'     WHAT WE ARE EXPECTING ?
         BE    CWARCK             EXIT IF IT IS
         DC    H'0'               TCPIO BAD RECEIVE
CWARCK   EQU   *
         DROP  R9
         L     R8,TCTTECWA        R8=CWA ADDRESS
         TCPIO RECEIVE,MSG=(R8),LMSG=TCTTECWL,PORT=3900 GET THE CWA
         FREEMAIN A=(R9),LV=(R5)
         LH    R1,CWASAVR1        RESTORE R1
         B     DUNGET             EXIT
*
DONOWAIT EQU   *
         TGET  (R6),(R7),ASIS,NOWAIT
         ST    R15,P0402TGR       SAVE TGET RESPONSE
         CFI   R15,4              ANY INPUT ?
         BE    EDFA               EXIT IF NONE
DUNGET   EQU   *
         L     R8,P0402LEN        R8=A(LENGTH)
         STH   R1,0(R8)           SET RECEIVED LENGTH
         LH    R14,P0402INL       R14=REQUESTED LENGTH
         CR    R14,R1             ACTUAL LENGTH EXCEEDS REQUESTED ?
         BNL   PROCDATA           EXIT IF NOT
         B     LENGERR            EXIT
*
NOTALLOC EQU   *
         MVI   EIBRCODE,X'D5'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(NOTALLOC) SET EIBRESP=NOTALLOC
         ICM   R14,15,P0402RSP    R14=RESP ADDRESS
         BZ    EDFA               EXIT IF NONE
         MVC   0(4,R14),EIBRESP   SET RESP=NOTALLOC
         B     EDFA               EXIT
*
LENGERR  EQU   *
* INVOKE LENGERR
         MVI   EIBRCODE,X'E1'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(LENGERR) SET EIBRESP=LENGERR
         ICM   R14,15,P0402RSP    R14=RESP ADDRESS
         BZ    PROCDATA           EXIT IF NONE
         MVC   0(4,R14),EIBRESP   SET RESP=LENGERR
PROCDATA DS    0H
         MVC   EIBAID,0(R6)       SET EIBAID
* SET EIBCPOSN IF ENOUGH DATA
         CHI   R1,3               LENGTH >= 3 ?
         BL    LOINPUT            EXIT IF NOT
* CURSOR POS TO HEX EG. C1C6, ROW 1 COL 71, POS 70 (X'46')
         SR    R0,R0              CLEAR R0
         LR    R1,R0              CLEAR R1
         ICM   R0,8,1(R6)         1ST BYTE TO TOP OF R0  C1..
         SLL   R0,2               SHIFT OUT PARITY BITS  04..
         SRL   R0,26              CONVERT TO 6 BIT VALUE ..01
         ICM   R1,8,2(R6)         2ND BYTE TO TOP OF R1  ..01/C6...
         SLL   R1,2               SHIFT OUT PARITY BITS  ..01/18...
         SRDL  R0,26              COMBINE TO 12-BITS     ..../...46
         STH   R1,EIBCPOSN        SAVE IT
LOINPUT  EQU   *
* PROCESS ANY HANDLE AID
* NOHANDLE AVOIDS HANDLE AID CHECKS
         CLI   P0402NOH,X'FF'     NOHANDLE ?
         BE    EDFA               EXIT IF IT IS
         LTR   R4,R4              ANY AID BLOCKS ?
         BZ    EDFA               EXIT IF NONE
ADBLKLP  EQU   *
         OC    AIDCHAIN,AIDCHAIN  ANY AID CHAIN ?
         BZ    LASTAID            EXIT IF LAST AID BLOCK
         L     R4,AIDCHAIN        CHAIN TO NEXT AID BLOCK
         B     ADBLKLP            LOOP
*
LASTAID  EQU   *
         LA    R14,AIDINDEX       R14=AID INDEX
AIDLOOP  EQU   *
         CLC   0(1,R14),EIBAID    OUR AID ?
         BE    GOTAID             EXIT IF IT IS
         AHI   R14,3              BUMP POINTER
         CLI   0(R14),X'FF'       STOPPER ?
         BNE   AIDLOOP            LOOP IF NOT
         ABEND 999,DUMP           EIBAID IN ERROR
*
GOTAID   DS    0H
* TEST AID BLOCK SLOT
         LH    R8,1(R14)          R8=AID INDEX
         SLL   R8,2               * 4
         LA    R8,12(R8,R4)       + 12 (HEADER+CHAIN) + ADBLK ADDRESS
         OC    0(4,R8),0(R8)      ANY LABEL HERE ?
         BZ    EDFA               EXIT IF NONE
         MVC   P0402AID,0(R8)     SET HANDLE AID ADDRESS
EDFA     EQU   *
         CLI   P0402NED,X'FF'     NOEDF ?
         BE    RETURN             RETURN IF IT IS
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         BNE   RETURN             RETURN IF NOT
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'00'     SET NORMAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
*
RETURN   EQU   *
         PR    ,                  UNSTACK AND RETURN TO MACRO
*
AIDINDEX EQU   *
         DC    X'7D',AL2(0)       ENTER
         DC    X'6D',AL2(1)       CLEAR
         DC    X'6C',AL2(2)       PA1
         DC    X'6E',AL2(3)       PA2
         DC    X'6B',AL2(4)       PA3
         DC    X'F1',AL2(5)       PF1
         DC    X'F2',AL2(6)       PF2
         DC    X'F3',AL2(7)       PF3
         DC    X'F4',AL2(8)       PF4
         DC    X'F5',AL2(9)       PF5
         DC    X'F6',AL2(10)      PF6
         DC    X'F7',AL2(11)      PF7
         DC    X'F8',AL2(12)      PF8
         DC    X'F9',AL2(13)      PF9
         DC    X'7A',AL2(14)      PF10
         DC    X'7B',AL2(15)      PF11
         DC    X'7C',AL2(16)      PF12
         DC    X'C1',AL2(17)      PF13
         DC    X'C2',AL2(18)      PF14
         DC    X'C3',AL2(19)      PF15
         DC    X'C4',AL2(20)      PF16
         DC    X'C5',AL2(21)      PF17
         DC    X'C6',AL2(22)      PF18
         DC    X'C7',AL2(23)      PF19
         DC    X'C8',AL2(24)      PF20
         DC    X'C9',AL2(25)      PF21
         DC    X'4A',AL2(26)      PF22
         DC    X'4B',AL2(27)      PF23
         DC    X'4C',AL2(28)      PF24
         DC    X'FF'              STOPPER
*
CWALOCK  DC    C'--CWA--'
CWAIND   DC    X'00'              FF=NEED TO RE-ACQUIRE CWA
CWASAVR1 DS    AL2                SAVE R1
*
         LTORG
*
         P0402 DSECT
*
         DFHEIBLK                 EIB
         DFHTCTTE                 TCTTE
         DFHADBLK                 AID BLOCK
         DFHCWBLK                 CWA PREFIX
*
         EQUREGS REGS=GPR
*
         END
