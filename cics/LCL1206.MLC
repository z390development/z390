***********************************************************************
* z390 - Mainframe assembler emulator and run-time engine
* Copyright (C) 2021 z390 Assembler LLC
*
* This file is part of z390.
*
* z390 is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
* z390 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License 
* along with this program; if not, see https://www.gnu.org/licenses.
***********************************************************************
* Author - Don Higgins                                                *
***********************************************************************
LCL1206  CSECT
*
* FN=1206  EXEC CICS DEQ
*
* R1  >>> P1206 BLOCK POINTER
*
         USING *,R13
         B     12(R15)            BYPASS EYECATCHER
         DC    CL8'LCL1206'
         LR    R13,R15            R13 AS BASE
         LR    R3,R1              SET BASE
         L     R3,0(R3)                    FOR PARMS
         USING (P1206,P1206END),R3
         L     DFHEIBR,P1206EIB   LOAD EIB ADDRESS
         USING DFHEIBLK,DFHEIBR
         L     TCTTEAR,P1206TCT   LOAD TCT ADDRESS
         USING DFHTCTTE,TCTTEAR
         MVC   EIBFN,P1206FN      SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
         ICM   R1,15,P1206RSP     R1=RESP ADDRESS
         BZ    NORESP             EXIT IF NONE
         XC    0(4,R1),0(R1)      CLEAR RESP
NORESP   EQU   *
         ICM   R1,15,P1206RS2     R1=RESP2 ADDRESS
         BZ    NORESP2            EXIT IF NONE
         XC    0(4,R1),0(R1)      CLEAR RESP2
NORESP2  EQU   *
         CLI   P1206NED,X'FF'     NOEDF ?
         BE    NOEDFB             EXIT IF IT IS
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         BNE   NOEDFB             EXIT IF NOT
         MVI   TCTTEEBA,X'00'     SET 'BEFORE' INTERCEPT
         MVI   TCTTEEDL,X'00'     SET NORMAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
*
NOEDFB   EQU   *
* VALIDATE LENGTH
         CHHSI P1206LEN,0         IS LENGTH NEGATIVE ?
         BL    LENGERR            ERROR IF IT IS
         CHHSI P1206LEN,255       IS LENGTH > 255 ?
         BH    LENGERR            ERROR IF IT IS
* GET AND CLEAR THE KC BLOCK
         EXEC  CICS GETMAIN FLENGTH(=A(KCPREFIX)) SET(R5) INITIMG(0)   X
               NOHANDLE NOEDF
         USING DFHKCBLK,R5
         MVC   KCPTCPIO,=AL4(KCPREFIX) SET PREFIX LENGTH
         MVC   KCPFN,=C'1206'     SET FUNCTION CODE
         MVC   KCPTERM,TCTTETI    SET TERMINAL ID
         MVC   KCPTRAN,EIBTRNID   SET TRANSID
         MVC   KCPTASKN,EIBTASKN  SET TASK NUMBER
         MVC   KCPLEN,P1206LEN    SET RESOURCE LENGTH
         CHHSI P1206LEN,0         IS LENGTH ZERO ?
         BNE   REALRES            EXIT IF NOT
         MVC   KCPRES(4),P1206RES MOVE ADDRESS OF RESOURCE
         B     SENDIT             EXIT
*
REALRES  EQU   *
* WE HAVE A REAL RESOURCE
         L     R14,P1206RES       R14=ADDRESS OF RESOURCE
         LH    R1,P1206LEN        R1=RESOURCE LENGTH
         BCTR  R1,0               -1 FOR EXECUTE
         EX    R1,EXMVC           MOVE RESOURCE
SENDIT   EQU   *
         TCPIO SEND,MSG=(R5),LMSG==A(KCPREFIX),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   INVREQ             ERROR IF BAD
KCPRCV   EQU   *
* GET THE RESPONSE
         TCPIO RECEIVE,MSG=(R5),LMSG==A(KCPREFIX),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   INVREQ             ERROR IF BAD
         CLC   KCPFN,=C'10FF'     UNSOL IC SCAN ?
         BE    KCPRCV             EXIT IF IT IS
         CLC   KCPFN,=C'1206'     WHAT WE ARE EXPECTING ?
         BE    KCPRCK             EXIT IF IT IS
         DC    H'0'               TCPIO BAD RECEIVE
KCPRCK   EQU   *
         OC    KCPRETCD,KCPRETCD  BAD RETURN CODE ?
         BZ    RETURN             EXIT IF NONE
* SERVER HAS SENT UNKNOWN VALUE IN KCPRETCD
         B     INVREQ             SHOULD NOT OCCUR
*
EXMVC    MVC   KCPRES(0),0(R14)   MOVE RESOURCE
*
INVREQ   EQU   *
* INVOKE INVREQ
         MVI   EIBRCODE,X'E0'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(INVREQ) SET EIBRESP=INVREQ
         B     DORESP             EXIT
*
LENGERR  EQU   *
* INVOKE LENGERR
         MVI   EIBRCODE,X'E1'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(LENGERR) SET EIBRESP=LENGERR
DORESP   EQU   *
         ICM   R14,15,P1206RSP    R14=RESP ADDRESS
         BZ    DORESP2            EXIT IF NONE
         MVC   0(4,R14),EIBRESP   SET RESP
DORESP2  EQU   *
         ICM   R14,15,P1206RS2    R14=RESP2 ADDRESS
         BZ    RETURN             EXIT IF NONE
         MVC   0(4,R14),EIBRESP2  SET RESP2
RETURN   EQU   *
         CLI   P1206NED,X'FF'     NOEDF ?
         BE    NOEDFA             EXIT IF IT IS
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         BNE   NOEDFA             EXIT IF NOT
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'00'     SET NORMAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
*
NOEDFA   EQU   *
         PR    ,                  UNSTACK AND RETURN TO MACRO
*
         P1206 DSECT
*
         DFHEIBLK                 EIB
         DFHTCTTE                 TCTTE
         DFHKCBLK                 TASK CONTROL BLOCK
*
         EQUREGS REGS=GPR
*
         END
