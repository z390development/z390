***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
* 04/22/08 RPI 837 ADD NOTIME TO PREVENT 422 ABEND IN 15 SECONDS      *
***********************************************************************
Z390CICS SUBENTRY BASES=(R13)
         LA    R3,SECTOR2         BASE 2
         LAY   R4,R3(4096)        BASE 3
         USING SECTOR2,R3,R4
*
* NOTE TO ME: CALLED ROUTINES MUST NOT BE IN THE 1ST 4K
* BECAUSE OF R13 CONFLICT, MOVE ALL NON-CALLS BEFORE SECTOR2
* R13 SPAN IS E04, SO FFF-E04=1FB (DEC 507 LEFT)
*
* SECTOR2 SPAN IS 1CBE-E04=EBA  (DECIMAL 3770 USED)
*                 1FFF-EBA=1145 (DECIMAL 4421 LEFT)
*
* IF WE NEED TRACE=YES WHEN SEQ_TERM=YES THEN LOOK AT THE CODE
* JUST AFTER LABEL NOSEQTR
*
* THE GLOBAL MANAGER OF zCICS
*
* READ Z390CICS.INI FILE AND SET ALL PARMS
*
         OPEN  Z390INI            OPEN INI FILE
INIGET   EQU   *
         GET   Z390INI            GET A RECORD
         CLI   INIAREA,C'*'       COMMENT ?
         BE    INIGET             YES, MISS IT
         CLC   INIAREA(14),=C'TERMID_PREFIX=' GOT A PARAM ?
         BE    PROCTRMP           EXIT IF IT IS
         CLC   INIAREA(11),=C'MAXTHREADS=' GOT A PARAM ?
         BE    PROCMAXT           EXIT IF IT IS
         CLC   INIAREA(13),=C'TRACE_LOCALS=' GOT A PARAM ?
         BE    PROCLTRC           EXIT IF IT IS
         CLC   INIAREA(16),=C'LOCAL_TERMINALS=' GOT A PARAM ?
         BE    PROCLOCL           EXIT IF IT IS
         CLC   INIAREA(17),=C'REMOTE_TERMINALS=' GOT A PARAM ?
         BE    PROCREMT           EXIT IF IT IS
         CLC   INIAREA(13),=C'MAX_NONTERMS=' GOT A PARAM ?
         BE    PROCMXNT           EXIT IF IT IS
         CLC   INIAREA(15),=C'TRACE_Z390CICS=' GOT A PARAM ?
         BE    PROCZTRC           EXIT IF IT IS
         CLC   INIAREA(16),=C'INITIAL_TRANSID=' GOT A PARAM ?
         BE    PROCINTR           EXIT IF IT IS
         CLC   INIAREA(12),=C'DATE_FORMAT=' GOT A PARAM ?
         BE    PROCDATE           EXIT IF IT IS
         CLC   INIAREA(9),=C'SEQ_TERM=' GOT A PARAM ?
         BE    PROCSEQT           EXIT IF IT IS
         CLC   INIAREA(8),=C'CWASIZE=' GOT A PARAM ?
         BE    PROCCWAS           EXIT IF IT IS
* BAD PARM OR SYNTAX ERROR, WTO AND ABORT
BADPARM  EQU   *
         CLOSE Z390INI            CLOSE INI FILE
BADPARM2 EQU   *
* POST CLOSE ERROR DETECTED
         WTO   'BAD PARM IN Z390CICS.INI, ABORTING'
         SUBEXIT RC=16
*
PROCTRMP EQU   *
* TERMID_PREFIX=XXX
         MVC   TRMPREFX,INIAREA+14 MOVE TERMID PREFIX
         B     INIGET             LOOP
*
PROCMAXT EQU   *
* MAXTHREADS=N OR NN
         CLI   INIAREA+12,C' '    ONE DIGIT ?
         BNE   MAXTTWO            EXIT IF NOT
         PACK  DEC,INIAREA+11(1)  PACK SINGLE DIGIT
         B     MAXTCVB            EXIT
MAXTTWO  EQU   *
         PACK  DEC,INIAREA+11(2)  PACK TWO DIGITS
MAXTCVB  EQU   *
         CVB   R6,DEC             CONVERT TO BINARY
         C     R6,=F'10'          NOT OVER 10 ?
         BH    BADPARM            ERROR IF IT IS
         ST    R6,THREADS         SAVE IT
         B     INIGET             LOOP
*
PROCLOCL EQU   *
* LOCAL_TERMINALS=N OR NN
         CLI   INIAREA+17,C' '    ONE DIGIT ?
         BNE   LOCLTWO            EXIT IF NOT
         PACK  DEC,INIAREA+16(1)  PACK SINGLE DIGIT
         B     LOCLCVB            EXIT
*
LOCLTWO  EQU   *
         PACK  DEC,INIAREA+16(2)  PACK TWO DIGITS
LOCLCVB  EQU   *
         CVB   R6,DEC             CONVERT TO BINARY
         ST    R6,MAXLOCS         SAVE MAXIMUM LOCALS
         B     INIGET             LOOP
*
PROCREMT EQU   *
* REMOTE_TERMINALS=N OR NN
         CLI   INIAREA+18,C' '    ONE DIGIT ?
         BNE   REMTTWO            EXIT IF NOT
         PACK  DEC,INIAREA+17(1)  PACK SINGLE DIGIT
         B     REMTCVB            EXIT
*
REMTTWO  EQU   *
         PACK  DEC,INIAREA+17(2)  PACK TWO DIGITS
REMTCVB  EQU   *
         CVB   R6,DEC             CONVERT TO BINARY
         ST    R6,MAXREMS         SAVE MAXIMUM REMOTES
         B     INIGET             LOOP
*
PROCMXNT EQU   *
* MAX_NONTERMS=N OR NN
         CLI   INIAREA+14,C' '    ONE DIGIT ?
         BNE   MXNTTWO            EXIT IF NOT
         PACK  DEC,INIAREA+13(1)  PACK SINGLE DIGIT
         B     MXNTCVB            EXIT
*
MXNTTWO  EQU   *
         PACK  DEC,INIAREA+13(2)  PACK TWO DIGITS
MXNTCVB  EQU   *
         CVB   R6,DEC             CONVERT TO BINARY
         ST    R6,MAXNONT         SAVE MAXIMUM NON-TERMINALS
         B     INIGET             LOOP
*
PROCLTRC EQU   *
* TRACE_LOCAL=NO OR YES
         CLI   INIAREA+13,C'N'    =NO ?
         BE    INIGET             EXIT IF IT IS
         CLI   INIAREA+13,C'Y'    =YES ?
         BNE   BADPARM            ERROR IF NOT
         MVC   KCPTRPOS,KCPTRACE  SET TRACE PARMS
         B     INIGET             LOOP
*
PROCZTRC EQU   *
         MVC   TRCEZ390,INIAREA+15 SET THE Z390 TRACE PARM
         CLI   TRCEZ390,C'N'      =NO ?
         BE    INIGET             EXIT IF OK
         CLI   TRCEZ390,C'I'      =INT ?
         BE    INIGET             EXIT IF OK
         CLI   TRCEZ390,C'A'      =APP ?
         BE    INIGET             EXIT IF OK
         CLI   TRCEZ390,C'Y'      =YES ?
         BE    INIGET             EXIT IF OK
         B     BADPARM            ERROR IF NOT
*
PROCINTR EQU   *
* INITIAL_TRANSID
         MVC   INITRAN,INIAREA+16 SAVE INITIAL TRANSID
         B     INIGET             EXIT
*
PROCDATE EQU   *
* DATE_FORMAT=K, S OR R
         MVC   INIDATE,INIAREA+12 SAVE DATE FORMAT
         B     INIGET             EXIT
*
PROCSEQT EQU   *
* SEQ_TERM=YES, NO OR TRACE
         MVC   INISEQT,INIAREA+9  SAVE SEQ_TERM PARAMETER
         B     INIGET             EXIT
*
PROCCWAS EQU   *
* CWASIZE=NNNNNNN
         PACK  DEC,INIAREA+8(7)   PACK CWASIZE
         CVB   R6,DEC             CONVERT TO BINARY
         LTR   R6,R6              ZERO REQUEST ?
         BZ    INIGET             EXIT IF IT IS
         GETMAIN R,LV=(R6),A=CWAANCHR GETMAIN THE CWA
         ST    R0,CWALENG         SAVE CWA LENGTH
         L     R6,CWAANCHR        AREA TO CLEAR
         LR    R7,R0              LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR CWA
         B     INIGET             EXIT
*
EOFINI   EQU   *
         CLOSE Z390INI            CLOSE INI FILE
         L     R6,MAXLOCS         R6=LOCALS
         CLI   INISEQT,C'T'       SEQUENTIAL TERMINAL TRACE MODE ?
         BNE   NOSEQTR            EXIT IF NOT
* SEQ TERM TRACE MODE
         MVC   INITRAN,=4C'-'     RESET INITIAL_TRANSID
         MVC   MAXLOCS,=F'1'      FORCE LOCAL_TERMINALS=1
         LA    R6,1               MAXLOCS=1
         MVC   KCPTRPOS,KCPTRACE  FORCE TRACE_LOCALS=YES
         B     NOSEQT             EXIT
*
NOSEQTR  EQU   *
         CLI   INISEQT,C'Y'       SEQUENTIAL TERMINAL ON ?
         BNE   NOSEQT             EXIT IF NOT
         AHI   R6,1               EXTRA TERMINAL
         XC    MAXLOCS,MAXLOCS    FORCE LOCAL_TERMINALS=0
         MVC   INITRAN,=4C'-'     RESET INITIAL_TRANSID
* IF WE NEED TO TRACE WHILE SEQ_TERM=YES, UNCOMMENT THE MVC
* BE CAREFUL, THE TRACE MIGHT ABORT EARLY OWING TO SIZE
         XC    KCPTRPOS,KCPTRPOS  FORCE TRACE_LOCALS=NO
******** MVC   KCPTRPOS,KCPTRACE  FORCE TRACE_LOCALS=YES
NOSEQT   EQU   *
* CHECK LOCAL AND REMOTE NUMBERS ARE SENSIBLE
         A     R6,MAXREMS         R6=LOCALS+REMOTES
         A     R6,MAXNONT         R6=LOCALS+REMOTES+NONTERMS
         BZ    BADPARM2           ERROR IF NO TERMINALS
         C     R6,THREADS         SUM CANNOT EXCEED THREADS
         BH    BADPARM2           ERROR IT IF HAS
*
         MVC   WTOFN,=C'1200'     INITIALIZE REQUEST
         MVC   WTOTERM,=4C' '     NO TERMID
         MVC   WTOTRAN,=4C' '     NO PRESET TRANSID
         MVI   WTOTYPE,C' '       NO TRANSID TYPE
         MVC   WTOTASKN,=7C' '    NO TASK NUMBER
         MVC   CICSTMSG,=X'120001' GLOBAL MANAGER INITIALISED
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
*
* EXTRACT JARPATH AND CICSPATH
*
         GETENV JARENV            GET JARPATH
         C     R15,=F'4'          NULL ENV VARIABLE ?
         BE    NEXTENV            EXIT IF IT IS
         LTR   R15,R15            CHECK RC ?
         BNZ   BADPARM2           ERROR IF BAD
* GOT A JAR PATH, R2 IS THE POINTER
         CLI   1(R2),C':'         ANY DRIVE ID ?
         BNE   NOJARDRV           EXIT IF NONE
         MVC   CMD0+1(2),0(R2)    MOVE DRIVE:
         AHI   R2,2               BUMP OVER DRIVE ID
NOJARDRV EQU   *
         SR    R7,R7              CLEAR BYTE COUNT
         LA    R8,CMD1+4          DESTINATION
JARLOOP  EQU   *
         MVC   0(1,R8),0(R2)      MOVE PATH A BYTE AT A TIME
         AHI   R7,1               COUNT BYTES
         AHI   R2,1               BUMP SOURCE
         AHI   R8,1               BUMP DESTINATION
         CLI   0(R2),X'00'        END OF JARPATH ?
         BNE   JARLOOP            LOOP IF NOT
         MVI   0(R8),C'"'         ENDING "
         AHI   R7,-1              -1 FOR EXECUTE IN CEMT I SYS REQ
         STH   R7,CMD1LEN         SAVE LENGTH
NEXTENV  EQU   *
         GETENV CICSENV           GET CICSPATH
         C     R15,=F'4'          NULL ENV VARIABLE ?
         BE    DONEENV            EXIT IF IT IS
         LTR   R15,R15            CHECK RC ?
         BNZ   BADPARM2           ERROR IF BAD
* GOT A CICS PATH, R2 IS THE POINTER
         ST    R2,CICSADDR        SAVE IT
DONEENV  EQU   *
*
* START LOCAL THREADS
* SET DRIVE AND/OR PATH IF SUPPLIED BY SET JARPATH= TO Z390.JAR
*
* START Z390KCP IN EACH THREAD
* Z390KCP PRESENTS THE USER WITH A LOGO OR BLANK SCREEN
*
         SR    R8,R8              R8=COUNT THREADS STARTED
         ICM   R6,15,MAXLOCS      R6=NO. OF LOCALS
         BZ    SEQSWTCH           EXIT IF NONE
         SR    R7,R7              R7=THREAD ID
SEQSTART EQU   *
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         USING THRDDSCT,R5
         MVC   WTOFN,=C'1201'     MARK 'KCP IS STARTING'
         MVC   WTOTASKN,=7C' '    NO TASK NUMBER
         MVC   CICSTMSG,=X'120101' START Z390KCP
*
LOCLSTRT EQU   *
         CLI   SEQSWTCH+1,X'F0'   2ND CYCLE ?
         BNE   LOCNOTC1           EXIT IF NOT
         MVC   WTOTERM,=C'SQ01'   SET SEQUENTIAL TERMINAL
         MVC   WTOTRAN,=4C'-'     NO INITIAL TRANSID
         B     LOCGOC1            EXIT
*
LOCNOTC1 EQU   *
         CLI   THRDIND,ST_AVAIL   TERMINAL AVAILABLE ?
         BNE   LOCLINCR           EXIT IF NOT
         MVC   WTOTERM(3),TRMPREFX SET TERMID PREFIX
         STC   R7,WTOTERM+3       SAVE HEX TERMID NUMBER (0-9)
         OI    WTOTERM+3,X'F0'    CONVERT TO CHAR
         MVC   WTOTRAN,INITRAN    SET INITIAL TRANSID IF ANY
LOCGOC1  EQU   *
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         CMDPROC START,ID=(R7)    START THREAD
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND666           EXIT IF BAD
         CLI   CMD0+1,C' '        ANY DRIVE ID ?
         BE    MISSDRVE           EXIT IF NONE
         CMDPROC WRITE,CMD0,ID=(R7) SEND DRIVE:
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND666           EXIT IF BAD
MISSDRVE EQU   *
         CLI   CMD1+4,C' '        ANY JARPATH ?
         BE    MISSPATH           EXIT IF NONE
         CMDPROC WRITE,CMD1,ID=(R7) SEND PATH
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND666           EXIT IF BAD
MISSPATH EQU   *
         CLI   SEQSWTCH+1,X'F0'   2ND CYCLE IN PROGRESS ?
         BNE   MISSCMD2           EXIT IF NOT
         CMDPROC WRITE,CMD2,ID=(R7) SEND SET Z390SEQ=
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND666           EXIT IF BAD
MISSCMD2 EQU   *
         MVI   KCPTRMTP,C'L'      TELL Z390KCP LOCAL
         MVC   KCPTRMID,WTOTERM   TELL Z390KCP THE TERMID
         MVC   KCPTRNID,WTOTRAN   TELL Z390KCP THE INITIAL TRANSID
         MVC   KCPDATFM,INIDATE   TELL Z390KCP THE DATE FORMAT
         CLI   KCPTRPOS,C'L'      IS TRACE SET ?
         BNE   NOLOG              EXIT IF NOT
         MVC   KCPTRPOS+4(4),KCPTRMID ALL TRACES GO TO TERMID
NOLOG    EQU   *
         CMDPROC WRITE,KCPSTART,ID=(R7) START Z390KCP
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND666           EXIT IF BAD
         CLI   SEQSWTCH+1,X'F0'   2ND CYCLE ?
         BE    NOSEQT2            EXIT IF IT IS
         MVI   THRDIND,ST_OPER    SET OPERATIONAL STATUS
         MVI   THRDTYPE,LOCAL     SET LOCAL
         AHI   R8,1               COUNT THREADS STARTED
LOCLINCR EQU   *
         AHI   R5,THRDLEN         BUMP THREAD CONTROL AREA
         AHI   R7,1               BUMP THREAD ID
         BCT   R6,LOCLSTRT        LOOP
SEQSWTCH NOP   NOSEQT2            2ND CYCLE SWITCH
*
         MVC   WTOFN,=C'1202'     SET FN
         MVC   WTOTERM,=4C' '     NO TERMID
         MVC   WTOTRAN,=4C' '     NO INITIAL TRANSID
         MVC   WTOTASKN,=7C' '    NO TASK NUMBER
         MVC   WTODESC,=CL45' N OF  N LOCAL TERMINALS STARTED'
         CFI   R8,10              IS IT 10 ?
         BNE   LOCLGD10           EXIT IF NOT
         MVC   WTODESC(2),=C'10'  MOVE 10
         B     LOCLOF             EXIT
LOCLGD10 EQU   *
         STC   R8,WTODESC+1       SAVE NUMBER STARTED
         OI    WTODESC+1,X'F0'    INTO CHAR
LOCLOF   EQU   *
         CLI   MAXLOCS+3,X'0A'    IS IT 10 ?
         BNE   LOCLMX10           EXIT IF NOT
         MVC   WTODESC+6(2),=C'10' MOVE 10
         B     LOCLMSG            EXIT
LOCLMX10 EQU   *
         MVC   WTODESC+7(1),MAXLOCS+3 SAVE NUMBER REQUESTED
         OI    WTODESC+7,X'F0'    INTO CHAR
LOCLMSG  EQU   *
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         ST    R8,LOCALS          SAVE NO. OF LOCALS STARTED
         CLI   INISEQT,C'Y'       SEQUENTIAL TERMINAL ON ?
         BNE   NOSEQT2            EXIT IF NOT
         MVI   SEQSWTCH+1,X'F0'   SET 2ND CYCLE SWITCH
         LA    R7,9               THREAD ID IS 9
         B     SEQSTART           EXIT FOR 2ND CYCLE
*
NOSEQT2  EQU   *
         CLI   SEQSWTCH+1,X'F0'   2ND CYCLE COMPLETED ?
         BNE   LOCNSMSG           EXIT IF NOT
         MVC   CICSTMSG,=X'FE0601' SEQUENTIAL TERMINAL STARTED
         LA    R5,THRDCNTL+(THRDLEN*THRDSEQ) POINT TO SEQ TERM ENTRY
         MVI   THRDIND,ST_OPER    SET OPERATIONAL STATUS
         MVI   THRDTYPE,LOCAL     SET LOCAL
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
*
* GETMAIN A TCPIO RECEIVE AREA
*
LOCNSMSG EQU   *
         GETMAIN R,LV=32K
         LR    R11,R1             R11=RECEIVE AREA
         USING REQDSECT,R11
*
* OPEN SERVER PORT, NO HOST=* MEANS IT'S A SERVER
*
         MVC   WTOFN,=C'FF00'     SET FN
         MVC   WTOTERM,=4C' '     NO TERMID
         MVC   WTOTRAN,=4C' '     NO PRESET TRANSID
         MVI   WTOTYPE,C' '       NO TRANSID TYPE
         MVC   WTOTASKN,=7C' '    NO TASK NUMBER
         MVC   CICSTMSG,=X'FF0001' OPEN SERVER
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         TCPIO OPEN,PORT=3900     OPEN SERVER PORT
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND777           EXIT IF BAD
*
* LOAD FCT AND OPEN FILES AS NEEDED
*
         LOAD  EP=DFHFCT,LOADPT=DFHFCTAD
*
         L     R6,DFHFCTAD        ADDRESS FCT
         USING DFHFCTDS,R6
* INITIALISE MESSAGE
         MVC   WTOFN,=C'06FF'     INITIAL FILE OPENS
         MVC   WTODESC,=CL45'FILE ........ OPEN  FAILED'
FILELOOP EQU   *
         MVC   WTODESC+5(8),FCTFILNM MOVE FILENAME TO MSG
         TM    FCTFILST,FCTOPEN   FILE ALREADY OPEN ?
         BO    FILENEXT           EXIT IF IT IS
         TM    FCTFILST,FCTOPCLO  FILSTAT=OPENED ?
         BNO   FILENEXT           EXIT IF NOT
* NOT ALREADY OPENED AND FILSTAT=OPENED = OPEN NOW
         LA    R7,FCTTELEN(R6)    ADDRESS ACB
         USING IHAACB,R7
         TM    FCTSERV,FCTDELT+FCTUPDT+FCTADD REASON TO OPEN OUTPUT ?
         BZ    FILEIN             EXIT IF NONE
* SET ALL BITS WE ARE LIKELY TO USE
*    ADR = ACCESS BY RBA
*    DIR = DIRECT ACCESS
*    KEY = ACCESS BY KEY
*    SEQ = SEQUENTIAL ACCESS
*    IN  = READ ONLY
*    OUT = READ OR WRITE
* OPEN FOR OUTPUT
         MODCB ACB=IHAACB,MACRF=(ADR,DIR,KEY,SEQ,OUT)
         OPEN  (IHAACB,OUTPUT)    OPEN FOR OUTPUT
         LTR   R15,R15            OK ?
         BNZ   FILEOPER           EXIT IF NOT
         B     FILEOPOK           EXIT
*
FILEIN   EQU   *
* OPEN FOR INPUT
         MODCB ACB=IHAACB,MACRF=(ADR,DIR,KEY,SEQ,IN)
         OPEN  (IHAACB,INPUT)     OPEN FOR INPUT
         LTR   R15,R15            OK ?
         BNZ   FILEOPER           EXIT IF NOT
FILEOPOK EQU   *
* OPEN SUCCESSFUL, SAY SO
         MVC   WTODESC+20(6),=C'OK    ' SET OK
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         OI    FCTFILST,FCTOPEN   SET FILE OPEN
FILENEXT EQU   *
         AHI   R6,FCTABLEN        POINT TO NEXT FCT ENTRY
         CLI   0(R6),X'FF'        END OF FCT ?
         BNE   FILELOOP           LOOP IF NOT
         B     READLOOP           EXIT
*
FILEOPER EQU   *
* OPEN UNSUCCESSFUL, SAY SO
         MVC   WTODESC+20(6),=C'FAILED' SET FAILED
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         MVI   FCTFILST,X'00'     SET FILE CLOSED,DISABLED
         B     FILENEXT           EXIT
         DROP  R6,R7
*
READLOOP EQU   *
*
* IT DOESN'T MATTER WHAT IS OUT THERE
* JUST WAIT FOR SOMETHING TO BE SENT
*
* RECEIVE WITHOUT CONNID= WILL RETURN CONNID IN R2 AND LENGTH IN R1
*
* IF A CLIENT SENDS 2+ MESSAGES WE CAN GET THEM ALL TOGETHER
* THIS CODE ASSUMES MESSAGE LENGTH NEVER EXCEEDS 256 BYTES
*
         CLI   BATCHIND,X'FF'     BATCHED RECEIVE ?
         BNE   READMSG            EXIT IF NOT
         L     R7,BATCHLEN        R7=RECEIVED LENGTH
         S     R7,REQLEN          - CURRENT MSG LENGTH
         ST    R7,BATCHLEN        STORE BACK
         BNZ   READBTCH           EXIT IF MORE
         MVI   BATCHIND,X'00'     NO MORE BATCHED MSGS
         B     READMSG            EXIT
READBTCH EQU   *
         LA    R6,REQLEN          R6=DESTINATION
         LA    R8,REQLEN          R8=
         A     R8,REQLEN             SOURCE
         LR    R9,R7              R9=SOURCE LENGTH
         MVCL  R6,R8              MOVE NEXT BATCHED MESSAGE
         L     R1,BATCHLEN        R1=NEW RECEIVED LENGTH
         L     R2,CONNID          ENSURE CONNID CONTINUITY
         B     READNOTC           EXIT
*
READMSG  EQU   *
         CLI   SHUTIND,X'FE'      SERVER CLOSED ?
         BNE   NOTDONE            EXIT IF NOT
         SUBEXIT
*
NOTDONE  EQU   *
         TCPIO RECEIVE,NOWAIT,MSG=REQLEN,LMSG=32767,PORT=3900 GET MSG
         CHI   R15,4              ANY DATA ?
         BNE   READRC             EXIT IF THERE MAY BE
* NO DATA RECEIVED, THE SERVER TAKES RESPONSIBILITY FOR ICE SCAN
         ICM   R12,15,ICEANCHR    ANY ICE CHAIN ?
         BZ    READ10FF           EXIT IF NONE
* ICE CHAIN EXISTS
* IF THE FIRST ICE HAS NOT EXPIRED, TEST THE CHAIN EVERY 0.1 SEC
         USING DFHICEDS,R12
         TIME  CLOCK,STCKTIME,CLOCKTYPE=STCK
         SGR   R0,R0              CLEAR R0
         LG    R1,STCKTIME        R1=STCK TIME
         SRLG  R1,R1,12           SHIFT TO uS
         DSGF  R0,=F'10000'       REDUCE TO 0.01 SEC
         CG    R1,ICEXTOD         HAS 1ST ONE EXPIRED ?
         BNH   READ10FF           EXIT IF NOT EXPIRED
         DROP  R12
* ICE HAS EXPIRED, INVOKE GBL10FF TO PROCESS IT
         MVC   REQLEN(12),FAKE10FF SET INPUT FOR ICE SCAN
         LA    R12,READ10FF       R12=RETURN ADDRESS
         ST    R12,REQR12         SAVE IT
         LARL  R12,ICEXICE        ICE SCAN PROCESSOR
         BR    R12                GO TO IT
STCKTIME DS    XL8                SAVE STCK TIME
*
READ10FF EQU   *
         STIMER WAIT,BINTVL=READDLAY WAIT 0.1 SECOND
         B     READMSG            EXIT
READDLAY DC    F'10'              DELAY OF 0.1 SECOND
*
READRC   EQU   *
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND778           EXIT IF BAD
READNOTC EQU   *
* FOR REQUESTS LIKE TS, DATA COULD BE UP TO 32K
* WE RECEIVE THE REST IN THE PROCESSING ROUTINE
         C     R1,REQLEN          LENGTH RECEIVED<LENGTH EXPECTED ?
         BNH   READOK             EXIT IF OK
* WE GOT MORE THAN EXPECTED, MESSAGES ARE BATCHED
         MVI   BATCHIND,X'FF'     SET BATCH REQUEST
         ST    R1,BATCHLEN        SAVE LENGTH
READOK   EQU   *
         ST    R2,CONNID          SAVE CONN ID
         BAL   R12,REQHANDL       PROCESS REQUEST
         B     READLOOP           LOOP
*
SHUTSERV EQU   *
*
* CLOSE ALL OPEN FILES
*
         L     R6,DFHFCTAD        ADDRESS FCT
         USING DFHFCTDS,R6
* INITIALISE MESSAGE
         MVC   WTOFN,=C'06FD'     FILE CLOSES
         MVC   WTOTERM,=4C' '     NO TERMID
         MVC   WTOTRAN,=4C' '     NO PRESET TRANSID
         MVI   WTOTYPE,C' '       NO TRANSID TYPE
         MVC   WTOTASKN,=7C' '    NO TASK NUMBER
         MVC   WTODESC,=CL45'FILE ........ CLOSE FAILED'
SHUTFLLP EQU   *
         MVC   WTODESC+5(8),FCTFILNM MOVE FILENAME TO MSG
         TM    FCTFILST,FCTOPEN   FILE OPEN ?
         BNO   SHUTFLNX           EXIT IF NOT
         LA    R7,FCTTELEN(R6)    ADDRESS ACB
         USING IHAACB,R7
         CLOSE IHAACB             CLOSE FILE
         LTR   R15,R15            OK ?
         BNZ   SHUTFLER           EXIT IF NOT
* CLOSE SUCCESSFUL, SAY SO
         MVC   WTODESC+20(6),=C'OK    ' SET OK
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
SHUTFLNX EQU   *
         AHI   R6,FCTABLEN        POINT TO NEXT FCT ENTRY
         CLI   0(R6),X'FF'        END OF FCT ?
         BNE   SHUTFLLP           LOOP IF NOT
*
* SHUT THE SERVER AND END Z390CICS
*
         MVC   WTOFN,=C'FF01'     SET FN
         MVC   WTOTERM,=4C' '     NO TERMID
         MVC   WTOTRAN,=4C' '     NO INITIAL TRANSID
         MVC   WTOTASKN,=7C' '    NO TASK NUMBER
         MVC   CICSTMSG,=X'FF0101' CLOSE SERVER
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         TCPIO CLOSE,PORT=3900    CLOSE SERVER
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND777           EXIT IF BAD
* THERE IS LIKELY TO BE A STACKED STIMER OUTSTANDING
* SUBEXIT WILL GO TO THE INST AFTER THE STIMER WAIT
         MVI   SHUTIND,X'FE'      SET SERVER HAS CLOSED
         SUBEXIT
*
SHUTFLER EQU   *
* CLOSE UNSUCCESSFUL, SAY SO
         MVC   WTODESC+20(6),=C'FAILED' SET FAILED
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         B     SHUTFLNX           EXIT
         DROP  R6,R7
*
* SUBROUTINES
*
SENDSHUT EQU   *
* SEND SHUTDOWN TO ALL ACTIVE TERMINALS
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         LA    R6,THRDNUM         R6=NO. OF THREADS + SEQ TERM
         SR    R8,R8              CLEAR R8
SSHTLOOP EQU   *
         TM    THRDIND,X'FF'      AVAILABLE OR SHUTDOWN ?
         BNM   SSHTINCR           EXIT IF IT IS
* OPERATIONAL/RUNNING/SUS-ENQ
         MVC   WTOTERM,=C'SQ01'   DEFAULT SEQ TERM
         CHI   R8,THRDSEQ         IS IT SEQ TERM ?
         BE    SSHTSEQ            EXIT IF IT IS
         MVC   WTOTERM(3),TRMPREFX SET TERMID PREFIX
         STC   R8,WTOTERM+3       SET TERMID SUFFIX
         OI    WTOTERM+3,X'F0'    CONVERT TO CHAR
SSHTSEQ  EQU   *
         MVC   WTOFN,=C'FE04'     SET FUNCTION CODE
         MVC   WTOTRAN,=4C' '     CLEAR TRAN
         MVC   CICSTMSG,=X'FE0401' >>>Z390KCP REQUEST SHUTDOWN
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         ST    R12,SSHTR12        SAVE R12
         BAL   R12,CICSTRCE       TRACE IT
         L     R12,SSHTR12        RESTORE R12
         MVC   MSGLEN,=F'12'      RESET LENGTH
         MVC   MSGFN,=C'FE04'     SET FUNCTION CODE
         MVC   MSGTERM,WTOTERM    SET TERMID
         L     R9,THRDCONN        R9=CONN ID
         TCPIO SEND,MSG=MSGLEN,LMSG=12,CONN=(R9),PORT=3900
         MVC   MSGLEN,=F'300'     RESTORE LENGTH
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND780           EXIT IF BAD
SSHTINCR EQU   *
* AVAILABLE, OPERATIONAL OR SHUTDOWN
         AHI   R8,1               INCREMENT TERMINAL SUFFIX
         AHI   R5,THRDLEN         BUMP THREAD CONTROL AREA
         BCT   R6,SSHTLOOP        LOOP
         BR    R12                RETURN
SSHTR12  DS    AL4                SAVE R12
*
CICSTRCE EQU   *
         CLI   TRCEZ390,C'N'      NO TRACING ?
         BER   R12                RETURN IF IT IS
         CLI   TRCEZ390,C'Y'      ALL TRACING ?
         BE    CICSTRGO           TRACE IF IT IS
         CLC   TRCEZ390,CICSTIND  TRACE TYPE=TRACE REQUEST ?
         BNER  R12                RETURN IF NOT
CICSTRGO EQU   *
         TIME  DEC,TIME,LINKAGE=SYSTEM GET TIME
         MVO   TIMEPACK,TIME      MOVE TO PACKED FIELD
         MVC   TIMEHERE(13),TIMEEDIT MOVE EDIT WORD
         ED    TIMEHERE(13),TIMEPACK EDIT TIME
         MVC   WTOTIME,TIMEHERE   SET TIME
         CLI   CICSTMSG,X'00'     ANY MESSAGE IN TABLE ?
         BE    CICSTDO            EXIT IF NONE
         LAY   R1,MSGTABLE        R1=MESSAGE TABLE
CICSMSLP EQU   *
         CLC   CICSTMSG,0(R1)     MATCH ?
         BL    CICSTDO            EXIT IF NOT
         BH    CICSTINC           EXIT IF NOT THERE YET
         MVC   WTODESC,3(R1)      MOVE MESSAGE
         XC    CICSTMSG,CICSTMSG  CLEAR THE ID
CICSTDO  EQU   *
         WTO   MF=(E,WTOMSG)      TRACE IT
         BR    R12                RETURN
*
CICSTINC EQU   *
         AHI   R1,48              BUMP POINTER
         CLC   0(3,R1),=3X'FF'    STOPPER ?
         BE    CICSTDO            EXIT IF IT IS
         B     CICSMSLP           EXIT
*
CICSTIND DS    C                  TRACE TYPE INDICATOR
CICSTMSG DS    XL3                MESSAGE CODE -- FUNCTION(2), MSGID
*
VSWCLEAN DS    0H
* SCAN FCT
* FOR EACH, SCAN CHAIN OF VSWAS AND FREE ANY THAT ARE OURS
         L     R6,DFHFCTAD        ADDRESS FCT
         USING DFHFCTDS,R6
VSWCFCLP EQU   *
         ICM   R9,15,FCTVSWA      R9=VSWA ANCHOR
         BZ    VSWCNONE           EXIT IF NO VSWAS
         USING DFHVSWAD,R9
         LA    R8,FCTVSWA         PREVIOUS CHAIN ADDRESS
VSWCVSLP EQU   *
         CLC   VSWTASKN,REQTASKN  OUR TASK NUMBER ?
         BE    VSWCGOTV           EXIT IF IT IS
         LR    R8,R9              PREVIOUS CHAIN ADDRESS
         ICM   R9,15,VSWCHAIN     NEXT VSWA
         BZ    VSWCNONE           EXIT IF NO MORE VSWAS
         B     VSWCVSLP           LOOP IF NOT OURS
*
VSWCGOTV EQU   *
* REMAKE THE CHAIN AND FREEMAIN THE VSWA
* ASSUMING NOT MORE THAN ONE
         MVC   0(4,R8),VSWCHAIN   REMAKE THE CHAIN
         FREEMAIN LV=VSWLEN,A=(R9) FREE VSWA
VSWCNONE EQU   *
         AHI   R6,FCTABLEN        POINT TO NEXT FCT ENTRY
         CLI   0(R6),X'FF'        END OF FCT ?
         BNE   VSWCFCLP           LOOP IF NOT
         DROP  R6,R9
         BR    R12                RETURN
*
REQHANDL DS    0H
* PROCESS CLIENTS REQUESTS
* R2=CONN ID
         ST    R12,REQR12         SAVE RETURN REG
         LA    R7,REQTABLE        ADDRESS REQUEST TABLE
REQLOOP  EQU   *
         CLC   REQFN,0(R7)        MATCH REQUEST CODE ?
         BE    REQMATCH           EXIT IF MATCHED
         AHI   R7,8               BUMP POINTER
         CLI   0(R7),X'FF'        STOPPER ?
         BE    ABEND555           YES, BAD REQUEST
         B     REQLOOP            LOOP
REQMATCH EQU   *
         MVC   WTOFN,REQFN        SET REQUEST FOR MSG
         MVC   MSGFN,REQFN        SET REQUEST FOR SEND
         MVC   WTOTERM,=4C' '     ASSUME NO TERMID
         MVC   WTOTRAN,=4C' '     ASSUME NO TRANSID
         MVI   WTOTYPE,C' '       ASSUME NO TRANSID TYPE
         MVC   WTOTASKN,=7C' '    ASSUME NO TASK NUMBER
         L     R12,4(R7)          R12=PROCESSING ROUTINE
         BR    R12                GO TO IT
*
REQRETRN EQU   *
* ALL PROCESSING ROUTINES COME BACK HERE
         L     R12,REQR12         RESTORE RETURN REG
         BR    R12                RETURN
*
REQR12   DS    A
*
REQTABLE EQU   *
* RECEIVED REQUESTS
         DC    C'04FF',A(TERMREQ)  REQUEST TERMID
*
         DC    C'0602',A(READFILE) READ FILE
         DC    C'060C',A(STBRFILE) START BROWSE FILE
         DC    C'060E',A(RDNXFILE) READNEXT FILE
         DC    C'0610',A(RDPVFILE) READPREV FILE
         DC    C'0612',A(NDBRFILE) END BROWSE FILE
         DC    C'0614',A(RSBRFILE) RESET BROWSE FILE
*
         DC    C'0A02',A(WRTEQTS)  WRITEQ TS
         DC    C'0A04',A(READQTS)  READQ TS
         DC    C'0A06',A(DELTQTS)  DELETEQ TS
         DC    C'0AFF',A(CEBRQNAM) CEBR REQUEST QNAMES
*
         DC    C'0E00',A(TRANGO)   TRANSID STARTED        (EMBEDDED)
         DC    C'0EFE',A(TRANABD)  TRANSID ABENDED        (EMBEDDED)
         DC    C'0EFF',A(TRANEND)  TRANSID ENDED          (EMBEDDED)
*
         DC    C'1004',A(ICDELAY)  DELAY
         DC    C'1008',A(ICSTART)  START
         DC    C'100C',A(ICCANCL)  CANCEL
         DC    C'10FF',A(ICEXICE)  EXPIRED ICE REQUEST
*
         DC    C'1204',A(KCPENQ)   ENQ
         DC    C'1206',A(KCPDEQ)   DEQ
         DC    C'12FC',A(KCPDQALL) Z390KCP DEQALL
         DC    C'12FD',A(KCPABEND) Z390KCP ABENDED        (EMBEDDED)
         DC    C'12FE',A(KCPSHUT)  Z390KCP SHUTTERM       (EMBEDDED)
         DC    C'12FF',A(KCPUP)    Z390KCP READY          (EMBEDDED)
*
         DC    C'4C02',A(INQFILE)  INQ FILE REQUEST
         DC    C'4C04',A(SETFILE)  SET FILE REQUEST
*
         DC    C'FE00',A(CEMTITER) CEMT I TER REQUEST
         DC    C'FE01',A(CEMTISYS) CEMT I SYS REQUEST
         DC    C'FE02',A(CEMTPSHT) CEMT P SHU REQUEST     (EMBEDDED)
         DC    C'FE03',A(CEMTPSHI) CEMT P SHU IMM REQUEST (EMBEDDED)
         DC    C'FE06',A(CEMTIENQ) CEMT I ENQ REQUEST
         DC    C'FE07',A(PROCCWA)  CWA PROCESSOR
         DC    X'FF'               STOPPER
*
* REQUEST PROCESSES
*
KCPUP    DS    0H
* FN=12FF  Z390KCP READY
         NI    REQTERM+3,X'0F'    CONVERT ID TO HEX
         SR    R0,R0              CLEAR R0
         IC    R0,REQTERM+3       R0=THREAD NUMBER
         OI    REQTERM+3,X'F0'    CONVERT ID BACK TO CHAR
         MS    R0,=AL4(THRDLEN)   INDEX TO THREAD STATE
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         AR    R5,R0              POINT TO THREAD STATE
         ST    R2,THRDCONN        SAVE CONNID
         MVC   WTOTERM,REQTERM    SET TERMID
         MVC   CICSTMSG,=X'12FF01' <<<Z390KCP READY
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         J     REQRETRN           EXIT
*
KCPSHUT  DS    0H
* FN=12FE  Z390KCP SHUTTERM REQUEST OR NON-TERMINAL TRANSACTION END
* SQ01       STOPPED              ST_SHUT   UNALLOC
* LOCALS     STOPPED  LOCALS-1    ST_SHUT   UNALLOC
* REMOTES             REMOTES-1   ST_AVAIL  UNALLOC
* NON-TERMS  STOPPED  NONTERMS-1  ST_AVAIL  UNALLOC
         MVC   WTOTERM,REQTERM    SET TERMID
         MVC   CICSTMSG,=X'12FE01' <<<Z390KCP SHUTTERM
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         CLC   REQTERM,=C'SQ01'   IS IT SEQ TERM ?
         BNE   KCPNTSQ            EXIT IF NOT
         AHI   R5,THRDLEN*THRDSEQ POINT TO SEQ TERM ENTRY
         LA    R7,THRDSEQ-1       R7=SEQ TERM THREAD ID
         B     KCPSHUTG           EXIT
*
KCPNTSQ  EQU   *
         NI    REQTERM+3,X'0F'    CONVERT ID TO HEX
         LB    R8,REQTERM+3       R8=THREAD NUMBER
         LR    R7,R8              R7=THREAD NUMBER FOR LOCAL STOP
         MS    R8,=AL4(THRDLEN)   INDEX TO THREAD STATE
         AR    R5,R8              POINT TO THREAD STATE
         CLI   THRDTYPE,LOCAL     LOCAL ?
         BE    KCPSHUTG           EXIT IF IT IS
         CLI   THRDTYPE,NONTERM   NON-TERM ?
         BE    KCPSHUTG           EXIT IF IT IS
* REMOTES
         ASI   REMOTES,-1         REMOTES-1
         MVI   THRDIND,ST_AVAIL   SET AVAILABLE STATUS
         B     KCPSHRST           EXIT
*
KCPSHUTG EQU   *
* CAN ONLY STOP LOCALS AND NON-TERMS, WE DIDN'T CREATE REMOTES
         CMDPROC STOP,ID=(R7)     CLOSE THREAD
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND666           EXIT IF BAD
* SEQ TERM IS NOT A TRUE LOCAL
         CLC   REQTERM,=C'SQ01'   IS IT SEQ TERM ?
         BE    KCPNTSQ2           EXIT IF IT IS
         CLI   THRDTYPE,NONTERM   NON-TERM ?
         BNE   KCPNTNTM           EXIT IF NOT
* NON-TERMINAL TRANSACTION END SHUTS THE THREAD DOWN
* AND REVERTS IT TO AVAILABLE STATUS
         ASI   NONTERMS,-1        NONTERMS-1
         MVI   THRDIND,ST_AVAIL   SET AVAILABLE STATUS
         B     KCPSHRST           EXIT
*
KCPNTNTM EQU   *
         ASI   LOCALS,-1          LOCALS-1
KCPNTSQ2 EQU   *
         MVI   THRDIND,ST_SHUT    SET SHUTDOWN STATUS
KCPSHRST EQU   *
         MVI   THRDTYPE,UNALLOC   RESET LOCAL/REMOTE
         MVC   THRDTRAN,=4C' '    CLEAR CURRENT TRANSID
         XC    THRDREQD,THRDREQD  CLEAR REQID
         CLI   SHUTIND,X'FF'      IS SHUTDOWN IN PROGRESS ?
         JE    PSHTTEST           YES, EXIT TO TEST FOR SERVER SHUTDOWN
         J     REQRETRN           EXIT
*
KCPABEND DS    0H
* FN=12FD  Z390KCP ABENDED
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         MVC   WTODESC,=CL45'<<<Z390KCP ABENDED -'
         MVC   WTOTERM,REQTERM    SET TERMID
         CLC   REQABEND,=C'MM01'  ABEND MM01 ?
         BNE   KCPABM02           EXIT IF NOT
         MVC   WTODESC+21(21),=C'REQUEST TERMID FAILED'
         B     KCPABCHK           EXIT
*
KCPABM02 EQU   *
         CLC   REQABEND,=C'MM02'  ABEND MM02 ?
         BNE   KCPABM03           EXIT IF NOT
         MVC   WTODESC+21(12),=C'PARM() ERROR'
         B     KCPABCHK           EXIT
*
KCPABM03 EQU   *
* ABEND MM03
         MVC   WTODESC+21(19),=C'CLIENT TCPIO FAILED'
KCPABCHK EQU   *
         CLI   REQTERM,C' '       ANY KNOWN TERMID ?
         BE    KCPABTRC           EXIT IF NONE
         CLC   REQTERM,=C'SQ01'   IS IT SEQ TERM ?
         BNE   KCPABSQ            EXIT IF NOT
         AHI   R5,THRDLEN*THRDSEQ POINT TO SEQ TERM ENTRY
         B     KCPABGO            EXIT
*
KCPABSQ  EQU   *
         NI    REQTERM+3,X'0F'    CONVERT ID TO HEX
         LB    R8,REQTERM+3       R8=THREAD NUMBER
         MS    R8,=AL4(THRDLEN)   INDEX TO THREAD STATE
         AR    R5,R8              POINT TO THREAD STATE
KCPABGO  EQU   *
         CLI   THRDTYPE,LOCAL     LOCAL ?
         BNE   KCPABRMT           EXIT IF NOT
* SEQ TERM IS NOT A TRUE LOCAL
         CLC   REQTERM,=C'SQ01'   IS IT SEQ TERM ?
         BE    KCPABRST           EXIT IF IT IS
         ASI   LOCALS,-1          LOCALS-1
         B     KCPABRST           EXIT
*
KCPABRMT EQU   *
         ASI   REMOTES,-1         REMOTES-1
KCPABRST EQU   *
         MVI   THRDIND,ST_AVAIL   SET AVAILABLE STATUS
         MVI   THRDTYPE,UNALLOC   RESET TYPE
         MVC   THRDTRAN,=4C' '    CLEAR CURRENT TRANSID
         XC    THRDREQD,THRDREQD  CLEAR REQID
KCPABTRC EQU   *
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         J     REQRETRN           EXIT
*
TERMREQ  EQU   *
* FN=04FF  REMOTE TERMINAL REQUEST FOR TERMID/INITIAL TRANSID
*
* FN=04FE  REQUEST FAILED SENT BACK
* FN=04FF  REQUEST SUCCEEDED SENT BACK
         CLC   REMOTES,MAXREMS    MAXIMUM ALLOCATED ?
         BNL   TERMRQBD           EXIT IF YES
* HUNT FOR AVAILABLE TERMID
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         LA    R8,C'0'            THREAD ID
         LA    R7,10              MAXIMUM ALLOWED
TERMRQLP EQU   *
         CLI   THRDIND,ST_AVAIL   AVAILABLE ?
         BE    TERMRQGT           EXIT IF IT IS
         AHI   R5,THRDLEN         BUMP THREAD CONTROL AREA
         AHI   R8,1               BUMP THREAD ID
         BCT   R7,TERMRQLP        LOOP
TERMRQBD EQU   *
* TERMID REQUEST FAILED
         MVC   WTOFN,=C'04FE'     SET FN IN MSG
         MVC   CICSTMSG,=X'04FE02' >>>Z390KCP REQUEST TERMID FAILED
         MVC   MSGFN,WTOFN        SET FN RESPONSE
         MVC   MSGTERM,=4C' '     SET NO TERMID
         B     TERMRQSN           EXIT
*
TERMRQGT EQU   *
         MVC   MSGTERM(3),TRMPREFX SET TERMID PREFIX
         STC   R8,MSGTERM+3       SET TERMID SUFFIX
         MVC   MSGTRAN,INITRAN    SET INITIAL TRANSID
         MVC   MSGDATE,INIDATE    SET DATE FORMAT
         MVC   WTOTERM,MSGTERM    SET TERMID IN MSG
         MVC   WTOTRAN,MSGTRAN    SET INITIAL TRANSID IN MSG
         MVC   CICSTMSG,=X'04FE01' >>>Z390KCP REQUESTED TERMID
         MVI   THRDIND,ST_OPER    SET OPERATIONAL STATUS
         MVI   THRDTYPE,REMOTE    SET REMOTE
         ASI   REMOTES,1          REMOTES+1
TERMRQSN EQU   *
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         L     R8,CONNID          R8=CONN ID
         TCPIO SEND,MSG=MSGLEN,LMSG=200,CONN=(R8),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND780           EXIT IF BAD
         J     REQRETRN           EXIT
*
TRANGO   DS    0H
* FN=0E00  TRANSACTION STARTED, PASS BACK THE TASK NUMBER
* IF SHUTDOWN IN PROGRESS, REJECT REQUEST, TELL Z390KCP
         MVC   WTOTERM,REQTERM    SET TERMID
         MVC   WTOTRAN,REQTRAN    SET TRANSID
         MVC   WTOTYPE,REQTYPE    SET TRANSID TYPE
         CLI   SHUTIND,X'FF'      IS SHUTDOWN IN PROGRESS ?
         BNE   TRANGOK            EXIT IF NOT
         MVC   MSGTASKN,=7C'F'    SET BAD TASK NUMBER
         MVC   CICSTMSG,=X'0E0001' <<<Z390/CICS SHUTDOWN IN PROGRESS
         B     TRANGOMS
*
TRANGOK  EQU   *
         MVC   MSGTERM,REQTERM    SET TERMID
         UNPK  MSGTASKN,TASKNO    UNPACK TASK NUMBER
         OI    MSGTASKN+6,X'F0'   CLEAR SIGN
         MVC   WTOTASKN,MSGTASKN  SET TASK NUMBER
         MVC   CICSTMSG,=X'0E0002' <<<Z390KCP TRAN STARTED
TRANGOMS EQU   *
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         L     R8,CONNID          R8=CONN ID
         TCPIO SEND,MSG=MSGLEN,LMSG=200,CONN=(R8),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND780           EXIT IF BAD
         CLI   SHUTIND,X'FF'      IS SHUTDOWN IN PROGRESS ?
         JE    REQRETRN           EXIT IF IT IS
         AP    TASKNO,=P'1'       BUMP TASK NUMBER
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         CLC   REQTERM,=C'SQ01'   IS IT SEQ TERM ?
         BNE   TRANNTSQ           EXIT IF NOT
         AHI   R5,THRDLEN*THRDSEQ POINT TO SEQ TERM ENTRY
         B     TRANGO2            EXIT
*
TRANNTSQ EQU   *
         NI    REQTERM+3,X'0F'    CONVERT ID TO HEX
         LB    R8,REQTERM+3       R8=THREAD NUMBER
         MS    R8,=AL4(THRDLEN)   INDEX TO THREAD STATE
         AR    R5,R8              POINT TO THREAD STATE
TRANGO2  EQU   *
         MVI   THRDIND,ST_RUN     SET TERMINAL RUNNING STATUS
         MVC   THRDTRAN,REQTRAN   SAVE TRANSID
         MVC   THRDREQD,REQREQID  SAVE REQID
         J     REQRETRN           EXIT
*
TRANABD  DS    0H
* FN=0EFE  TRANSID ABENDED
         MVC   WTOTERM,REQTERM    SET TERMID
         MVC   WTOTRAN,REQTRAN    SET TRANSID
         UNPK  WTOTASKN,REQTASKN  UNPACK TASK NUMBER
         OI    WTOTASKN+6,X'F0'   CLEAR SIGN
         MVC   WTODESC,=CL45'<<<Z390KCP TRAN ABENDED XXXX'
         MVC   WTODESC+24(4),REQABCDE SET ABEND CODE
         CLI   REQABCDE,C'A'      CICS ABEND ?
         BNE   TRANABUS           EXIT IF NOT
         LARL  R12,APPABTAB       R12=ABEND TABLE ADDRESS
TRANABLP EQU   *
         CLC   0(4,R12),REQABCDE  MATCH ABEND CODE ?
         BE    TRANABOK           EXIT IF IT DOES
         JH    ABEND444           ERROR IF ABEND CODE NOT KNOWN
         AHI   R12,17             BUMP
         B     TRANABLP           LOOP
*
TRANABOK EQU   *
         MVC   WTODESC+29(13),4(R12) MOVE DESCRIPTION
TRANABUS EQU   *
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         BAL   R12,VSWCLEAN       CLEAN ANY VSWAS
         J     REQRETRN           EXIT
*
TRANEND  DS    0H
* FN=0EFF  TRANSID ENDED
         MVC   WTOTERM,REQTERM    SET TERMID
         MVC   WTOTRAN,REQTRAN    SET TRANSID
         UNPK  WTOTASKN,REQTASKN  UNPACK TASK NUMBER
         OI    WTOTASKN+6,X'F0'   CLEAR SIGN
         MVC   CICSTMSG,=X'0EFF01' <<<Z390KCP TRAN ENDED
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         BAL   R12,CICSTRCE       TRACE IT
         BAL   R12,VSWCLEAN       CLEAN ANY VSWAS
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         CLC   REQTERM,=C'SQ01'   IS IT SEQ TERM ?
         BNE   TRANENSQ           EXIT IF NOT
         AHI   R5,THRDLEN*THRDSEQ POINT TO SEQ TERM ENTRY
         B     TRANENTM           EXIT
*
TRANENSQ EQU   *
         NI    REQTERM+3,X'0F'    CONVERT ID TO HEX
         LB    R8,REQTERM+3       R8=THREAD NUMBER
         MS    R8,=AL4(THRDLEN)   INDEX TO THREAD STATE
         AR    R5,R8              POINT TO THREAD STATE
TRANENTM EQU   *
         MVI   THRDIND,ST_OPER    SET TERMINAL OPERATIONAL STATUS
         MVC   THRDTRAN,=4C' '    CLEAR TRANSID
         XC    THRDREQD,THRDREQD  CLEAR REQID
         J     REQRETRN           RETURN
*
PSHTTEST EQU   *
* SHUTDOWN IS FLAGGED, SCAN TO SEE IF WE CAN SHUTDOWN SERVER
* ALSO INVOKED BY SHUTTERM
*
* ALL TERMINALS MUST BE AVAILABLE OR SHUTDOWN
*
         LA    R5,THRDCNTL        ADDRESS THREAD CONTROL AREA
         LA    R6,THRDNUM         R6=NO. OF THREADS + SEQ TERM
PSHTLOOP EQU   *
         CLI   THRDIND,ST_AVAIL   AVAILABLE ?
         BE    PSHTINCR           EXIT IF IT IS
         CLI   THRDIND,ST_SHUT    SHUTDOWN ?
         JNE   REQRETRN           EXIT IF NOT
PSHTINCR EQU   *
         AHI   R5,THRDLEN         BUMP THREAD CONTROL AREA
         BCT   R6,PSHTLOOP        LOOP
         B     SHUTSERV           GO AND SHUT THE SERVER
*
CEMTPSHT DS    0H
* FN=FE02  CEMT P SHUT REQUESTED
         OI    REQTERM+3,X'F0'    RESET TERMID
         MVC   WTOTERM,REQTERM    SET TERMID
         MVC   CICSTMSG,=X'FE0201' <<<Z390KCP SHUTDOWN REQUEST
         MVI   CICSTIND,C'A'      SET APPLICATION TYPE
         BAL   R12,CICSTRCE       TRACE IT
         MVI   SHUTIND,X'FF'      SET SHUTDOWN IN PROGRESS
* SEND FE04 TO ALL ACTIVE TERMINALS
         BAL   R12,SENDSHUT       SEND SHUTDOWN TO ALL ACTIVE TERMINALS
         J     REQRETRN           EXIT
*
CEMTPSHI DS    0H
* FN=FE03  CEMT P SHUT IMM REQUESTED
         OI    REQTERM+3,X'F0'    RESET TERMID
         MVC   WTOTERM,REQTERM    SET TERMID
         MVC   CICSTMSG,=X'FE0301' <<<Z390KCP IMMED SHUTDOWN REQUEST
         MVI   CICSTIND,C'A'      SET APPLICATION TYPE
         BAL   R12,CICSTRCE       TRACE IT
         MVI   SHUTIND,X'FF'      SET SHUTDOWN IN PROGRESS
* SEND FE04 TO ALL ACTIVE TERMINALS
         BAL   R12,SENDSHUT       SEND SHUTDOWN TO ALL ACTIVE TERMINALS
* ALL IDLE TERMINALS CHECK SHUTDOWN STATUS
* THEY SHOULD ALL CLOSE WITHIN 5 SECONDS
         STIMER REAL,SHUTPREP,BINTVL=CEMTPTIM WAIT 5 SECONDS
         J     REQRETRN           EXIT
CEMTPTIM DC    F'500'             5 SECOND DELAY
*
SHUTPREP EQU   *
* STIMER EXIT ROUTINE
         LR    R13,R3             RE-ESTABLISH
         AHI   R13,-4096                       1ST BASE
         J     SHUTSERV           EXIT TO SHUT SERVER
*
SECTOR2  DS    0H
*
READFILE DS    0H
* FN=0602  READ FILE
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0602,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
STBRFILE DS    0H
* FN=060C  START BROWSE FILE
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL060C,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
RDNXFILE DS    0H
* FN=060E  READNEXT FILE
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL060E,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
RDPVFILE DS    0H
* FN=0610  READPREV FILE
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0610,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
NDBRFILE DS    0H
* FN=0612  ENDBR FILE
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0612,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
RSBRFILE DS    0H
* FN=0614  RESET BROWSE FILE
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0614,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
WRTEQTS  DS    0H
* FN=0A02  WRITEQ TS
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0A02,(WTOMSG,(R11),TSNANCHR,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
READQTS  DS    0H
* FN=0A04  READQ TS
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0A04,(WTOMSG,(R11),TSNANCHR,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
DELTQTS  DS    0H
* FN=0A06  DELETEQ TS
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0A06,(WTOMSG,(R11),TSNANCHR,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
CEBRQNAM DS    0H
* FN=0AFF  CEBR REQUEST QNAMES
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL0AFF,(WTOMSG,(R11),MSGLEN,CEBRQUS,TSNANCHR,CONNID,   X
               TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
ICDELAY  DS    0H
* FN=1004  DELAY
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL1004,(WTOMSG,(R11),ICEANCHR,TRCEZ390,THRDCNTL),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
ICSTART  DS    0H
* FN=1008  START
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL1008,(WTOMSG,(R11),ICEANCHR,CONNID,TRCEZ390,         X
               TRMPREFX),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
ICCANCL  DS    0H
* FN=100C  CANCEL
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL100C,(WTOMSG,(R11),ICEANCHR,CONNID,TRCEZ390,         X
               THRDCNTL),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
ICEXICE  DS    0H
* FN=10FF  ICE SCAN
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL10FF,(WTOMSG,(R11),ICEANCHR,TRCEZ390,THRDCNTL,       X
               NONTERMS,MAXNONT,KCPSTART),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
KCPENQ   DS    0H
* FN=1204  ENQ
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL1204,(WTOMSG,(R11),QEAANCHR,CONNID,TRCEZ390,         X
               THRDCNTL),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
KCPDEQ   DS    0H
* FN=1206  DEQ
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL1206,(WTOMSG,(R11),QEAANCHR,CONNID,TRCEZ390,         X
               THRDCNTL),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
KCPDQALL DS    0H
* FN=12FC  DEQALL
*          NOTHING SENT BACK
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL12FC,(WTOMSG,(R11),QEAANCHR,TRCEZ390,THRDCNTL),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
INQFILE  DS    0H
* FN=4C02  INQ FILE REQUESTED
*          IFILDATA SENT BACK
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL4C02,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
SETFILE  DS    0H
* FN=4C04  SET FILE PROCESSOR
*          RESPONSE SENT BACK
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBL4C04,(WTOMSG,(R11),DFHFCTAD,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
CEMTITER DS    0H
* FN=FE00  CEMT I TER REQUESTED
*          THRDCNTL SENT BACK
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBLFE00,(WTOMSG,(R11),MSGLEN,MSGDATA+9,THRDCNTL,        X
               THRDLEN*THRDNUM,CONNID,TRCEZ390,TRMPREFX),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
CEMTISYS DS    0H
* FN=FE01  CEMT I SYS REQUESTED
*          ISYSDATA SENT BACK
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBLFE01,(WTOMSG,(R11),CONNID,TRCEZ390,CMD1LEN,          X
               CMD0+1,CMD1+4,CICSADDR,TRMPREFX,INIDATE,THREADS+3,      X
               LOCALS,REMOTES,NONTERMS,MAXLOCS+3,MAXREMS+3,MAXNONT+3,  X
               INITRAN,CWALENG,KCPTRPOS,INISEQT),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
CEMTIENQ DS    0H
* FN=FE06  CEMT I ENQ REQUESTED
*          IENQDATA SENT BACK
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBLFE06,(WTOMSG,(R11),QEAANCHR,CONNID,TRCEZ390),MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
PROCCWA  DS    0H
* FN=FE07  CWA PROCESSOR
*          CWA SENT BACK
         ST    R13,SUBRSAVE       SAVE BASE REG R13
         LA    R13,SUBRSAVE       ADDRESS OUR SAVEAREA
         CALL  GBLFE07,(WTOMSG,(R11),CWAANCHR,CWALENG,CONNID,TRCEZ390),X
               MF=I
         L     R13,SUBRSAVE       RESTORE BASE REG R13
         J     REQRETRN           EXIT
*
ABEND444 ABEND 444,DUMP           ABEND CODE NOT IN TABLE
ABEND555 ABEND 555,DUMP           BAD REQUEST
ABEND666 ABEND 666,DUMP           CMDPROC FAILED
ABEND777 ABEND 777,DUMP           TCPIO OPEN/CLOSE SERVER FAILED
ABEND778 ABEND 778,DUMP           TCPIO RECEIVE FAILED
ABEND780 ABEND 780,DUMP           TCPIO SEND FAILED
*
CMD0     DC    C'"  "'            "DRIVE ID"
CMD1     DC    CL84'"CD '         "PATH"
CMD1LEN  DC    H'0'               LENGTH OF PATH
CMD2     DC    C'SET Z390SEQ=%CICSPATH%\SEQ\',X'00'
TRMPREFX DS    CL3                TERMINAL ID PREFIX
INITRAN  DC    C'----'            INITIAL TRANSID
INIDATE  DC    C'K'               DATE FORMAT  K=DMY  S=MDY  R=YMD
INISEQT  DC    C'N'               SEQ_TERM Y/N/T
JARENV   DC    C'JARPATH',X'00'   JARPATH ENV VARIABLE
CICSENV  DC    C'CICSPATH',X'00'  CICSPATH ENV VARIABLE
CICSADDR DC    F'0'               CICSPATH ADDRESS
*
* CALL EZ390 %CICSPATH%\Z390KCP NOTIME GUAM PARM(LTERMTRANK)
KCPSTART DC    C'CALL EZ390 %CICSPATH%\Z390KCP NOTIME GUAM PARM('
KCPTRMTP DS    C                  LOCAL TERMINAL
KCPTRMID DS    CL4                TERMINAL ID
KCPTRNID DS    CL4                INITIAL TRANSID
KCPDATFM DS    C                  DATE FORMAT
         DC    C') '              END BRACKET
KCPTRPOS DC    CL(L'KCPTRACE)' '  TRACE PARMS
         DC    X'00'              NULL TERMINATOR
*
KCPTRACE DC    C'LOG(....) TRACE(EGQT) TS MAXSIZE(60) DUMP'
*
* TCPIO SEND MESSAGE AREA
*
MSGLEN   DC    A(300)             LENGTH OF PARMS
MSGFN    DS    CL4                REQUEST CODE
MSGTERM  DS    CL4                TERMINAL ID
MSGDATA  DS    CL288
         ORG   MSGDATA
* 04FF FIELDS SENT
MSGTRAN  DS    CL4                INITIAL TRANSID
MSGDATE  DS    C                  DATE FORMAT
         ORG   MSGDATA
* 0AFF FIELD SENT
CEBRQUS  DS    AL2                NO. OF Q NAMES
         ORG   MSGDATA
* 0E00 FIELD SENT
MSGTASKN DS    CL7                TASK NUMBER
         ORG
*
* THREAD CONTROL
THREADS  DC    F'0'               MAXIMUM THREADS
MAXLOCS  DC    F'0'               MAXIMUM LOCAL TERMINALS
MAXREMS  DC    F'0'               MAXIMUM REMOTE TERMINALS
MAXNONT  DC    F'0'               MAXIMUM NON-TERMINALS
LOCALS   DC    F'0'               LOCAL TERMINALS IN USE
REMOTES  DC    F'0'               REMOTE TERMINALS IN USE
NONTERMS DC    F'0'               NON-TERMINALS IN USE
*
* 10 LOCAL AND REMOTE TERMINALS...SEE THRDDSCT
* THE 11TH ENTRY IS FOR THE SEQUENTIAL TERMINAL
THRDCNTL DC    (THRDNUM)XL(THRDLEN)'00'
*
TASKNO   DC    PL4'0'             TASK NUMBER
CONNID   DS    XL4                CONN ID FROM LAST RECEIVE
BATCHLEN DS    F                  SAVE TCPIO RECEIVED LENGTH
BATCHIND DC    X'00'              X'FF'=TCPIO RECEIVE IS BATCHED
SHUTIND  DC    X'00'              X'FF'=SHUTDOWN IN PROGRESS
*                                 X'FE'=SERVER HAS CLOSED
TRCEZ390 DC    C'Y'               Z390 TRACE OPTION, DEFAULT=YES
*
* TIME CONVERSION FIELDS
*
TIME     DS    CL4                HHMMSSTT
         DS    CL8                SPACE FOR DATE
TIMEPACK DC    PL5'0'             0HHMMSSTTC
TIMEEDIT DC    X'402021207A20207A20204B2020'
TIMEHERE DS    CL13
*
* WTO MESSAGE -- GENERAL TRACE
*
WTOMSG   DC    AL2(WTOMEND-*,0)
WTOTIME  DS    CL13               TIME STAMP
         DC    C' '
WTOFN    DS    CL4                MODULE/FUNCTION REFERENCE (EIBFN)
         DC    C' '
WTOTERM  DS    CL4                TERMID
         DC    C' '
WTOTRAN  DS    CL4                TRANSID (OR BLANK)
         DC    C' '
WTOTYPE  DS    C                  TRANSID TYPE
         DC    C' '
WTOTASKN DS    CL7                TASK NUMBER
         DC    C' '
WTODESC  DS    CL45               DESCRIPTION
WTOMEND  EQU   *
*
* WORK AREAS
*
DEC      DC    PL8'0'
*
* RESOURCE ANCHORS
*
TSNANCHR DC    A(0)               ANCHOR POINT FOR TS NAME TABLE
ICEANCHR DC    A(0)               ANCHOR POINT FOR ICE CHAIN
QEAANCHR DC    A(0)               ANCHOR POINT FOR ENQUEUE RESOURCES
CWAANCHR DC    A(0)               ANCHOR POINT FOR CWA
CWALENG  DC    A(0)               ACTUAL LENGTH OF CWA
*
DFHFCTAD DS    A                  FCT ADDRESS
SUBRSAVE DS    18F                SAVEAREA FOR CALLED ROUTINES
*
Z390INI  DCB   DSORG=PS,                                               X
               EODAD=EOFINI,                                           X
               RECFM=FT,                                               X
               DDNAME=Z390INI,                                         X
               MACRF=GM,                                               X
               BLKSIZE=80,                                             X
               LRECL=80,                                               X
               RECORD=INIAREA
INIAREA  DS    CL80
*
         LTORG
*
MSGTABLE EQU   *
* XL2  FUNCTION CODE
* X    MESSAGE CODE
* MUST BE IN ORDER
* NOT CURRENTLY SUITABLE FOR MODIFIABLE MESSAGES
         DC    X'04FE01',CL45'>>>Z390KCP REQUESTED TERMID'
         DC    X'04FE02',CL45'>>>Z390KCP REQUEST TERMID FAILED'
         DC    X'0E0001',CL45'<<<Z390KCP - Z390/CICS SHUTDOWN IN PROGRE-
               SS'
         DC    X'0E0002',CL45'<<<Z390KCP TRAN STARTED'
         DC    X'0EFF01',CL45'<<<Z390KCP TRAN ENDED'
         DC    X'120001',CL45'GLOBAL MANAGER INITIALIZED'
         DC    X'120101',CL45'START Z390KCP'
         DC    X'12FE01',CL45'<<<Z390KCP SHUTTERM'
         DC    X'12FF01',CL45'<<<Z390KCP READY'
         DC    X'FE0201',CL45'<<<Z390KCP SHUTDOWN REQUEST'
         DC    X'FE0301',CL45'<<<Z390KCP IMMEDIATE SHUTDOWN REQUEST'
         DC    X'FE0401',CL45'>>>Z390KCP REQUEST SHUTDOWN'
         DC    X'FE0601',CL45'SEQUENTIAL TERMINAL STARTED'
         DC    X'FF0001',CL45'OPEN SERVER'
         DC    X'FF0101',CL45'CLOSE SERVER'
         DC    X'FFFFFF'          STOPPER
*
APPABTAB EQU   *
         DC    C'AEI0',CL13'PGMIDERR'
         DC    C'AEI1',CL13'TRANSIDERR'
         DC    C'AEI2',CL13'ENDDATA'
         DC    C'AEI4',CL13'EXPIRED'
         DC    C'AEI9',CL13'MAPFAIL'
         DC    C'AEIK',CL13'TERMIDERR'
         DC    C'AEIL',CL13'FILENOTFOUND'
         DC    C'AEIM',CL13'NOTFND'
         DC    C'AEIN',CL13'DUPREC'
         DC    C'AEIO',CL13'DUPKEY'
         DC    C'AEIP',CL13'INVREQ'
         DC    C'AEIQ',CL13'IOERR'
         DC    C'AEIR',CL13'NOSPACE'
         DC    C'AEIS',CL13'NOTOPEN'
         DC    C'AEIT',CL13'ENDFILE'
         DC    C'AEIU',CL13'ILLOGIC'
         DC    C'AEIV',CL13'LENGERR'
         DC    C'AEIZ',CL13'ITEMERR'
         DC    C'AEXK',CL13'END'
         DC    C'AEXL',CL13'DISABLED'
         DC    C'AEYB',CL13'INVMPSZ'
         DC    C'AEYH',CL13'QIDERR'
         DC    C'AEYT',CL13'ENVDEFERR'
         DC    C'AEYY',CL13'NOTALLOC'
         DC    C'AEZI',CL13'ACTIVITYERR'
         DC    C'AEZJ',CL13'CONTAINERERR'
         DC    C'AEZL',CL13'TOKENERR'
         DC    C'AEZV',CL13'CHANNELERR'
         DC    C'ASRA',CL13'PROGRAM CHECK'
         DC    4X'FF'             STOPPER
*
FAKE10FF DC    AL4(12),C'10FF',XL4'00'
*
* EIBFN CODES
*
*    04FE  REQUEST TERMID FAILED          (SEND)
*    04FF  REQUEST TERMID/INITIAL TRANSID (RECEIVE AND SEND)
*
*    0602  READ FILE                      (RECEIVE AND SEND)
*    060C  START BROWSE FILE              (RECEIVE AND SEND)
*    060E  READNEXT FILE                  (RECEIVE AND SEND)
*    0610  READPREV FILE                  (RECEIVE AND SEND)
*    0612  ENDBR FILE                     (RECEIVE AND SEND)
*    0614  RESETBR FILE                   (RECEIVE AND SEND)
*    06FD  FILE CLOSES                    (INTERNAL)
*    06FE  1ST REF FILE OPENS             (INTERNAL)
*    06FF  INITIAL FILE OPENS             (INTERNAL)
*
*    0A02  WRITEQ TS                      (RECEIVE AND SEND)
*    0A04  READQ TS                       (RECEIVE AND SEND)
*    0A06  DELETEQ TS                     (RECEIVE AND SEND)
*    0AFF  CEBR REQUEST QNAMES            (RECEIVE AND SEND)
*
*    0E00  TRANSID STARTED AND TASK NUMBER REQUEST (RECEIVE AND SEND)
*    0EFE  TRANSID ABENDED                         (RECEIVE)
*    0EFF  TRANSID ENDED                           (RECEIVE)
*
*    1008  IC START                        (RECEIVE AND SEND)
*    100C  IC CANCEL                       (RECEIVE AND SEND)
*    10FF  ICE SCAN                        (RECEIVE, SEND AND INTERNAL)
*
*    1200  GLOBAL MANAGER INITIALIZED      (INTERNAL)
*    1201  START Z390KCP                   (INTERNAL)
*    1202  N OF N LOCAL TERMINALS STARTED  (INTERNAL)
*    12FD  Z390KCP ABENDED                 (RECEIVE)
*             MM01 -- REQUEST TERMID FAILED
*             MM02 -- PARM() INVALID
*             MM03 -- CLIENT TCPIO ERROR
*    12FE  CEMT S TER OUT                  (RECEIVE)
*    12FF  Z390KCP UP                      (RECEIVE)
*
*    4C02  CEMT I FIL                      (RECEIVE AND SEND)
*    4C04  SET FILE                        (RECEIVE)
*
*    FE00  CEMT I TER                      (RECEIVE AND SEND)
*    FE01  CEMT I SYS                      (RECEIVE AND SEND)
*    FE02  CEMT P SHU                      (RECEIVE)
*    FE03  CEMT P SHU IMM                  (RECEIVE)
*    FE04  REQUEST SHUTDOWN                (SEND)
*    FE06  SEQUENTIAL TERMINAL STARTED     (INTERNAL)
*    FE07  CWA PROCESSOR                   (RECEIVE AND SEND)
*
*    FF00  TCPIO OPEN SERVER               (INTERNAL)
*    FF01  TCPIO CLOSE SERVER              (INTERNAL)
*
* RECEIVE MESSAGE AREA
*
REQDSECT DSECT
REQLEN   DS    XL4                REQUEST LENGTH
REQFN    DS    CL4                REQUEST CODE
REQTERM  DS    CL4                TERMINAL ID
REQTRAN  DS    CL4                TRANSID
* REQTYPE IS DOCUMENTED IN Z390KCP AT KCPGOTYP
REQTYPE  DS    C                  TRANSID TYPE
REQDATA  DS    CL183              REQUEST DATA
*
         ORG   REQDATA
* 0E00 FIELD RECEIVED
REQREQID DS    CL8                REQID
         ORG   REQDATA
* 0EFF/4C02/4C04 FIELD RECEIVED
REQTASKN DS    PL4                PACKED TASK NUMBER
* 0EFE ADDITIONAL FIELD RECEIVED
REQABCDE DS    CL4                ABEND CODE
*
         ORG   REQDATA
* 12FD FIELDS RECEIVED
REQABEND DS    CL4                INTERNAL ABEND CODE
         ORG
*
         THRDDSCT                 TERMINAL THREAD CONTROL AREA
         ACBD  ,                  VSAM ACB
         DFHFCTDS                 FILE CONTROL TABLE
         DFHVSWAD                 FILE CONTROL VSAM WORK AREA
         DFHICEDS                 INTERVAL CONTROL ELEMENT
*
         EQUREGS REGS=GPR
* R3   BASE 2
* R4   BASE 3
* R5   THRDDSCT BASE
* R6   WORK REG
* R7   WORK REG
* R8   WORK REG
* R9   WORK REG
* R10  WORK REG
* R11  REQDSECT BASE
* R12  LINK REG
* R13  BASE 1
*
         END
