***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
LCLCEDF  CSECT
*
* EDF PROCESSOR
*
* R1  >>> LCL PARM BLOCK POINTER (DIRECT LINKAGE)
* R3  >>> LCL PARM BLOCK POINTER (NORMAL LINKAGE)
* BAKR RETURN ADDRESS+4 >>> LCL PARM BLOCK POINTER (SPECIAL LINKAGE)
*
* EACH PARM STARTS WITH EIBFN
*
         BALR  R12,0              BASE ADDRESS
         USING *,R12
         USING DFHTCTTE,TCTTEAR
         CLI   TCTTEEDL,X'FE'     SPECIAL LINKAGE (DFHEIENT) ?
         BNE   TRYDIR             EXIT IF NOT
         LA    R4,2               SET FUNCTION 2
         ESTA  R6,R4              EXTRACT RETURN ADDRESS IN R7
         AHI   R7,4               ADDRESS PARM POINTER
         L     R3,0(R7)           SAVE PARM ADDRESS
         B     NODIR              EXIT
*
TRYDIR   EQU   *
         CLI   TCTTEEDL,X'FF'     DIRECT LINKAGE ?
         BNE   NODIR              EXIT IF NOT
         LR    R3,R1              SAVE PARM ADDRESS
NODIR    EQU   *
         LA    R4,EDFTABL         R4=ADDRESS OF EDF TABLE
IXLOOP   EQU   *
         CLC   0(2,R4),0(R3)      TABLE MATCH ?
         BE    DOEDF              EXIT IF IT DOES
         AHI   R4,6               BUMP TABLE ENTRY
         CLC   0(2,R4),=X'FFFF'   STOPPER ?
         BNE   IXLOOP             LOOP IF NOT
         DC    H'0'               SHOULD NOT OCCUR
*
         LTORG
*
EDFTABL  EQU   *
         DC    X'0202',AL4(EDF0202) ADDRESS
         DC    X'0204',AL4(EDF0204) HANDLE CONDITION
         DC    X'0206',AL4(EDF0206) HANDLE AID
         DC    X'0208',AL4(EDF0208) ASSIGN
         DC    X'020A',AL4(EDF020A) IGNORE CONDITION
         DC    X'020C',AL4(EDF020C) PUSH HANDLE
         DC    X'020E',AL4(EDF020E) POP HANDLE
*
         DC    X'0402',AL4(EDF0402) RECEIVE
         DC    X'0404',AL4(EDF0404) SEND
*
         DC    X'0602',AL4(EDF0602) READ
         DC    X'060C',AL4(EDF060C) STARTBR
         DC    X'060E',AL4(EDF060E) READNEXT
         DC    X'0610',AL4(EDF0610) READPREV
         DC    X'0612',AL4(EDF0612) ENDBR
         DC    X'0614',AL4(EDF0614) RESETBR
*
         DC    X'0A02',AL4(EDF0A02) WRITEQ TS
         DC    X'0A04',AL4(EDF0A04) READQ TS
         DC    X'0A06',AL4(EDF0A06) DELETEQ TS
*
         DC    X'0C02',AL4(EDF0C02) GETMAIN
         DC    X'0C04',AL4(EDF0C04) FREEMAIN
*
         DC    X'0E02',AL4(EDF0E02) LINK     DIRECT LINKAGE
         DC    X'0E04',AL4(EDF0E04) XCTL     DIRECT LINKAGE
         DC    X'0E06',AL4(EDF0E06) LOAD
         DC    X'0E08',AL4(EDF0E08) RETURN   DIRECT LINKAGE
         DC    X'0E0A',AL4(EDF0E0A) RELEASE
         DC    X'0E0C',AL4(EDF0E0C) ABEND
         DC    X'0E0E',AL4(EDF0E0E) HANDLE ABEND
*
         DC    X'1002',AL4(EDF1002) ASKTIME
         DC    X'1004',AL4(EDF1004) DELAY
         DC    X'1008',AL4(EDF1008) START
         DC    X'100A',AL4(EDF100A) RETRIEVE
         DC    X'100C',AL4(EDF100C) CANCEL
*
         DC    X'1204',AL4(EDF1204) ENQ
         DC    X'1206',AL4(EDF1206) DEQ
*
         DC    X'1802',AL4(EDF1802) RECEIVE MAP
         DC    X'1804',AL4(EDF1804) SEND MAP
         DC    X'1812',AL4(EDF1812) SEND CONTROL
*
         DC    X'1C02',AL4(EDF1C02) DUMP
*
         DC    X'3412',AL4(EDF3412) DELETE CONTAINER
         DC    X'3414',AL4(EDF3414) GET CONTAINER
         DC    X'3416',AL4(EDF3416) PUT CONTAINER
         DC    X'3440',AL4(EDF3440) MOVE CONTAINER
*
         DC    X'4A02',AL4(EDF4A02) ASKTIME ABSTIME
         DC    X'4A04',AL4(EDF4A04) FORMATTIME
*
         DC    X'9626',AL4(EDF9626) STARTBROWSE CONTAINER
         DC    X'9628',AL4(EDF9628) GETNEXT CONTAINER
         DC    X'962A',AL4(EDF962A) ENDBROWSE CONTAINER
*
         DC    X'4C02',AL4(EDF4C02) INQUIRE FILE
         DC    X'4C04',AL4(EDF4C04) SET FILE
*
         DC    X'FFFF'            STOPPER
*
DOEDF    EQU   *
         L     R12,2(R4)          R12=EDF MODULE ADDRESS BASE
         BR    R12                GO TO IT
         DROP  R12
*
* EDF MODULES
*
EDF0202  DS    0H
* ADDRESS
         USING *,R12
         USING (P0202,P0202END),R3
         L     DFHEIBR,P0202EIB   LOAD EIB ADDRESS
         USING DFHEIBLK,DFHEIBR
         MVC   E0202ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0202S        ADDRESS MAP
         USING EDF0202S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0202L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0202TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0202TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0202TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0202AFT           EXIT IF NOT
* 'BEFORE' ADDRESS
         MVC   E0202STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0202REQ+4,C'B'    SET REQID
         MVI   E02021RA,DFHBMASD  HIDE RESPONSE
         MVI   E02022RA,DFHBMASD  HIDE EIBRESP2
         OC    P0202ACM,P0202ACM  ANY COMMAREA ADDRESS REQUESTED ?
         BZ    E0202CWB           EXIT IF NOT
* 'BEFORE' COMMAREA
         MVC   E0202CHO(8),=C'COMMAREA' SET REQUEST
E0202CWB EQU   *
         OC    P0202ACW,P0202ACW  ANY CWA ADDRESS REQUESTED ?
         BZ    E0202EIB           EXIT IF NOT
* 'BEFORE' CWA
         MVC   E0202WHO(3),=C'CWA'   SET REQUEST
E0202EIB EQU   *
         OC    P0202AEI,P0202AEI  ANY EIB ADDRESS REQUESTED ?
         BZ    E0202PRM           EXIT IF NOT
* 'BEFORE' EIB
         MVC   E0202EHO(3),=C'EIB'   SET REQUEST
         B     E0202PRM           EXIT
*
E0202AFT EQU   *
* 'AFTER' ADDRESS
         MVC   E0202STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0202REQ+4,C'A'    SET REQID
         OC    P0202ACM,P0202ACM  ANY COMMAREA ADDRESS REQUESTED ?
         BZ    E0202CWA           EXIT IF NOT
         OC    EIBCALEN,EIBCALEN  ANY COMMAREA ?
         BZ    E0202CWA           EXIT IF NONE
* 'AFTER' COMMAREA
* COMMAREA (X'00000000') LENGTH (0000000)
         MVC   E0202CHO(12),=C'COMMAREA (X''' HEADER 1
         MVC   E0202WK2(4),P0202ACM MOVE A(COMMAREA)
         UNPK  E0202WK1(9),E0202WK2(5) UNPACK A(COMMAREA)
         TR    E0202WK1(8),E0202TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0202CHO+12(8),E0202WK1 MOVE A(COMMAREA)
         MVC   E0202CHO+20(11),=C''') LENGTH ('  SET HEADER 2
         LH    R5,EIBCALEN        R5=COMMAREA LENGTH
         CVD   R5,E0202DEC        CONVERT TO DECIMAL
         UNPK  E0202CHO+31(7),E0202DEC+4(4) UNPACK LENGTH
         OI    E0202CHO+37,X'F0'  SET SIGN
         MVI   E0202CHO+38,C')'   SET LENGTH CLOSE BRACKET
* COMMAREA DATA
         L     R5,P0202ACM        R5=COMMAREA ADDRESS
         LH    R6,EIBCALEN        R6=COMMAREA LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,67              >67 ?
         BNH   E0202LGC           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E0202LGC EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E0202CMO,C'('      SET COMMAREA OPEN BRACKET
         EX    R7,E0202XCM        MOVE DATA IN CHAR FORM
         LA    R5,E0202CMO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
E0202CWA EQU   *
         OC    P0202ACW,P0202ACW  ANY CWA ADDRESS REQUESTED ?
         BZ    E0202EIA           EXIT IF NOT
* 'AFTER' CWA
* CWA      (X'00000000') LENGTH (0000000)
         MVC   E0202WHO(12),=C'CWA      (X''' HEADER 1
         MVC   E0202WK2(4),P0202ACW MOVE A(CWA)
         UNPK  E0202WK1(9),E0202WK2(5) UNPACK A(CWA)
         TR    E0202WK1(8),E0202TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0202WHO+12(8),E0202WK1 MOVE A(CWA)
         MVC   E0202WHO+20(11),=C''') LENGTH ('  SET HEADER 2
         L     R5,TCTTECWL        R5=CWA LENGTH
         CVD   R5,E0202DEC        CONVERT TO DECIMAL
         UNPK  E0202WHO+31(7),E0202DEC+4(4) UNPACK LENGTH
         OI    E0202WHO+37,X'F0'  SET SIGN
         MVI   E0202WHO+38,C')'   SET LENGTH CLOSE BRACKET
* CWA DATA
         L     R5,P0202ACW        R5=CWA ADDRESS
         L     R6,TCTTECWL        R6=CWA LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,67              >67 ?
         BNH   E0202LGW           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E0202LGW EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E0202WMO,C'('      SET CWA OPEN BRACKET
         EX    R7,E0202XWM        MOVE DATA IN CHAR FORM
         LA    R5,E0202WMO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET CWA CLOSE BRACKET
E0202EIA EQU   *
         OC    P0202AEI,P0202AEI  ANY EIB ADDRESS REQUESTED ?
         BZ    E0202RSP           EXIT IF NOT
* 'AFTER' EIB
* EIB      (X'00000000') LENGTH (0000000)
         MVC   E0202EHO(12),=C'EIB      (X''' HEADER 1
         MVC   E0202WK2(4),P0202AEI MOVE A(EIB)
         UNPK  E0202WK1(9),E0202WK2(5) UNPACK A(EIB)
         TR    E0202WK1(8),E0202TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0202EHO+12(8),E0202WK1 MOVE A(EIB)
         MVC   E0202EHO+20(11),=C''') LENGTH ('  SET HEADER 2
         LA    R5,EIBLENG         R5=EIB LENGTH
         CVD   R5,E0202DEC        CONVERT TO DECIMAL
         UNPK  E0202EHO+31(7),E0202DEC+4(4) UNPACK LENGTH
         OI    E0202EHO+37,X'F0'  SET SIGN
         MVI   E0202EHO+38,C')'   SET LENGTH CLOSE BRACKET
* EIB DATA
         L     R5,P0202AEI        R5=EIB ADDRESS
         LA    R6,EIBLENG         R6=EIB LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,67              >67 ?
         BNH   E0202LGE           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E0202LGE EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E0202EMO,C'('      SET EIB OPEN BRACKET
         EX    R7,E0202XEM        MOVE DATA IN CHAR FORM
         LA    R5,E0202EMO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET EIB CLOSE BRACKET
E0202RSP EQU   *
* RESP/RESP2
         LA    R5,E0202RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0202DEC        CONVERT TO DECIMAL
         UNPK  E0202R2O,E0202DEC+6(2) UNPACK EIBRESP2
         OI    E0202R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0202PRM           EXIT IF NONE
         UNPK  E0202WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0202WK1(12),E0202TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0202RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0202RCO+12(12),E0202WK1 SET EIBRCODE
E0202PRM EQU   *
         L     R0,P0202EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0202PRO        SAVE PROGRAM NAME
         STG   R8,E0202PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0202WK2        SAVE OFFSET
         UNPK  E0202WK1(9),E0202WK2(5) UNPACK OFFSET
         TR    E0202WK1(8),E0202TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0202OFO,C'X'''    SET X'
         MVC   E0202OFO+2(6),E0202WK1+2 MOVE OFFSET
         MVI   E0202OFO+8,C''''   SET ENDING QUOTE
* FOR ADDRESS THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0202L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0202EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0202EDL        SAME ?
         BE    E0202QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0202QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0202WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0202WK1) INITIMG(0)
         ST    R6,E0202ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0202L        LENGTH TO MOVE
         LA    R8,EDF0202S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0202EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0202WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0202L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0202EDL        LENGTH TO MOVE
         L     R8,P0202EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0202ADD) LENGTH(E0202WK1)                    X
                    QUEUE('0202') REQID(E0202REQ)
         EXEC  CICS FREEMAIN DATA(E0202ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0202ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0202XCM MVC   E0202CMO+1(0),0(R5) MOVE COMMAREA DATA IN CHAR FORM
E0202XWM MVC   E0202WMO+1(0),0(R5) MOVE CWA DATA IN CHAR FORM
E0202XEM MVC   E0202EMO+1(0),0(R5) MOVE EIB DATA IN CHAR FORM
*
E0202ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0202DEC DS    PL8
E0202WK1 DS    XL9
E0202ADD DS    0A
E0202WK2 DS    XL4
E0202REQ DC    CL8'0202'
E0202TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0204  DS    0H
* HANDLE CONDITION
         USING *,R12
         USING (P0204,P0204END),R3
         L     DFHEIBR,P0204EIB   LOAD EIB ADDRESS
         MVC   E0204ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0204S        ADDRESS MAP
         USING EDF0204S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0204L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0204TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0204TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0204TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0204AFT           EXIT IF NOT
* 'BEFORE' HANDLE CONDITION
         MVC   E0204STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0204REQ+4,C'B'    SET REQID
         MVI   E02041RA,DFHBMASD  HIDE RESPONSE
         MVI   E02042RA,DFHBMASD  HIDE EIBRESP2
         B     E0204PRM           EXIT
*
E0204AFT EQU   *
* 'AFTER' HANDLE CONDITION
         MVC   E0204STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0204REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0204RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0204DEC        CONVERT TO DECIMAL
         UNPK  E0204R2O,E0204DEC+6(2) UNPACK EIBRESP2
         OI    E0204R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0204PRM           EXIT IF NONE
         UNPK  E0204WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0204WK1(12),E0204TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0204RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0204RCO+12(12),E0204WK1 SET EIBRCODE
E0204PRM EQU   *
* THE MAP BODY IS BUILT IN Z390CEDF TO ENABLE PAGING
         L     R0,P0204EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0204PRO        SAVE PROGRAM NAME
         STG   R8,E0204PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0204WK2        SAVE OFFSET
         UNPK  E0204WK1(9),E0204WK2(5) UNPACK OFFSET
         TR    E0204WK1(8),E0204TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0204OFO,C'X'''    SET X'
         MVC   E0204OFO+2(6),E0204WK1+2 MOVE OFFSET
         MVI   E0204OFO+8,C''''   SET ENDING QUOTE
* FOR HANDLE CONDITION THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*    CDLOADPT
*    P0204CND, P0204ADR
*
         LA    R9,EDF0204L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0204EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0204EDL        SAME ?
         BE    E0204QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0204QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         AHI   R9,4+30+120        + CDLOADPT+P0204CND+P0204ADR
         STH   R9,E0204WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0204WK1) INITIMG(0)
         ST    R6,E0204ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0204L        LENGTH TO MOVE
         LA    R8,EDF0204S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0204EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0204WK1        GETMAIN LENGTH
         AHI   R9,-(EDF0204L+8+4+30+120) CALC ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P0204EDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         LARL  R9,CDELOAD         ADDRESS OF LOAD POINT
         MVC   0(4,R6),0(R9)      SAVE IT
         MVC   4(30,R6),P0204CND  MOVE CONDITIONS
         MVC   34(120,R6),P0204ADR MOVE ADDRESSES
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0204ADD) LENGTH(E0204WK1)                    X
                    QUEUE('0204') REQID(E0204REQ)
         EXEC  CICS FREEMAIN DATA(E0204ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0204ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0204ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0204DEC DS    PL8
E0204WK1 DS    XL9
E0204ADD DS    0A
E0204WK2 DS    XL4
E0204REQ DC    CL8'0204'
E0204TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0206  DS    0H
* HANDLE AID
         USING *,R12
         USING (P0206,P0206END),R3
         L     DFHEIBR,P0206EIB   LOAD EIB ADDRESS
         MVC   E0206ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0206S        ADDRESS MAP
         USING EDF0206S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0206L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0206TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0206TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0206TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0206AFT           EXIT IF NOT
* 'BEFORE' HANDLE AID
         MVC   E0206STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0206REQ+4,C'B'    SET REQID
         MVI   E02061RA,DFHBMASD  HIDE RESPONSE
         MVI   E02062RA,DFHBMASD  HIDE EIBRESP2
         B     E0206PRM           EXIT
*
E0206AFT EQU   *
* 'AFTER' HANDLE AID
         MVC   E0206STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0206REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0206RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0206DEC        CONVERT TO DECIMAL
         UNPK  E0206R2O,E0206DEC+6(2) UNPACK EIBRESP2
         OI    E0206R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0206PRM           EXIT IF NONE
         UNPK  E0206WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0206WK1(12),E0206TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0206RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0206RCO+12(12),E0206WK1 SET EIBRCODE
E0206PRM EQU   *
* THE MAP BODY IS BUILT IN Z390CEDF TO ENABLE PAGING
         L     R0,P0206EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0206PRO        SAVE PROGRAM NAME
         STG   R8,E0206PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0206WK2        SAVE OFFSET
         UNPK  E0206WK1(9),E0206WK2(5) UNPACK OFFSET
         TR    E0206WK1(8),E0206TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0206OFO,C'X'''    SET X'
         MVC   E0206OFO+2(6),E0206WK1+2 MOVE OFFSET
         MVI   E0206OFO+8,C''''   SET ENDING QUOTE
* FOR HANDLE CONDITION THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*    CDLOADPT
*    P0206ADS, P0206ADR
*
         LA    R9,EDF0206L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0206EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0206EDL        SAME ?
         BE    E0206QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0206QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         AHI   R9,4+30+120        + CDLOADPT+P0206ADS+P0206ADR
         STH   R9,E0206WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0206WK1) INITIMG(0)
         ST    R6,E0206ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0206L        LENGTH TO MOVE
         LA    R8,EDF0206S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0206EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0206WK1        GETMAIN LENGTH
         AHI   R9,-(EDF0206L+8+4+30+120) CALC ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P0206EDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         LARL  R9,CDELOAD         ADDRESS OF LOAD POINT
         MVC   0(4,R6),0(R9)      SAVE IT
         MVC   4(30,R6),P0206ADS  MOVE CONDITIONS
         MVC   34(120,R6),P0206ADR MOVE ADDRESSES
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0206ADD) LENGTH(E0206WK1)                    X
                    QUEUE('0206') REQID(E0206REQ)
         EXEC  CICS FREEMAIN DATA(E0206ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0206ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0206ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0206DEC DS    PL8
E0206WK1 DS    XL9
E0206ADD DS    0A
E0206WK2 DS    XL4
E0206REQ DC    CL8'0206'
E0206TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0208  DS    0H
* ASSIGN
         USING *,R12
         USING (P0208,P0208END),R3
         L     DFHEIBR,P0208EIB   LOAD EIB ADDRESS
         MVC   E0208ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0208S        ADDRESS MAP
         USING EDF0208S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0208L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0208TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0208TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0208TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0208AFT           EXIT IF NOT
* 'BEFORE' ASSIGN
         MVC   E0208STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0208REQ+4,C'B'    SET REQID
         MVI   E02081RA,DFHBMASD  HIDE RESPONSE
         MVI   E02082RA,DFHBMASD  HIDE EIBRESP2
         B     E0208PRM           EXIT
*
E0208AFT EQU   *
* 'AFTER' ASSIGN
         MVC   E0208STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0208REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0208RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0208DEC        CONVERT TO DECIMAL
         UNPK  E0208R2O,E0208DEC+6(2) UNPACK EIBRESP2
         OI    E0208R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0208PRM           EXIT IF NONE
         UNPK  E0208WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0208WK1(12),E0208TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0208RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0208RCO+12(12),E0208WK1 SET EIBRCODE
E0208PRM EQU   *
* THE MAP BODY IS BUILT IN Z390CEDF TO ENABLE PAGING
         L     R0,P0208EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0208PRO        SAVE PROGRAM NAME
         STG   R8,E0208PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0208WK2        SAVE OFFSET
         UNPK  E0208WK1(9),E0208WK2(5) UNPACK OFFSET
         TR    E0208WK1(8),E0208TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0208OFO,C'X'''    SET X'
         MVC   E0208OFO+2(6),E0208WK1+2 MOVE OFFSET
         MVI   E0208OFO+8,C''''   SET ENDING QUOTE
* FOR ASSIGN THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*    P0208 STRUCTURE
*    DS CL(E0208LEN) FOR THE DATA
*
         LA    R9,EDF0208L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0208EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0208EDL        SAME ?
         BE    E0208QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0208QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
* + P0208 STRUCTURE + E0208LEN FOR THE DATA
         AHI   R9,(P0208END-P0208)+E0208LEN CALC GETMAIN LENGTH
         STH   R9,E0208WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0208WK1) INITIMG(0)
         ST    R6,E0208ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0208L        LENGTH TO MOVE
         LA    R8,EDF0208S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0208EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0208WK1        GETMAIN LENGTH
         AHI   R9,-(EDF0208L+8+(P0208END-P0208)+E0208LEN) CALC ALIGNED
*                                                         DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P0208EDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0((P0208END-P0208),R6),P0208 MOVE P0208 STRUCTURE
* BUILD THE DATA AREA
         ICM   R9,15,P0208ABC     ANY ABCODE ?
         BZ    E0208NAC           EXIT IF NONE
         MVC   E0208ABC,0(R9)     MOVE ABCODE
E0208NAC EQU   *
         ICM   R9,15,P0208ABP     ANY ABDUMP ?
         BZ    E0208NAP           EXIT IF NONE
         MVC   E0208ABP,0(R9)     MOVE ABDUMP
E0208NAP EQU   *
         ICM   R9,15,P0208ABG     ANY ABPROGRAM ?
         BZ    E0208NAG           EXIT IF NONE
         MVC   E0208ABG,0(R9)     MOVE ABPROGRAM
E0208NAG EQU   *
         ICM   R9,15,P0208APK     ANY APLKYBD ?
         BZ    E0208NAK           EXIT IF NONE
         MVC   E0208APK,0(R9)     MOVE APLKYBD
E0208NAK EQU   *
         ICM   R9,15,P0208APT     ANY APLTEXT ?
         BZ    E0208NAT           EXIT IF NONE
         MVC   E0208APT,0(R9)     MOVE APLTEXT
E0208NAT EQU   *
         ICM   R9,15,P0208ASP     ANY ASRAPSW ?
         BZ    E0208NAW           EXIT IF NONE
         MVC   E0208ASP,0(R9)     MOVE ASRAPSW
E0208NAW EQU   *
         ICM   R9,15,P0208ASR     ANY ASRAREGS ?
         BZ    E0208NAR           EXIT IF NONE
         MVC   E0208ASR,0(R9)     MOVE ASRAREGS
E0208NAR EQU   *
         ICM   R9,15,P0208BTR     ANY BTRANS ?
         BZ    E0208CHL           EXIT IF NONE
         MVC   E0208BTR,0(R9)     MOVE BTRANS
E0208CHL EQU   *
         ICM   R9,15,P0208CHN     ANY CHANNEL ?
         BZ    E0208NBT           EXIT IF NONE
         MVC   E0208CHN,0(R9)     MOVE CHANNEL
E0208NBT EQU   *
         ICM   R9,15,P0208CMD     ANY CMDSEC ?
         BZ    E0208NCM           EXIT IF NONE
         MVC   E0208CMD,0(R9)     MOVE CMDSEC
E0208NCM EQU   *
         ICM   R9,15,P0208COL     ANY COLOR ?
         BZ    E0208NCL           EXIT IF NONE
         MVC   E0208COL,0(R9)     MOVE COLOR
E0208NCL EQU   *
         ICM   R9,15,P0208CWA     ANY CWALENG ?
         BZ    E0208NCW           EXIT IF NONE
         MVC   E0208CWA,0(R9)     MOVE CWALENG
E0208NCW EQU   *
         ICM   R9,15,P0208DSH     ANY DEFSCRNHT ?
         BZ    E0208NDH           EXIT IF NONE
         MVC   E0208DSH,0(R9)     MOVE DEFSCRNHT
E0208NDH EQU   *
         ICM   R9,15,P0208DSW     ANY DEFSCRNWD ?
         BZ    E0208NDW           EXIT IF NONE
         MVC   E0208DSW,0(R9)     MOVE DEFSCRNWD
E0208NDW EQU   *
         ICM   R9,15,P0208DSC     ANY DSSCS ?
         BZ    E0208NDS           EXIT IF NONE
         MVC   E0208DSC,0(R9)     MOVE DSSCS
E0208NDS EQU   *
         ICM   R9,15,P0208D32     ANY DS3270 ?
         BZ    E0208ND3           EXIT IF NONE
         MVC   E0208D32,0(R9)     MOVE DS3270
E0208ND3 EQU   *
         ICM   R9,15,P0208EWA     ANY EWASUPP ?
         BZ    E0208NEW           EXIT IF NONE
         MVC   E0208EWA,0(R9)     MOVE EWASUPP
E0208NEW EQU   *
         ICM   R9,15,P0208EXT     ANY EXTDS ?
         BZ    E0208NEX           EXIT IF NONE
         MVC   E0208EXT,0(R9)     MOVE EXTDS
E0208NEX EQU   *
         ICM   R9,15,P0208FAC     ANY FACILITY ?
         BZ    E0208NFA           EXIT IF NONE
         MVC   E0208FAC,0(R9)     MOVE FACILITY
E0208NFA EQU   *
         ICM   R9,15,P0208FCI     ANY FCI ?
         BZ    E0208NFC           EXIT IF NONE
         MVC   E0208FCI,0(R9)     MOVE FCI
E0208NFC EQU   *
         ICM   R9,15,P0208GMM     ANY GMMI ?
         BZ    E0208NGM           EXIT IF NONE
         MVC   E0208GMM,0(R9)     MOVE GMMI
E0208NGM EQU   *
         ICM   R9,15,P0208HIL     ANY HILIGHT ?
         BZ    E0208NHL           EXIT IF NONE
         MVC   E0208HIL,0(R9)     MOVE HILIGHT
E0208NHL EQU   *
         ICM   R9,15,P0208INV     ANY INVPROGRAM ?
         BZ    E0208NIP           EXIT IF NONE
         MVC   E0208INV,0(R9)     MOVE INVPROGRAM
E0208NIP EQU   *
         ICM   R9,15,P0208KAT     ANY KATAKANA ?
         BZ    E0208NKA           EXIT IF NONE
         MVC   E0208KAT,0(R9)     MOVE KATAKANA
E0208NKA EQU   *
         ICM   R9,15,P0208LIU     ANY LANGINUSE ?
         BZ    E0208NLI           EXIT IF NONE
         MVC   E0208LIU,0(R9)     MOVE LANGINUSE
E0208NLI EQU   *
         ICM   R9,15,P0208MCL     ANY MAPCOLUMN ?
         BZ    E0208NMC           EXIT IF NONE
         MVC   E0208MCL,0(R9)     MOVE MAPCOLUMN
E0208NMC EQU   *
         ICM   R9,15,P0208MHT     ANY MAPHEIGHT ?
         BZ    E0208NMH           EXIT IF NONE
         MVC   E0208MHT,0(R9)     MOVE MAPHEIGHT
E0208NMH EQU   *
         ICM   R9,15,P0208MLN     ANY MAPLINE ?
         BZ    E0208NML           EXIT IF NONE
         MVC   E0208MLN,0(R9)     MOVE MAPLINE
E0208NML EQU   *
         ICM   R9,15,P0208MWH     ANY MAPWIDTH ?
         BZ    E0208NMW           EXIT IF NONE
         MVC   E0208MWH,0(R9)     MOVE MAPWIDTH
E0208NMW EQU   *
         ICM   R9,15,P0208MSR     ANY MSRCONTROL ?
         BZ    E0208NMS           EXIT IF NONE
         MVC   E0208MSR,0(R9)     MOVE MSRCONTROL
E0208NMS EQU   *
         ICM   R9,15,P0208NIU     ANY NATLANGINUSE ?
         BZ    E0208NNI           EXIT IF NONE
         MVC   E0208NIU,0(R9)     MOVE NATLANGINUSE
E0208NNI EQU   *
         ICM   R9,15,P0208NXT     ANY NEXTTRANSID ?
         BZ    E0208NNX           EXIT IF NONE
         MVC   E0208NXT,0(R9)     MOVE NEXTTRANSID
E0208NNX EQU   *
         ICM   R9,15,P0208OUT     ANY OUTLINE ?
         BZ    E0208NOL           EXIT IF NONE
         MVC   E0208OUT,0(R9)     MOVE OUTLINE
E0208NOL EQU   *
         ICM   R9,15,P0208PRT     ANY PARTNS ?
         BZ    E0208NPT           EXIT IF NONE
         MVC   E0208PRT,0(R9)     MOVE PARTNS
E0208NPT EQU   *
         ICM   R9,15,P0208PGM     ANY PROGRAM ?
         BZ    E0208NPG           EXIT IF NONE
         MVC   E0208PGM,0(R9)     MOVE PROGRAM
E0208NPG EQU   *
         ICM   R9,15,P0208PS      ANY PS ?
         BZ    E0208NPS           EXIT IF NONE
         MVC   E0208PS,0(R9)      MOVE PS
E0208NPS EQU   *
         ICM   R9,15,P0208RSC     ANY RESSEC ?
         BZ    E0208NRS           EXIT IF NONE
         MVC   E0208RSC,0(R9)     MOVE RESSEC
E0208NRS EQU   *
         ICM   R9,15,P0208RES     ANY RESTART ?
         BZ    E0208NRE           EXIT IF NONE
         MVC   E0208RES,0(R9)     MOVE RESTART
E0208NRE EQU   *
         ICM   R9,15,P0208RET     ANY RETPROGRAM ?
         BZ    E0208NRP           EXIT IF NONE
         MVC   E0208RET,0(R9)     MOVE RETPROGRAM
E0208NRP EQU   *
         ICM   R9,15,P0208SCH     ANY SCRNHT ?
         BZ    E0208NSH           EXIT IF NONE
         MVC   E0208SCH,0(R9)     MOVE SCRNHT
E0208NSH EQU   *
         ICM   R9,15,P0208SCW     ANY SCRNWD ?
         BZ    E0208NSW           EXIT IF NONE
         MVC   E0208SCW,0(R9)     MOVE SCRNWD
E0208NSW EQU   *
         ICM   R9,15,P0208SOS     ANY SOSI ?
         BZ    E0208NSO           EXIT IF NONE
         MVC   E0208SOS,0(R9)     MOVE SOSI
E0208NSO EQU   *
         ICM   R9,15,P0208STC     ANY STARTCODE ?
         BZ    E0208NSC           EXIT IF NONE
         MVC   E0208STC,0(R9)     MOVE STARTCODE
E0208NSC EQU   *
         ICM   R9,15,P0208TKP     ANY TASKPRIORITY ?
         BZ    E0208NTP           EXIT IF NONE
         MVC   E0208TKP,0(R9)     MOVE TASKPRIORITY
E0208NTP EQU   *
         ICM   R9,15,P0208TUL     ANY TCTUALENG ?
         BZ    E0208NTL           EXIT IF NONE
         MVC   E0208TUL,0(R9)     MOVE TCTUALENG
E0208NTL EQU   *
         ICM   R9,15,P0208TMC     ANY TERMCODE ?
         BZ    E0208NTC           EXIT IF NONE
         MVC   E0208TMC,0(R9)     MOVE TERMCODE
E0208NTC EQU   *
         ICM   R9,15,P0208TMP     ANY TERMPRIORITY ?
         BZ    E0208NTM           EXIT IF NONE
         MVC   E0208TMP,0(R9)     MOVE TERMPRIORITY
E0208NTM EQU   *
         ICM   R9,15,P0208TXK     ANY TEXTKYBD ?
         BZ    E0208NTK           EXIT IF NONE
         MVC   E0208TXK,0(R9)     MOVE TEXTKYBD
E0208NTK EQU   *
         ICM   R9,15,P0208TXP     ANY TEXTPRINT ?
         BZ    E0208NTT           EXIT IF NONE
         MVC   E0208TXP,0(R9)     MOVE TEXTPRINT
E0208NTT EQU   *
         ICM   R9,15,P0208TNP     ANY TRANPRIORITY ?
         BZ    E0208NTY           EXIT IF NONE
         MVC   E0208TNP,0(R9)     MOVE TRANPRIORITY
E0208NTY EQU   *
         ICM   R9,15,P0208TWA     ANY TWALENG ?
         BZ    E0208NTW           EXIT IF NONE
         MVC   E0208TWA,0(R9)     MOVE TWALENG
E0208NTW EQU   *
         ICM   R9,15,P0208UNA     ANY UNATTEND ?
         BZ    E0208NUN           EXIT IF NONE
         MVC   E0208UNA,0(R9)     MOVE UNATTEND
E0208NUN EQU   *
         ICM   R9,15,P0208USP     ANY USERPRIORITY ?
         BZ    E0208NUP           EXIT IF NONE
         MVC   E0208USP,0(R9)     MOVE USERPRIORITY
E0208NUP EQU   *
         ICM   R9,15,P0208VAL     ANY VALIDATION ?
         BZ    E0208NVL           EXIT IF NONE
         MVC   E0208VAL,0(R9)     MOVE VALIDATION
E0208NVL EQU   *
         MVC   (P0208END-P0208)(E0208LEN,R6),E0208ABC MOVE DATA
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0208ADD) LENGTH(E0208WK1)                    X
                    QUEUE('0208') REQID(E0208REQ)
         EXEC  CICS FREEMAIN DATA(E0208ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0208ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0208ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0208DEC DS    PL8
E0208WK1 DS    XL9
E0208ADD DS    0A
E0208WK2 DS    XL4
E0208REQ DC    CL8'0208'
E0208TBL DC    C'0123456789ABCDEF'
*
E0208ABC DC    CL4' '             ABCODE
E0208ABP DC    X'00'              ABDUMP
E0208ABG DC    CL8' '             ABPROGRAM
E0208APK DC    X'00'              APLKYBD
E0208APT DC    X'00'              APLTEXT
E0208ASP DC    XL8'00'            ASRAPSW
E0208ASR DC    XL64'00'           ASRAREGS
E0208BTR DC    X'00'              BTRANS
E0208CHN DC    CL16' '            CHANNEL
E0208CMD DC    C' '               CMDSEC
E0208COL DC    X'00'              COLOR
E0208CWA DC    AL2(0)             CWALENG
E0208DSH DC    AL2(0)             DEFSCRNHT
E0208DSW DC    AL2(0)             DEFSCRNWD
E0208DSC DC    X'00'              DSSCS
E0208D32 DC    X'00'              DS3270
E0208EWA DC    X'00'              EWASUPP
E0208EXT DC    X'00'              EXTDS
E0208FAC DC    CL4' '             FACILITY
E0208FCI DC    X'00'              FCI
E0208GMM DC    X'00'              GMMI
E0208HIL DC    X'00'              HILIGHT
E0208INV DC    CL8' '             INVOKINGPROG
E0208KAT DC    X'00'              KATAKANA
E0208LIU DC    CL3' '             LANGINUSE
E0208MCL DC    AL2(0)             MAPCOLUMN
E0208MHT DC    AL2(0)             MAPHEIGHT
E0208MLN DC    AL2(0)             MAPLINE
E0208MWH DC    AL2(0)             MAPWIDTH
E0208MSR DC    X'00'              MSRCONTROL
E0208NIU DC    C' '               NATLANGINUSE
E0208NXT DC    CL4' '             NEXTTRANSID
E0208OUT DC    X'00'              OUTLINE
E0208PRT DC    X'00'              PARTNS
E0208PGM DC    CL8' '             PROGRAM
E0208PS  DC    X'00'              PS
E0208RSC DC    C' '               RESSEC
E0208RES DC    X'00'              RESTART
E0208RET DC    CL8' '             RETURNPROG
E0208SCH DC    AL2(0)             SCRNHT
E0208SCW DC    AL2(0)             SCRNWD
E0208SOS DC    X'00'              SOSI
E0208STC DC    CL2' '             STARTCODE
E0208TKP DC    AL2(0)             TASKPRIORITY
E0208TUL DC    AL2(0)             TCTUALEN
E0208TMC DC    X'0000'            TERMCODE
E0208TMP DC    AL2(0)             TERMPRIORITY
E0208TXK DC    X'00'              TEXTKYBD
E0208TXP DC    X'00'              TEXTPRINT
E0208TNP DC    AL2(0)             TRANPRIORITY
E0208TWA DC    AL2(0)             TWASIZE
E0208UNA DC    X'00'              UNATTEND
E0208USP DC    AL2(0)             USERPRIORITY
E0208VAL DC    X'00'              VALIDATION
E0208LEN EQU   *-E0208ABC
*
         LTORG
         DROP  R12
*
EDF020A  DS    0H
* IGNORE CONDITION
         USING *,R12
         USING (P020A,P020AEND),R3
         L     DFHEIBR,P020AEIB   LOAD EIB ADDRESS
         MVC   E020AESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF020AS        ADDRESS MAP
         USING EDF020AS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF020AL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E020ATSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E020ATNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E020ATNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E020AAFT           EXIT IF NOT
* 'BEFORE' IGNORE CONDITION
         MVC   E020ASTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E020AREQ+4,C'B'    SET REQID
         MVI   E020A1RA,DFHBMASD  HIDE RESPONSE
         MVI   E020A2RA,DFHBMASD  HIDE EIBRESP2
         B     E020APRM           EXIT
*
E020AAFT EQU   *
* 'AFTER' IGNORE CONDITION
         MVC   E020ASTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E020AREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E020ARPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E020ADEC        CONVERT TO DECIMAL
         UNPK  E020AR2O,E020ADEC+6(2) UNPACK EIBRESP2
         OI    E020AR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E020APRM           EXIT IF NONE
         UNPK  E020AWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E020AWK1(12),E020ATBL-240 CONVERT TO DISPLAY HEX
         MVC   E020ARCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E020ARCO+12(12),E020AWK1 SET EIBRCODE
E020APRM EQU   *
* THE MAP BODY IS BUILT IN Z390CEDF TO ENABLE PAGING
         L     R0,P020AEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E020APRO        SAVE PROGRAM NAME
         STG   R8,E020APGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E020AWK2        SAVE OFFSET
         UNPK  E020AWK1(9),E020AWK2(5) UNPACK OFFSET
         TR    E020AWK1(8),E020ATBL-240 CONVERT TO DISPLAY HEX
         MVHHI E020AOFO,C'X'''    SET X'
         MVC   E020AOFO+2(6),E020AWK1+2 MOVE OFFSET
         MVI   E020AOFO+8,C''''   SET ENDING QUOTE
* FOR IGNORE CONDITION THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*    CDLOADPT
*    P020ACND
*
         LA    R9,EDF020AL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P020AEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P020AEDL        SAME ?
         BE    E020AQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E020AQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         AHI   R9,4+30            + CDLOADPT+P020ACND
         STH   R9,E020AWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E020AWK1) INITIMG(0)
         ST    R6,E020AADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF020AL        LENGTH TO MOVE
         LA    R8,EDF020AS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P020AEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E020AWK1        GETMAIN LENGTH
         AHI   R9,-(EDF020AL+8+4+30) CALC ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P020AEDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         LARL  R9,CDELOAD         ADDRESS OF LOAD POINT
         MVC   0(4,R6),0(R9)      SAVE IT
         MVC   4(30,R6),P020ACND  MOVE CONDITIONS
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E020AADD) LENGTH(E020AWK1)                    X
                    QUEUE('020A') REQID(E020AREQ)
         EXEC  CICS FREEMAIN DATA(E020AADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E020AESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E020AESA DS    CL(EIBLENG)        EIB SAVE AREA
E020ADEC DS    PL8
E020AWK1 DS    XL9
E020AADD DS    0A
E020AWK2 DS    XL4
E020AREQ DC    CL8'020A'
E020ATBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF020C  DS    0H
* PUSH HANDLE
         USING *,R12
         USING (P020C,P020CEND),R3
         L     DFHEIBR,P020CEIB   LOAD EIB ADDRESS
         MVC   E020CESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF020CS        ADDRESS MAP
         USING EDF020CS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF020CL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E020CTSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E020CTNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E020CTNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E020CAFT           EXIT IF NOT
* 'BEFORE' PUSH HANDLE
         MVC   E020CSTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E020CREQ+4,C'B'    SET REQID
         MVI   E020C1RA,DFHBMASD  HIDE RESPONSE
         MVI   E020C2RA,DFHBMASD  HIDE EIBRESP2
         B     E020CPRM           EXIT
*
E020CAFT EQU   *
* 'AFTER' PUSH HANDLE
         MVC   E020CSTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E020CREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E020CRPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E020CDEC        CONVERT TO DECIMAL
         UNPK  E020CR2O,E020CDEC+6(2) UNPACK EIBRESP2
         OI    E020CR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E020CPRM           EXIT IF NONE
         UNPK  E020CWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E020CWK1(12),E020CTBL-240 CONVERT TO DISPLAY HEX
         MVC   E020CRCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E020CRCO+12(12),E020CWK1 SET EIBRCODE
E020CPRM EQU   *
         L     R0,P020CEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E020CPRO        SAVE PROGRAM NAME
         STG   R8,E020CPGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E020CWK2        SAVE OFFSET
         UNPK  E020CWK1(9),E020CWK2(5) UNPACK OFFSET
         TR    E020CWK1(8),E020CTBL-240 CONVERT TO DISPLAY HEX
         MVHHI E020COFO,C'X'''    SET X'
         MVC   E020COFO+2(6),E020CWK1+2 MOVE OFFSET
         MVI   E020COFO+8,C''''   SET ENDING QUOTE
* FOR PUSH HANDLE THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF020CL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P020CEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P020CEDL        SAME ?
         BE    E020CQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E020CQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E020CWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E020CWK1) INITIMG(0)
         ST    R6,E020CADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF020CL        LENGTH TO MOVE
         LA    R8,EDF020CS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P020CEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E020CWK1        GETMAIN LENGTH
         AHI   R9,-(EDF020CL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P020CEDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E020CADD) LENGTH(E020CWK1)                    X
                    QUEUE('020C') REQID(E020CREQ)
         EXEC  CICS FREEMAIN DATA(E020CADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E020CESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E020CESA DS    CL(EIBLENG)        EIB SAVE AREA
E020CDEC DS    PL8
E020CWK1 DS    XL9
E020CADD DS    0A
E020CWK2 DS    XL4
E020CREQ DC    CL8'020C'
E020CTBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF020E  DS    0H
* POP HANDLE
         USING *,R12
         USING (P020E,P020EEND),R3
         L     DFHEIBR,P020EEIB   LOAD EIB ADDRESS
         MVC   E020EESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF020ES        ADDRESS MAP
         USING EDF020ES,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF020EL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E020ETSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E020ETNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E020ETNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E020EAFT           EXIT IF NOT
* 'BEFORE' POP HANDLE
         MVC   E020ESTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E020EREQ+4,C'B'    SET REQID
         MVI   E020E1RA,DFHBMASD  HIDE RESPONSE
         MVI   E020E2RA,DFHBMASD  HIDE EIBRESP2
         B     E020EPRM           EXIT
*
E020EAFT EQU   *
* 'AFTER' POP HANDLE
         MVC   E020ESTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E020EREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E020ERPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E020EDEC        CONVERT TO DECIMAL
         UNPK  E020ER2O,E020EDEC+6(2) UNPACK EIBRESP2
         OI    E020ER2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E020EPRM           EXIT IF NONE
         UNPK  E020EWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E020EWK1(12),E020ETBL-240 CONVERT TO DISPLAY HEX
         MVC   E020ERCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E020ERCO+12(12),E020EWK1 SET EIBRCODE
E020EPRM EQU   *
         CLI   P020ENOH,X'FF'     ANY NOHANDLE ?
         BNE   E020ECDE           EXIT IF NOT
         MVC   E020ENHO,=C'NOHANDLE' SET NOHANDLE
E020ECDE EQU   *
         L     R0,P020EEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E020EPRO        SAVE PROGRAM NAME
         STG   R8,E020EPGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E020EWK2        SAVE OFFSET
         UNPK  E020EWK1(9),E020EWK2(5) UNPACK OFFSET
         TR    E020EWK1(8),E020ETBL-240 CONVERT TO DISPLAY HEX
         MVHHI E020EOFO,C'X'''    SET X'
         MVC   E020EOFO+2(6),E020EWK1+2 MOVE OFFSET
         MVI   E020EOFO+8,C''''   SET ENDING QUOTE
* FOR POP HANDLE THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF020EL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P020EEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P020EEDL        SAME ?
         BE    E020EQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E020EQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E020EWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E020EWK1) INITIMG(0)
         ST    R6,E020EADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF020EL        LENGTH TO MOVE
         LA    R8,EDF020ES        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P020EEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E020EWK1        GETMAIN LENGTH
         AHI   R9,-(EDF020EL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P020EEDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E020EADD) LENGTH(E020EWK1)                    X
                    QUEUE('020E') REQID(E020EREQ)
         EXEC  CICS FREEMAIN DATA(E020EADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E020EESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E020EESA DS    CL(EIBLENG)        EIB SAVE AREA
E020EDEC DS    PL8
E020EWK1 DS    XL9
E020EADD DS    0A
E020EWK2 DS    XL4
E020EREQ DC    CL8'020E'
E020ETBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0402  DS    0H
* RECEIVE
         USING *,R12
         USING (P0402,P0402END),R3
         L     DFHEIBR,P0402EIB   LOAD EIB ADDRESS
         MVC   E0402ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0402S        ADDRESS MAP
         USING EDF0402S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0402L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0402TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0402TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0402TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0402AFT           EXIT IF NOT
* 'BEFORE' RECEIVE
         MVC   E0402STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0402REQ+4,C'B'    SET REQID
* INTO
         CLI   P0402NOW,X'FF'     ANY NOWAIT ?
         BE    E0402PRM           EXIT IF IT IS
         MVC   E0402ACO,E0402ACT  SET ACTION MESSAGE
         MVI   E04021RA,DFHBMASD  HIDE RESPONSE
         MVI   E04022RA,DFHBMASD  HIDE EIBRESP2
         B     E0402PRM           EXIT
*
E0402AFT EQU   *
* 'AFTER' RECEIVE
         MVC   E0402STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0402REQ+4,C'A'    SET REQID
         CLC   P0402TGR,=F'4'     ANY RECEIVED DATA ?
         BE    E0402PRM           EXIT IF NONE
* INTO DATA
         L     R5,P0402INT        R5=INTO ADDRESS
         L     R6,P0402LEN        R6=A(RECEIVED DATA LENGTH)
         LH    R6,0(R6)           R6=RECEIVED DATA LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,61              >61 ?
         BNH   E0402L61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E0402L61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0402XMV        MOVE DATA IN CHAR FORM
         MVI   E0402INO,C'('      SET INTO OPEN BRACKET
         LA    R5,E0402INO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
* INTO DATA LENGTH
         MVC   E0402LDO,=C'LENGTH OF DATA (00000)' SET TEMPLATE
         L     R5,P0402LEN        R5=A(LENGTH)
         LH    R5,0(R5)           R5=RECEIVED DATA LENGTH
         CVD   R5,E0402DEC        CONVERT TO DECIMAL
         UNPK  E0402LDO+16(5),E0402DEC+5(3) UNPACK LENGTH
         OI    E0402LDO+20,X'F0'  SET SIGN
* RESP/RESP2
         LA    R5,E0402RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0402DEC        CONVERT TO DECIMAL
         UNPK  E0402R2O,E0402DEC+6(2) UNPACK EIBRESP2
         OI    E0402R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0402PRM           EXIT IF NONE
         UNPK  E0402WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0402WK1(12),E0402TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0402RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0402RCO+12(12),E0402WK1 SET EIBRCODE
E0402PRM EQU   *
* L'INTO
         LH    R5,P0402INL        R5=L'INTO
         CVD   R5,E0402DEC        CONVERT TO DECIMAL
         UNPK  E0402LIO+1(5),E0402DEC+5(3) UNPACK L'INTO
         OI    E0402LIO+5,X'F0'   SET SIGN
         MVI   E0402LIO,C'('      SET L'INTO OPEN BRACKET
         MVI   E0402LIO+6,C')'    SET L'INTO CLOSE BRACKET
* SET OTHER PARAMETERS
         CLI   P0402NOW,X'FF'     ANY NOWAIT ?
         BNE   E0402NOH           EXIT IF NOT
         MVC   E0402NWO,=C'NOWAIT' SET NOWAIT
E0402NOH EQU   *
* NOHANDLE
         CLI   P0402NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0402CDE           EXIT IF NOT
         MVC   E0402NHO,=C'NOHANDLE' SET NOHANDLE
E0402CDE EQU   *
         L     R0,P0402EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0402PRO        SAVE PROGRAM NAME
         STG   R8,E0402PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0402WK2        SAVE OFFSET
         UNPK  E0402WK1(9),E0402WK2(5) UNPACK OFFSET
         TR    E0402WK1(8),E0402TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0402OFO,C'X'''    SET X'
         MVC   E0402OFO+2(6),E0402WK1+2 MOVE OFFSET
         MVI   E0402OFO+8,C''''   SET ENDING QUOTE
* FOR RECEIVE THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0402L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0402EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0402EDL        SAME ?
         BE    E0402QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0402QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0402WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0402WK1) INITIMG(0)
         ST    R6,E0402ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0402L        LENGTH TO MOVE
         LA    R8,EDF0402S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0402EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0402WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0402L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0402EDL        LENGTH TO MOVE
         L     R8,P0402EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0402ADD) LENGTH(E0402WK1)                    X
                    QUEUE('0402') REQID(E0402REQ)
         EXEC  CICS FREEMAIN DATA(E0402ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0402ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0402XMV MVC   E0402INO+1(0),0(R5) MOVE INTO IN CHAR FORM
*
E0402ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0402DEC DC    PL8'0'
E0402WK1 DS    XL9
E0402ADD DS    0A
E0402WK2 DS    XL4
E0402REQ DC    CL8'0402'
E0402TBL DC    C'0123456789ABCDEF'
E0402ACT DC    C'AFTER ENTER, ACTION REQUIRED ON TERMINAL'
         LTORG
         DROP  R12
*
EDF0404  DS    0H
* SEND
         USING *,R12
         USING (P0404,P0404END),R3
         L     DFHEIBR,P0404EIB   LOAD EIB ADDRESS
         MVC   E0404ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0404S        ADDRESS MAP
         USING EDF0404S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0404L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0404TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0404TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0404TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0404AFT           EXIT IF NOT
* 'BEFORE' SEND
         MVC   E0404STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0404REQ+4,C'B'    SET REQID
         MVI   E04041RA,DFHBMASD  HIDE RESPONSE
         MVI   E04042RA,DFHBMASD  HIDE EIBRESP2
         B     E0404PRM           EXIT
*
E0404AFT EQU   *
* 'AFTER' SEND
         MVC   E0404STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0404REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0404RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0404DEC        CONVERT TO DECIMAL
         UNPK  E0404R2O,E0404DEC+6(2) UNPACK EIBRESP2
         OI    E0404R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0404PRM           EXIT IF NONE
         UNPK  E0404WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0404WK1(12),E0404TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0404RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0404RCO+12(12),E0404WK1 SET EIBRCODE
E0404PRM EQU   *
* FROM (...//...)
         L     R5,P0404FRM        FROM ADDRESS
         LH    R6,P0404LEN        R6=LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0404LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0404L69           EXIT
*
E0404LOK EQU   *
         CHI   R7,69              >69 ?
         BNH   E0404L69           EXIT IF IT IS
         LA    R7,69              SET MAXIMUM LENGTH
E0404L69 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0404XMV        MOVE DATA IN CHAR FORM
         MVI   E0404FMO,C'('      SET FROM OPEN BRACKET
         LA    R5,E0404FMO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
* LENGTH (00000)
         LH    R5,P0404LEN        R5=LENGTH
         CVD   R5,E0404DEC        CONVERT TO DECIMAL
         UNPK  E0404LNO+1(5),E0404DEC+5(3) UNPACK LENGTH
         OI    E0404LNO+5,X'F0'   SET SIGN
         MVI   E0404LNO,C'('      SET LENGTH OPEN BRACKET
         MVI   E0404LNO+6,C')'    SET LENGTH CLOSE BRACKET
* NOHANDLE
         CLI   P0404NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0404CDE           EXIT IF NOT
         MVC   E0404NHO,=C'NOHANDLE' SET NOHANDLE
E0404CDE EQU   *
         L     R0,P0404EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0404PRO        SAVE PROGRAM NAME
         STG   R8,E0404PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0404WK2        SAVE OFFSET
         UNPK  E0404WK1(9),E0404WK2(5) UNPACK OFFSET
         TR    E0404WK1(8),E0404TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0404OFO,C'X'''    SET X'
         MVC   E0404OFO+2(6),E0404WK1+2 MOVE OFFSET
         MVI   E0404OFO+8,C''''   SET ENDING QUOTE
* FOR SEND THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0404L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0404EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0404EDL        SAME ?
         BE    E0404QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0404QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0404WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0404WK1) INITIMG(0)
         ST    R6,E0404ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0404L        LENGTH TO MOVE
         LA    R8,EDF0404S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0404EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0404WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0404L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0404EDL        LENGTH TO MOVE
         L     R8,P0404EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0404ADD) LENGTH(E0404WK1)                    X
                    QUEUE('0404') REQID(E0404REQ)
         EXEC  CICS FREEMAIN DATA(E0404ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0404ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0404XMV MVC   E0404FMO+1(0),0(R5) MOVE FROM IN CHAR FORM
*
E0404ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0404DEC DC    PL8'0'
E0404WK1 DS    XL9
E0404ADD DS    0A
E0404WK2 DS    XL4
E0404REQ DC    CL8'0404'
E0404TBL DC    C'0123456789ABCDEF'
         LTORG
         DROP  R12
*
EDF0602  DS    0H
* READ
         USING *,R12
         USING (P0602,P0602END),R3
         L     DFHEIBR,P0602EIB   LOAD EIB ADDRESS
         MVC   E0602ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0602S        ADDRESS MAP
         USING EDF0602S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0602L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0602TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0602TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0602TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0602AFT           EXIT IF NOT
* 'BEFORE' READ
         MVC   E0602STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0602REQ+4,C'B'    SET REQID
         MVI   E06021RA,DFHBMASD  HIDE RESPONSE
         MVI   E06022RA,DFHBMASD  HIDE EIBRESP2
* INTO/SET
         MVC   E0602ISO(3),=C'SET' SET SET
         CLI   P0602SET,X'FF'     IS SET SPECIFIED ?
         BE    E0602PRM           EXIT IF IT IS
         MVC   E0602ISO(4),=C'INTO' SET INTO
         B     E0602PRM           EXIT
*
E0602AFT EQU   *
* 'AFTER' READ
         MVC   E0602STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0602REQ+4,C'A'    SET REQID
* SET (X'........')
         CLI   P0602SET,X'FF'     IS SET SPECIFIED ?
         BNE   E0602INT           EXIT IF NOT
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E0602STK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E0602STK           EXIT IF IT IS
         MVC   E0602ISO(3),=C'SET' SET SET
         B     E0602LOD           EXIT
*
E0602STK EQU   *
         MVC   E0602WK2(4),P0602STA MOVE A(SET)
         UNPK  E0602WK1(9),E0602WK2(5) UNPACK A(SET)
         TR    E0602WK1(8),E0602TBL-240 CONVERT TO DISPLAY HEX
         XC    E0602ISO,E0602ISO  CLEAR FOR SET
         MVC   E0602ISO(28),=C'SET            (X''........'')' SET TMPT
         MVC   E0602ISO+18(8),E0602WK1 MOVE A(SET)
         B     E0602LOD           EXIT
*
E0602INT EQU   *
* INTO (...//...)
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E0602INK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E0602INK           EXIT IF IT IS
         MVC   E0602ISO(4),=C'INTO' SET INTO
         B     E0602LOD           EXIT
*
E0602INK EQU   *
         MVC   E0602ISO(16),=C'INTO           (' SET TEMPLATE
         L     R5,P0602INT        INTO ADDRESS
         ICM   R6,15,P0602LAD     ANY LENGTH AS LABEL ?
         BZ    E0602NIL           EXIT IF THERE IS
         LH    R6,0(R6)           R6=LENGTH OF DATA
         B     E0602IIL           EXIT
*
E0602NIL EQU   *
         ICM   R6,15,P0602FAD     ANY FLENGTH AS LABEL ?
         BZ    E0602NLD           EXIT IF NONE
         L     R6,0(R6)           R6=LENGTH OF DATA
         B     E0602IIL           EXIT
*
E0602NLD EQU   *
         L     R6,P0602LEN        R6=DEFAULT INTO LENGTH
E0602IIL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0602LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0602L61           EXIT
*
E0602LOK EQU   *
         CHI   R7,61              >61 ?
         BNH   E0602L61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E0602L61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0602XMV        MOVE DATA IN CHAR FORM
         LA    R5,E0602ISO+17(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
E0602LOD EQU   *
* LENGTH OF DATA (00000000000)
         ICM   R5,15,P0602LAD     ANY LENGTH AS LABEL ?
         BZ    E0602NOL           EXIT IF THERE IS
         LH    R5,0(R5)           R5=LENGTH OF DATA
         B     E0602DOL           EXIT
*
E0602NOL EQU   *
         ICM   R5,15,P0602FAD     ANY FLENGTH AS LABEL ?
         BZ    E0602RSP           EXIT IF NONE
         L     R5,0(R5)           R5=LENGTH OF DATA
E0602DOL EQU   *
         MVC   E0602LDO,=C'LENGTH OF DATA (00000000000)' MOVE TEMPLATE
         CVD   R5,E0602DEC        CONVERT TO DECIMAL
         UNPK  E0602LDO+16(11),E0602DEC+2(6) UNPACK LENGTH OF DATA
         OI    E0602LDO+26,X'F0'  SET SIGN
E0602RSP EQU   *
* RESP/RESP2
         LA    R5,E0602RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0602DEC        CONVERT TO DECIMAL
         UNPK  E0602R2O,E0602DEC+6(2) UNPACK EIBRESP2
         OI    E0602R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0602PRM           EXIT IF NONE
         UNPK  E0602WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0602WK1(12),E0602TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0602RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0602RCO+12(12),E0602WK1 SET EIBRCODE
E0602PRM EQU   *
* FILE (........)
         MVI   E0602FLO,C'('      SET OPEN BRACKET
         MVC   E0602FLO+1(8),P0602FIL SET FILENAME
         MVI   E0602FLO+9,C')'    SET CLOSE BRACKET
* LENGTH OF INTO (00000000000)
         CLI   P0602SET,X'FF'     IS SET SPECIFIED ?
         BE    E0602RID           EXIT IF IT IS
         MVC   E0602LIO,=C'LENGTH OF INTO (00000000000)' MOVE TEMPLATE
         L     R5,P0602LEN        R5=LENGTH
         CVD   R5,E0602DEC        CONVERT TO DECIMAL
         UNPK  E0602LIO+16(11),E0602DEC+2(6) UNPACK LENGTH
         OI    E0602LIO+26,X'F0'  SET SIGN
E0602RID EQU   *
* RIDFLD
         CLI   P0602RBA,X'FF'     IS IT RBA ?
         BE    E0602RB            EXIT IF IT IS
         CLI   P0602XRB,X'FF'     IS IT XRBA ?
         BE    E0602XRB           EXIT IF IT IS
         CLI   P0602RRN,X'FF'     IS IT RRN ?
         BE    E0602RRN           EXIT IF IT IS
* KEY DISPLAY
*    KEY DEFAULT AS L'RIDFLD
*    KEY AS KEYLENGTH IF VALID EXCEPT WHEN ZERO
         LA    R5,P0602RID        R5=ADDRESS OF RIDFLD
         LB    R6,P0602LRD        R6=L'RIDFLD
         CLI   P0602KIN,X'FF'     VALID KEYLENGTH ?
         BNE   E0602VKL           EXIT IF NOT
         OC    P0602KLN,P0602KLN  ZERO KEYLENGTH ?
         BZ    E0602VKL           EXIT IF IT IS
         LLH   R6,P0602KLN        R6=KEYLENGTH
E0602VKL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0602ROK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0602R61           EXIT
*
E0602ROK EQU   *
         CHI   R7,61              >61 ?
         BNH   E0602R61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E0602R61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E0602RIO,C'('      SET RIDFLD OPEN BRACKET
         EX    R7,E0602RMV        MOVE DATA IN CHAR FORM
         LA    R5,E0602RIO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
* RIDFLD LENGTH (00000)
         MVC   E0602RLO,=C'RIDFLD LENGTH  (00000)' SET TEMPLATE
         LB    R5,P0602LRD        R5=RIDFLD LENGTH
         CVD   R5,E0602DEC        CONVERT TO DECIMAL
         UNPK  E0602RLO+16(5),E0602DEC+5(3) UNPACK RIDFLD LENGTH
         OI    E0602RLO+20,X'F0'  SET SIGN
         B     E0602KLN           EXIT
*
E0602RB  EQU   *
* RBA AS 4-BYTE HEX
         MVC   E0602WK2(4),P0602RID+4 MOVE RBA
         UNPK  E0602WK1(9),E0602WK2(5) UNPACK RBA
         TR    E0602WK1(8),E0602TBL-240 CONVERT TO DISPLAY HEX
         XC    E0602RIO,E0602RIO  CLEAR FOR RBA
         MVC   E0602RIO(13),=C'(X''........'')' MOVE TEMPLATE
         MVC   E0602RIO+3(8),E0602WK1 MOVE RBA
         MVC   E0602RBO,=C'RBA '  SET RBA
         B     E0602KLN           EXIT
*
E0602XRB EQU   *
* XRBA AS 8-BYTE HEX
         MVC   E0602WK2,P0602RID  MOVE XRBA
         UNPK  E0602WK1(9),E0602WK2(5) UNPACK
         UNPK  E0602WK1+8(9),E0602WK2+4(5)    XRBA
         TR    E0602WK1(16),E0602TBL-240 CONVERT TO DISPLAY HEX
         XC    E0602RIO,E0602RIO  CLEAR FOR XRBA
         MVC   E0602RIO(21),=C'(X''................'')' MOVE TEMPLATE
         MVC   E0602RIO+3(16),E0602WK1 MOVE XRBA
         MVC   E0602RBO,=C'XRBA'  SET XRBA
         B     E0602KLN           EXIT
*
E0602RRN EQU   *
* RRN AS 11-BYTE DECIMAL
         XC    E0602RIO,E0602RIO  CLEAR FOR RRN
         MVC   E0602RIO(13),=C'(00000000000)' MOVE TEMPLATE
         L     R5,P0602RID        R5=RRN
         CVD   R5,E0602DEC        CONVERT TO DECIMAL
         UNPK  E0602RIO+1(11),E0602DEC+2(6) UNPACK RRN
         OI    E0602RIO+11,X'F0'  SET SIGN
         MVC   E0602RBO,=C'RRN '  SET RRN
E0602KLN EQU   *
* KEYLENGTH (00000)
* GENERIC
         CLI   P0602KIN,X'FF'     VALID KEYLENGTH ?
         BNE   E0602GTE           EXIT IF NOT
         MVC   E0602KLO,=C'KEYLENGTH      (00000)' SET TEMPLATE
         LLH   R5,P0602KLN        R5=KEYLENGTH
         CVD   R5,E0602DEC        CONVERT TO DECIMAL
         UNPK  E0602KLO+16(5),E0602DEC+5(3) UNPACK KEYLENGTH
         OI    E0602KLO+20,X'F0'  SET SIGN
         MVC   E0602GNO,=C'GENERIC' SET GENERIC
E0602GTE EQU   *
* EQUAL/GTEQ
         MVC   E0602EGO,=C'EQUAL' SET EQUAL
         CLI   P0602GTE,X'FF'     IS IT GTEQ ?
         BNE   E0602NOH           EXIT IF NOT
         MVC   E0602EGO,=C'GTEQ ' SET GTEQ
E0602NOH EQU   *
* NOHANDLE
         CLI   P0602NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0602CDE           EXIT IF NOT
         MVC   E0602NHO,=C'NOHANDLE' SET NOHANDLE
E0602CDE EQU   *
         L     R0,P0602EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0602PRO        SAVE PROGRAM NAME
         STG   R8,E0602PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0602WK2        SAVE OFFSET
         UNPK  E0602WK1(9),E0602WK2(5) UNPACK OFFSET
         TR    E0602WK1(8),E0602TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0602OFO,C'X'''    SET X'
         MVC   E0602OFO+2(6),E0602WK1+2 MOVE OFFSET
         MVI   E0602OFO+8,C''''   SET ENDING QUOTE
* FOR READ THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0602L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0602EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0602EDL        SAME ?
         BE    E0602QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0602QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0602WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0602WK1) INITIMG(0)
         ST    R6,E0602ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0602L        LENGTH TO MOVE
         LA    R8,EDF0602S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0602EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0602WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0602L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0602EDL        LENGTH TO MOVE
         L     R8,P0602EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0602ADD) LENGTH(E0602WK1)                    X
                    QUEUE('0602') REQID(E0602REQ)
         EXEC  CICS FREEMAIN DATA(E0602ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0602ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0602XMV MVC   E0602ISO+16(0),0(R5) MOVE INTO IN CHAR FORM
E0602RMV MVC   E0602RIO+1(0),0(R5) MOVE RIDFLD IN CHAR FORM
*
E0602ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0602DEC DS    PL8
E0602WK1 DS    XL17
E0602ADD DS    0A
E0602WK2 DS    XL8
E0602REQ DC    CL8'0602'
E0602TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF060C  DS    0H
* STARTBR
         USING *,R12
         USING (P060C,P060CEND),R3
         L     DFHEIBR,P060CEIB   LOAD EIB ADDRESS
         MVC   E060CESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF060CS        ADDRESS MAP
         USING EDF060CS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF060CL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E060CTSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E060CTNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E060CTNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E060CAFT           EXIT IF NOT
* 'BEFORE' STARTBR
         MVC   E060CSTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E060CREQ+4,C'B'    SET REQID
         MVI   E060C1RA,DFHBMASD  HIDE RESPONSE
         MVI   E060C2RA,DFHBMASD  HIDE EIBRESP2
         B     E060CPRM           EXIT
*
E060CAFT EQU   *
* 'AFTER' STARTBR
         MVC   E060CSTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E060CREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E060CRPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E060CDEC        CONVERT TO DECIMAL
         UNPK  E060CR2O,E060CDEC+6(2) UNPACK EIBRESP2
         OI    E060CR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E060CPRM           EXIT IF NONE
         UNPK  E060CWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E060CWK1(12),E060CTBL-240 CONVERT TO DISPLAY HEX
         MVC   E060CRCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E060CRCO+12(12),E060CWK1 SET EIBRCODE
E060CPRM EQU   *
* FILE (........)
         MVI   E060CFLO,C'('      SET OPEN BRACKET
         MVC   E060CFLO+1(8),P060CFIL SET FILENAME
         MVI   E060CFLO+9,C')'    SET CLOSE BRACKET
* RIDFLD
         MVI   E060CP2A,DFHBMASD  HIDE PF2
         CLI   P060CRBA,X'FF'     IS IT RBA ?
         BE    E060CRB            EXIT IF IT IS
         CLI   P060CXRB,X'FF'     IS IT XRBA ?
         BE    E060CXRB           EXIT IF IT IS
         CLI   P060CRRN,X'FF'     IS IT RRN ?
         BE    E060CRRN           EXIT IF IT IS
* KEY DISPLAY
*    KEY DEFAULT AS L'RIDFLD
*    KEY AS KEYLENGTH IF VALID EXCEPT WHEN ZERO
*    FULL KEY IS STORED AFTER COMMAND
         MVI   E060CP2A,DFHBMASB  SHOW PF2
         L     R5,P060CARD        R5=ADDRESS OF RIDFLD
         LB    R6,P060CLRD        R6=L'RIDFLD
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E060CVKL           EXIT IF NOT
         CLI   P060CKIN,X'FF'     VALID KEYLENGTH ?
         BNE   E060CVKL           EXIT IF NOT
         OC    P060CKLN,P060CKLN  ZERO KEYLENGTH ?
         BZ    E060CVKL           EXIT IF IT IS
         LLH   R6,P060CKLN        R6=KEYLENGTH
E060CVKL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E060CROK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E060CR61           EXIT
*
E060CROK EQU   *
         CHI   R7,61              >61 ?
         BNH   E060CR61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E060CR61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E060CRIO,C'('      SET RIDFLD OPEN BRACKET
         EX    R7,E060CRMV        MOVE DATA IN CHAR FORM
         LA    R5,E060CRIO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
* RIDFLD LENGTH  (00000)
         MVC   E060CRLO,=C'RIDFLD LENGTH  (00000)' SET TEMPLATE
         LB    R5,P060CLRD        R5=RIDFLD LENGTH
         CVD   R5,E060CDEC        CONVERT TO DECIMAL
         UNPK  E060CRLO+16(5),E060CDEC+5(3) UNPACK RIDFLD LENGTH
         OI    E060CRLO+20,X'F0'  SET SIGN
         B     E060CKLN           EXIT
*
E060CRB  EQU   *
* RBA AS 4-BYTE HEX
         MVC   E060CWK2(4),P060CRID+4 MOVE RBA
         UNPK  E060CWK1(9),E060CWK2(5) UNPACK RBA
         TR    E060CWK1(8),E060CTBL-240 CONVERT TO DISPLAY HEX
         XC    E060CRIO,E060CRIO  CLEAR FOR RBA
         MVC   E060CRIO(13),=C'(X''........'')' MOVE TEMPLATE
         MVC   E060CRIO+3(8),E060CWK1 MOVE RBA
         MVC   E060CRBO,=C'RBA '  SET RBA
         B     E060CKLN           EXIT
*
E060CXRB EQU   *
* XRBA AS 8-BYTE HEX
         MVC   E060CWK2,P060CRID  MOVE XRBA
         UNPK  E060CWK1(9),E060CWK2(5) UNPACK
         UNPK  E060CWK1+8(9),E060CWK2+4(5)    XRBA
         TR    E060CWK1(16),E060CTBL-240 CONVERT TO DISPLAY HEX
         XC    E060CRIO,E060CRIO  CLEAR FOR XRBA
         MVC   E060CRIO(21),=C'(X''................'')' MOVE TEMPLATE
         MVC   E060CRIO+3(16),E060CWK1 MOVE XRBA
         MVC   E060CRBO,=C'XRBA'  SET XRBA
         B     E060CKLN           EXIT
*
E060CRRN EQU   *
* RRN AS 11-BYTE DECIMAL
         XC    E060CRIO,E060CRIO  CLEAR FOR RRN
         MVC   E060CRIO(13),=C'(00000000000)' MOVE TEMPLATE
         L     R5,P060CRID        R5=RRN
         CVD   R5,E060CDEC        CONVERT TO DECIMAL
         UNPK  E060CRIO+1(11),E060CDEC+2(6) UNPACK RRN
         OI    E060CRIO+11,X'F0'  SET SIGN
         MVC   E060CRBO,=C'RRN '  SET RRN
E060CKLN EQU   *
* KEYLENGTH (00000)
* GENERIC
         CLI   P060CKIN,X'FF'     VALID KEYLENGTH ?
         BNE   E060CRQD           EXIT IF NOT
         MVC   E060CKLO,=C'KEYLENGTH      (00000)' SET TEMPLATE
         LLH   R5,P060CKLN        R5=KEYLENGTH
         CVD   R5,E060CDEC        CONVERT TO DECIMAL
         UNPK  E060CKLO+16(5),E060CDEC+5(3) UNPACK KEYLENGTH
         OI    E060CKLO+20,X'F0'  SET SIGN
         MVC   E060CGNO,=C'GENERIC' SET GENERIC
E060CRQD EQU   *
* REQID (00000)
         MVC   E060CRQO,=C'(00000)' SET TEMPLATE
         LLH   R5,P060CREQ        R5=REQID
         CVD   R5,E060CDEC        CONVERT TO DECIMAL
         UNPK  E060CRQO+1(5),E060CDEC+5(3) UNPACK REQID
         OI    E060CRQO+5,X'F0'   SET SIGN
* EQUAL/GTEQ
         MVC   E060CEGO,=C'EQUAL' SET EQUAL
         CLI   P060CGTE,X'FF'     IS IT GTEQ ?
         BNE   E060CNOH           EXIT IF NOT
         MVC   E060CEGO,=C'GTEQ ' SET GTEQ
E060CNOH EQU   *
* NOHANDLE
         CLI   P060CNOH,X'FF'     ANY NOHANDLE ?
         BNE   E060CCDE           EXIT IF NOT
         MVC   E060CNHO,=C'NOHANDLE' SET NOHANDLE
E060CCDE EQU   *
         L     R0,P060CEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E060CPRO        SAVE PROGRAM NAME
         STG   R8,E060CPGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E060CWK2        SAVE OFFSET
         UNPK  E060CWK1(9),E060CWK2(5) UNPACK OFFSET
         TR    E060CWK1(8),E060CTBL-240 CONVERT TO DISPLAY HEX
         MVHHI E060COFO,C'X'''    SET X'
         MVC   E060COFO+2(6),E060CWK1+2 MOVE OFFSET
         MVI   E060COFO+8,C''''   SET ENDING QUOTE
* FOR STARTBR THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF060CL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P060CEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P060CEDL        SAME ?
         BE    E060CQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E060CQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E060CWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E060CWK1) INITIMG(0)
         ST    R6,E060CADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF060CL        LENGTH TO MOVE
         LA    R8,EDF060CS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P060CEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E060CWK1        MAP+DSA LENGTH
         AHI   R9,-(EDF060CL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P060CEDL        LENGTH TO MOVE
         L     R8,P060CEDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E060CADD) LENGTH(E060CWK1)                    X
                    QUEUE('060C') REQID(E060CREQ)
         EXEC  CICS FREEMAIN DATA(E060CADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E060CESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E060CRMV MVC   E060CRIO+1(0),0(R5) MOVE RIDFLD IN CHAR FORM
*
E060CESA DS    CL(EIBLENG)        EIB SAVE AREA
E060CDEC DS    PL8
E060CWK1 DS    XL17
E060CADD DS    0A
E060CWK2 DS    XL8
E060CREQ DC    CL8'060C'
E060CTBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF060E  DS    0H
* READNEXT
         USING *,R12
         USING (P060E,P060EEND),R3
         L     DFHEIBR,P060EEIB   LOAD EIB ADDRESS
         MVC   E060EESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF060ES        ADDRESS MAP
         USING EDF060ES,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF060EL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E060ETSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E060ETNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E060ETNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E060EAFT           EXIT IF NOT
* 'BEFORE' READNEXT
         MVC   E060ESTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E060EREQ+4,C'B'    SET REQID
         MVI   E060E1RA,DFHBMASD  HIDE RESPONSE
         MVI   E060E2RA,DFHBMASD  HIDE EIBRESP2
* INTO/SET
         MVC   E060EISO(3),=C'SET' SET SET
         CLI   P060ESET,X'FF'     IS SET SPECIFIED ?
         BE    E060EPRM           EXIT IF IT IS
         MVC   E060EISO(4),=C'INTO' SET INTO
         B     E060EPRM           EXIT
*
E060EAFT EQU   *
* 'AFTER' READNEXT
         MVC   E060ESTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E060EREQ+4,C'A'    SET REQID
* SET (X'........')
         CLI   P060ESET,X'FF'     IS SET SPECIFIED ?
         BNE   E060EINT           EXIT IF NOT
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E060ESTK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E060ESTK           EXIT IF IT IS
         MVC   E060EISO(3),=C'SET' SET SET
         B     E060ELOD           EXIT
*
E060ESTK EQU   *
         MVC   E060EWK2(4),P060ESTA MOVE A(SET)
         UNPK  E060EWK1(9),E060EWK2(5) UNPACK A(SET)
         TR    E060EWK1(8),E060ETBL-240 CONVERT TO DISPLAY HEX
         XC    E060EISO,E060EISO  CLEAR FOR SET
         MVC   E060EISO(28),=C'SET            (X''........'')' SET TMPT
         MVC   E060EISO+18(8),E060EWK1 MOVE A(SET)
         B     E060ELOD           EXIT
*
E060EINT EQU   *
* INTO (...//...)
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E060EINK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E060EINK           EXIT IF IT IS
         MVC   E060EISO(4),=C'INTO' SET INTO
         B     E060ELOD           EXIT
*
E060EINK EQU   *
         MVC   E060EISO(16),=C'INTO           (' SET TEMPLATE
         L     R5,P060EINT        INTO ADDRESS
         ICM   R6,15,P060ELAD     ANY LENGTH AS LABEL ?
         BZ    E060ENIL           EXIT IF THERE IS
         LH    R6,0(R6)           R6=LENGTH OF DATA
         B     E060EIIL           EXIT
*
E060ENIL EQU   *
         ICM   R6,15,P060EFAD     ANY FLENGTH AS LABEL ?
         BZ    E060ENLD           EXIT IF NONE
         L     R6,0(R6)           R6=LENGTH OF DATA
         B     E060EIIL           EXIT
*
E060ENLD EQU   *
         L     R6,P060ELEN        R6=DEFAULT INTO LENGTH
E060EIIL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E060ELOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E060EL61           EXIT
*
E060ELOK EQU   *
         CHI   R7,61              >61 ?
         BNH   E060EL61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E060EL61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E060EXMV        MOVE DATA IN CHAR FORM
         LA    R5,E060EISO+17(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
E060ELOD EQU   *
* LENGTH OF DATA (00000000000)
         ICM   R5,15,P060ELAD     ANY LENGTH AS LABEL ?
         BZ    E060ENOL           EXIT IF THERE IS
         LH    R5,0(R5)           R5=LENGTH OF DATA
         B     E060EDOL           EXIT
*
E060ENOL EQU   *
         ICM   R5,15,P060EFAD     ANY FLENGTH AS LABEL ?
         BZ    E060ERSP           EXIT IF NONE
         L     R5,0(R5)           R5=LENGTH OF DATA
E060EDOL EQU   *
         MVC   E060ELDO,=C'LENGTH OF DATA (00000000000)' MOVE TEMPLATE
         CVD   R5,E060EDEC        CONVERT TO DECIMAL
         UNPK  E060ELDO+16(11),E060EDEC+2(6) UNPACK LENGTH OF DATA
         OI    E060ELDO+26,X'F0'  SET SIGN
E060ERSP EQU   *
* RESP/RESP2
         LA    R5,E060ERPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E060EDEC        CONVERT TO DECIMAL
         UNPK  E060ER2O,E060EDEC+6(2) UNPACK EIBRESP2
         OI    E060ER2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E060EPRM           EXIT IF NONE
         UNPK  E060EWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E060EWK1(12),E060ETBL-240 CONVERT TO DISPLAY HEX
         MVC   E060ERCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E060ERCO+12(12),E060EWK1 SET EIBRCODE
E060EPRM EQU   *
* FILE (........)
         MVI   E060EFLO,C'('      SET OPEN BRACKET
         MVC   E060EFLO+1(8),P060EFIL SET FILENAME
         MVI   E060EFLO+9,C')'    SET CLOSE BRACKET
* LENGTH OF INTO (00000000000)
         CLI   P060ESET,X'FF'     IS SET SPECIFIED ?
         BE    E060ERID           EXIT IF IT IS
         MVC   E060ELIO,=C'LENGTH OF INTO (00000000000)' MOVE TEMPLATE
         L     R5,P060ELEN        R5=LENGTH
         CVD   R5,E060EDEC        CONVERT TO DECIMAL
         UNPK  E060ELIO+16(11),E060EDEC+2(6) UNPACK LENGTH
         OI    E060ELIO+26,X'F0'  SET SIGN
E060ERID EQU   *
* RIDFLD
         CLI   P060ERBA,X'FF'     IS IT RBA ?
         BE    E060ERB            EXIT IF IT IS
         CLI   P060EXRB,X'FF'     IS IT XRBA ?
         BE    E060EXRB           EXIT IF IT IS
         CLI   P060ERRN,X'FF'     IS IT RRN ?
         BE    E060ERRN           EXIT IF IT IS
* KEY DISPLAY
*    KEY DEFAULT AS L'RIDFLD
*    KEY AS KEYLENGTH IF VALID EXCEPT WHEN ZERO
*    FULL KEY IS STORED AFTER COMMAND
         L     R5,P060EARD        R5=ADDRESS OF RIDFLD
         LB    R6,P060ELRD        R6=L'RIDFLD
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E060EVKL           EXIT IF NOT
         CLI   P060EKIN,X'FF'     VALID KEYLENGTH ?
         BNE   E060EVKL           EXIT IF NOT
         OC    P060EKLN,P060EKLN  ZERO KEYLENGTH ?
         BZ    E060EVKL           EXIT IF IT IS
         LLH   R6,P060EKLN        R6=KEYLENGTH
E060EVKL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E060EROK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E060ER61           EXIT
*
E060EROK EQU   *
         CHI   R7,61              >61 ?
         BNH   E060ER61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E060ER61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E060ERIO,C'('      SET RIDFLD OPEN BRACKET
         EX    R7,E060ERMV        MOVE DATA IN CHAR FORM
         LA    R5,E060ERIO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
* RIDFLD LENGTH  (00000)
         MVC   E060ERLO,=C'RIDFLD LENGTH  (00000)' SET TEMPLATE
         LB    R5,P060ELRD        R5=RIDFLD LENGTH
         CVD   R5,E060EDEC        CONVERT TO DECIMAL
         UNPK  E060ERLO+16(5),E060EDEC+5(3) UNPACK RIDFLD LENGTH
         OI    E060ERLO+20,X'F0'  SET SIGN
         B     E060EKLN           EXIT
*
E060ERB  EQU   *
* RBA AS 4-BYTE HEX
         MVC   E060EWK2(4),P060ERID+4 MOVE RBA
         UNPK  E060EWK1(9),E060EWK2(5) UNPACK RBA
         TR    E060EWK1(8),E060ETBL-240 CONVERT TO DISPLAY HEX
         XC    E060ERIO,E060ERIO  CLEAR FOR RBA
         MVC   E060ERIO(13),=C'(X''........'')' MOVE TEMPLATE
         MVC   E060ERIO+3(8),E060EWK1 MOVE RBA
         MVC   E060ERBO,=C'RBA '  SET RBA
         B     E060EKLN           EXIT
*
E060EXRB EQU   *
* XRBA AS 8-BYTE HEX
         MVC   E060EWK2,P060ERID  MOVE XRBA
         UNPK  E060EWK1(9),E060EWK2(5) UNPACK
         UNPK  E060EWK1+8(9),E060EWK2+4(5)    XRBA
         TR    E060EWK1(16),E060ETBL-240 CONVERT TO DISPLAY HEX
         XC    E060ERIO,E060ERIO  CLEAR FOR XRBA
         MVC   E060ERIO(21),=C'(X''................'')' MOVE TEMPLATE
         MVC   E060ERIO+3(16),E060EWK1 MOVE XRBA
         MVC   E060ERBO,=C'XRBA'  SET XRBA
         B     E060EKLN           EXIT
*
E060ERRN EQU   *
* RRN AS 11-BYTE DECIMAL
         XC    E060ERIO,E060ERIO  CLEAR FOR RRN
         MVC   E060ERIO(13),=C'(00000000000)' MOVE TEMPLATE
         L     R5,P060ERID        R5=RRN
         CVD   R5,E060EDEC        CONVERT TO DECIMAL
         UNPK  E060ERIO+1(11),E060EDEC+2(6) UNPACK RRN
         OI    E060ERIO+11,X'F0'  SET SIGN
         MVC   E060ERBO,=C'RRN '  SET RRN
E060EKLN EQU   *
* KEYLENGTH (00000)
         CLI   P060EKIN,X'FF'     VALID KEYLENGTH ?
         BNE   E060ERQD           EXIT IF NOT
         MVC   E060EKLO,=C'KEYLENGTH      (00000)' SET TEMPLATE
         LLH   R5,P060EKLN        R5=KEYLENGTH
         CVD   R5,E060EDEC        CONVERT TO DECIMAL
         UNPK  E060EKLO+16(5),E060EDEC+5(3) UNPACK KEYLENGTH
         OI    E060EKLO+20,X'F0'  SET SIGN
E060ERQD EQU   *
* REQID (00000)
         MVC   E060ERQO,=C'(00000)' SET TEMPLATE
         LLH   R5,P060EREQ        R5=REQID
         CVD   R5,E060EDEC        CONVERT TO DECIMAL
         UNPK  E060ERQO+1(5),E060EDEC+5(3) UNPACK REQID
         OI    E060ERQO+5,X'F0'   SET SIGN
* NOHANDLE
         CLI   P060ENOH,X'FF'     ANY NOHANDLE ?
         BNE   E060ECDE           EXIT IF NOT
         MVC   E060ENHO,=C'NOHANDLE' SET NOHANDLE
E060ECDE EQU   *
         L     R0,P060EEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E060EPRO        SAVE PROGRAM NAME
         STG   R8,E060EPGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E060EWK2        SAVE OFFSET
         UNPK  E060EWK1(9),E060EWK2(5) UNPACK OFFSET
         TR    E060EWK1(8),E060ETBL-240 CONVERT TO DISPLAY HEX
         MVHHI E060EOFO,C'X'''    SET X'
         MVC   E060EOFO+2(6),E060EWK1+2 MOVE OFFSET
         MVI   E060EOFO+8,C''''   SET ENDING QUOTE
* FOR READNEXT THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF060EL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P060EEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P060EEDL        SAME ?
         BE    E060EQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E060EQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E060EWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E060EWK1) INITIMG(0)
         ST    R6,E060EADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF060EL        LENGTH TO MOVE
         LA    R8,EDF060ES        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P060EEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E060EWK1        MAP+DSA LENGTH
         AHI   R9,-(EDF060EL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P060EEDL        LENGTH TO MOVE
         L     R8,P060EEDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E060EADD) LENGTH(E060EWK1)                    X
                    QUEUE('060E') REQID(E060EREQ)
         EXEC  CICS FREEMAIN DATA(E060EADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E060EESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E060EXMV MVC   E060EISO+16(0),0(R5) MOVE INTO IN CHAR FORM
E060ERMV MVC   E060ERIO+1(0),0(R5) MOVE REQID IN CHAR FORM
*
E060EESA DS    CL(EIBLENG)        EIB SAVE AREA
E060EDEC DS    PL8
E060EWK1 DS    XL17
E060EADD DS    0A
E060EWK2 DS    XL8
E060EREQ DC    CL8'060E'
E060ETBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0610  DS    0H
* READPREV
         USING *,R12
         USING (P0610,P0610END),R3
         L     DFHEIBR,P0610EIB   LOAD EIB ADDRESS
         MVC   E0610ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0610S        ADDRESS MAP
         USING EDF0610S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0610L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0610TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0610TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0610TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0610AFT           EXIT IF NOT
* 'BEFORE' READPREV
         MVC   E0610STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0610REQ+4,C'B'    SET REQID
         MVI   E06101RA,DFHBMASD  HIDE RESPONSE
         MVI   E06102RA,DFHBMASD  HIDE EIBRESP2
* INTO/SET
         MVC   E0610ISO(3),=C'SET' SET SET
         CLI   P0610SET,X'FF'     IS SET SPECIFIED ?
         BE    E0610PRM           EXIT IF IT IS
         MVC   E0610ISO(4),=C'INTO' SET INTO
         B     E0610PRM           EXIT
*
E0610AFT EQU   *
* 'AFTER' READPREV
         MVC   E0610STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0610REQ+4,C'A'    SET REQID
* SET (X'........')
         CLI   P0610SET,X'FF'     IS SET SPECIFIED ?
         BNE   E0610INT           EXIT IF NOT
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E0610STK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E0610STK           EXIT IF IT IS
         MVC   E0610ISO(3),=C'SET' SET SET
         B     E0610LOD           EXIT
*
E0610STK EQU   *
         MVC   E0610WK2(4),P0610STA MOVE A(SET)
         UNPK  E0610WK1(9),E0610WK2(5) UNPACK A(SET)
         TR    E0610WK1(8),E0610TBL-240 CONVERT TO DISPLAY HEX
         XC    E0610ISO,E0610ISO  CLEAR FOR SET
         MVC   E0610ISO(28),=C'SET            (X''........'')' SET TMPT
         MVC   E0610ISO+18(8),E0610WK1 MOVE A(SET)
         B     E0610LOD           EXIT
*
E0610INT EQU   *
* INTO (...//...)
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E0610INK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E0610INK           EXIT IF IT IS
         MVC   E0610ISO(4),=C'INTO' SET INTO
         B     E0610LOD           EXIT
*
E0610INK EQU   *
         MVC   E0610ISO(16),=C'INTO           (' SET TEMPLATE
         L     R5,P0610INT        INTO ADDRESS
         ICM   R6,15,P0610LAD     ANY LENGTH AS LABEL ?
         BZ    E0610NIL           EXIT IF THERE IS
         LH    R6,0(R6)           R6=LENGTH OF DATA
         B     E0610IIL           EXIT
*
E0610NIL EQU   *
         ICM   R6,15,P0610FAD     ANY FLENGTH AS LABEL ?
         BZ    E0610NLD           EXIT IF NONE
         L     R6,0(R6)           R6=LENGTH OF DATA
         B     E0610IIL           EXIT
*
E0610NLD EQU   *
         L     R6,P0610LEN        R6=DEFAULT INTO LENGTH
E0610IIL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0610LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0610L61           EXIT
*
E0610LOK EQU   *
         CHI   R7,61              >61 ?
         BNH   E0610L61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E0610L61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0610XMV        MOVE DATA IN CHAR FORM
         LA    R5,E0610ISO+17(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
E0610LOD EQU   *
* LENGTH OF DATA (00000000000)
         ICM   R5,15,P0610LAD     ANY LENGTH AS LABEL ?
         BZ    E0610NOL           EXIT IF THERE IS
         LH    R5,0(R5)           R5=LENGTH OF DATA
         B     E0610DOL           EXIT
*
E0610NOL EQU   *
         ICM   R5,15,P0610FAD     ANY FLENGTH AS LABEL ?
         BZ    E0610RSP           EXIT IF NONE
         L     R5,0(R5)           R5=LENGTH OF DATA
E0610DOL EQU   *
         MVC   E0610LDO,=C'LENGTH OF DATA (00000000000)' MOVE TEMPLATE
         CVD   R5,E0610DEC        CONVERT TO DECIMAL
         UNPK  E0610LDO+16(11),E0610DEC+2(6) UNPACK LENGTH OF DATA
         OI    E0610LDO+26,X'F0'  SET SIGN
E0610RSP EQU   *
* RESP/RESP2
         LA    R5,E0610RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0610DEC        CONVERT TO DECIMAL
         UNPK  E0610R2O,E0610DEC+6(2) UNPACK EIBRESP2
         OI    E0610R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0610PRM           EXIT IF NONE
         UNPK  E0610WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0610WK1(12),E0610TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0610RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0610RCO+12(12),E0610WK1 SET EIBRCODE
E0610PRM EQU   *
* FILE (........)
         MVI   E0610FLO,C'('      SET OPEN BRACKET
         MVC   E0610FLO+1(8),P0610FIL SET FILENAME
         MVI   E0610FLO+9,C')'    SET CLOSE BRACKET
* LENGTH OF INTO (00000000000)
         CLI   P0610SET,X'FF'     IS SET SPECIFIED ?
         BE    E0610RID           EXIT IF IT IS
         MVC   E0610LIO,=C'LENGTH OF INTO (00000000000)' MOVE TEMPLATE
         L     R5,P0610LEN        R5=LENGTH
         CVD   R5,E0610DEC        CONVERT TO DECIMAL
         UNPK  E0610LIO+16(11),E0610DEC+2(6) UNPACK LENGTH
         OI    E0610LIO+26,X'F0'  SET SIGN
E0610RID EQU   *
* RIDFLD
         CLI   P0610RBA,X'FF'     IS IT RBA ?
         BE    E0610RB            EXIT IF IT IS
         CLI   P0610XRB,X'FF'     IS IT XRBA ?
         BE    E0610XRB           EXIT IF IT IS
         CLI   P0610RRN,X'FF'     IS IT RRN ?
         BE    E0610RRN           EXIT IF IT IS
* KEY DISPLAY
*    KEY DEFAULT AS L'RIDFLD
*    KEY AS KEYLENGTH IF VALID EXCEPT WHEN ZERO
*    FULL KEY IS STORED AFTER COMMAND
         L     R5,P0610ARD        R5=ADDRESS OF RIDFLD
         LB    R6,P0610LRD        R6=L'RIDFLD
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0610VKL           EXIT IF NOT
         CLI   P0610KIN,X'FF'     VALID KEYLENGTH ?
         BNE   E0610VKL           EXIT IF NOT
         OC    P0610KLN,P0610KLN  ZERO KEYLENGTH ?
         BZ    E0610VKL           EXIT IF IT IS
         LLH   R6,P0610KLN        R6=KEYLENGTH
E0610VKL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0610ROK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0610R61           EXIT
*
E0610ROK EQU   *
         CHI   R7,61              >61 ?
         BNH   E0610R61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E0610R61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E0610RIO,C'('      SET RIDFLD OPEN BRACKET
         EX    R7,E0610RMV        MOVE DATA IN CHAR FORM
         LA    R5,E0610RIO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
* RIDFLD LENGTH (00000)
         MVC   E0610RLO,=C'RIDFLD LENGTH  (00000)' SET TEMPLATE
         LB    R5,P0610LRD        R5=RIDFLD LENGTH
         CVD   R5,E0610DEC        CONVERT TO DECIMAL
         UNPK  E0610RLO+16(5),E0610DEC+5(3) UNPACK RIDFLD LENGTH
         OI    E0610RLO+20,X'F0'  SET SIGN
         B     E0610KLN           EXIT
*
E0610RB  EQU   *
* RBA AS 4-BYTE HEX
         MVC   E0610WK2(4),P0610RID+4 MOVE RBA
         UNPK  E0610WK1(9),E0610WK2(5) UNPACK RBA
         TR    E0610WK1(8),E0610TBL-240 CONVERT TO DISPLAY HEX
         XC    E0610RIO,E0610RIO  CLEAR FOR RBA
         MVC   E0610RIO(13),=C'(X''........'')' MOVE TEMPLATE
         MVC   E0610RIO+3(8),E0610WK1 MOVE RBA
         MVC   E0610RBO,=C'RBA '  SET RBA
         B     E0610KLN           EXIT
*
E0610XRB EQU   *
* XRBA AS 8-BYTE HEX
         MVC   E0610WK2,P0610RID  MOVE XRBA
         UNPK  E0610WK1(9),E0610WK2(5) UNPACK
         UNPK  E0610WK1+8(9),E0610WK2+4(5)    XRBA
         TR    E0610WK1(16),E0610TBL-240 CONVERT TO DISPLAY HEX
         XC    E0610RIO,E0610RIO  CLEAR FOR XRBA
         MVC   E0610RIO(21),=C'(X''................'')' MOVE TEMPLATE
         MVC   E0610RIO+3(16),E0610WK1 MOVE XRBA
         MVC   E0610RBO,=C'XRBA'  SET XRBA
         B     E0610KLN           EXIT
*
E0610RRN EQU   *
* RRN AS 11-BYTE DECIMAL
         XC    E0610RIO,E0610RIO  CLEAR FOR RRN
         MVC   E0610RIO(13),=C'(00000000000)' MOVE TEMPLATE
         L     R5,P0610RID        R5=RRN
         CVD   R5,E0610DEC        CONVERT TO DECIMAL
         UNPK  E0610RIO+1(11),E0610DEC+2(6) UNPACK RRN
         OI    E0610RIO+11,X'F0'  SET SIGN
         MVC   E0610RBO,=C'RRN '  SET RRN
E0610KLN EQU   *
* KEYLENGTH (00000)
         CLI   P0610KIN,X'FF'     VALID KEYLENGTH ?
         BNE   E0610RQD           EXIT IF NOT
         MVC   E0610KLO,=C'KEYLENGTH      (00000)' SET TEMPLATE
         LLH   R5,P0610KLN        R5=KEYLENGTH
         CVD   R5,E0610DEC        CONVERT TO DECIMAL
         UNPK  E0610KLO+16(5),E0610DEC+5(3) UNPACK KEYLENGTH
         OI    E0610KLO+20,X'F0'  SET SIGN
E0610RQD EQU   *
* REQID (00000)
         MVC   E0610RQO,=C'(00000)' SET TEMPLATE
         LLH   R5,P0610REQ        R5=REQID
         CVD   R5,E0610DEC        CONVERT TO DECIMAL
         UNPK  E0610RQO+1(5),E0610DEC+5(3) UNPACK REQID
         OI    E0610RQO+5,X'F0'   SET SIGN
* NOHANDLE
         CLI   P0610NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0610CDE           EXIT IF NOT
         MVC   E0610NHO,=C'NOHANDLE' SET NOHANDLE
E0610CDE EQU   *
         L     R0,P0610EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0610PRO        SAVE PROGRAM NAME
         STG   R8,E0610PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0610WK2        SAVE OFFSET
         UNPK  E0610WK1(9),E0610WK2(5) UNPACK OFFSET
         TR    E0610WK1(8),E0610TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0610OFO,C'X'''    SET X'
         MVC   E0610OFO+2(6),E0610WK1+2 MOVE OFFSET
         MVI   E0610OFO+8,C''''   SET ENDING QUOTE
* FOR READPREV THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0610L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0610EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0610EDL        SAME ?
         BE    E0610QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0610QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0610WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0610WK1) INITIMG(0)
         ST    R6,E0610ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0610L        LENGTH TO MOVE
         LA    R8,EDF0610S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0610EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0610WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0610L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0610EDL        LENGTH TO MOVE
         L     R8,P0610EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0610ADD) LENGTH(E0610WK1)                    X
                    QUEUE('0610') REQID(E0610REQ)
         EXEC  CICS FREEMAIN DATA(E0610ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0610ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0610XMV MVC   E0610ISO+16(0),0(R5) MOVE INTO IN CHAR FORM
E0610RMV MVC   E0610RIO+1(0),0(R5) MOVE REQID IN CHAR FORM
*
E0610ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0610DEC DS    PL8
E0610WK1 DS    XL17
E0610ADD DS    0A
E0610WK2 DS    XL8
E0610REQ DC    CL8'0610'
E0610TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0612  DS    0H
* ENDBR
         USING *,R12
         USING (P0612,P0612END),R3
         L     DFHEIBR,P0612EIB   LOAD EIB ADDRESS
         MVC   E0612ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0612S        ADDRESS MAP
         USING EDF0612S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0612L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0612TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0612TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0612TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0612AFT           EXIT IF NOT
* 'BEFORE' ENDBR
         MVC   E0612STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0612REQ+4,C'B'    SET REQID
         MVI   E06121RA,DFHBMASD  HIDE RESPONSE
         MVI   E06122RA,DFHBMASD  HIDE EIBRESP2
         B     E0612PRM           EXIT
*
E0612AFT EQU   *
* 'AFTER' ENDBR
         MVC   E0612STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0612REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0612RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0612DEC        CONVERT TO DECIMAL
         UNPK  E0612R2O,E0612DEC+6(2) UNPACK EIBRESP2
         OI    E0612R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0612PRM           EXIT IF NONE
         UNPK  E0612WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0612WK1(12),E0612TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0612RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0612RCO+12(12),E0612WK1 SET EIBRCODE
E0612PRM EQU   *
* FILE (........)
         MVI   E0612FLO,C'('      SET OPEN BRACKET
         MVC   E0612FLO+1(8),P0612FIL SET FILENAME
         MVI   E0612FLO+9,C')'    SET CLOSE BRACKET
* REQID (00000)
         MVC   E0612RQO,=C'(00000)' SET TEMPLATE
         LLH   R5,P0612REQ        R5=REQID
         CVD   R5,E0612DEC        CONVERT TO DECIMAL
         UNPK  E0612RQO+1(5),E0612DEC+5(3) UNPACK REQID
         OI    E0612RQO+5,X'F0'   SET SIGN
         CLI   P0612NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0612CDE           EXIT IF NOT
         MVC   E0612NHO,=C'NOHANDLE' SET NOHANDLE
E0612CDE EQU   *
         L     R0,P0612EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0612PRO        SAVE PROGRAM NAME
         STG   R8,E0612PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0612WK2        SAVE OFFSET
         UNPK  E0612WK1(9),E0612WK2(5) UNPACK OFFSET
         TR    E0612WK1(8),E0612TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0612OFO,C'X'''    SET X'
         MVC   E0612OFO+2(6),E0612WK1+2 MOVE OFFSET
         MVI   E0612OFO+8,C''''   SET ENDING QUOTE
* FOR ENDBR THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0612L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0612EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0612EDL        SAME ?
         BE    E0612QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0612QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0612WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0612WK1) INITIMG(0)
         ST    R6,E0612ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0612L        LENGTH TO MOVE
         LA    R8,EDF0612S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0612EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0612WK1        GETMAIN LENGTH
         AHI   R9,-(EDF0612L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P0612EDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0612ADD) LENGTH(E0612WK1)                    X
                    QUEUE('0612') REQID(E0612REQ)
         EXEC  CICS FREEMAIN DATA(E0612ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0612ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0612ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0612DEC DS    PL8
E0612WK1 DS    XL9
E0612ADD DS    0A
E0612WK2 DS    XL4
E0612REQ DC    CL8'0612'
E0612TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0614  DS    0H
* RESETBR
         USING *,R12
         USING (P0614,P0614END),R3
         L     DFHEIBR,P0614EIB   LOAD EIB ADDRESS
         MVC   E0614ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0614S        ADDRESS MAP
         USING EDF0614S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0614L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0614TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0614TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0614TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0614AFT           EXIT IF NOT
* 'BEFORE' RESETBR
         MVC   E0614STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0614REQ+4,C'B'    SET REQID
         MVI   E06141RA,DFHBMASD  HIDE RESPONSE
         MVI   E06142RA,DFHBMASD  HIDE EIBRESP2
         B     E0614PRM           EXIT
*
E0614AFT EQU   *
* 'AFTER' RESETBR
         MVC   E0614STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0614REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0614RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0614DEC        CONVERT TO DECIMAL
         UNPK  E0614R2O,E0614DEC+6(2) UNPACK EIBRESP2
         OI    E0614R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0614PRM           EXIT IF NONE
         UNPK  E0614WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0614WK1(12),E0614TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0614RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0614RCO+12(12),E0614WK1 SET EIBRCODE
E0614PRM EQU   *
* FILE (........)
         MVI   E0614FLO,C'('      SET OPEN BRACKET
         MVC   E0614FLO+1(8),P0614FIL SET FILENAME
         MVI   E0614FLO+9,C')'    SET CLOSE BRACKET
* RIDFLD
         MVI   E0614P2A,DFHBMASD  HIDE PF2
         CLI   P0614RBA,X'FF'     IS IT RBA ?
         BE    E0614RB            EXIT IF IT IS
         CLI   P0614XRB,X'FF'     IS IT XRBA ?
         BE    E0614XRB           EXIT IF IT IS
         CLI   P0614RRN,X'FF'     IS IT RRN ?
         BE    E0614RRN           EXIT IF IT IS
* KEY DISPLAY
*    KEY DEFAULT AS L'RIDFLD
*    KEY AS KEYLENGTH IF VALID EXCEPT WHEN ZERO
*    FULL KEY IS STORED AFTER COMMAND
         MVI   E0614P2A,DFHBMASB  SHOW PF2
         L     R5,P0614ARD        R5=ADDRESS OF RIDFLD
         LB    R6,P0614LRD        R6=L'RIDFLD
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0614VKL           EXIT IF NOT
         CLI   P0614KIN,X'FF'     VALID KEYLENGTH ?
         BNE   E0614VKL           EXIT IF NOT
         OC    P0614KLN,P0614KLN  ZERO KEYLENGTH ?
         BZ    E0614VKL           EXIT IF IT IS
         LLH   R6,P0614KLN        R6=KEYLENGTH
E0614VKL EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0614ROK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0614R61           EXIT
*
E0614ROK EQU   *
         CHI   R7,61              >61 ?
         BNH   E0614R61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E0614R61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E0614RIO,C'('      SET RIDFLD OPEN BRACKET
         EX    R7,E0614RMV        MOVE DATA IN CHAR FORM
         LA    R5,E0614RIO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
* RIDFLD LENGTH (00000)
         MVC   E0614RLO,=C'RIDFLD LENGTH  (00000)' SET TEMPLATE
         LB    R5,P0614LRD        R5=RIDFLD LENGTH
         CVD   R5,E0614DEC        CONVERT TO DECIMAL
         UNPK  E0614RLO+16(5),E0614DEC+5(3) UNPACK RIDFLD LENGTH
         OI    E0614RLO+20,X'F0'  SET SIGN
         B     E0614KLN           EXIT
*
E0614RB  EQU   *
* RBA AS 4-BYTE HEX
         MVC   E0614WK2(4),P0614RID+4 MOVE RBA
         UNPK  E0614WK1(9),E0614WK2(5) UNPACK RBA
         TR    E0614WK1(8),E0614TBL-240 CONVERT TO DISPLAY HEX
         XC    E0614RIO,E0614RIO  CLEAR FOR RBA
         MVC   E0614RIO(13),=C'(X''........'')' MOVE TEMPLATE
         MVC   E0614RIO+3(8),E0614WK1 MOVE RBA
         MVC   E0614RBO,=C'RBA '  SET RBA
         B     E0614KLN           EXIT
*
E0614XRB EQU   *
* XRBA AS 8-BYTE HEX
         MVC   E0614WK2,P0614RID  MOVE XRBA
         UNPK  E0614WK1(9),E0614WK2(5) UNPACK
         UNPK  E0614WK1+8(9),E0614WK2+4(5)    XRBA
         TR    E0614WK1(16),E0614TBL-240 CONVERT TO DISPLAY HEX
         XC    E0614RIO,E0614RIO  CLEAR FOR XRBA
         MVC   E0614RIO(21),=C'(X''................'')' MOVE TEMPLATE
         MVC   E0614RIO+3(16),E0614WK1 MOVE XRBA
         MVC   E0614RBO,=C'XRBA'  SET XRBA
         B     E0614KLN           EXIT
*
E0614RRN EQU   *
* RRN AS 11-BYTE DECIMAL
         XC    E0614RIO,E0614RIO  CLEAR FOR RRN
         MVC   E0614RIO(13),=C'(00000000000)' MOVE TEMPLATE
         L     R5,P0614RID        R5=RRN
         CVD   R5,E0614DEC        CONVERT TO DECIMAL
         UNPK  E0614RIO+1(11),E0614DEC+2(6) UNPACK RRN
         OI    E0614RIO+11,X'F0'  SET SIGN
         MVC   E0614RBO,=C'RRN '  SET RRN
E0614KLN EQU   *
* KEYLENGTH (00000)
* GENERIC
         CLI   P0614KIN,X'FF'     VALID KEYLENGTH ?
         BNE   E0614RQD           EXIT IF NOT
         MVC   E0614KLO,=C'KEYLENGTH      (00000)' SET TEMPLATE
         LLH   R5,P0614KLN        R5=KEYLENGTH
         CVD   R5,E0614DEC        CONVERT TO DECIMAL
         UNPK  E0614KLO+16(5),E0614DEC+5(3) UNPACK KEYLENGTH
         OI    E0614KLO+20,X'F0'  SET SIGN
         MVC   E0614GNO,=C'GENERIC' SET GENERIC
E0614RQD EQU   *
* REQID (00000)
         MVC   E0614RQO,=C'(00000)' SET TEMPLATE
         LLH   R5,P0614REQ        R5=REQID
         CVD   R5,E0614DEC        CONVERT TO DECIMAL
         UNPK  E0614RQO+1(5),E0614DEC+5(3) UNPACK REQID
         OI    E0614RQO+5,X'F0'   SET SIGN
* EQUAL/GTEQ
         MVC   E0614EGO,=C'EQUAL' SET EQUAL
         CLI   P0614GTE,X'FF'     IS IT GTEQ ?
         BNE   E0614NOH           EXIT IF NOT
         MVC   E0614EGO,=C'GTEQ ' SET GTEQ
E0614NOH EQU   *
* NOHANDLE
         CLI   P0614NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0614CDE           EXIT IF NOT
         MVC   E0614NHO,=C'NOHANDLE' SET NOHANDLE
E0614CDE EQU   *
         L     R0,P0614EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0614PRO        SAVE PROGRAM NAME
         STG   R8,E0614PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0614WK2        SAVE OFFSET
         UNPK  E0614WK1(9),E0614WK2(5) UNPACK OFFSET
         TR    E0614WK1(8),E0614TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0614OFO,C'X'''    SET X'
         MVC   E0614OFO+2(6),E0614WK1+2 MOVE OFFSET
         MVI   E0614OFO+8,C''''   SET ENDING QUOTE
* FOR RESETBR THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0614L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0614EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0614EDL        SAME ?
         BE    E0614QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0614QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0614WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0614WK1) INITIMG(0)
         ST    R6,E0614ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0614L        LENGTH TO MOVE
         LA    R8,EDF0614S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0614EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0614WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0614L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0614EDL        LENGTH TO MOVE
         L     R8,P0614EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0614ADD) LENGTH(E0614WK1)                    X
                    QUEUE('0614') REQID(E0614REQ)
         EXEC  CICS FREEMAIN DATA(E0614ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0614ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0614RMV MVC   E0614RIO+1(0),0(R5) MOVE RIDFLD IN CHAR FORM
*
E0614ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0614DEC DS    PL8
E0614WK1 DS    XL17
E0614ADD DS    0A
E0614WK2 DS    XL8
E0614REQ DC    CL8'0614'
E0614TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0A02  DS    0H
* WRITEQ TS
         USING *,R12
         USING (P0A02,P0A02END),R3
         L     DFHEIBR,P0A02EIB   LOAD EIB ADDRESS
         MVC   E0A02ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0A02S        ADDRESS MAP
         USING EDF0A02S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0A02L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0A02TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0A02TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0A02TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0A02AFT           EXIT IF NOT
* 'BEFORE' WRITEQ TS
         MVC   E0A02STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0A02REQ+4,C'B'    SET REQID
         MVI   E0A021RA,DFHBMASD  HIDE RESPONSE
         MVI   E0A022RA,DFHBMASD  HIDE EIBRESP2
* NUMITEMS
         OC    P0A02NUM,P0A02NUM  ANY NUMITEMS ADDRESS ?
         BZ    E0A02PRM           EXIT IF NONE
         MVC   E0A02NIO(8),=C'NUMITEMS' SET NUMITEMS
         B     E0A02PRM           EXIT
*
E0A02AFT EQU   *
* 'AFTER' WRITEQ TS
         MVC   E0A02STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0A02REQ+4,C'A'    SET REQID
* NUMITEMS
         ICM   R5,15,P0A02NUM     ANY NUMITEMS ADDRESS ?
         BZ    E0A02RSP           EXIT IF NONE
         MVC   E0A02NIO,=C'NUMITEMS (00000)' MOVE TEMPLATE
         LH    R5,0(R5)           R5=NUMITEMS
         CVD   R5,E0A02DEC        CONVERT TO DECIMAL
         UNPK  E0A02NIO+10(5),E0A02DEC+5(3) UNPACK NUMITEMS
         OI    E0A02NIO+14,X'F0'  SET SIGN
E0A02RSP EQU   *
* RESP/RESP2
         LA    R5,E0A02RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0A02DEC        CONVERT TO DECIMAL
         UNPK  E0A02R2O,E0A02DEC+6(2) UNPACK EIBRESP2
         OI    E0A02R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0A02PRM           EXIT IF NONE
         UNPK  E0A02WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0A02WK1(12),E0A02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0A02RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0A02RCO+12(12),E0A02WK1 SET EIBRCODE
E0A02PRM EQU   *
* QNAME
         MVI   E0A02QUO,C'('      SET OPEN BRACKET
         MVC   E0A02QUO+1(16),P0A02QNM SET QNAME
         MVI   E0A02QUO+17,C')'   SET CLOSE BRACKET
* FROM (...//...)
         L     R5,P0A02FRM        FROM ADDRESS
         L     R6,P0A02LEN        R6=LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0A02LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0A02L67           EXIT
*
E0A02LOK EQU   *
         CHI   R7,67              >67 ?
         BNH   E0A02L67           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E0A02L67 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0A02XMV        MOVE DATA IN CHAR FORM
         MVI   E0A02FMO,C'('      SET FROM OPEN BRACKET
         LA    R5,E0A02FMO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
* LENGTH (00000000000)
         L     R5,P0A02LEN        R5=LENGTH
         CVD   R5,E0A02DEC        CONVERT TO DECIMAL
         UNPK  E0A02LNO+1(11),E0A02DEC+2(6) UNPACK LENGTH
         OI    E0A02LNO+11,X'F0'  SET SIGN
         MVI   E0A02LNO,C'('      SET LENGTH OPEN BRACKET
         MVI   E0A02LNO+12,C')'   SET LENGTH CLOSE BRACKET
* ITEM/REWRITE
         OC    P0A02ITM,P0A02ITM  ANY ITEM ?
         BZ    E0A02NIT           EXIT IF NONE
         MVC   E0A02ITO,=C'ITEM     (00000)' MOVE TEMPLATE
         LH    R5,P0A02ITM        R5=ITEM
         CVD   R5,E0A02DEC        CONVERT TO DECIMAL
         UNPK  E0A02ITO+10(5),E0A02DEC+5(3) UNPACK ITEM
         OI    E0A02ITO+14,X'F0'  SET SIGN
         MVC   E0A02RWO,=C'REWRITE' SET REWRITE
E0A02NIT EQU   *
* NOHANDLE
         CLI   P0A02NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0A02CDE           EXIT IF NOT
         MVC   E0A02NHO,=C'NOHANDLE' SET NOHANDLE
E0A02CDE EQU   *
         L     R0,P0A02EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0A02PRO        SAVE PROGRAM NAME
         STG   R8,E0A02PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0A02WK2        SAVE OFFSET
         UNPK  E0A02WK1(9),E0A02WK2(5) UNPACK OFFSET
         TR    E0A02WK1(8),E0A02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0A02OFO,C'X'''    SET X'
         MVC   E0A02OFO+2(6),E0A02WK1+2 MOVE OFFSET
         MVI   E0A02OFO+8,C''''   SET ENDING QUOTE
* FOR WRITEQ TS THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0A02L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0A02EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0A02EDL        SAME ?
         BE    E0A02QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0A02QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0A02WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0A02WK1) INITIMG(0)
         ST    R6,E0A02ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0A02L        LENGTH TO MOVE
         LA    R8,EDF0A02S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0A02EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0A02WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0A02L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0A02EDL        LENGTH TO MOVE
         L     R8,P0A02EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0A02ADD) LENGTH(E0A02WK1)                    X
                    QUEUE('0A02') REQID(E0A02REQ)
         EXEC  CICS FREEMAIN DATA(E0A02ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0A02ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0A02XMV MVC   E0A02FMO+1(0),0(R5) MOVE FROM IN CHAR FORM
*
E0A02ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0A02DEC DS    PL8
E0A02WK1 DS    XL9
E0A02ADD DS    0A
E0A02WK2 DS    XL4
E0A02REQ DC    CL8'0A02'
E0A02TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0A04  DS    0H
* READQ TS
         USING *,R12
         USING (P0A04,P0A04END),R3
         L     DFHEIBR,P0A04EIB   LOAD EIB ADDRESS
         MVC   E0A04ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0A04S        ADDRESS MAP
         USING EDF0A04S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0A04L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0A04TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0A04TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0A04TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0A04AFT           EXIT IF NOT
* 'BEFORE' READQ TS
         MVC   E0A04STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0A04REQ+4,C'B'    SET REQID
         MVI   E0A041RA,DFHBMASD  HIDE RESPONSE
         MVI   E0A042RA,DFHBMASD  HIDE EIBRESP2
* INTO/SET
         MVC   E0A04ISO(3),=C'SET' SET SET
         CLI   P0A04SET,X'FF'     IS SET SPECIFIED ?
         BE    E0A04NMI           EXIT IF IT IS
         MVC   E0A04ISO(4),=C'INTO' SET INTO
E0A04NMI EQU   *
* NUMITEMS
         OC    P0A04NUM,P0A04NUM  ANY NUMITEMS ADDRESS ?
         BZ    E0A04PRM           EXIT IF NONE
         MVC   E0A04NIO(8),=C'NUMITEMS' SET NUMITEMS
         B     E0A04PRM           EXIT
*
E0A04AFT EQU   *
* 'AFTER' READQ TS
         MVC   E0A04STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0A04REQ+4,C'A'    SET REQID
* SET (X'........')
         CLI   P0A04SET,X'FF'     IS SET SPECIFIED ?
         BNE   E0A04INT           EXIT IF NOT
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E0A04STK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E0A04STK           EXIT IF IT IS
         MVC   E0A04ISO(3),=C'SET' SET SET
         B     E0A04LOD           EXIT
*
E0A04STK EQU   *
         MVC   E0A04WK2,P0A04STA  MOVE A(SET)
         UNPK  E0A04WK1,E0A04WK2(5) UNPACK A(SET)
         TR    E0A04WK1(8),E0A04TBL-240 CONVERT TO DISPLAY HEX
         XC    E0A04ISO,E0A04ISO  CLEAR FOR SET
         MVC   E0A04ISO(28),=C'SET            (X''........'')' SET TMPT
         MVC   E0A04ISO+18(8),E0A04WK1 MOVE A(SET)
         B     E0A04LOD           EXIT
*
E0A04INT EQU   *
* INTO (...//...)
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E0A04INK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E0A04INK           EXIT IF IT IS
         MVC   E0A04ISO(4),=C'INTO' SET INTO
         B     E0A04LOD           EXIT
*
E0A04INK EQU   *
         MVC   E0A04ISO(16),=C'INTO           (' SET TEMPLATE
         L     R5,P0A04INT        INTO ADDRESS
         L     R6,P0A04LEN        R6=INTO LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E0A04LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E0A04L61           EXIT
*
E0A04LOK EQU   *
         CHI   R7,61              >61 ?
         BNH   E0A04L61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E0A04L61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0A04XMV        MOVE DATA IN CHAR FORM
         LA    R5,E0A04ISO+17(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
E0A04LOD EQU   *
* LENGTH OF DATA (00000000000)
         ICM   R5,15,P0A04LAD     ANY LENGTH AS LABEL ?
         BZ    E0A04NOL           EXIT IF NONE
         LH    R5,0(R5)           R5=LENGTH OF DATA
         B     E0A04DOL           EXIT
*
E0A04NOL EQU   *
         ICM   R5,15,P0A04FAD     ANY FLENGTH AS LABEL ?
         BZ    E0A04NIT           EXIT IF NONE
         L     R5,0(R5)           R5=LENGTH OF DATA
E0A04DOL EQU   *
         MVC   E0A04LDO,=C'LENGTH OF DATA (00000000000)' MOVE TEMPLATE
         CVD   R5,E0A04DEC        CONVERT TO DECIMAL
         UNPK  E0A04LDO+16(11),E0A04DEC+2(6) UNPACK LENGTH OF DATA
         OI    E0A04LDO+26,X'F0'  SET SIGN
E0A04NIT EQU   *
* NUMITEMS
         ICM   R5,15,P0A04NUM     ANY NUMITEMS ADDRESS ?
         BZ    E0A04RSP           EXIT IF NONE
         MVC   E0A04NIO,=C'NUMITEMS       (00000)' MOVE TEMPLATE
         LH    R5,0(R5)           R5=NUMITEMS
         CVD   R5,E0A04DEC        CONVERT TO DECIMAL
         UNPK  E0A04NIO+16(5),E0A04DEC+5(3) UNPACK NUMITEMS
         OI    E0A04NIO+20,X'F0'  SET SIGN
E0A04RSP EQU   *
* RESP/RESP2
         LA    R5,E0A04RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0A04DEC        CONVERT TO DECIMAL
         UNPK  E0A04R2O,E0A04DEC+6(2) UNPACK EIBRESP2
         OI    E0A04R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0A04PRM           EXIT IF NONE
         UNPK  E0A04WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0A04WK1(12),E0A04TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0A04RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0A04RCO+12(12),E0A04WK1 SET EIBRCODE
E0A04PRM EQU   *
* QNAME
         MVI   E0A04QUO,C'('      SET OPEN BRACKET
         MVC   E0A04QUO+1(16),P0A04QNM SET QNAME
         MVI   E0A04QUO+17,C')'   SET CLOSE BRACKET
* ITEM/NEXT
         MVC   E0A04ITO(4),=C'NEXT' DEFAULT TO NEXT
         CLI   P0A04ITM,X'FF'     IS IT NEXT ?
         BE    E0A04LIN           EXIT IF IT IS
         MVC   E0A04ITO,=C'ITEM           (00000)' MOVE TEMPLATE
         LH    R5,P0A04ITM        R5=ITEM
         CVD   R5,E0A04DEC        CONVERT TO DECIMAL
         UNPK  E0A04ITO+16(5),E0A04DEC+5(3) UNPACK ITEM
         OI    E0A04ITO+20,X'F0'  SET SIGN
E0A04LIN EQU   *
* LENGTH OF INTO (00000000000)
         MVC   E0A04LIO,=C'(00000000000)' MOVE TEMPLATE
         L     R5,P0A04LEN        R5=LENGTH
         CVD   R5,E0A04DEC        CONVERT TO DECIMAL
         UNPK  E0A04LIO+16(11),E0A04DEC+2(6) UNPACK LENGTH
         OI    E0A04LIO+26,X'F0'  SET SIGN
* NOHANDLE
         CLI   P0A04NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0A04CDE           EXIT IF NOT
         MVC   E0A04NHO,=C'NOHANDLE' SET NOHANDLE
E0A04CDE EQU   *
         L     R0,P0A04EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0A04PRO        SAVE PROGRAM NAME
         STG   R8,E0A04PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0A04WK2        SAVE OFFSET
         UNPK  E0A04WK1(9),E0A04WK2(5) UNPACK OFFSET
         TR    E0A04WK1(8),E0A04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0A04OFO,C'X'''    SET X'
         MVC   E0A04OFO+2(6),E0A04WK1+2 MOVE OFFSET
         MVI   E0A04OFO+8,C''''   SET ENDING QUOTE
* FOR READQ TS THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0A04L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0A04EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0A04EDL        SAME ?
         BE    E0A04QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0A04QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0A04WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0A04WK1) INITIMG(0)
         ST    R6,E0A04ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0A04L        LENGTH TO MOVE
         LA    R8,EDF0A04S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0A04EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0A04WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0A04L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0A04EDL        LENGTH TO MOVE
         L     R8,P0A04EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0A04ADD) LENGTH(E0A04WK1)                    X
                    QUEUE('0A04') REQID(E0A04REQ)
         EXEC  CICS FREEMAIN DATA(E0A04ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0A04ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0A04XMV MVC   E0A04ISO+16(0),0(R5) MOVE INTO IN CHAR FORM
*
E0A04ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0A04DEC DS    PL8
E0A04WK1 DS    XL9
E0A04ADD DS    0A
E0A04WK2 DS    XL4
E0A04REQ DC    CL8'0A04'
E0A04TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0A06  DS    0H
* DELETEQ TS
         USING *,R12
         USING (P0A06,P0A06END),R3
         L     DFHEIBR,P0A06EIB   LOAD EIB ADDRESS
         MVC   E0A06ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0A06S        ADDRESS MAP
         USING EDF0A06S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0A06L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0A06TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0A06TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0A06TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0A06AFT           EXIT IF NOT
* 'BEFORE' DELETEQ TS
         MVC   E0A06STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0A06REQ+4,C'B'    SET REQID
         MVI   E0A061RA,DFHBMASD  HIDE RESPONSE
         MVI   E0A062RA,DFHBMASD  HIDE EIBRESP2
         B     E0A06PRM           EXIT
*
E0A06AFT EQU   *
* 'AFTER' DELETEQ TS
         MVC   E0A06STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0A06REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0A06RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0A06DEC        CONVERT TO DECIMAL
         UNPK  E0A06R2O,E0A06DEC+6(2) UNPACK EIBRESP2
         OI    E0A06R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0A06PRM           EXIT IF NONE
         UNPK  E0A06WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0A06WK1(12),E0A06TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0A06RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0A06RCO+12(12),E0A06WK1 SET EIBRCODE
E0A06PRM EQU   *
* QNAME
         MVI   E0A06QUO,C'('      SET OPEN BRACKET
         MVC   E0A06QUO+1(16),P0A06QNM SET QNAME
         MVI   E0A06QUO+17,C')'   SET CLOSE BRACKET
* NOHANDLE
         CLI   P0A06NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0A06CDE           EXIT IF NOT
         MVC   E0A06NHO,=C'NOHANDLE' SET NOHANDLE
E0A06CDE EQU   *
         L     R0,P0A06EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0A06PRO        SAVE PROGRAM NAME
         STG   R8,E0A06PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0A06WK2        SAVE OFFSET
         UNPK  E0A06WK1(9),E0A06WK2(5) UNPACK OFFSET
         TR    E0A06WK1(8),E0A06TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0A06OFO,C'X'''    SET X'
         MVC   E0A06OFO+2(6),E0A06WK1+2 MOVE OFFSET
         MVI   E0A06OFO+8,C''''   SET ENDING QUOTE
* FOR DELETEQ TS THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0A06L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0A06EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0A06EDL        SAME ?
         BE    E0A06QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0A06QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0A06WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0A06WK1) INITIMG(0)
         ST    R6,E0A06ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0A06L        LENGTH TO MOVE
         LA    R8,EDF0A06S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0A06EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0A06WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0A06L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0A06EDL        LENGTH TO MOVE
         L     R8,P0A06EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0A06ADD) LENGTH(E0A06WK1)                    X
                    QUEUE('0A06') REQID(E0A06REQ)
         EXEC  CICS FREEMAIN DATA(E0A06ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0A06ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0A06ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0A06DEC DS    PL8
E0A06WK1 DS    XL9
E0A06ADD DS    0A
E0A06WK2 DS    XL4
E0A06REQ DC    CL8'0A06'
E0A06TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0C02  DS    0H
* GETMAIN
         USING *,R12
         USING (P0C02,P0C02END),R3
         L     DFHEIBR,P0C02EIB   LOAD EIB ADDRESS
         MVC   E0C02ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0C02S        ADDRESS MAP
         USING EDF0C02S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0C02L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0C02TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0C02TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0C02TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0C02AFT           EXIT IF NOT
* 'BEFORE' GETMAIN
         MVC   E0C02STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0C02REQ+4,C'B'    SET REQID
         MVI   E0C02ADA,DFHBMASD  HIDE ADDRESS
         MVI   E0C021RA,DFHBMASD  HIDE RESPONSE
         MVI   E0C022RA,DFHBMASD  HIDE EIBRESP2
         B     E0C02PRM           EXIT
*
E0C02AFT EQU   *
* 'AFTER' GETMAIN
         MVC   E0C02STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0C02REQ+4,C'A'    SET REQID
* ADDRESS  (X'........')
         MVC   E0C02ADO,=C'ADDRESS  (X''........'')' SET TEMPLATE
         L     R5,P0C02GMA        R5=GETMAIN ADDRESS
         AHI   R5,8               ADJUST FOR PREFIX
         ST    R5,E0C02WK2        SAVE RETURNED ADDRESS
         UNPK  E0C02WK1(9),E0C02WK2(5) UNPACK ADDRESS
         TR    E0C02WK1(8),E0C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0C02ADO+12(8),E0C02WK1 MOVE ADDRESS
* RESP/RESP2
         LA    R5,E0C02RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0C02DEC        CONVERT TO DECIMAL
         UNPK  E0C02R2O,E0C02DEC+6(2) UNPACK EIBRESP2
         OI    E0C02R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0C02PRM           EXIT IF NONE
         UNPK  E0C02WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0C02WK1(12),E0C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0C02RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0C02RCO+12(12),E0C02WK1 SET EIBRCODE
E0C02PRM EQU   *
* LENGTH   (00000000000)
         MVC   E0C02LNO,=C'LENGTH   (00000000000)' SET TEMPLATE
         L     R5,P0C02LEN        R5=LENGTH
         CVD   R5,E0C02DEC        CONVERT TO DECIMAL
         UNPK  E0C02LNO+10(11),E0C02DEC+2(6) UNPACK LENGTH
         OI    E0C02LNO+20,X'F0'  SET SIGN
         MVI   E0C02IMA,DFHBMASD  HIDE INITIMG
         CLI   P0C02INM,X'FF'     ANY INITIMG ?
         BNE   E0C02NOI           EXIT IF NONE
* INITIMG  (X'..')
         MVC   E0C02IMO,=C'INITIMG  (X''..'')'
         UNPK  E0C02WK1(3),P0C02INT(2) UNPACK INITIMG
         TR    E0C02WK1(2),E0C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0C02IMO+12(2),E0C02WK1 MOVE ADDRESS
         MVI   E0C02IMA,DFHBMASK  SHOW INITIMG
E0C02NOI EQU   *
* NOHANDLE
         CLI   P0C02NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0C02CDE           EXIT IF NOT
         MVC   E0C02NHO,=C'NOHANDLE' SET NOHANDLE
E0C02CDE EQU   *
         L     R0,P0C02EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0C02PRO        SAVE PROGRAM NAME
         STG   R8,E0C02PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0C02WK2        SAVE OFFSET
         UNPK  E0C02WK1(9),E0C02WK2(5) UNPACK OFFSET
         TR    E0C02WK1(8),E0C02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0C02OFO,C'X'''    SET X'
         MVC   E0C02OFO+2(6),E0C02WK1+2 MOVE OFFSET
         MVI   E0C02OFO+8,C''''   SET ENDING QUOTE
* FOR GETMAIN THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0C02L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0C02EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0C02EDL        SAME ?
         BE    E0C02QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0C02QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0C02WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0C02WK1) INITIMG(0)
         ST    R6,E0C02ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0C02L        LENGTH TO MOVE
         LA    R8,EDF0C02S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0C02EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0C02WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0C02L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0C02EDL        LENGTH TO MOVE
         L     R8,P0C02EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0C02ADD) LENGTH(E0C02WK1)                    X
                    QUEUE('0C02') REQID(E0C02REQ)
         EXEC  CICS FREEMAIN DATA(E0C02ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0C02ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0C02ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0C02DEC DC    PL8'0'
E0C02WK1 DS    XL9
E0C02ADD DS    0A
E0C02WK2 DS    XL4
E0C02REQ DC    CL8'0C02'
E0C02TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0C04  DS    0H
* FREEMAIN
         USING *,R12
         USING (P0C04,P0C04END),R3
         L     DFHEIBR,P0C04EIB   LOAD EIB ADDRESS
         MVC   E0C04ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0C04S        ADDRESS MAP
         USING EDF0C04S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0C04L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0C04TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0C04TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0C04TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0C04AFT           EXIT IF NOT
* 'BEFORE' FREEMAIN
         MVC   E0C04STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0C04REQ+4,C'B'    SET REQID
         MVI   E0C041RA,DFHBMASD  HIDE RESPONSE
         MVI   E0C042RA,DFHBMASD  HIDE EIBRESP2
         B     E0C04PRM           EXIT
*
E0C04AFT EQU   *
* 'AFTER' FREEMAIN
         MVC   E0C04STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0C04REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0C04RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0C04DEC        CONVERT TO DECIMAL
         UNPK  E0C04R2O,E0C04DEC+6(2) UNPACK EIBRESP2
         OI    E0C04R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0C04PRM           EXIT IF NONE
         UNPK  E0C04WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0C04WK1(12),E0C04TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0C04RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0C04RCO+12(12),E0C04WK1 SET EIBRCODE
E0C04PRM EQU   *
* ADDRESS  (X'........')
         MVC   E0C04ADO,=C'ADDRESS  (X''........'')' SET TEMPLATE
         UNPK  E0C04WK1(9),P0C04FMA(5) UNPACK ADDRESS
         TR    E0C04WK1(8),E0C04TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0C04ADO+12(8),E0C04WK1 MOVE ADDRESS
* NOHANDLE
         CLI   P0C04NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0C04CDE           EXIT IF NOT
         MVC   E0C04NHO,=C'NOHANDLE' SET NOHANDLE
E0C04CDE EQU   *
         L     R0,P0C04EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0C04PRO        SAVE PROGRAM NAME
         STG   R8,E0C04PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0C04WK2        SAVE OFFSET
         UNPK  E0C04WK1(9),E0C04WK2(5) UNPACK OFFSET
         TR    E0C04WK1(8),E0C04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0C04OFO,C'X'''    SET X'
         MVC   E0C04OFO+2(6),E0C04WK1+2 MOVE OFFSET
         MVI   E0C04OFO+8,C''''   SET ENDING QUOTE
* FOR FREEMAIN THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0C04L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0C04EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0C04EDL        SAME ?
         BE    E0C04QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0C04QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0C04WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0C04WK1) INITIMG(0)
         ST    R6,E0C04ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0C04L        LENGTH TO MOVE
         LA    R8,EDF0C04S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0C04EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0C04WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0C04L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0C04EDL        LENGTH TO MOVE
         L     R8,P0C04EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0C04ADD) LENGTH(E0C04WK1)                    X
                    QUEUE('0C04') REQID(E0C04REQ)
         EXEC  CICS FREEMAIN DATA(E0C04ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0C04ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0C04ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0C04DEC DC    PL8'0'
E0C04WK1 DS    XL9
E0C04ADD DS    0A
E0C04WK2 DS    XL4
E0C04REQ DC    CL8'0C04'
E0C04TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0E02  DS    0H
* LINK
* 'BEFORE' = LINK (EDF0E02)              ENTRY FROM LCL0E02
* 'AFTER'  = LINK FAIL (EDF0E02)         ENTRY FROM LCL0E02
* 'AFTER'  = PROGRAM INITIATION (EDF01)  ENTRY FROM DFHEIENT
         USING *,R12
         USING (P0E02,P0E02END),R3
         L     DFHEIBR,P0E02EIB   LOAD EIB ADDRESS
         MVC   E0E02ESA,DFHEIBLK  SAVE EIB
         CLI   TCTTEEBA,X'FF'     'AFTER' COMMAND ?
         BE    E0E02PIN           EXIT IF IT IS
* 'BEFORE' LINK
* 'AFTER'  LINK FAIL
         LARL  R4,EDF0E02S        ADDRESS MAP
         USING EDF0E02S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0E02L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
         MVC   E0E02STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0E02REQ+4,C'B'    SET REQID
         MVI   E0E021RA,DFHBMASD  HIDE RESPONSE
         MVI   E0E022RA,DFHBMASD  HIDE EIBRESP2
         CLI   TCTTEEBA,X'00'     'BEFORE' LINK ?
         BE    E0E02BEF           EXIT IF IT IS
* 'AFTER' LINK FAIL
         MVC   E0E02STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0E02REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0E02RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E02DEC        CONVERT TO DECIMAL
         UNPK  E0E02R2O,E0E02DEC+6(2) UNPACK EIBRESP2
         OI    E0E02R2O+2,X'F0'   SET SIGN
         MVI   E0E021RA,DFHBMASB  SHOW RESPONSE
         MVI   E0E022RA,DFHBMASB  SHOW EIBRESP2
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0E02BEF           EXIT IF NONE
         UNPK  E0E02WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E02WK1(12),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E02RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0E02RCO+12(12),E0E02WK1 SET EIBRCODE
E0E02BEF EQU   *
* EIBTRNID
         MVC   E0E02TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0E02TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E02TNO+6,X'F0'   SET SIGN
         L     R0,P0E02EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0E02PRO        SAVE PROGRAM NAME
         STG   R8,E0E02PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E02WK2        SAVE OFFSET
         UNPK  E0E02WK1(9),E0E02WK2(5) UNPACK OFFSET
         TR    E0E02WK1(8),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0E02OFO,C'X'''    SET X'
         MVC   E0E02OFO+2(6),E0E02WK1+2 MOVE OFFSET
         MVI   E0E02OFO+8,C''''   SET ENDING QUOTE
* SET UP MAP
*
* PROGRAM
         MVC   E0E02PMO(10),=C'(........)' SET FIELD
         MVC   E0E02PMO+1(8),P0E02PGM SET PROGRAM
         OC    P0E02COM,P0E02COM  ANY COMMAREA ?
         BZ    E0E02CHN           EXIT IF NONE
* COMMAREA DATA
         MVC   E0E02CMO(10),=C'COMMAREA (' SET FIELD
         L     R5,P0E02COM        R5=COMMAREA ADDRESS
         LH    R6,P0E02CLN        R6=COMMAREA LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,67              >67 ?
         BNH   E0E02L67           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E0E02L67 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0E02XMV        MOVE DATA IN CHAR FORM
         LA    R5,E0E02CMO+11(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
* COMMAREA LENGTH
         MVC   E0E02LNO,=C'LENGTH   (     )' SET FIELD
         LH    R5,P0E02CLN        R5=COMMAREA LENGTH
         CVD   R5,E0E02DEC        CONVERT TO DECIMAL
         UNPK  E0E02LNO+10(5),E0E02DEC+5(3) UNPACK LENGTH
         OI    E0E02LNO+14,X'F0'  SET SIGN
E0E02CHN EQU   *
* CHANNEL
         MVI   E0E02CHA,DFHBMASD  HIDE CHANNEL
         CLI   P0E02CHN,X'00'     ANY CHANNEL ?
         BE    E0E02NOH           EXIT IF NONE
         MVI   E0E02CHA,DFHBMASK  SHOW CHANNEL
         MVC   E0E02CHO,=C'CHANNEL  (................)' SET TEMPLATE
         MVC   E0E02CHO+10(16),P0E02CHN SET CHANNEL
E0E02NOH EQU   *
         CLI   P0E02NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0E02DUN           EXIT IF NOT
         MVC   E0E02NHO,=C'NOHANDLE' SET NOHANDLE
E0E02DUN EQU   *
* FOR LINK THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0E02L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E02EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E02EDL        SAME ?
         BE    E0E02QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E02QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E02WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E02WK1) INITIMG(0)
         ST    R6,E0E02ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0E02L        LENGTH TO MOVE
         LA    R8,EDF0E02S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E02EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E02WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0E02L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E02EDL        LENGTH TO MOVE
         L     R8,P0E02EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
* 'BEFORE' LINK
* 'AFTER'  LINK FAIL
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E02ADD) LENGTH(E0E02WK1)                    X
                    QUEUE('0E02') REQID(E0E02REQ)
         EXEC  CICS FREEMAIN DATA(E0E02ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E02ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E02XMV MVC   E0E02CMO+10(0),0(R5) MOVE COMMAREA IN CHAR FORM
*
E0E02PIN EQU   *
* 'AFTER' LINK
* PROGRAM INITIATION
         LARL  R4,EDF01S          ADDRESS MAP
         USING EDF01S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF01L          LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
         MVI   E0E02REQ+4,C'A'    SET REQID
* SET UP MAP
* EIBTRNID
         MVC   E01TRANO,EIBTRNID  MOVE TRANSID
* EIBPROG
         MVC   E01PROGO,EIBPROG   MOVE PROGRAM NAME
* EIBTASKN
         UNPK  E01TSKNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E01TSKNO+6,X'F0'   SET SIGN
         UNPK  E01EBTMO,EIBTIME   UNPACK TIME
         OI    E01EBTMO+6,X'F0'   SET SIGN
         UNPK  E01EBDTO,EIBDATE   UNPACK DATE
         OI    E01EBDTO+6,X'F0'   SET SIGN
         MVC   E01EBTDO,EIBTRNID  SET TRANSID
* EIBCPOSN
         UNPK  E0E02WK1(5),EIBCPOSN(3) UNPACK EIBCPOSN
         TR    E0E02WK1(4),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBCSO,C'X'''    SET X'
         MVC   E01EBCSO+2(4),E0E02WK1 SET EIBCPOSN
         MVI   E01EBCSO+6,C''''   SET ENDING QUOTE
* EIBCALEN
         LH    R5,EIBCALEN        R5=EIBCALEN
         CVD   R5,E0E02DEC        CONVERT TO DECIMAL
         UNPK  E01EBCLO,E0E02DEC+5(3) UNPACK
         OI    E01EBCLO+4,X'F0'   SET SIGN
* EIBAID
         UNPK  E0E02WK1(3),EIBAID(2) UNPACK EIBAID
         TR    E0E02WK1(2),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBADO,C'X'''    SET X'
         MVC   E01EBADO+2(2),E0E02WK1 SET EIBAID
         MVI   E01EBADO+4,C''''   SET ENDING QUOTE
         LA    R5,E01EBAXO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DOAID          INTERPRET EIBAID
* EIBFN
         UNPK  E0E02WK1(5),EIBFN(3) UNPACK EIBFN
         TR    E0E02WK1(4),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBFNO,C'X'''    SET X'
         MVC   E01EBFNO+2(4),E0E02WK1 SET EIBFN
         MVI   E01EBFNO+6,C''''   SET ENDING QUOTE
         LA    R5,E01EBFXO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DOFN           INTERPRET EIBFN
* EIBRCODE
         UNPK  E0E02WK1,EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E02WK1(12),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBRCO,C'X'''    SET X'
         MVC   E01EBRCO+2(12),E0E02WK1 SET EIBRCODE
         MVI   E01EBRCO+14,C''''  SET ENDING QUOTE
* EIBREQID
         MVC   E01EBRQO(8),EIBREQID MOVE EIBREQID
* EIBDS/EIBRSRCE
         MVC   E01EBDSO,EIBDS     MOVE EIBDS
         MVC   E01EBRSO(8),EIBRSRCE MOVE EIBRSRCE
* EIBRESP
         UNPK  E0E02WK1(9),EIBRESP(5) UNPACK EIBRESP
         TR    E0E02WK1(8),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBRPO,C'X'''    SET X'
         MVC   E01EBRPO+2(8),E0E02WK1 SET EIBRESP
         MVI   E01EBRPO+10,C''''  SET ENDING QUOTE
* EIBRESP2
         UNPK  E0E02WK1(9),EIBRESP2(5) UNPACK EIBRESP2
         TR    E0E02WK1(8),E0E02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBR2O,C'X'''    SET X'
         MVC   E01EBR2O+2(8),E0E02WK1 SET EIBRESP2
         MVI   E01EBR2O+10,C''''  SET ENDING QUOTE
         MVC   E01EBPGO,EIBPROG   MOVE EIBPROG
         MVC   E01EBDFO,EIBDTFRM  MOVE EIBDTFRM
         CLI   P0E02NED,X'FF'     ?
         BNE   E0E02EOK           EXIT IF NOT
* FOR A LINK, THE DSA FIELDS ARE NOT SET
* R13 POINTS TO THE DSA FOR AN ENTRY FROM DFHEIENT
         ST    R13,P0E02EDS       SAVE DSA ADDRESS
         USING DFHEISTG,R13
         MVC   P0E02EDL,DFHEILEN+2 SAVE DSA LENGTH
         LA    R9,DFHEIUSR        DSA USER AREA
         SR    R9,R13             R9=CICS DSA LENGTH
         STH   R9,P0E02EDC        SET CICS DSA LENGTH FOR EDF
         DROP  R13
E0E02EOK EQU   *
* FOR LINK THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF01L          R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E02EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E02EDL        SAME ?
         BE    E0E02QU2           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E02QU2 EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E02WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E02WK1) INITIMG(0)
         ST    R6,E0E02ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF01L          LENGTH TO MOVE
         LA    R8,EDF01S          MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E02EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E02WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF01L+8)     - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E02EDL        LENGTH TO MOVE
         L     R8,P0E02EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
* PROGRAM INITIATION
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E02ADD) LENGTH(E0E02WK1)                    X
                    QUEUE('0E02IN') REQID(E0E02REQ)
         EXEC  CICS FREEMAIN DATA(E0E02ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E02ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E02ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0E02DEC DS    PL8
E0E02WK1 DS    XL13
E0E02ADD DS    0A
E0E02WK2 DS    XL4
E0E02REQ DC    CL8'0E02'
E0E02TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0E04  DS    0H
* XCTL
* 'BEFORE' = XCTL (EDF0E04)              ENTRY FROM LCL0E04
* 'AFTER'  = XCTL FAIL (EDF0E04)         ENTRY FROM LCL0E04
* 'AFTER'  = PROGRAM INITIATION (EDF01)  ENTRY FROM DFHEIENT
         USING *,R12
         USING (P0E04,P0E04END),R3
         L     DFHEIBR,P0E04EIB   LOAD EIB ADDRESS
         MVC   E0E04ESA,DFHEIBLK  SAVE EIB
         CLI   TCTTEEBA,X'FF'     'AFTER' COMMAND ?
         BNE   E0E04BEF           EXIT IF NOT
* 'AFTER' XCTL : PROGRAM INITIATION
         MVI   E0E04REQ+4,C'A'    SET REQID
         LARL  R4,EDF01S          ADDRESS MAP
         USING EDF01S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF01L          LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E01TRANO,EIBTRNID  MOVE TRANSID
* EIBPROG
         MVC   E01PROGO,EIBPROG   MOVE PROGRAM NAME
* EIBTASKN
         UNPK  E01TSKNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E01TSKNO+6,X'F0'   SET SIGN
         UNPK  E01EBTMO,EIBTIME   UNPACK TIME
         OI    E01EBTMO+6,X'F0'   SET SIGN
         UNPK  E01EBDTO,EIBDATE   UNPACK DATE
         OI    E01EBDTO+6,X'F0'   SET SIGN
         MVC   E01EBTDO,EIBTRNID  SET TRANSID
* EIBCPOSN
         UNPK  E0E04WK1(5),EIBCPOSN(3) UNPACK EIBCPOSN
         TR    E0E04WK1(4),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBCSO,C'X'''    SET X'
         MVC   E01EBCSO+2(4),E0E04WK1 SET EIBCPOSN
         MVI   E01EBCSO+6,C''''   SET ENDING QUOTE
* EIBCALEN
         LH    R5,EIBCALEN        R5=EIBCALEN
         CVD   R5,E0E04DEC        CONVERT TO DECIMAL
         UNPK  E01EBCLO,E0E04DEC+5(3) UNPACK
         OI    E01EBCLO+4,X'F0'   SET SIGN
* EIBAID
         UNPK  E0E04WK1(3),EIBAID(2) UNPACK EIBAID
         TR    E0E04WK1(2),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBADO,C'X'''    SET X'
         MVC   E01EBADO+2(2),E0E04WK1 SET EIBAID
         MVI   E01EBADO+4,C''''   SET ENDING QUOTE
         LA    R5,E01EBAXO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DOAID          INTERPRET EIBAID
* EIBFN
         UNPK  E0E04WK1(5),EIBFN(3) UNPACK EIBFN
         TR    E0E04WK1(4),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBFNO,C'X'''    SET X'
         MVC   E01EBFNO+2(4),E0E04WK1 SET EIBFN
         MVI   E01EBFNO+6,C''''   SET ENDING QUOTE
         LA    R5,E01EBFXO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DOFN           INTERPRET EIBFN
* EIBRCODE
         UNPK  E0E04WK1,EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E04WK1(12),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBRCO,C'X'''    SET X'
         MVC   E01EBRCO+2(12),E0E04WK1 SET EIBRCODE
         MVI   E01EBRCO+14,C''''  SET ENDING QUOTE
* EIBREQID
         MVC   E01EBRQO(8),EIBREQID MOVE EIBREQID
* EIBDS/EIBRSRCE
         MVC   E01EBDSO,EIBDS     MOVE EIBDS
         MVC   E01EBRSO(8),EIBRSRCE MOVE EIBRSRCE
* EIBRESP
         UNPK  E0E04WK1(9),EIBRESP(5) UNPACK EIBRESP
         TR    E0E04WK1(8),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBRPO,C'X'''    SET X'
         MVC   E01EBRPO+2(8),E0E04WK1 SET EIBRESP
         MVI   E01EBRPO+10,C''''  SET ENDING QUOTE
* EIBRESP2
         UNPK  E0E04WK1(9),EIBRESP2(5) UNPACK EIBRESP2
         TR    E0E04WK1(8),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E01EBR2O,C'X'''    SET X'
         MVC   E01EBR2O+2(8),E0E04WK1 SET EIBRESP2
         MVI   E01EBR2O+10,C''''  SET ENDING QUOTE
         MVC   E01EBPGO,EIBPROG   MOVE EIBPROG
         MVC   E01EBDFO,EIBDTFRM  MOVE EIBDTFRM
* FOR PROGRAM INITIATION THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF01L          R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E04EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E04EDL        SAME ?
         BE    E0E04QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E04QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E04WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E04WK1) INITIMG(0)
         ST    R6,E0E04ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF01L          LENGTH TO MOVE
         LA    R8,EDF01S          MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E04EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E04WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF01L+8)     - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E04EDL        LENGTH TO MOVE
         L     R8,P0E04EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
* PROGRAM INITIATION
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E04ADD) LENGTH(E0E04WK1)                    X
                    QUEUE('0E04AF') REQID(E0E04REQ)
         EXEC  CICS FREEMAIN DATA(E0E04ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E04ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E04BEF EQU   *
* 'BEFORE' XCTL
* 'AFTER'  XCTL FAIL
         LARL  R4,EDF0E04S        ADDRESS MAP
         USING EDF0E04S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0E04L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
         MVC   E0E04STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0E04REQ+4,C'B'    SET REQID
         MVI   E0E041RA,DFHBMASD  HIDE RESPONSE
         MVI   E0E042RA,DFHBMASD  HIDE EIBRESP2
         CLI   TCTTEEBA,X'00'     'BEFORE' XCTL ?
         BE    E0E04BF2           EXIT IF IT IS
* 'AFTER' XCTL FAIL
         MVC   E0E04STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0E04REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0E04RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E04DEC        CONVERT TO DECIMAL
         UNPK  E0E04R2O,E0E04DEC+6(2) UNPACK EIBRESP2
         OI    E0E04R2O+2,X'F0'   SET SIGN
         MVI   E0E041RA,DFHBMASB  SHOW RESPONSE
         MVI   E0E042RA,DFHBMASB  SHOW EIBRESP2
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0E04BF2           EXIT IF NONE
         UNPK  E0E04WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E04WK1(12),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E04RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0E04RCO+12(12),E0E04WK1 SET EIBRCODE
E0E04BF2 EQU   *
* EIBTRNID
         MVC   E0E04TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0E04TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E04TNO+6,X'F0'   SET SIGN
         L     R0,P0E04EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0E04PRO        SAVE PROGRAM NAME
         STG   R8,E0E04PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E04WK2        SAVE OFFSET
         UNPK  E0E04WK1(9),E0E04WK2(5) UNPACK OFFSET
         TR    E0E04WK1(8),E0E04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0E04OFO,C'X'''    SET X'
         MVC   E0E04OFO+2(6),E0E04WK1+2 MOVE OFFSET
         MVI   E0E04OFO+8,C''''   SET ENDING QUOTE
* SET UP MAP
*
* PROGRAM
         MVC   E0E04PMO,=C'(........)' SET FIELD
         MVC   E0E04PMO+1(8),P0E04PGM SET PROGRAM
         OC    P0E04COM,P0E04COM  ANY COMMAREA ?
         BZ    E0E04CHN           EXIT IF NONE
* COMMAREA DATA
         MVC   E0E04CMO(10),=C'COMMAREA (' SET FIELD
         L     R5,P0E04COM        R5=COMMAREA ADDRESS
         LH    R6,P0E04CLN        R6=COMMAREA LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,67              >67 ?
         BNH   E0E04L67           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E0E04L67 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0E04XMV        MOVE DATA IN CHAR FORM
         LA    R5,E0E04CMO+11(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
* COMMAREA LENGTH
         MVC   E0E04LNO,=C'LENGTH   (     )' SET FIELD
         LH    R5,P0E04CLN        R5=COMMAREA LENGTH
         CVD   R5,E0E04DEC        CONVERT TO DECIMAL
         UNPK  E0E04LNO+10(5),E0E04DEC+5(3) UNPACK LENGTH
         OI    E0E04LNO+14,X'F0'  SET SIGN
E0E04CHN EQU   *
* CHANNEL
         MVI   E0E04CHA,DFHBMASD  HIDE CHANNEL
         CLI   P0E04CHN,X'00'     ANY CHANNEL ?
         BE    E0E04NOH           EXIT IF NONE
         MVI   E0E04CHA,DFHBMASK  SHOW CHANNEL
         MVC   E0E04CHO,=C'CHANNEL  (................)' SET TEMPLATE
         MVC   E0E04CHO+10(16),P0E04CHN SET CHANNEL
E0E04NOH EQU   *
* NOHANDLE
         CLI   P0E04NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0E04DUN           EXIT IF NOT
         MVC   E0E04NHO,=C'NOHANDLE' SET NOHANDLE
E0E04DUN EQU   *
* FOR XCTL THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0E04L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E04EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E04EDL        SAME ?
         BE    E0E04QU2           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E04QU2 EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E04WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E04WK1) INITIMG(0)
         ST    R6,E0E04ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0E04L        LENGTH TO MOVE
         LA    R8,EDF0E04S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E04EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E04WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0E04L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E04EDL        LENGTH TO MOVE
         L     R8,P0E04EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
* 'BEFORE' XCTL
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E04ADD) LENGTH(E0E04WK1)                    X
                    QUEUE('0E04') REQID(E0E04REQ)
         EXEC  CICS FREEMAIN DATA(E0E04ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E04ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E04XMV MVC   E0E04CMO+10(0),0(R5) MOVE COMMAREA IN CHAR FORM
*
E0E04ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0E04DEC DS    PL8
E0E04WK1 DS    XL13
E0E04ADD DS    0A
E0E04WK2 DS    XL4
E0E04REQ DC    CL8'0E04'
E0E04TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0E06  DS    0H
* LOAD
         USING *,R12
         USING (P0E06,P0E06END),R3
         L     DFHEIBR,P0E06EIB   LOAD EIB ADDRESS
         MVC   E0E06ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0E06S        ADDRESS MAP
         USING EDF0E06S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0E06L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0E06TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0E06TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E06TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0E06AFT           EXIT IF NOT
* 'BEFORE' LOAD
         MVC   E0E06STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0E06REQ+4,C'B'    SET REQID
         OC    P0E06LEN,P0E06LEN  ANY LENGTH ?
         BZ    E0E06NLN           EXIT IF NONE
         MVC   E0E06LNO(10),=C'LENGTH    ' SET SUB-HEADER
E0E06NLN EQU   *
         OC    P0E06FLN,P0E06FLN  ANY FLENGTH ?
         BZ    E0E06NFL           EXIT IF NONE
         MVC   E0E06FLO(10),=C'FLENGTH   ' SET SUB-HEADER
E0E06NFL EQU   *
         MVI   E0E061RA,DFHBMASD  HIDE RESPONSE
         MVI   E0E062RA,DFHBMASD  HIDE EIBRESP2
         B     E0E06PRM           EXIT
*
E0E06AFT EQU   *
* 'AFTER' LOAD
         MVC   E0E06STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0E06REQ+4,C'A'    SET REQID
         OC    P0E06ENT,P0E06ENT  ANY ENTRY/SET ?
         BZ    E0E06NE2           EXIT IF NONE
* A(ENTRY/SET) AS ADDRESS X'00000000'
         MVC   E0E06WK2,P0E06ENT  MOVE A(ENTRY/SET)
         UNPK  E0E06WK1,E0E06WK2(5) UNPACK A(ENTRY/SET)
         TR    E0E06WK1(8),E0E06TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E06ETO(13),=C'ENTRY/SET (X''' SET TEMPLATE
         MVC   E0E06ETO+13(8),E0E06WK1 MOVE A(ENTRY/SET)
         MVHHI E0E06ETO+21,C''')'  SET ')
E0E06NE2 EQU   *
         OC    P0E06LEN,P0E06LEN  ANY LENGTH ?
         BZ    E0E06NL2           EXIT IF NONE
* LENGTH
         L     R5,P0E06LEN        R5=ADDRESS OF LENGTH
         LH    R5,0(R5)           R5=LENGTH
         CVD   R5,E0E06DEC        CONVERT TO DECIMAL
         MVC   E0E06LNO(10),=C'LENGTH    ' SET SUB-HEADER
         UNPK  E0E06LNO+11(5),E0E06DEC+5(3) UNPACK LENGTH
         OI    E0E06LNO+15,X'F0'  SET SIGN
         MVI   E0E06LNO+10,C'('   SET LENGTH OPEN BRACKET
         MVI   E0E06LNO+16,C')'   SET LENGTH CLOSE BRACKET
E0E06NL2 EQU   *
         OC    P0E06FLN,P0E06FLN  ANY FLENGTH ?
         BZ    E0E06NF2           EXIT IF NONE
* FLENGTH (00000000000)
         L     R5,P0E06FLN        R5=ADDRESS OF FLENGTH
         L     R5,0(R5)           R5=FLENGTH
         CVD   R5,E0E06DEC        CONVERT TO DECIMAL
         MVC   E0E06FLO(10),=C'FLENGTH   ' SET SUB-HEADER
         UNPK  E0E06FLO+11(11),E0E06DEC+2(6) UNPACK FLENGTH
         OI    E0E06FLO+21,X'F0'  SET SIGN
         MVI   E0E06FLO+10,C'('   SET FLENGTH OPEN BRACKET
         MVI   E0E06FLO+22,C')'   SET FLENGTH CLOSE BRACKET
E0E06NF2 EQU   *
* RESP/RESP2
         LA    R5,E0E06RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E06DEC        CONVERT TO DECIMAL
         UNPK  E0E06R2O,E0E06DEC+6(2) UNPACK EIBRESP2
         OI    E0E06R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0E06PRM           EXIT IF NONE
         UNPK  E0E06WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E06WK1(12),E0E06TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E06RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0E06RCO+12(12),E0E06WK1 SET EIBRCODE
E0E06PRM EQU   *
* PROGRAM
         MVI   E0E06PMO,C'('      SET OPEN BRACKET
         MVC   E0E06PMO+1(8),P0E06PGM SET PROGRAM
         MVI   E0E06PMO+9,C')'    SET CLOSE BRACKET
* NOHANDLE
         CLI   P0E06NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0E06CDE           EXIT IF NOT
         MVC   E0E06NHO,=C'NOHANDLE' SET NOHANDLE
E0E06CDE EQU   *
         L     R0,P0E06EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0E06PRO        SAVE PROGRAM NAME
         STG   R8,E0E06PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E06WK2        SAVE OFFSET
         UNPK  E0E06WK1(9),E0E06WK2(5) UNPACK OFFSET
         TR    E0E06WK1(8),E0E06TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0E06OFO,C'X'''    SET X'
         MVC   E0E06OFO+2(6),E0E06WK1+2 MOVE OFFSET
         MVI   E0E06OFO+8,C''''   SET ENDING QUOTE
* FOR LOAD THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0E06L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E06EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E06EDL        SAME ?
         BE    E0E06QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E06QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E06WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E06WK1) INITIMG(0)
         ST    R6,E0E06ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0E06L        LENGTH TO MOVE
         LA    R8,EDF0E06S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E06EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E06WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0E06L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E06EDL        LENGTH TO MOVE
         L     R8,P0E06EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E06ADD) LENGTH(E0E06WK1)                    X
                    QUEUE('0E06') REQID(E0E06REQ)
         EXEC  CICS FREEMAIN DATA(E0E06ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E06ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E06ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0E06DEC DC    PL8'0'
E0E06WK1 DS    XL9
E0E06ADD DS    0A
E0E06WK2 DS    XL4
E0E06REQ DC    CL8'0E06'
E0E06TBL DC    C'0123456789ABCDEF'
         LTORG
         DROP  R12
*
EDF0E08  DS    0H
* RETURN
* 'BEFORE' = RETURN (EDF0E08)
* 'AFTER'  = RETURN FAIL (EDF0E08)
* 'AFTER'  = TASK TERMINATION IF LINK LEVEL 0 (EDFKCP)
* 'AFTER'  = PROGRAM TERMINATION IF LINK LEVEL NOT 0 (EDFKCP)
         USING *,R12
         USING (P0E08,P0E08END),R3
         MVC   E0E08ESA,DFHEIBLK  SAVE EIB
         CLI   TCTTEEBA,X'FF'     'AFTER' COMMAND ?
         BE    E0E08AFT           EXIT IF IT IS
* 'BEFORE' RETURN
* 'AFTER'  RETURN FAIL
         LARL  R4,EDF0E08S        ADDRESS MAP
         USING EDF0E08S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0E08L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
         MVC   E0E08STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0E08REQ+4,C'B'    SET REQID
         MVI   E0E081RA,DFHBMASD  HIDE RESPONSE
         MVI   E0E082RA,DFHBMASD  HIDE EIBRESP2
         CLI   TCTTEEBA,X'00'     'BEFORE' LINK ?
         BE    E0E08BEF           EXIT IF IT IS
* 'AFTER' LINK FAIL
         MVC   E0E08STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0E08REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0E08RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E08DEC        CONVERT TO DECIMAL
         UNPK  E0E08R2O,E0E08DEC+6(2) UNPACK EIBRESP2
         OI    E0E08R2O+2,X'F0'   SET SIGN
         MVI   E0E081RA,DFHBMASB  SHOW RESPONSE
         MVI   E0E082RA,DFHBMASB  SHOW EIBRESP2
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0E08BEF           EXIT IF NONE
         UNPK  E0E08WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E08WK1(12),E0E08TBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E08RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0E08RCO+12(12),E0E08WK1 SET EIBRCODE
E0E08BEF EQU   *
* EIBTRNID
         MVC   E0E08TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0E08TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E08TNO+6,X'F0'   SET SIGN
         L     R0,P0E08EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0E08PRO        SAVE PROGRAM NAME
         STG   R8,E0E08PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E08WK2        SAVE OFFSET
         UNPK  E0E08WK1(9),E0E08WK2(5) UNPACK OFFSET
         TR    E0E08WK1(8),E0E08TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0E08OFO,C'X'''    SET X'
         MVC   E0E08OFO+2(6),E0E08WK1+2 MOVE OFFSET
         MVI   E0E08OFO+8,C''''   SET ENDING QUOTE
* SET UP MAP
*
* TRANSID  (....)
         OC    P0E08TRN,P0E08TRN  ANY TRANSID ?
         BZ    E0E08COM           EXIT IF NONE
         MVC   E0E08TRO(15),=C'TRANSID  (    )' SET FIELD
         MVC   E0E08TRO+10(4),P0E08TRN SET TRANSID
E0E08COM EQU   *
* COMMAREA (...//...)
         OC    P0E08COM,P0E08COM  ANY COMMAREA ?
         BZ    E0E08CHN           EXIT IF NONE
         MVC   E0E08CMO(10),=C'COMMAREA (' SET FIELD
         L     R5,P0E08COM        R5=COMMAREA ADDRESS
         LH    R6,P0E08CLN        R6=COMMAREA LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,67              >67 ?
         BNH   E0E08L67           EXIT IF NOT
         LA    R7,67              SET MAXIMUM LENGTH
E0E08L67 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0E08XMV        MOVE DATA IN CHAR FORM
         LA    R5,E0E08CMO+11(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
* LENGTH  (00000)
         MVC   E0E08LNO,=C'LENGTH   (00000)' SET FIELD
         LH    R5,P0E08CLN        R5=COMMAREA LENGTH
         CVD   R5,E0E08DEC        CONVERT TO DECIMAL
         UNPK  E0E08LNO+10(5),E0E08DEC+5(3) UNPACK LENGTH
         OI    E0E08LNO+14,X'F0'  SET SIGN
E0E08CHN EQU   *
* CHANNEL
         MVI   E0E08CHA,DFHBMASD  HIDE CHANNEL
         CLI   P0E08CHN,X'00'     ANY CHANNEL ?
         BE    E0E08IMM           EXIT IF NONE
         MVI   E0E08CHA,DFHBMASK  SHOW CHANNEL
         MVC   E0E08CHO,=C'CHANNEL  (................)' SET TEMPLATE
         MVC   E0E08CHO+10(16),P0E08CHN SET CHANNEL
E0E08IMM EQU   *
         CLI   P0E08IMM,X'FF'     IMMEDIATE ?
         BNE   E0E08DUN           EXIT IF NOT
* IMMEDIATE
         MVC   E0E08IMO,=C'IMMEDIATE' SET FIELD
E0E08DUN EQU   *
* FOR RETURN THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0E08L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E08EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E08EDL        SAME ?
         BE    E0E08QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E08QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E08WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E08WK1) INITIMG(0)
         ST    R6,E0E08ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0E08L        LENGTH TO MOVE
         LA    R8,EDF0E08S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E08EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E08WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0E08L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E08EDL        LENGTH TO MOVE
         L     R8,P0E08EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* 'BEFORE' RETURN
* 'AFTER'  RETURN FAIL
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E08ADD) LENGTH(E0E08WK1)                    X
                    QUEUE('0E08') REQID(E0E08REQ)
         EXEC  CICS FREEMAIN DATA(E0E08ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E08ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E08XMV MVC   E0E08CMO+10(0),0(R5) MOVE COMMAREA IN CHAR FORM
*
E0E08AFT EQU   *
* 'AFTER' RETURN - TASK TERMINATION IF LINK LEVEL = 0
*                - PROGRAM TERMINATION IF LINK LEVEL <> 0
         LARL  R4,EDFKCPS         ADDRESS MAP
         USING EDFKCPS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDFKCPL         LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
         MVI   E0E08REQ+4,C'A'    SET REQID
* SET UP MAP
* EIBTRNID
         MVC   EKCPTSO,EIBTRNID   MOVE TRANSID
* EIBTASKN
         UNPK  EKCPTNO,EIBTASKN   UNPACK TASK NUMBER
         OI    EKCPTNO+6,X'F0'    SET SIGN
         SR    R5,R5              CLEAR R5
         ICM   R5,3,TCTTELNK      ARE WE AT ROOT LEVEL ?
         BZ    EKCPROOT           EXIT IF WE ARE
* PROGRAM TERMINATION
         MVI   EKCPENA,DFHBMASB   SHOW ENTER
         MVI   EKCPP3A,DFHBMASB   SHOW PF3
         MVI   EKCPSTC,DFHYELLO   SET TO DEFAULT COLOUR
         MVC   EKCPSTO,EKCPAC3    SET STATUS: PROGRAM TERMINATION
         CVD   R5,E0E08DEC        CONVERT LINK-LEVEL TO DECIMAL
         UNPK  EKCPSTO+27(3),E0E08DEC+6(2) UNPACK
         MVI   EKCPSTO+27,C' '    BLANK 1ST
         OI    EKCPSTO+29,X'F0'   SET SIGN
         MVC   EKCPQNM,=CL8'0E08PT' SET PROGRAM TERMINATION QUEUE
         B     EKCPNONX           EXIT
*
EKCPROOT EQU   *
* TASK TERMINATION
         MVI   EKCPENKA,DFHBMASD  HIDE ENTER
         MVI   EKCPENA,DFHBMASD   HIDE ENTER DATA
         MVI   EKCPP3A,DFHBMASD   HIDE PF3
         MVI   EKCPPCA,DFHBMASD   HIDE PF12
         MVI   EKCPSTC,DFHNEUTR   SET STATUS TO WHITE
         MVC   EKCPSTO,EKCPAC1    DEFAULT TO STATUS: NO TRANSID
         MVC   EKCPQNM,=CL8'0E08KC' SET TASK TERMINATION QUEUE
         OC    TCTTETC,TCTTETC    ANY NEXT TRANSID ?
         BZ    EKCPNONX           EXIT IF NOT
         MVC   EKCPSTO,EKCPAC2    NEXT TRANSID MESSAGE
         MVC   EKCPSTO+27(4),TCTTETC MOVE TRANSID INTO MESSAGE
EKCPNONX EQU   *
         LA    R5,EKCPRPO         R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E08DEC        CONVERT TO DECIMAL
         UNPK  EKCPR2O,E0E08DEC+6(2) UNPACK EIBRESP2
         OI    EKCPR2O+2,X'F0'    SET SIGN
         L     R0,P0E08EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,EKCPPRO         SAVE PROGRAM NAME
         STG   R8,EKCPPGO         SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E08WK2        SAVE OFFSET
         UNPK  E0E08WK1(9),E0E08WK2(5) UNPACK OFFSET
         TR    E0E08WK1(8),E0E08TBL-240 CONVERT TO DISPLAY HEX
         MVHHI EKCPOFO,C'X'''     SET X'
         MVC   EKCPOFO+2(6),E0E08WK1+2 MOVE OFFSET
         MVI   EKCPOFO+8,C''''    SET ENDING QUOTE
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
* TASK TERMINATION
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(EDFKCPS) LENGTH(=AL2(EDFKCPL))                X
                    QUEUE(EKCPQNM) REQID(E0E08REQ)
* TASK TERMINATION WILL JUST WAIT FOR SOMETHING TO HAPPEN
         CLC   EKCPQNM,=CL8'0E08PT' PROGRAM TERMINATION ?
         BNE   EKCPPR             EXIT IF NOT
* FOR PROGRAM TERMINATION, Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         DROP  R9
EKCPPR   EQU   *
         MVC   DFHEIBLK(EIBLENG),E0E08ESA RESTORE EIB
         PR    ,                  UNSTACK AND RETURN TO Z390KCP
*
E0E08ESA DS    CL(EIBLENG)        EIB SAVE AREA
E0E08DEC DS    PL8
E0E08WK1 DS    XL9
E0E08ADD DS    0A
E0E08WK2 DS    XL4
E0E08REQ DC    CL8'0E08'
E0E08TBL DC    C'0123456789ABCDEF'
EKCPQNM  DS    CL8
EKCPAC1  DC    CL35'TASK TERMINATION : NO TRANSID SET'
EKCPAC2  DC    CL35'TASK TERMINATION : TRANSID .... SET'
EKCPAC3  DC    CL35'PROGRAM TERMINATION : LEVEL ..'
         LTORG
         DROP  R12
*
EDF0E0A  DS    0H
* RELEASE
         USING *,R12
         USING (P0E0A,P0E0AEND),R3
         L     DFHEIBR,P0E0AEIB   LOAD EIB ADDRESS
         MVC   E0E0AESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0E0AS        ADDRESS MAP
         USING EDF0E0AS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0E0AL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0E0ATSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0E0ATNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E0ATNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0E0AAFT           EXIT IF NOT
* 'BEFORE' RELEASE
         MVC   E0E0ASTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0E0AREQ+4,C'B'    SET REQID
         MVI   E0E0A1RA,DFHBMASD  HIDE RESPONSE
         MVI   E0E0A2RA,DFHBMASD  HIDE EIBRESP2
         B     E0E0APRM           EXIT
*
E0E0AAFT EQU   *
* 'AFTER' RELEASE
         MVC   E0E0ASTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0E0AREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0E0ARPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E0ADEC        CONVERT TO DECIMAL
         UNPK  E0E0AR2O,E0E0ADEC+6(2) UNPACK EIBRESP2
         OI    E0E0AR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0E0APRM           EXIT IF NONE
         UNPK  E0E0AWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E0AWK1(12),E0E0ATBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E0ARCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0E0ARCO+12(12),E0E0AWK1 SET EIBRCODE
E0E0APRM EQU   *
* PROGRAM
         MVI   E0E0APMO,C'('      SET OPEN BRACKET
         MVC   E0E0APMO+1(8),P0E0APGM SET PROGRAM
         MVI   E0E0APMO+9,C')'    SET CLOSE BRACKET
* NOHANDLE
         CLI   P0E0ANOH,X'FF'     ANY NOHANDLE ?
         BNE   E0E0ACDE           EXIT IF NOT
         MVC   E0E0ANHO,=C'NOHANDLE' SET NOHANDLE
E0E0ACDE EQU   *
         L     R0,P0E0AEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0E0APRO        SAVE PROGRAM NAME
         STG   R8,E0E0APGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E0AWK2        SAVE OFFSET
         UNPK  E0E0AWK1(9),E0E0AWK2(5) UNPACK OFFSET
         TR    E0E0AWK1(8),E0E0ATBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0E0AOFO,C'X'''    SET X'
         MVC   E0E0AOFO+2(6),E0E0AWK1+2 MOVE OFFSET
         MVI   E0E0AOFO+8,C''''   SET ENDING QUOTE
* FOR RELEASE THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0E0AL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E0AEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E0AEDL        SAME ?
         BE    E0E0AQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E0AQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E0AWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E0AWK1) INITIMG(0)
         ST    R6,E0E0AADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0E0AL        LENGTH TO MOVE
         LA    R8,EDF0E0AS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E0AEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E0AWK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0E0AL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E0AEDL        LENGTH TO MOVE
         L     R8,P0E0AEDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E0AADD) LENGTH(E0E0AWK1)                    X
                    QUEUE('0E0A') REQID(E0E0AREQ)
         EXEC  CICS FREEMAIN DATA(E0E0AADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E0AESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E0AESA DS    CL(EIBLENG)        EIB SAVE AREA
E0E0ADEC DC    PL8'0'
E0E0AWK1 DS    XL9
E0E0AADD DS    0A
E0E0AWK2 DS    XL4
E0E0AREQ DC    CL8'0E0A'
E0E0ATBL DC    C'0123456789ABCDEF'
         LTORG
         DROP  R12
*
EDF0E0C  DS    0H
* ABEND
         USING *,R12
         USING (P0E0C,P0E0CEND),R3
         L     DFHEIBR,P0E0CEIB   LOAD EIB ADDRESS
         MVC   E0E0CESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0E0CS        ADDRESS MAP
         USING EDF0E0CS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0E0CL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0E0CTSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0E0CTNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E0CTNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0E0CAFT           EXIT IF NOT
* 'BEFORE' ABEND
         MVC   E0E0CSTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0E0CREQ+4,C'B'    SET REQID
         MVI   E0E0C1RA,DFHBMASD  HIDE RESPONSE
         MVI   E0E0C2RA,DFHBMASD  HIDE EIBRESP2
         B     E0E0CPRM           EXIT
*
E0E0CAFT EQU   *
* 'AFTER' ABEND
         MVC   E0E0CSTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0E0CREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E0E0CRPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E0CDEC        CONVERT TO DECIMAL
         UNPK  E0E0CR2O,E0E0CDEC+6(2) UNPACK EIBRESP2
         OI    E0E0CR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0E0CPRM           EXIT IF NONE
         UNPK  E0E0CWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E0CWK1(12),E0E0CTBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E0CRCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0E0CRCO+12(12),E0E0CWK1 SET EIBRCODE
E0E0CPRM EQU   *
* ABCODE (....)
         MVI   E0E0CABO,C'('      SET OPEN BRACKET
         MVC   E0E0CABO+1(4),P0E0CABC SET ABCODE
         MVI   E0E0CABO+5,C')'    SET CLOSE BRACKET
* NODUMP
         CLI   P0E0CNOD,X'FF'     ANY NODUMP ?
         BNE   E0E0CCAN           EXIT IF NOT
         MVC   E0E0CNDO,=C'NODUMP' SET NODUMP
E0E0CCAN EQU   *
* CANCEL
         CLI   P0E0CCAN,X'FF'     ANY CANCEL ?
         BNE   E0E0CNOH           EXIT IF NOT
         MVC   E0E0CCNO,=C'CANCEL' SET CANCEL
E0E0CNOH EQU   *
         CLI   P0E0CNOH,X'FF'     ANY NOHANDLE ?
         BNE   E0E0CCDE           EXIT IF NOT
         MVC   E0E0CNHO,=C'NOHANDLE' SET NOHANDLE
E0E0CCDE EQU   *
         L     R0,P0E0CEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0E0CPRO        SAVE PROGRAM NAME
         STG   R8,E0E0CPGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E0CWK2        SAVE OFFSET
         UNPK  E0E0CWK1(9),E0E0CWK2(5) UNPACK OFFSET
         TR    E0E0CWK1(8),E0E0CTBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0E0COFO,C'X'''    SET X'
         MVC   E0E0COFO+2(6),E0E0CWK1+2 MOVE OFFSET
         MVI   E0E0COFO+8,C''''   SET ENDING QUOTE
* FOR ABEND THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0E0CL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E0CEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E0CEDL        SAME ?
         BE    E0E0CQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E0CQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E0CWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E0CWK1) INITIMG(0)
         ST    R6,E0E0CADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0E0CL        LENGTH TO MOVE
         LA    R8,EDF0E0CS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E0CEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E0CWK1        GETMAIN LENGTH
         AHI   R9,-(EDF0E0CL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P0E0CEDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E0CADD) LENGTH(E0E0CWK1)                    X
                    QUEUE('0E0C') REQID(E0E0CREQ)
         EXEC  CICS FREEMAIN DATA(E0E0CADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E0CESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E0CESA DS    CL(EIBLENG)        EIB SAVE AREA
E0E0CDEC DS    PL8
E0E0CWK1 DS    XL9
E0E0CADD DS    0A
E0E0CWK2 DS    XL4
E0E0CREQ DC    CL8'0E0C'
E0E0CTBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF0E0E  DS    0H
* HANDLE ABEND
         USING *,R12
         USING (P0E0E,P0E0EEND),R3
         L     DFHEIBR,P0E0EEIB   LOAD EIB ADDRESS
         MVC   E0E0EESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF0E0ES        ADDRESS MAP
         USING EDF0E0ES,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF0E0EL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E0E0ETSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E0E0ETNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E0ETNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0E0EAFT           EXIT IF NOT
* 'BEFORE' HANDLE ABEND
         MVC   E0E0ESTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E0E0EREQ+4,C'B'    SET REQID
         CLI   P0E0ECAN,X'FF'     CANCEL ?
         BNE   E0E0ERES           EXIT IF NOT
         MVC   E0E0ECRO,=C'CANCEL' SET CANCEL
         B     E0E0EDUN           EXIT
*
E0E0ERES EQU   *
         CLI   P0E0ERES,X'FF'     RESET ?
         BNE   E0E0ELAB           EXIT IF NOT
         MVC   E0E0ECRO,=C'RESET ' SET RESET
         B     E0E0EDUN           EXIT
*
E0E0ELAB EQU   *
         OC    P0E0ELAB,P0E0ELAB  ANY LABEL ?
         BZ    E0E0EPGM           EXIT IF NONE
* LABEL (X'00000000')  +X'000000'
         MVC   E0E0EPLO,=C'LABEL (X''00000000'')  +X''000000''' TMPLATE
         MVC   E0E0EWK2(4),P0E0ELAB MOVE LABEL
         UNPK  E0E0EWK1(9),E0E0EWK2(5) UNPACK LABEL
         TR    E0E0EWK1(8),E0E0ETBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E0EPLO+9(8),E0E0EWK1 SET LABEL
         L     R0,P0E0ELAB        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         ST    R9,E0E0EWK2        SAVE OFFSET
         UNPK  E0E0EWK1(9),E0E0EWK2(5) UNPACK OFFSET
         TR    E0E0EWK1(8),E0E0ETBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E0EPLO+24(6),E0E0EWK1+2 MOVE OFFSET
         B     E0E0EDUN           EXIT
*
E0E0EPGM EQU   *
* PROGRAM (........)
         MVC   E0E0EPLO(18),=C'PROGRAM (........)' SET TEMPLATE
         MVC   E0E0EPLO+9(8),P0E0EPGM SET PROGRAM
E0E0EDUN EQU   *
         MVI   E0E0E1RA,DFHBMASD  HIDE RESPONSE
         MVI   E0E0E2RA,DFHBMASD  HIDE EIBRESP2
         B     E0E0EPRM           EXIT
*
E0E0EAFT EQU   *
* 'AFTER' HANDLE ABEND
         MVC   E0E0ESTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E0E0EREQ+4,C'A'    SET REQID
         CLI   P0E0ECAN,X'FF'     CANCEL ?
         BNE   E0E0ERS2           EXIT IF NOT
         MVC   E0E0ECRO,=C'CANCEL' SET CANCEL
         B     E0E0EDN2           EXIT
*
E0E0ERS2 EQU   *
         CLI   P0E0ERES,X'FF'     RESET ?
         BNE   E0E0ELB2           EXIT IF NOT
         MVC   E0E0ECRO,=C'RESET ' SET RESET
         B     E0E0EDN2           EXIT
*
E0E0ELB2 EQU   *
         OC    P0E0ELAB,P0E0ELAB  ANY LABEL ?
         BZ    E0E0EPG2           EXIT IF NONE
* LABEL (X'00000000')  +X'000000'
         MVC   E0E0EPLO,=C'LABEL (X''00000000'')  +X''000000''' TMPLATE
         MVC   E0E0EWK2(4),P0E0ELAB MOVE LABEL
         UNPK  E0E0EWK1(9),E0E0EWK2(5) UNPACK LABEL
         TR    E0E0EWK1(8),E0E0ETBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E0EPLO+9(8),E0E0EWK1 SET LABEL
         L     R0,P0E0ELAB        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         ST    R9,E0E0EWK2        SAVE OFFSET
         UNPK  E0E0EWK1(9),E0E0EWK2(5) UNPACK OFFSET
         TR    E0E0EWK1(8),E0E0ETBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E0EPLO+24(6),E0E0EWK1+2 MOVE OFFSET
         B     E0E0EDN2           EXIT
*
E0E0EPG2 EQU   *
* PROGRAM (........)
         MVC   E0E0EPLO(18),=C'PROGRAM (........)' SET TEMPLATE
         MVC   E0E0EPLO+9(8),P0E0EPGM SET PROGRAM
E0E0EDN2 EQU   *
* RESP/RESP2
         LA    R5,E0E0ERPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E0EDEC        CONVERT TO DECIMAL
         UNPK  E0E0ER2O,E0E0EDEC+6(2) UNPACK EIBRESP2
         OI    E0E0ER2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E0E0EPRM           EXIT IF NONE
         UNPK  E0E0EWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E0E0EWK1(12),E0E0ETBL-240 CONVERT TO DISPLAY HEX
         MVC   E0E0ERCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E0E0ERCO+12(12),E0E0EWK1 SET EIBRCODE
E0E0EPRM EQU   *
         L     R0,P0E0EEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E0E0EPRO        SAVE PROGRAM NAME
         STG   R8,E0E0EPGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E0E0EWK2        SAVE OFFSET
         UNPK  E0E0EWK1(9),E0E0EWK2(5) UNPACK OFFSET
         TR    E0E0EWK1(8),E0E0ETBL-240 CONVERT TO DISPLAY HEX
         MVHHI E0E0EOFO,C'X'''    SET X'
         MVC   E0E0EOFO+2(6),E0E0EWK1+2 MOVE OFFSET
         MVI   E0E0EOFO+8,C''''   SET ENDING QUOTE
* FOR HANDLE ABEND THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF0E0EL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P0E0EEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P0E0EEDL        SAME ?
         BE    E0E0EQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E0E0EQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E0E0EWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E0E0EWK1) INITIMG(0)
         ST    R6,E0E0EADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF0E0EL        LENGTH TO MOVE
         LA    R8,EDF0E0ES        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P0E0EEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E0E0EWK1        MAP+DSA LENGTH
         AHI   R9,-(EDF0E0EL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P0E0EEDL        LENGTH TO MOVE
         L     R8,P0E0EEDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E0E0EADD) LENGTH(E0E0EWK1)                    X
                    QUEUE('0E0E') REQID(E0E0EREQ)
         EXEC  CICS FREEMAIN DATA(E0E0EADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E0E0EESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E0E0EESA DS    CL(EIBLENG)        EIB SAVE AREA
E0E0EDEC DS    PL8
E0E0EWK1 DS    XL9
E0E0EADD DS    0A
E0E0EWK2 DS    XL4
E0E0EREQ DC    CL8'0E0E'
E0E0ETBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF1002  DS    0H
* ASKTIME
         USING *,R12
         USING (P1002,P1002END),R3
         L     DFHEIBR,P1002EIB   LOAD EIB ADDRESS
         MVC   E1002ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1002S        ADDRESS MAP
         USING EDF1002S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1002L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1002TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1002TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1002TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1002AFT           EXIT IF NOT
* 'BEFORE' ASKTIME
* 'BEFORE' ASKTIME ABSTIME
         MVC   E1002STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1002REQ+4,C'B'    SET REQID
         MVI   E10021RA,DFHBMASD  HIDE RESPONSE
         MVI   E10022RA,DFHBMASD  HIDE EIBRESP2
         B     E1002PRM           EXIT
*
E1002AFT EQU   *
* 'AFTER' ASKTIME
         MVC   E1002STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1002REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1002RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1002DEC        CONVERT TO DECIMAL
         UNPK  E1002R2O,E1002DEC+6(2) UNPACK EIBRESP2
         OI    E1002R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1002PRM           EXIT IF NONE
         UNPK  E1002WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1002WK1(12),E1002TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1002RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1002RCO+12(12),E1002WK1 SET EIBRCODE
E1002PRM EQU   *
         MVI   E1002ABA,DFHBMASD  HIDE ABSTIME
         MVC   E1002FNO,=C'X''1002''' SET FUNCTION CODE
         CLI   P1002ABS,X'FF'     ABSTIME REQUESTED ?
         BNE   E1002NAB           EXIT IF NOT
         MVI   E1002ABA,DFHBMASK  SHOW ABSTIME
         MVC   E1002FNO,=C'X''4A02''' SET FUNCTION CODE
E1002NAB EQU   *
         CLI   P1002NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1002CDE           EXIT IF NOT
         MVC   E1002NHO,=C'NOHANDLE' SET NOHANDLE
E1002CDE EQU   *
         L     R0,P1002EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1002PRO        SAVE PROGRAM NAME
         STG   R8,E1002PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1002WK2        SAVE OFFSET
         UNPK  E1002WK1(9),E1002WK2(5) UNPACK OFFSET
         TR    E1002WK1(8),E1002TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1002OFO,C'X'''    SET X'
         MVC   E1002OFO+2(6),E1002WK1+2 MOVE OFFSET
         MVI   E1002OFO+8,C''''   SET ENDING QUOTE
* FOR ASKTIME THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1002L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1002EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1002EDL        SAME ?
         BE    E1002QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1002QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1002WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1002WK1) INITIMG(0)
         ST    R6,E1002ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1002L        LENGTH TO MOVE
         LA    R8,EDF1002S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1002EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1002WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1002L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1002EDL        LENGTH TO MOVE
         L     R8,P1002EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1002ADD) LENGTH(E1002WK1)                    X
                    QUEUE('1002') REQID(E1002REQ)
         EXEC  CICS FREEMAIN DATA(E1002ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1002ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1002ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1002DEC DS    PL8
E1002WK1 DS    XL9
E1002ADD DS    0A
E1002WK2 DS    XL4
E1002REQ DC    CL8'1002'
E1002TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF1004  DS    0H
* DELAY
         USING *,R12
         USING (P1004,P1004END),R3
         L     DFHEIBR,P1004EIB   LOAD EIB ADDRESS
         MVC   E1004ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1004S        ADDRESS MAP
         USING EDF1004S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1004L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1004TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1004TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1004TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1004AFT           EXIT IF NOT
* 'BEFORE' DELAY
         MVC   E1004STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1004REQ+4,C'B'    SET REQID
         MVI   E10041RA,DFHBMASD  HIDE RESPONSE
         MVI   E10042RA,DFHBMASD  HIDE EIBRESP2
         B     E1004PRM           EXIT
*
E1004AFT EQU   *
* 'AFTER' DELAY
         MVC   E1004STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1004REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1004RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1004DEC        CONVERT TO DECIMAL
         UNPK  E1004R2O,E1004DEC+6(2) UNPACK EIBRESP2
         OI    E1004R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1004PRM           EXIT IF NONE
         UNPK  E1004WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1004WK1(12),E1004TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1004RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1004RCO+12(12),E1004WK1 SET EIBRCODE
E1004PRM EQU   *
         CLI   P1004INT,X'FF'     INTERVAL/TIME REQUESTED ?
         BNE   E1004NIT           EXIT IF NOT
* INTERVAL (HH:MM:SS)
* TIME     (HH:MM:SS)
         MVC   E1004ITO+8(11),=C' (HH:MM:SS)' MOVE TEMPLATE
         UNPK  E1004WK1(7),P1004HMS UNPACK HMS
         MVC   E1004ITO+10(2),E1004WK1+1 MOVE HOURS
         MVC   E1004ITO+13(2),E1004WK1+3 MOVE MINUTES
         MVC   E1004ITO+16(2),E1004WK1+5 MOVE SECONDS
         OI    E1004ITO+17,X'F0'  SET SIGN
         MVC   E1004ITO(8),=C'INTERVAL' SET INTERVAL
         CLI   P1004TME,X'FF'     IS IT TIME ?
         BNE   E1004RQD           EXIT IF NOT
         MVC   E1004ITO(8),=C'TIME    ' SET TIME
         B     E1004RQD           EXIT
*
E1004NIT EQU   *
* INTERVAL/TIME
         MVC   E1004ITO(8),=C'INTERVAL' SET INTERVAL
         CLI   P1004TME,X'FF'     IS IT TIME ?
         BNE   E1004DFU           EXIT IF NOT
         MVC   E1004ITO(8),=C'TIME    ' SET TIME
E1004DFU EQU   *
         MVC   E1004FUO(5),=C'FOR  ' SET FOR
         CLI   P1004TME,X'FF'     IS IT UNTIL ?
         BNE   E1004HMS           EXIT IF NOT
         MVC   E1004FUO(5),=C'UNTIL' SET UNTIL
E1004HMS EQU   *
         CLI   P1004IND,X'FF'     MORE THAN 1 HMS PARM ?
         BE    E1004GT1           EXIT IF THERE IS
* ONLY 1 HMS PARM
* IF HOURS(0) OR MINUTES(0) IS SPECIFIED THEN SECONDS(000000)
*    WILL BE DISPLAYED
* FOR/UNTIL HOURS (99)
* FOR/UNTIL MINUTES (9999)
* FOR/UNTIL SECONDS (999999)
         CP    P1004HRS,=P'0'     ANY HOURS ?
         BE    E1004TMN           EXIT IF NONE
* HOURS
         MVC   E1004FUO+5(11),=C' HOURS (99)' SET TEMPLATE
         UNPK  E1004WK1(3),P1004HRS+6(2) UNPACK HOURS
         MVC   E1004FUO+13(2),E1004WK1+1 SET HOURS
         OI    E1004FUO+14,X'F0'  SET SIGN
         B     E1004RQD           EXIT
*
E1004TMN EQU   *
         CP    P1004MIN,=P'0'     ANY MINUTES ?
         BE    E1004TSC           EXIT IF NONE
* MINUTES
         MVC   E1004FUO+5(15),=C' MINUTES (9999)' SET TEMPLATE
         UNPK  E1004WK1(5),P1004MIN+5(3) UNPACK MINUTES
         MVC   E1004FUO+15(4),E1004WK1+1 SET MINUTES
         OI    E1004FUO+18,X'F0'  SET SIGN
         B     E1004RQD           EXIT
*
E1004TSC EQU   *
* MUST BE SECONDS
         MVC   E1004FUO+5(17),=C' SECONDS (999999)' SET TEMPLATE
         UNPK  E1004WK1(7),P1004SEC+4(4) UNPACK SECONDS
         MVC   E1004FUO+15(6),E1004WK1+1 SET SECONDS
         OI    E1004FUO+20,X'F0'  SET SIGN
         B     E1004RQD           EXIT
*
E1004GT1 EQU   *
* MORE THAN 1 HMS PARM
* FOR/UNTIL HOURS (99) MINUTES (99) SECONDS (99)
         MVC   E1004FUO+5(37),=C' HOURS (99) MINUTES (99) SECONDS (99)'-
                SET TEMPLATE
         UNPK  E1004WK1(3),P1004HRS+6(2) UNPACK HOURS
         MVC   E1004FUO+13(2),E1004WK1+1 SET HOURS
         OI    E1004FUO+14,X'F0'  SET SIGN
         UNPK  E1004WK1(3),P1004MIN+6(2) UNPACK MINUTES
         MVC   E1004FUO+26(2),E1004WK1+1 SET MINUTES
         OI    E1004FUO+27,X'F0'  SET SIGN
         UNPK  E1004WK1(3),P1004SEC+6(2) UNPACK SECONDS
         MVC   E1004FUO+39(2),E1004WK1+1 SET SECONDS
         OI    E1004FUO+40,X'F0'  SET SIGN
E1004RQD EQU   *
* REQID
         OC    P1004REQ,P1004REQ  ANY REQID ?
         BZ    E1004NOH           EXIT IF NONE
         MVC   E1004RQO(16),=C'REQID (........)' SET TEMPLATE
         MVC   E1004RQO+7(8),P1004REQ SET REQID
E1004NOH EQU   *
* NOHANDLE
         CLI   P1004NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1004CDE           EXIT IF NOT
         MVC   E1004NHO,=C'NOHANDLE' SET NOHANDLE
E1004CDE EQU   *
         L     R0,P1004EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1004PRO        SAVE PROGRAM NAME
         STG   R8,E1004PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1004WK2        SAVE OFFSET
         UNPK  E1004WK1(9),E1004WK2(5) UNPACK OFFSET
         TR    E1004WK1(8),E1004TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1004OFO,C'X'''    SET X'
         MVC   E1004OFO+2(6),E1004WK1+2 MOVE OFFSET
         MVI   E1004OFO+8,C''''   SET ENDING QUOTE
* FOR DELAY THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1004L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1004EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1004EDL        SAME ?
         BE    E1004QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1004QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1004WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1004WK1) INITIMG(0)
         ST    R6,E1004ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1004L        LENGTH TO MOVE
         LA    R8,EDF1004S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1004EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1004WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1004L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1004EDL        LENGTH TO MOVE
         L     R8,P1004EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1004ADD) LENGTH(E1004WK1)                    X
                    QUEUE('1004') REQID(E1004REQ)
         EXEC  CICS FREEMAIN DATA(E1004ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1004ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1004ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1004DEC DS    PL8
E1004WK1 DS    XL9
E1004ADD DS    0A
E1004WK2 DS    XL4
E1004REQ DC    CL8'1004'
E1004TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF1008  DS    0H
* START
         USING *,R12
         USING (P1008,P1008END),R3
         L     DFHEIBR,P1008EIB   LOAD EIB ADDRESS
         MVC   E1008ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1008S        ADDRESS MAP
         USING EDF1008S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1008L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1008TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1008TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1008TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1008AFT           EXIT IF NOT
* 'BEFORE' START
         MVC   E1008STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1008REQ+4,C'B'    SET REQID
         MVI   E10081RA,DFHBMASD  HIDE RESPONSE
         MVI   E10082RA,DFHBMASD  HIDE EIBRESP2
         B     E1008PRM           EXIT
*
E1008AFT EQU   *
* 'AFTER' START
         MVC   E1008STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1008REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1008RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1008DEC        CONVERT TO DECIMAL
         UNPK  E1008R2O,E1008DEC+6(2) UNPACK EIBRESP2
         OI    E1008R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1008PRM           EXIT IF NONE
         UNPK  E1008WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1008WK1(12),E1008TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1008RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1008RCO+12(12),E1008WK1 SET EIBRCODE
E1008PRM EQU   *
* TRANSID  @(....)
         MVI   E1008TIO,C'('      SET TRANSID OPEN BRACKET
         MVC   E1008TIO+1(4),P1008TRN SET TRANSID
         MVI   E1008TIO+5,C')'    SET TRANSID CLOSE BRACKET
         CLI   P1008INT,X'FF'     INTERVAL/TIME REQUESTED ?
         BNE   E1008NIT           EXIT IF NOT
* INTERVAL (HH:MM:SS)
* TIME     (HH:MM:SS)
         MVC   E1008ITO+8(12),=C'  (HH:MM:SS)' MOVE TEMPLATE
         UNPK  E1008WK1(7),P1008HMS UNPACK HMS
         MVC   E1008ITO+11(2),E1008WK1+1 MOVE HOURS
         MVC   E1008ITO+14(2),E1008WK1+3 MOVE MINUTES
         MVC   E1008ITO+17(2),E1008WK1+5 MOVE SECONDS
         OI    E1008ITO+18,X'F0'  SET SIGN
         MVC   E1008ITO(8),=C'INTERVAL' SET INTERVAL
         CLI   P1008TME,X'FF'     IS IT TIME ?
         BNE   E1008RQD           EXIT IF NOT
         MVC   E1008ITO(8),=C'TIME    ' SET TIME
         B     E1008RQD           EXIT
*
E1008NIT EQU   *
* INTERVAL/TIME
         MVC   E1008ITO(8),=C'INTERVAL' SET INTERVAL
         CLI   P1008TME,X'FF'     IS IT TIME ?
         BNE   E1008DFU           EXIT IF NOT
         MVC   E1008ITO(8),=C'TIME    ' SET TIME
E1008DFU EQU   *
         MVC   E1008FUO(5),=C'FOR  ' SET FOR
         CLI   P1008TME,X'FF'     IS IT UNTIL ?
         BNE   E1008HMS           EXIT IF NOT
         MVC   E1008FUO(5),=C'UNTIL' SET UNTIL
E1008HMS EQU   *
         CLI   P1008IND,X'FF'     MORE THAN 1 HMS PARM ?
         BE    E1008GT1           EXIT IF THERE IS
* ONLY 1 HMS PARM
* IF HOURS(0) OR MINUTES(0) IS SPECIFIED THEN SECONDS(000000)
*    WILL BE DISPLAYED
* FOR/UNTIL HOURS (99)
* FOR/UNTIL MINUTES (9999)
* FOR/UNTIL SECONDS (999999)
         CP    P1008HRS,=P'0'     ANY HOURS ?
         BE    E1008TMN           EXIT IF NONE
* HOURS
         MVC   E1008FUO+5(11),=C' HOURS (99)' SET TEMPLATE
         UNPK  E1008WK1(3),P1008HRS+6(2) UNPACK HOURS
         MVC   E1008FUO+13(2),E1008WK1+1 SET HOURS
         OI    E1008FUO+14,X'F0'  SET SIGN
         B     E1008RQD           EXIT
*
E1008TMN EQU   *
         CP    P1008MIN,=P'0'     ANY MINUTES ?
         BE    E1008TSC           EXIT IF NONE
* MINUTES
         MVC   E1008FUO+5(15),=C' MINUTES (9999)' SET TEMPLATE
         UNPK  E1008WK1(5),P1008MIN+5(3) UNPACK MINUTES
         MVC   E1008FUO+15(4),E1008WK1+1 SET MINUTES
         OI    E1008FUO+18,X'F0'  SET SIGN
         B     E1008RQD           EXIT
*
E1008TSC EQU   *
* MUST BE SECONDS
         MVC   E1008FUO+5(17),=C' SECONDS (999999)' SET TEMPLATE
         UNPK  E1008WK1(7),P1008SEC+4(4) UNPACK SECONDS
         MVC   E1008FUO+15(6),E1008WK1+1 SET SECONDS
         OI    E1008FUO+20,X'F0'  SET SIGN
         B     E1008RQD           EXIT
*
E1008GT1 EQU   *
* MORE THAN 1 HMS PARM
* FOR/UNTIL HOURS (99) MINUTES (99) SECONDS (99)
         MVC   E1008FUO+5(37),=C' HOURS (99) MINUTES (99) SECONDS (99)'-
                SET TEMPLATE
         UNPK  E1008WK1(3),P1008HRS+6(2) UNPACK HOURS
         MVC   E1008FUO+13(2),E1008WK1+1 SET HOURS
         OI    E1008FUO+14,X'F0'  SET SIGN
         UNPK  E1008WK1(3),P1008MIN+6(2) UNPACK MINUTES
         MVC   E1008FUO+26(2),E1008WK1+1 SET MINUTES
         OI    E1008FUO+27,X'F0'  SET SIGN
         UNPK  E1008WK1(3),P1008SEC+6(2) UNPACK SECONDS
         MVC   E1008FUO+39(2),E1008WK1+1 SET SECONDS
         OI    E1008FUO+40,X'F0'  SET SIGN
E1008RQD EQU   *
* REQID (........)
         OC    P1008REQ,P1008REQ  ANY REQID ?
         BZ    E1008FRM           EXIT IF NONE
         MVC   E1008RQO(20),=C'REQID     (........)' SET TEMPLATE
         MVC   E1008RQO+11(8),P1008REQ SET REQID
E1008FRM EQU   *
* FROM (...//...)
         OC    P1008FRM,P1008FRM  ANY FROM/LENGTH ?
         BZ    E1008TRM           EXIT IF NONE
         MVC   E1008FMO(11),=C'FROM      (' MOVE TEMPLATE
         L     R5,P1008FRM        FROM ADDRESS
         L     R6,P1008LEN        R6=LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E1008LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E1008L66           EXIT
*
E1008LOK EQU   *
         CHI   R7,66              >66 ?
         BNH   E1008L66           EXIT IF IT IS
         LA    R7,66              SET MAXIMUM LENGTH
E1008L66 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E1008XMV        MOVE DATA IN CHAR FORM
         LA    R5,E1008FMO+12(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
* LENGTH (00000000000)
         MVC   E1008LNO,=C'LENGTH    (00000000000)' MOVE TEMPLATE
         L     R5,P1008LEN        R5=LENGTH
         CVD   R5,E1008DEC        CONVERT TO DECIMAL
         UNPK  E1008LNO+11(11),E1008DEC+2(6) UNPACK LENGTH
         OI    E1008LNO+21,X'F0'  SET SIGN
E1008TRM EQU   *
* TERMID (....)
         CLI   P1008TRM,C'!'      ANY TERMID (NON-TERM) ?
         BE    E1008NTM           EXIT IF NONE
         MVC   E1008TMO,=C'TERMID    (....)' MOVE TEMPLATE
         MVC   E1008TMO+11(4),P1008TRM SET TERMID
E1008NTM EQU   *
* RTRANSID (....)
         OC    P1008RTN,P1008RTN  ANY RTRANSID ?
         BZ    E1008NRT           EXIT IF NONE
         MVC   E1008RTO(16),=C'RTRANSID  (....)' MOVE TEMPLATE
         MVC   E1008RTO+11(4),P1008RTN SET RTRANSID
E1008NRT EQU   *
* RTERMID (....)
         OC    P1008RTM,P1008RTM  ANY RTERMID ?
         BZ    E1008NRM           EXIT IF NONE
         MVC   E1008RMO(16),=C'RTERMID   (....)' MOVE TEMPLATE
         MVC   E1008RMO+11(4),P1008RTM SET RTERMID
E1008NRM EQU   *
* QUEUE (........)
         OC    P1008QNM,P1008QNM  ANY QUEUE ?
         BZ    E1008CHN           EXIT IF NONE
         MVC   E1008QUO(20),=C'QUEUE     (........)' MOVE TEMPLATE
         MVC   E1008QUO+11(8),P1008QNM SET QUEUE
E1008CHN EQU   *
* CHANNEL
         MVI   E1008CHA,DFHBMASD  HIDE CHANNEL
         CLI   P1008CHN,X'00'     ANY CHANNEL ?
         BE    E1008NOH           EXIT IF NONE
         MVI   E1008CHA,DFHBMASK  SHOW CHANNEL
         MVC   E1008CHO,=C'CHANNEL   (................)' MOVE TEMPLATE
         MVC   E1008CHO+15(16),P1008CHN SET CHANNEL
E1008NOH EQU   *
* NOHANDLE
         CLI   P1008NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1008NP2           EXIT IF NOT
         MVC   E1008NHO,=C'NOHANDLE' SET NOHANDLE
E1008NP2 EQU   *
* ALL THE CONVERT FIELDS ARE OPTIONAL, IF NONE SPECIFIED TURN OFF PF2
         OC    P1008REQ,P1008REQ  ANY REQID ?
         BNZ   E1008CDE           EXIT IF THERE IS
         OC    P1008FRM,P1008FRM  ANY FROM/LENGTH ?
         BNZ   E1008CDE           EXIT IF THERE IS
         OC    P1008RTN,P1008RTN  ANY RTRANSID ?
         BNZ   E1008CDE           EXIT IF THERE IS
         OC    P1008RTM,P1008RTM  ANY RTERMID ?
         BNZ   E1008CDE           EXIT IF THERE IS
         OC    P1008QNM,P1008QNM  ANY QUEUE ?
         BNZ   E1008CDE           EXIT IF THERE IS
         MVI   E1008P2A,DFHBMASD  HIDE PF2
E1008CDE EQU   *
         L     R0,P1008EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1008PRO        SAVE PROGRAM NAME
         STG   R8,E1008PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1008WK2        SAVE OFFSET
         UNPK  E1008WK1(9),E1008WK2(5) UNPACK OFFSET
         TR    E1008WK1(8),E1008TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1008OFO,C'X'''    SET X'
         MVC   E1008OFO+2(6),E1008WK1+2 MOVE OFFSET
         MVI   E1008OFO+8,C''''   SET ENDING QUOTE
* FOR START THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1008L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1008EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1008EDL        SAME ?
         BE    E1008QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1008QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1008WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1008WK1) INITIMG(0)
         ST    R6,E1008ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1008L        LENGTH TO MOVE
         LA    R8,EDF1008S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1008EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1008WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1008L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1008EDL        LENGTH TO MOVE
         L     R8,P1008EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1008ADD) LENGTH(E1008WK1)                    X
                    QUEUE('1008') REQID(E1008REQ)
         EXEC  CICS FREEMAIN DATA(E1008ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1008ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1008XMV MVC   E1008FMO+11(0),0(R5) MOVE FROM IN CHAR FORM
*
E1008ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1008DEC DS    PL8
E1008WK1 DS    XL9
E1008ADD DS    0A
E1008WK2 DS    XL4
E1008REQ DC    CL8'1008'
E1008TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF100A  DS    0H
* RETRIEVE
         USING *,R12
         USING (P100A,P100AEND),R3
         L     DFHEIBR,P100AEIB   LOAD EIB ADDRESS
         MVC   E100AESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF100AS        ADDRESS MAP
         USING EDF100AS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF100AL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E100ATSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E100ATNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E100ATNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E100AAFT           EXIT IF NOT
* 'BEFORE' RETRIEVE
         MVC   E100ASTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E100AREQ+4,C'B'    SET REQID
         MVI   E100A1RA,DFHBMASD  HIDE RESPONSE
         MVI   E100A2RA,DFHBMASD  HIDE EIBRESP2
* INTO/SET
         MVC   E100AISO(3),=C'SET' SET SET
         CLI   P100ASET,X'FF'     IS SET SPECIFIED ?
         BE    E100ABRT           EXIT IF IT IS
         MVC   E100AISO(4),=C'INTO' SET INTO
E100ABRT EQU   *
* RTRANSID
         OC    P100ARTN,P100ARTN  ANY RTRANSID ?
         BZ    E100ABRM           EXIT IF NONE
         MVC   E100ARTO(8),=C'RTRANSID' SET RTRANSID
E100ABRM EQU   *
* RTERMID
         OC    P100ARTM,P100ARTM  ANY RTERMID ?
         BZ    E100ABQU           EXIT IF NONE
         MVC   E100ARMO(7),=C'RTERMID' SET RTERMID
E100ABQU EQU   *
* QUEUE
         OC    P100AQNM,P100AQNM  ANY QUEUE ?
         BZ    E100APRM           EXIT IF NONE
         MVC   E100AQUO(5),=C'QUEUE' SET QUEUE
         B     E100APRM           EXIT
*
E100AAFT EQU   *
* 'AFTER' RETRIEVE
         MVC   E100ASTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E100AREQ+4,C'A'    SET REQID
* SET (X'........')
         CLI   P100ASET,X'FF'     IS SET SPECIFIED ?
         BNE   E100AINT           EXIT IF NOT
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E100ASTK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E100ASTK           EXIT IF IT IS
         MVC   E100AISO(3),=C'SET' SET SET
         B     E100ALOD           EXIT
*
E100ASTK EQU   *
         MVC   E100AWK2,P100ASTA  MOVE A(SET)
         UNPK  E100AWK1,E100AWK2(5) UNPACK A(SET)
         TR    E100AWK1(8),E100ATBL-240 CONVERT TO DISPLAY HEX
         XC    E100AISO,E100AISO  CLEAR FOR SET
         MVC   E100AISO(28),=C'SET            (X''........'')' SET TMPT
         MVC   E100AISO+18(8),E100AWK1 MOVE A(SET)
         B     E100ALOD           EXIT
*
E100AINT EQU   *
* INTO (...//...)
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E100AINK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E100AINK           EXIT IF IT IS
         MVC   E100AISO(4),=C'INTO' SET INTO
         B     E100ALOD           EXIT
*
E100AINK EQU   *
         MVC   E100AISO(16),=C'INTO           (' SET TEMPLATE
         L     R5,P100AINT        INTO ADDRESS
         L     R6,P100ADLN        R6=DEFAULT ACTUAL DATA LENGTH
         CLC   P100AFAD,=F'-1'    ANY INTO FLENGTH ADDRESS ?
         BE    E100ANIL           EXIT IF NONE
         L     R6,P100AFAD        R6=INTO FLENGTH ADDRESS
         L     R6,0(R6)           R6=INTO FLENGTH
         B     E100AILK           EXIT
*
E100ANIL EQU   *
         CLC   P100ALAD,=F'-1'    ANY INTO LENGTH ADDRESS ?
         BE    E100AILK           EXIT IF NONE
         L     R6,P100ALAD        R6=INTO LENGTH ADDRESS
         LH    R6,0(R6)           R6=INTO LENGTH
E100AILK EQU   *
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E100ALOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E100AL61           EXIT
*
E100ALOK EQU   *
         CHI   R7,61              >61 ?
         BNH   E100AL61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E100AL61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E100AXMV        MOVE DATA IN CHAR FORM
         LA    R5,E100AISO+17(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
E100ALOD EQU   *
* LENGTH OF DATA (00000000000)
         MVC   E100ALDO,=C'LENGTH OF DATA (00000000000)' MOVE TEMPLATE
         L     R5,P100ADLN        R5=LENGTH OF DATA
         CVD   R5,E100ADEC        CONVERT TO DECIMAL
         UNPK  E100ALDO+16(11),E100ADEC+2(6) UNPACK LENGTH OF DATA
         OI    E100ALDO+26,X'F0'  SET SIGN
* RTRANSID (....)
         OC    P100ARTN,P100ARTN  ANY RTRANSID ?
         BZ    E100ANRT           EXIT IF NONE
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E100ARTK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E100ARTK           EXIT IF IT IS
         MVC   E100ARTO(8),=C'RTRANSID' SET RTRANSID
         B     E100ANRT           EXIT
*
E100ARTK EQU   *
         MVC   E100ARTO(21),=C'RTRANSID       (....)' MOVE TEMPLATE
         L     R5,P100ARTN        R5=ADDRESS OF RTRANSID
         MVC   E100ARTO+16(4),0(R5) SET RTRANSID
E100ANRT EQU   *
* RTERMID (....)
         OC    P100ARTM,P100ARTM  ANY RTERMID ?
         BZ    E100ANRM           EXIT IF NONE
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E100ARMK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E100ARMK           EXIT IF IT IS
         MVC   E100ARMO(7),=C'RTERMID' SET RTERMID
         B     E100ANRM           EXIT
*
E100ARMK EQU   *
         MVC   E100ARMO(21),=C'RTERMID        (....)' MOVE TEMPLATE
         L     R5,P100ARTM        R5=ADDRESS OF RTERMID
         MVC   E100ARMO+16(4),0(R5) SET RTERMID
E100ANRM EQU   *
* QUEUE (........)
         OC    P100AQNM,P100AQNM  ANY QUEUE ?
         BZ    E100ARSP           EXIT IF NONE
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E100AQUK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E100AQUK           EXIT IF IT IS
         MVC   E100AQUO(5),=C'QUEUE' SET QUEUE
         B     E100ARSP           EXIT
*
E100AQUK EQU   *
         MVC   E100AQUO(25),=C'QUEUE          (........)' MOVE TEMPLATE
         L     R5,P100AQNM        R5=ADDRESS OF QUEUE
         MVC   E100AQUO+16(8),0(R5) SET QUEUE
E100ARSP EQU   *
* RESP/RESP2
         LA    R5,E100ARPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E100ADEC        CONVERT TO DECIMAL
         UNPK  E100AR2O,E100ADEC+6(2) UNPACK EIBRESP2
         OI    E100AR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E100APRM           EXIT IF NONE
         UNPK  E100AWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E100AWK1(12),E100ATBL-240 CONVERT TO DISPLAY HEX
         MVC   E100ARCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E100ARCO+12(12),E100AWK1 SET EIBRCODE
E100APRM EQU   *
* LENGTH (00000000000)
         CLC   P100AFAD,=F'-1'    ANY FLENGTH ADDRESS ?
         BE    E100ANOL           EXIT IF NONE
         L     R6,P100AFAD        R6=FLENGTH ADDRESS
         L     R6,0(R6)           R6=FLENGTH
         B     E100ALNK           EXIT
*
E100ANOL EQU   *
         CLC   P100ALAD,=F'-1'    ANY LENGTH ADDRESS ?
         BE    E100ANLN           EXIT IF NONE
         L     R6,P100ALAD        R6=LENGTH ADDRESS
         LH    R6,0(R6)           R6=LENGTH
E100ALNK EQU   *
         MVC   E100ALNO,=C'LENGTH         (00000000000)' MOVE TEMPLATE
         CVD   R6,E100ADEC        CONVERT TO DECIMAL
         UNPK  E100ALNO+16(11),E100ADEC+2(6) UNPACK LENGTH
         OI    E100ALNO+26,X'F0'  SET SIGN
E100ANLN EQU   *
* NOHANDLE
         CLI   P100ANOH,X'FF'     ANY NOHANDLE ?
         BNE   E100ANP2           EXIT IF NOT
         MVC   E100ANHO,=C'NOHANDLE' SET NOHANDLE
E100ANP2 EQU   *
* ALL THE CONVERT FIELDS ARE OPTIONAL, IF NONE SPECIFIED TURN OFF PF2
         CLI   E100AISO+15,C'('   INTO WITH DATA ?
         BE    E100ACDE           EXIT IF THERE IS
         CLI   E100ARTO+15,C'('   ANY RTRANSID ?
         BE    E100ACDE           EXIT IF THERE IS
         CLI   E100ARMO+15,C'('   ANY RTERMID ?
         BE    E100ACDE           EXIT IF THERE IS
         CLI   E100AQUO+15,C'('   ANY QUEUE ?
         BE    E100ACDE           EXIT IF THERE IS
         MVI   E100AP2A,DFHBMASD  HIDE PF2
E100ACDE EQU   *
         L     R0,P100AEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E100APRO        SAVE PROGRAM NAME
         STG   R8,E100APGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E100AWK2        SAVE OFFSET
         UNPK  E100AWK1(9),E100AWK2(5) UNPACK OFFSET
         TR    E100AWK1(8),E100ATBL-240 CONVERT TO DISPLAY HEX
         MVHHI E100AOFO,C'X'''    SET X'
         MVC   E100AOFO+2(6),E100AWK1+2 MOVE OFFSET
         MVI   E100AOFO+8,C''''   SET ENDING QUOTE
* FOR RETRIEVE THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF100AL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P100AEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P100AEDL        SAME ?
         BE    E100AQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E100AQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E100AWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E100AWK1) INITIMG(0)
         ST    R6,E100AADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF100AL        LENGTH TO MOVE
         LA    R8,EDF100AS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P100AEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E100AWK1        MAP+DSA LENGTH
         AHI   R9,-(EDF100AL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P100AEDL        LENGTH TO MOVE
         L     R8,P100AEDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E100AADD) LENGTH(E100AWK1)                    X
                    QUEUE('100A') REQID(E100AREQ)
         EXEC  CICS FREEMAIN DATA(E100AADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E100AESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E100AXMV MVC   E100AISO+16(0),0(R5) MOVE INTO IN CHAR FORM
*
E100AESA DS    CL(EIBLENG)        EIB SAVE AREA
E100ADEC DS    PL8
E100AWK1 DS    XL9
E100AADD DS    0A
E100AWK2 DS    XL4
E100AREQ DC    CL8'100A'
E100ATBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF100C  DS    0H
* CANCEL
         USING *,R12
         USING (P100C,P100CEND),R3
         L     DFHEIBR,P100CEIB   LOAD EIB ADDRESS
         MVC   E100CESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF100CS        ADDRESS MAP
         USING EDF100CS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF100CL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E100CTSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E100CTNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E100CTNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E100CAFT           EXIT IF NOT
* 'BEFORE' CANCEL
         MVC   E100CSTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E100CREQ+4,C'B'    SET REQID
         MVI   E100C1RA,DFHBMASD  HIDE RESPONSE
         MVI   E100C2RA,DFHBMASD  HIDE EIBRESP2
         B     E100CPRM           EXIT
*
E100CAFT EQU   *
* 'AFTER' CANCEL
         MVC   E100CSTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E100CREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E100CRPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E100CDEC        CONVERT TO DECIMAL
         UNPK  E100CR2O,E100CDEC+6(2) UNPACK EIBRESP2
         OI    E100CR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E100CPRM           EXIT IF NONE
         UNPK  E100CWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E100CWK1(12),E100CTBL-240 CONVERT TO DISPLAY HEX
         MVC   E100CRCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E100CRCO+12(12),E100CWK1 SET EIBRCODE
E100CPRM EQU   *
* REQID
         MVC   E100CRQO(16),=C'REQID (........)' SET TEMPLATE
         MVC   E100CRQO+7(8),P100CREQ SET REQID
         CLI   P100CNOH,X'FF'     ANY NOHANDLE ?
         BNE   E100CCDE           EXIT IF NOT
         MVC   E100CNHO,=C'NOHANDLE' SET NOHANDLE
E100CCDE EQU   *
         L     R0,P100CEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E100CPRO        SAVE PROGRAM NAME
         STG   R8,E100CPGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E100CWK2        SAVE OFFSET
         UNPK  E100CWK1(9),E100CWK2(5) UNPACK OFFSET
         TR    E100CWK1(8),E100CTBL-240 CONVERT TO DISPLAY HEX
         MVHHI E100COFO,C'X'''    SET X'
         MVC   E100COFO+2(6),E100CWK1+2 MOVE OFFSET
         MVI   E100COFO+8,C''''   SET ENDING QUOTE
* FOR CANCEL THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF100CL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P100CEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P100CEDL        SAME ?
         BE    E100CQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E100CQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E100CWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E100CWK1) INITIMG(0)
         ST    R6,E100CADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF100CL        LENGTH TO MOVE
         LA    R8,EDF100CS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P100CEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E100CWK1        MAP+DSA LENGTH
         AHI   R9,-(EDF100CL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P100CEDL        LENGTH TO MOVE
         L     R8,P100CEDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E100CADD) LENGTH(E100CWK1)                    X
                    QUEUE('100C') REQID(E100CREQ)
         EXEC  CICS FREEMAIN DATA(E100CADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E100CESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E100CESA DS    CL(EIBLENG)        EIB SAVE AREA
E100CDEC DS    PL8
E100CWK1 DS    XL9
E100CADD DS    0A
E100CWK2 DS    XL4
E100CREQ DC    CL8'100C'
E100CTBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF1204  DS    0H
* ENQ
         USING *,R12
         USING (P1204,P1204END),R3
         L     DFHEIBR,P1204EIB   LOAD EIB ADDRESS
         MVC   E1204ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1204S        ADDRESS MAP
         USING EDF1204S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1204L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1204TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1204TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1204TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1204AFT           EXIT IF NOT
* 'BEFORE' ENQ
         MVC   E1204STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1204REQ+4,C'B'    SET REQID
         MVI   E12041RA,DFHBMASD  HIDE RESPONSE
         MVI   E12042RA,DFHBMASD  HIDE EIBRESP2
         B     E1204PRM           EXIT
*
E1204AFT EQU   *
* 'AFTER' ENQ
         MVC   E1204STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1204REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1204RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1204DEC        CONVERT TO DECIMAL
         UNPK  E1204R2O,E1204DEC+6(2) UNPACK EIBRESP2
         OI    E1204R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1204PRM           EXIT IF NONE
         UNPK  E1204WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1204WK1(12),E1204TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1204RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1204RCO+12(12),E1204WK1 SET EIBRCODE
E1204PRM EQU   *
         OC    P1204LEN,P1204LEN  ANY RESOURCE LENGTH ?
         BNZ   E1204RSC           EXIT IF THERE IS
* NO RESOURCE LENGTH
         MVI   E1204LHA,DFHBMASD  HIDE LENGTH HEADER
* A(RESOURCE) AS X'00000000'
         MVC   E1204WK2(4),P1204RES MOVE A(RESOURCE)
         UNPK  E1204WK1(9),E1204WK2(5) UNPACK A(RESOURCE)
         TR    E1204WK1(8),E1204TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1204RSO(3),=C'(X''' SET (X'
         MVC   E1204RSO+3(8),E1204WK1 MOVE A(RESOURCE)
         MVHHI E1204RSO+11,C''')' SET END ')
         B     E1204SUS           EXIT
*
E1204RSC EQU   *
* RESOURCE (...//...)
         L     R5,P1204RES        R5=RESOURCE ADDRESS
         LH    R6,P1204LEN        R6=RESOURCE LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E1204LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E1204L67           EXIT
*
E1204LOK EQU   *
         CHI   R7,67              >67 ?
         BNH   E1204L67           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E1204L67 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E1204RSO,C'('      SET RESOURCE OPEN BRACKET
         EX    R7,E1204XRS        MOVE DATA IN CHAR FORM
         LA    R5,E1204RSO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RESOURCE CLOSE BRACKET
* LENGTH   (00000)
         LH    R5,P1204LEN        R5=RESOURCE LENGTH
         CVD   R5,E1204DEC        CONVERT TO DECIMAL
         MVI   E1204LNO,C'('      SET LENGTH OPEN BRACKET
         UNPK  E1204LNO+1(5),E1204DEC+5(3) UNPACK LENGTH
         OI    E1204LNO+5,X'F0'   SET SIGN
         MVI   E1204LNO+6,C')'    SET LENGTH CLOSE BRACKET
E1204SUS EQU   *
         CLI   P1204NOS,X'FF'     ANY NOSUSPEND ?
         BNE   E1204NOH           EXIT IF NOT
         MVC   E1204NSO,=C'NOSUSPEND' SET NOSUSPEND
E1204NOH EQU   *
* NOHANDLE
         CLI   P1204NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1204CDE           EXIT IF NOT
         MVC   E1204NHO,=C'NOHANDLE' SET NOHANDLE
E1204CDE EQU   *
         L     R0,P1204EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1204PRO        SAVE PROGRAM NAME
         STG   R8,E1204PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1204WK2        SAVE OFFSET
         UNPK  E1204WK1(9),E1204WK2(5) UNPACK OFFSET
         TR    E1204WK1(8),E1204TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1204OFO,C'X'''    SET X'
         MVC   E1204OFO+2(6),E1204WK1+2 MOVE OFFSET
         MVI   E1204OFO+8,C''''   SET ENDING QUOTE
* FOR ENQ THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1204L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1204EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1204EDL        SAME ?
         BE    E1204QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1204QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1204WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1204WK1) INITIMG(0)
         ST    R6,E1204ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1204L        LENGTH TO MOVE
         LA    R8,EDF1204S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1204EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1204WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1204L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1204EDL        LENGTH TO MOVE
         L     R8,P1204EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1204ADD) LENGTH(E1204WK1)                    X
                    QUEUE('1204') REQID(E1204REQ)
         EXEC  CICS FREEMAIN DATA(E1204ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1204ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1204XRS MVC   E1204RSO+1(0),0(R5) MOVE RESOURCE IN CHAR FORM
*
E1204ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1204DEC DS    PL8
E1204WK1 DS    XL9
E1204ADD DS    0A
E1204WK2 DS    XL4
E1204REQ DC    CL8'1204'
E1204TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF1206  DS    0H
* DEQ
         USING *,R12
         USING (P1206,P1206END),R3
         L     DFHEIBR,P1206EIB   LOAD EIB ADDRESS
         MVC   E1206ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1206S        ADDRESS MAP
         USING EDF1206S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1206L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1206TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1206TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1206TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1206AFT           EXIT IF NOT
* 'BEFORE' DEQ
         MVC   E1206STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1206REQ+4,C'B'    SET REQID
         MVI   E12061RA,DFHBMASD  HIDE RESPONSE
         MVI   E12062RA,DFHBMASD  HIDE EIBRESP2
         B     E1206PRM           EXIT
*
E1206AFT EQU   *
* 'AFTER' DEQ
         MVC   E1206STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1206REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1206RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1206DEC        CONVERT TO DECIMAL
         UNPK  E1206R2O,E1206DEC+6(2) UNPACK EIBRESP2
         OI    E1206R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1206PRM           EXIT IF NONE
         UNPK  E1206WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1206WK1(12),E1206TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1206RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1206RCO+12(12),E1206WK1 SET EIBRCODE
E1206PRM EQU   *
         OC    P1206LEN,P1206LEN  ANY RESOURCE LENGTH ?
         BNZ   E1206RSC           EXIT IF THERE IS
* NO RESOURCE LENGTH
         MVI   E1206LHA,DFHBMASD  HIDE LENGTH HEADER
* A(RESOURCE) AS X'00000000'
         MVC   E1206WK2(4),P1206RES MOVE A(RESOURCE)
         UNPK  E1206WK1(9),E1206WK2(5) UNPACK A(RESOURCE)
         TR    E1206WK1(8),E1206TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1206RSO(3),=C'(X''' SET (X'
         MVC   E1206RSO+3(8),E1206WK1 MOVE A(RESOURCE)
         MVHHI E1206RSO+11,C''')' SET END ')
         B     E1206NOH           EXIT
*
E1206RSC EQU   *
* RESOURCE (...//...)
         L     R5,P1206RES        R5=RESOURCE ADDRESS
         LH    R6,P1206LEN        R6=RESOURCE LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E1206LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E1206L67           EXIT
*
E1206LOK EQU   *
         CHI   R7,67              >67 ?
         BNH   E1206L67           EXIT IF IT IS
         LA    R7,67              SET MAXIMUM LENGTH
E1206L67 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         MVI   E1206RSO,C'('      SET RESOURCE OPEN BRACKET
         EX    R7,E1206XRS        MOVE DATA IN CHAR FORM
         LA    R5,E1206RSO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RESOURCE CLOSE BRACKET
* LENGTH   (00000)
         LH    R5,P1206LEN        R5=RESOURCE LENGTH
         CVD   R5,E1206DEC        CONVERT TO DECIMAL
         MVI   E1206LNO,C'('      SET LENGTH OPEN BRACKET
         UNPK  E1206LNO+1(5),E1206DEC+5(3) UNPACK LENGTH
         OI    E1206LNO+5,X'F0'   SET SIGN
         MVI   E1206LNO+6,C')'    SET LENGTH CLOSE BRACKET
E1206NOH EQU   *
* NOHANDLE
         CLI   P1206NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1206CDE           EXIT IF NOT
         MVC   E1206NHO,=C'NOHANDLE' SET NOHANDLE
E1206CDE EQU   *
         L     R0,P1206EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1206PRO        SAVE PROGRAM NAME
         STG   R8,E1206PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1206WK2        SAVE OFFSET
         UNPK  E1206WK1(9),E1206WK2(5) UNPACK OFFSET
         TR    E1206WK1(8),E1206TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1206OFO,C'X'''    SET X'
         MVC   E1206OFO+2(6),E1206WK1+2 MOVE OFFSET
         MVI   E1206OFO+8,C''''   SET ENDING QUOTE
* FOR DEQ THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1206L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1206EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1206EDL        SAME ?
         BE    E1206QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1206QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1206WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1206WK1) INITIMG(0)
         ST    R6,E1206ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1206L        LENGTH TO MOVE
         LA    R8,EDF1206S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1206EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1206WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1206L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1206EDL        LENGTH TO MOVE
         L     R8,P1206EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1206ADD) LENGTH(E1206WK1)                    X
                    QUEUE('1206') REQID(E1206REQ)
         EXEC  CICS FREEMAIN DATA(E1206ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1206ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1206XRS MVC   E1206RSO+1(0),0(R5) MOVE RESOURCE IN CHAR FORM
*
E1206ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1206DEC DS    PL8
E1206WK1 DS    XL9
E1206ADD DS    0A
E1206WK2 DS    XL4
E1206REQ DC    CL8'1206'
E1206TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF1802  DS    0H
* RECEIVE MAP
         USING *,R12
         USING (P1802,P1802END),R3
         L     DFHEIBR,P1802EIB   LOAD EIB ADDRESS
         MVC   E1802ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1802S        ADDRESS MAP
         USING EDF1802S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1802L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1802TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1802TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1802TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1802AFT           EXIT IF NOT
* 'BEFORE' RECEIVE MAP
         MVC   E1802STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1802REQ+4,C'B'    SET REQID
         MVI   E18021RA,DFHBMASD  HIDE RESPONSE
         MVI   E18022RA,DFHBMASD  HIDE EIBRESP2
         B     E1802PRM           EXIT
*
E1802AFT EQU   *
* 'AFTER' RECEIVE MAP
         MVC   E1802STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1802REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1802RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1802DEC        CONVERT TO DECIMAL
         UNPK  E1802R2O,E1802DEC+6(2) UNPACK EIBRESP2
         OI    E1802R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1802PRM           EXIT IF NONE
         UNPK  E1802WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1802WK1(12),E1802TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1802RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1802RCO+12(12),E1802WK1 SET EIBRCODE
E1802PRM EQU   *
* MAP
         MVI   E1802MPO,C'('      SET OPEN BRACKET
         MVC   E1802MPO+1(7),P1802MAP SET MAP
         MVI   E1802MPO+8,C')'    SET CLOSE BRACKET
* MAPSET
         MVC   E1802MSO,=C'(........)  (00000)' MOVE TEMPLATE
         L     R5,P1802MSA        R5=MAPSET ADDRESS
         USING DFHMAPDS,R5
         MVC   E1802MSO+1(8),BMSNAME SET MAPSET
         DROP  R5
         LH    R5,P1802MLN        R5=MAPSET LENGTH
         CVD   R5,E1802DEC        CONVERT TO DECIMAL
         UNPK  E1802MSO+13(5),E1802DEC+5(3) UNPACK MAPSET LENGTH
         OI    E1802MSO+17,X'F0'  SET SIGN
* MAP STRUCTURE
         MVC   E1802WK2(4),P1802DSC MOVE STRUCTURE ADDRESS
         UNPK  E1802WK1(9),E1802WK2(5) UNPACK STRUCTURE ADDRESS
         TR    E1802WK1(8),E1802TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1802SRO(13),=C'(X''........'')' MOVE TEMPLATE
         MVC   E1802SRO+3(8),E1802WK1 MOVE STRUCTURE ADDRESS
* NOHANDLE
         CLI   P1802NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1802CDE           EXIT IF NOT
         MVC   E1802NHO,=C'NOHANDLE' SET NOHANDLE
E1802CDE EQU   *
         L     R0,P1802EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1802PRO        SAVE PROGRAM NAME
         STG   R8,E1802PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1802WK2        SAVE OFFSET
         UNPK  E1802WK1(9),E1802WK2(5) UNPACK OFFSET
         TR    E1802WK1(8),E1802TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1802OFO,C'X'''    SET X'
         MVC   E1802OFO+2(6),E1802WK1+2 MOVE OFFSET
         MVI   E1802OFO+8,C''''   SET ENDING QUOTE
* FOR RECEIVE MAP THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1802L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1802EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1802EDL        SAME ?
         BE    E1802QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1802QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1802WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1802WK1) INITIMG(0)
         ST    R6,E1802ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1802L        LENGTH TO MOVE
         LA    R8,EDF1802S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1802EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1802WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1802L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1802EDL        LENGTH TO MOVE
         L     R8,P1802EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1802ADD) LENGTH(E1802WK1)                    X
                    QUEUE('1802') REQID(E1802REQ)
         EXEC  CICS FREEMAIN DATA(E1802ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1802ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1802ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1802DEC DC    PL8'0'
E1802WK1 DS    XL9
E1802ADD DS    0A
E1802WK2 DS    XL4
E1802REQ DC    CL8'1802'
E1802TBL DC    C'0123456789ABCDEF'
         LTORG
         DROP  R12
*
EDF1804  DS    0H
* SEND MAP
         USING *,R12
         USING (P1804,P1804END),R3
         L     DFHEIBR,P1804EIB   LOAD EIB ADDRESS
         MVC   E1804ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1804S        ADDRESS MAP
         USING EDF1804S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1804L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1804TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1804TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1804TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1804AFT           EXIT IF NOT
* 'BEFORE' SEND MAP
         MVC   E1804STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         CLI   P1804SET,X'FF'     SET ?
         BNE   E1804NSB           EXIT IF NOT
         MVC   E1804DSO(3),=C'SET' SET SET
E1804NSB EQU   *
         MVI   E1804REQ+4,C'B'    SET REQID
         MVI   E18041RA,DFHBMASD  HIDE RESPONSE
         MVI   E18042RA,DFHBMASD  HIDE EIBRESP2
         B     E1804PRM           EXIT
*
E1804AFT EQU   *
* 'AFTER' SEND MAP
         MVC   E1804STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
* SET            (X'........')
         CLI   P1804SET,X'FF'     SET ?
         BNE   E1804NSA           EXIT IF NOT
         MVC   E1804WK2(4),P1804OUT MOVE OUTPUT AREA ADDRESS
         UNPK  E1804WK1(9),E1804WK2(5) UNPACK OUTPUT AREA ADDRESS
         TR    E1804WK1(8),E1804TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1804DSO,=C'SET            (X''........'')' MOVE TEMPLTE
         MVC   E1804DSO+18(8),E1804WK1 MOVE OUTPUT AREA ADDRESS
* LENGTH OF DATA (00000)
         MVC   E1804LNO,=C'LENGTH OF DATA (00000)' MOVE TEMPLATE
         L     R5,P1804OAL        R5=LENGTH OF OUTPUT DATA
         CVD   R5,E1804DEC        CONVERT TO DECIMAL
         UNPK  E1804LNO+16(5),E1804DEC+6(2) UNPACK OUTPUT DATA LENGTH
         OI    E1804LNO+20,X'F0'  SET SIGN
E1804NSA EQU   *
         MVI   E1804REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1804RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1804DEC        CONVERT TO DECIMAL
         UNPK  E1804R2O,E1804DEC+6(2) UNPACK EIBRESP2
         OI    E1804R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1804PRM           EXIT IF NONE
         UNPK  E1804WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1804WK1(12),E1804TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1804RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1804RCO+12(12),E1804WK1 SET EIBRCODE
E1804PRM EQU   *
* MAP
         MVI   E1804MPO,C'('      SET OPEN BRACKET
         MVC   E1804MPO+1(7),P1804MAP SET MAP
         MVI   E1804MPO+8,C')'    SET CLOSE BRACKET
* MAPSET
         MVC   E1804MSO,=C'(........)  (00000)' MOVE TEMPLATE
         L     R5,P1804MSA        R5=MAPSET ADDRESS
         USING DFHMAPDS,R5
         MVC   E1804MSO+1(8),BMSNAME SET MAPSET
         DROP  R5
         LH    R5,P1804MLN        R5=MAPSET LENGTH
         CVD   R5,E1804DEC        CONVERT TO DECIMAL
         UNPK  E1804MSO+13(5),E1804DEC+5(3) UNPACK MAPSET LENGTH
         OI    E1804MSO+17,X'F0'  SET SIGN
* MAP STRUCTURE
         OC    P1804DSC,P1804DSC  ANY STRUCTURE ADDRESS ?
         BZ    E1804NSX           EXIT IF NONE
         MVC   E1804WK2(4),P1804DSC MOVE STRUCTURE ADDRESS
         UNPK  E1804WK1(9),E1804WK2(5) UNPACK STRUCTURE ADDRESS
         TR    E1804WK1(8),E1804TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1804SRO(13),=C'(X''........'')' MOVE TEMPLATE
         MVC   E1804SRO+3(8),E1804WK1 MOVE STRUCTURE ADDRESS
E1804NSX EQU   *
* DATAONLY/MAPONLY
         TM    P1804OPT,P1804MNY  MAPONLY ?
         BNO   E1804NMY           EXIT IF NOT
         MVC   E1804DMO,=C'MAPONLY ' SET MAPONLY
         B     E1804MDK           EXIT
*
E1804NMY EQU   *
         TM    P1804OPT,P1804DNY  DATAONLY ?
         BNO   E1804MDK           EXIT IF NOT
         MVC   E1804DMO,=C'DATAONLY' SET DATAONLY
E1804MDK EQU   *
* CURSOR
         TM    P1804OPT,P1804CSM  SYMBOLIC CURSOR ?
         BNO   E1804NSC           EXIT IF NOT
         MVC   E1804CSO,=C'CURSOR' SET CURSOR
         B     E1804NCR           EXIT
*
E1804NSC EQU   *
         CLI   P1804CRS,X'FF'     ANY CURSOR POSITION ?
         BE    E1804NCR           EXIT IF NONE
* CURSOR        @(0000) ROW(00) COL(00)
         MVC   E1804CSO,=C'CURSOR' SET CURSOR
         MVC   E1804CPO,=C'(0000) ROW(00) COL(00)'
         LH    R7,P1804CRS        R7=CURSOR POSITION
         CVD   R7,E1804DEC        CONVERT TO DECIMAL
         UNPK  E1804CPO(5),E1804DEC+5(3) UNPACK CURSOR POSITION
         OI    E1804CPO+4,X'F0'   SET SIGN
         MVI   E1804CPO,C'('      RESET OPEN BRACKET
         SR    R6,R6              CLEAR R6
         D     R6,=F'80'          CALC ROW/COL
         AHI   R6,1               COL+1
         AHI   R7,1               ROW+1
         CVD   R7,E1804DEC        CONVERT ROW TO DECIMAL
         UNPK  E1804CPO+10(3),E1804DEC+6(2) UNPACK ROW
         OI    E1804CPO+12,X'F0'  SET SIGN
         MVI   E1804CPO+10,C'('   RESET OPEN BRACKET
         CVD   R6,E1804DEC        CONVERT COL TO DECIMAL
         UNPK  E1804CPO+18(3),E1804DEC+6(2) UNPACK COL
         OI    E1804CPO+20,X'F0'  SET SIGN
         MVI   E1804CPO+18,C'('   RESET OPEN BRACKET
E1804NCR EQU   *
* ERASE
         TM    P1804OPT,P1804ERS  ERASE ?
         BNO   E1804NER           EXIT IF NOT
         MVC   E1804ERO,=CL8'ERASE' SET ERASE
         B     E1804NEA           EXIT
*
E1804NER EQU   *
* ERASEAUP
         TM    P1804OPT,P1804EAU  ERASEAUP ?
         BNO   E1804NEA           EXIT IF NOT
         MVC   E1804ERO,=C'ERASEAUP' SET ERASEAUP
E1804NEA EQU   *
* ALARM
         TM    P1804OPT,P1804ALM  ALARM ?
         BNO   E1804NAL           EXIT IF NOT
         MVC   E1804ALO,=C'ALARM' SET ALARM
E1804NAL EQU   *
* FREEKB
         TM    P1804OPT,P1804FKB  FREEKB ?
         BNO   E1804NFK           EXIT IF NOT
         MVC   E1804FKO,=C'FREEKB' SET FREEKB
E1804NFK EQU   *
* FRSET
         TM    P1804OPT,P1804FRS  FRSET ?
         BNO   E1804NFR           EXIT IF NOT
         MVC   E1804FRO,=C'FRSET' SET FRSET
E1804NFR EQU   *
* NOHANDLE
         CLI   P1804NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1804CDE           EXIT IF NOT
         MVC   E1804NHO,=C'NOHANDLE' SET NOHANDLE
E1804CDE EQU   *
         L     R0,P1804EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1804PRO        SAVE PROGRAM NAME
         STG   R8,E1804PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1804WK2        SAVE OFFSET
         UNPK  E1804WK1(9),E1804WK2(5) UNPACK OFFSET
         TR    E1804WK1(8),E1804TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1804OFO,C'X'''    SET X'
         MVC   E1804OFO+2(6),E1804WK1+2 MOVE OFFSET
         MVI   E1804OFO+8,C''''   SET ENDING QUOTE
* FOR SEND MAP THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1804L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1804EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1804EDL        SAME ?
         BE    E1804QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1804QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1804WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1804WK1) INITIMG(0)
         ST    R6,E1804ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1804L        LENGTH TO MOVE
         LA    R8,EDF1804S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1804EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1804WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1804L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1804EDL        LENGTH TO MOVE
         L     R8,P1804EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1804ADD) LENGTH(E1804WK1)                    X
                    QUEUE('1804') REQID(E1804REQ)
         EXEC  CICS FREEMAIN DATA(E1804ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1804ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1804ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1804DEC DC    PL8'0'
E1804WK1 DS    XL9
E1804ADD DS    0A
E1804WK2 DS    XL4
E1804REQ DC    CL8'1804'
E1804TBL DC    C'0123456789ABCDEF'
         LTORG
         DROP  R12
*
EDF1812  DS    0H
* SEND CONTROL
         USING *,R12
         USING (P1812,P1812END),R3
         L     DFHEIBR,P1812EIB   LOAD EIB ADDRESS
         MVC   E1812ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1812S        ADDRESS MAP
         USING EDF1812S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1812L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1812TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1812TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1812TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1812AFT           EXIT IF NOT
* 'BEFORE' SEND CONTROL
         MVC   E1812STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1812REQ+4,C'B'    SET REQID
         MVI   E18121RA,DFHBMASD  HIDE RESPONSE
         MVI   E18122RA,DFHBMASD  HIDE EIBRESP2
         B     E1812PRM           EXIT
*
E1812AFT EQU   *
* 'AFTER' SEND CONTROL
         MVC   E1812STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1812REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1812RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1812DEC        CONVERT TO DECIMAL
         UNPK  E1812R2O,E1812DEC+6(2) UNPACK EIBRESP2
         OI    E1812R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1812PRM           EXIT IF NONE
         UNPK  E1812WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1812WK1(12),E1812TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1812RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1812RCO+12(12),E1812WK1 SET EIBRCODE
E1812PRM EQU   *
* CURSOR
         TM    P1812OPT,P1812CSM  SYMBOLIC CURSOR ?
         BNO   E1812NSC           EXIT IF NOT
         MVC   E1812CSO,=C'CURSOR' SET CURSOR
         B     E1812NCR           EXIT
*
E1812NSC EQU   *
         CLI   P1812CRS,X'FF'     ANY CURSOR POSITION ?
         BE    E1812NCR           EXIT IF NONE
* CURSOR        @(0000) ROW(00) COL(00)
         MVC   E1812CSO,=C'CURSOR' SET CURSOR
         MVC   E1812CPO,=C'(0000) ROW(00) COL(00)'
         LH    R7,P1812CRS        R7=CURSOR POSITION
         CVD   R7,E1812DEC        CONVERT TO DECIMAL
         UNPK  E1812CPO(5),E1812DEC+5(3) UNPACK CURSOR POSITION
         OI    E1812CPO+4,X'F0'   SET SIGN
         MVI   E1812CPO,C'('      RESET OPEN BRACKET
         SR    R6,R6              CLEAR R6
         D     R6,=F'80'          CALC ROW/COL
         AHI   R6,1               COL+1
         AHI   R7,1               ROW+1
         CVD   R7,E1812DEC        CONVERT ROW TO DECIMAL
         UNPK  E1812CPO+10(3),E1812DEC+6(2) UNPACK ROW
         OI    E1812CPO+12,X'F0'  SET SIGN
         MVI   E1812CPO+10,C'('   RESET OPEN BRACKET
         CVD   R6,E1812DEC        CONVERT COL TO DECIMAL
         UNPK  E1812CPO+18(3),E1812DEC+6(2) UNPACK COL
         OI    E1812CPO+20,X'F0'  SET SIGN
         MVI   E1812CPO+18,C'('   RESET OPEN BRACKET
E1812NCR EQU   *
* ERASE
         TM    P1812OPT,P1812ERS  ERASE ?
         BNO   E1812NER           EXIT IF NOT
         MVC   E1812ERO,=CL8'ERASE' SET ERASE
         B     E1812NEA           EXIT
*
E1812NER EQU   *
* ERASEAUP
         TM    P1812OPT,P1812EAU  ERASEAUP ?
         BNO   E1812NEA           EXIT IF NOT
         MVC   E1812ERO,=C'ERASEAUP' SET ERASEAUP
E1812NEA EQU   *
* ALARM
         TM    P1812OPT,P1812ALM  ALARM ?
         BNO   E1812NAL           EXIT IF NOT
         MVC   E1812ALO,=C'ALARM' SET ALARM
E1812NAL EQU   *
* FREEKB
         TM    P1812OPT,P1812FKB  FREEKB ?
         BNO   E1812NFK           EXIT IF NOT
         MVC   E1812FKO,=C'FREEKB' SET FREEKB
E1812NFK EQU   *
* FRSET
         TM    P1812OPT,P1812FRS  FRSET ?
         BNO   E1812NFR           EXIT IF NOT
         MVC   E1812FRO,=C'FRSET' SET FRSET
E1812NFR EQU   *
* NOHANDLE
         CLI   P1812NOH,X'FF'     ANY NOHANDLE ?
         BNE   E1812CDE           EXIT IF NOT
         MVC   E1812NHO,=C'NOHANDLE' SET NOHANDLE
E1812CDE EQU   *
         L     R0,P1812EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1812PRO        SAVE PROGRAM NAME
         STG   R8,E1812PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1812WK2        SAVE OFFSET
         UNPK  E1812WK1(9),E1812WK2(5) UNPACK OFFSET
         TR    E1812WK1(8),E1812TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1812OFO,C'X'''    SET X'
         MVC   E1812OFO+2(6),E1812WK1+2 MOVE OFFSET
         MVI   E1812OFO+8,C''''   SET ENDING QUOTE
* FOR SEND CONTROL THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1812L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1812EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1812EDL        SAME ?
         BE    E1812QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1812QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1812WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1812WK1) INITIMG(0)
         ST    R6,E1812ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1812L        LENGTH TO MOVE
         LA    R8,EDF1812S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1812EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1812WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1812L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1812EDL        LENGTH TO MOVE
         L     R8,P1812EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1812ADD) LENGTH(E1812WK1)                    X
                    QUEUE('1812') REQID(E1812REQ)
         EXEC  CICS FREEMAIN DATA(E1812ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1812ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1812ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1812DEC DC    PL8'0'
E1812WK1 DS    XL9
E1812ADD DS    0A
E1812WK2 DS    XL4
E1812REQ DC    CL8'1812'
E1812TBL DC    C'0123456789ABCDEF'
         LTORG
         DROP  R12
*
EDF1C02  DS    0H
* DUMP TRANSACTION
         USING *,R12
         USING (P1C02,P1C02END),R3
         L     DFHEIBR,P1C02EIB   LOAD EIB ADDRESS
         MVC   E1C02ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1C02S        ADDRESS MAP
         USING EDF1C02S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1C02L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1C02TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1C02TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1C02TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E1C02AFT           EXIT IF NOT
* 'BEFORE' DUMP TRANSACTION
         MVC   E1C02STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E1C02REQ+4,C'B'    SET REQID
         MVI   E1C021RA,DFHBMASD  HIDE RESPONSE
         MVI   E1C022RA,DFHBMASD  HIDE EIBRESP2
         B     E1C02PRM           EXIT
*
E1C02AFT EQU   *
* 'AFTER' DUMP TRANSACTION
         MVC   E1C02STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E1C02REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E1C02RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E1C02DEC        CONVERT TO DECIMAL
         UNPK  E1C02R2O,E1C02DEC+6(2) UNPACK EIBRESP2
         OI    E1C02R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E1C02PRM           EXIT IF NONE
         UNPK  E1C02WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E1C02WK1(12),E1C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1C02RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1C02RCO+12(12),E1C02WK1 SET EIBRCODE
E1C02PRM EQU   *
* DUMPCODE (....)
         MVC   E1C02DCO,=C'(....)' MOVE TEMPLATE
         MVC   E1C02DCO+1(4),P1C02DCD MOVE DUMPCODE
         CLI   P1C02CMP,X'FF'     COMPLETE ?
         BNE   E1C02NTC           EXIT IF NOT
* COMPLETE
         MVC   E1C02CMO,=C'COMPLETE' SET COMPLETE
E1C02NTC EQU   *
         OC    P1C02FRM,P1C02FRM  ANY FROM/LENGTH ?
         BZ    E1C02NTF           EXIT IF NONE
* FROM (X'........')
         MVC   E1C02FMO,=C'FROM        (X''........'')' SET TEMPLATE
         UNPK  E1C02WK1(9),P1C02FRM(5) UNPACK FROM
         TR    E1C02WK1(8),E1C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1C02FMO+15(8),E1C02WK1 MOVE FROM
* LENGTH (00000000000)
         MVC   E1C02LNO,=C'LENGTH      (00000000000)' SET TEMPLATE
         L     R5,P1C02LEN        R5=LENGTH
         CVD   R5,E1C02DEC        CONVERT TO DECIMAL
         UNPK  E1C02LNO+13(11),E1C02DEC+2(6) UNPACK LENGTH
         OI    E1C02LNO+23,X'F0'  SET SIGN
E1C02NTF EQU   *
         OC    P1C02SEG,P1C02SEG  ANY SEGMENTS ?
         BZ    E1C02NTS           EXIT IF NONE
* SEGMENTLIST (X'........')
         MVC   E1C02SLO,=C'SEGMENTLIST (X''........'')' SET TEMPLATE
         UNPK  E1C02WK1(9),P1C02SEG(5) UNPACK SEGMENTLIST
         TR    E1C02WK1(8),E1C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1C02SLO+15(8),E1C02WK1 MOVE SEGMENTLIST
* LENGTHLIST (X'........')
         MVC   E1C02LLO,=C'LENGTHLIST  (X''........'')' SET TEMPLATE
         UNPK  E1C02WK1(9),P1C02LST(5) UNPACK LENGTHLIST
         TR    E1C02WK1(8),E1C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1C02LLO+15(8),E1C02WK1 MOVE LENGTHLIST
* NUMSEGMENTS (00000000000)
         MVC   E1C02NSO,=C'NUMSEGMENTS (00000000000)' SET TEMPLATE
         L     R5,P1C02NSG        R5=NUMSEGMENTS
         CVD   R5,E1C02DEC        CONVERT TO DECIMAL
         UNPK  E1C02NSO+13(11),E1C02DEC+2(6) UNPACK NUMSEGMENTS
         OI    E1C02NSO+23,X'F0'  SET SIGN
E1C02NTS EQU   *
         L     R0,P1C02EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1C02PRO        SAVE PROGRAM NAME
         STG   R8,E1C02PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E1C02WK2        SAVE OFFSET
         UNPK  E1C02WK1(9),E1C02WK2(5) UNPACK OFFSET
         TR    E1C02WK1(8),E1C02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1C02OFO,C'X'''    SET X'
         MVC   E1C02OFO+2(6),E1C02WK1+2 MOVE OFFSET
         MVI   E1C02OFO+8,C''''   SET ENDING QUOTE
* FOR DUMP TRANSACTION THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1C02L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P1C02EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P1C02EDL        SAME ?
         BE    E1C02QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E1C02QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E1C02WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E1C02WK1) INITIMG(0)
         ST    R6,E1C02ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1C02L        LENGTH TO MOVE
         LA    R8,EDF1C02S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P1C02EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E1C02WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1C02L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P1C02EDL        LENGTH TO MOVE
         L     R8,P1C02EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E1C02ADD) LENGTH(E1C02WK1)                    X
                    QUEUE('1C02') REQID(E1C02REQ)
         EXEC  CICS FREEMAIN DATA(E1C02ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E1C02ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E1C02ESA DS    CL(EIBLENG)        EIB SAVE AREA
E1C02DEC DS    PL8
E1C02WK1 DS    XL9
E1C02ADD DS    0A
E1C02WK2 DS    XL4
E1C02REQ DC    CL8'1C02'
E1C02TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF3412  DS    0H
* DELETE CONTAINER
         USING *,R12
         USING (P3412,P3412END),R3
         L     DFHEIBR,P3412EIB   LOAD EIB ADDRESS
         MVC   E3412ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF3412S        ADDRESS MAP
         USING EDF3412S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF3412L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E3412TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E3412TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E3412TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E3412AFT           EXIT IF NOT
* 'BEFORE' DELETE CONTAINER
         MVC   E3412STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E3412REQ+4,C'B'    SET REQID
         MVI   E34121RA,DFHBMASD  HIDE RESPONSE
         MVI   E34122RA,DFHBMASD  HIDE EIBRESP2
         B     E3412PRM           EXIT
*
E3412AFT EQU   *
* 'AFTER' DELETE CONTAINER
         MVC   E3412STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E3412REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E3412RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E3412DEC        CONVERT TO DECIMAL
         UNPK  E3412R2O,E3412DEC+6(2) UNPACK EIBRESP2
         OI    E3412R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E3412PRM           EXIT IF NONE
         UNPK  E3412WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E3412WK1(12),E3412TBL-240 CONVERT TO DISPLAY HEX
         MVC   E3412RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E3412RCO+12(12),E3412WK1 SET EIBRCODE
E3412PRM EQU   *
* CONTAINER
         MVI   E3412CNO,C'('      SET OPEN BRACKET
         MVC   E3412CNO+1(16),P3412CTN SET CONTAINER
         MVI   E3412CNO+17,C')'   SET CLOSE BRACKET
* CHANNEL
         MVI   E3412CHO,C'('      SET OPEN BRACKET
         MVC   E3412CHO+1(16),P3412CHN SET CHANNEL
         MVI   E3412CHO+17,C')'   SET CLOSE BRACKET
* NOHANDLE
         CLI   P3412NOH,X'FF'     ANY NOHANDLE ?
         BNE   E3412CDE           EXIT IF NOT
         MVC   E3412NHO,=C'NOHANDLE' SET NOHANDLE
E3412CDE EQU   *
         L     R0,P3412EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E3412PRO        SAVE PROGRAM NAME
         STG   R8,E3412PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E3412WK2        SAVE OFFSET
         UNPK  E3412WK1(9),E3412WK2(5) UNPACK OFFSET
         TR    E3412WK1(8),E3412TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E3412OFO,C'X'''    SET X'
         MVC   E3412OFO+2(6),E3412WK1+2 MOVE OFFSET
         MVI   E3412OFO+8,C''''   SET ENDING QUOTE
* FOR DELETE CONTAINER THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF3412L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P3412EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P3412EDL        SAME ?
         BE    E3412QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E3412QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E3412WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E3412WK1) INITIMG(0)
         ST    R6,E3412ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF3412L        LENGTH TO MOVE
         LA    R8,EDF3412S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P3412EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E3412WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF3412L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P3412EDL        LENGTH TO MOVE
         L     R8,P3412EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E3412ADD) LENGTH(E3412WK1)                    X
                    QUEUE('3412') REQID(E3412REQ)
         EXEC  CICS FREEMAIN DATA(E3412ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E3412ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E3412ESA DS    CL(EIBLENG)        EIB SAVE AREA
E3412DEC DS    PL8
E3412WK1 DS    XL9
E3412ADD DS    0A
E3412WK2 DS    XL4
E3412REQ DC    CL8'3412'
E3412TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF3414  DS    0H
* GET CONTAINER
         USING *,R12
         USING (P3414,P3414END),R3
         L     DFHEIBR,P3414EIB   LOAD EIB ADDRESS
         MVC   E3414ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF3414S        ADDRESS MAP
         USING EDF3414S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF3414L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E3414TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E3414TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E3414TNO+6,X'F0'   SET SIGN
         MVI   E3414P2A,DFHBMASD  HIDE PF2
         MVI   E3414MDA,DFHBMASD  HIDE MODE
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E3414AFT           EXIT IF NOT
* 'BEFORE' GET CONTAINER
         MVC   E3414STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E3414REQ+4,C'B'    SET REQID
         MVI   E34141RA,DFHBMASD  HIDE RESPONSE
         MVI   E34142RA,DFHBMASD  HIDE EIBRESP2
* INTO/SET/NODATA
         MVI   E3414LLA,DFHBMASD  HIDE LENGTH OF INTO
         CLI   P3414SET,X'FF'     IS SET SPECIFIED ?
         BNE   E3414NST           EXIT IF NOT
         MVC   E3414ISO(3),=C'SET' SET SET
         B     E3414PRM           EXIT
*
E3414NST EQU   *
         CLI   P3414NOD,X'FF'     IS NODATA SPECIFIED ?
         BE    E3414PRM           EXIT IF IT IS
         MVI   E3414NDA,DFHBMASD  HIDE NODATA
         MVC   E3414ISO(4),=C'INTO' SET INTO
         B     E3414PRM           EXIT
*
E3414AFT EQU   *
* 'AFTER' GET CONTAINER
         MVC   E3414STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E3414REQ+4,C'A'    SET REQID
         MVI   E3414LLA,DFHBMASD  HIDE LENGTH OF INTO
* SET (X'........')
         CLI   P3414SET,X'FF'     IS SET SPECIFIED ?
         BNE   E3414INT           EXIT IF NOT
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E3414STK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E3414STK           EXIT IF IT IS
         MVC   E3414ISO(3),=C'SET' SET SET
         B     E3414LOD           EXIT
*
E3414STK EQU   *
         MVC   E3414WK2,P3414STA  MOVE A(SET)
         UNPK  E3414WK1,E3414WK2(5) UNPACK A(SET)
         TR    E3414WK1(8),E3414TBL-240 CONVERT TO DISPLAY HEX
         XC    E3414ISO,E3414ISO  CLEAR FOR SET
         MVC   E3414ISO(28),=C'SET            (X''........'')' SET TMPT
         MVC   E3414ISO+18(8),E3414WK1 MOVE A(SET)
         B     E3414LOD           EXIT
*
E3414INT EQU   *
         CLI   P3414NOD,X'FF'     IS NODATA SPECIFIED ?
         BE    E3414LOD           EXIT IF IT IS
         MVI   E3414NDA,DFHBMASD  HIDE NODATA
* INTO (...//...)
* ONLY NORMAL AND LENGERR RESP CAN RETURN DATA
         CHSI  EIBRESP,0          NORMAL ?
         BE    E3414INK           EXIT IF IT IS
         CHSI  EIBRESP,22         LENGERR ?
         BE    E3414INK           EXIT IF IT IS
         MVC   E3414ISO(4),=C'INTO' SET INTO
         B     E3414LOD           EXIT
*
E3414INK EQU   *
         MVC   E3414ISO(16),=C'INTO           (' SET TEMPLATE
         L     R5,P3414INT        INTO ADDRESS
         L     R6,P3414FLN        R6=INTO LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E3414LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E3414L61           EXIT
*
E3414LOK EQU   *
         CHI   R7,61              >61 ?
         BNH   E3414L61           EXIT IF IT IS
         LA    R7,61              SET MAXIMUM LENGTH
E3414L61 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E3414XMV        MOVE DATA IN CHAR FORM
         LA    R5,E3414ISO+17(R7) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
         MVI   E3414P2A,DFHBMASB  SHOW PF2
         MVI   E3414MDA,DFHBMASB  SHOW MODE
E3414LOD EQU   *
* LENGTH OF DATA (00000000000)
         ICM   R5,15,P3414FAD     ANY LENGTH AS LABEL ?
         BZ    E3414NOL           EXIT IF NONE
         L     R5,0(R5)           R5=LENGTH OF DATA
         B     E3414DOL           EXIT
*
E3414NOL EQU   *
         ICM   R5,15,P3414FAD     ANY FLENGTH AS LABEL ?
         BZ    E3414RSP           EXIT IF NONE
         L     R5,0(R5)           R5=LENGTH OF DATA
E3414DOL EQU   *
         MVC   E3414LDO,=C'LENGTH OF DATA (00000000000)' MOVE TEMPLATE
         CVD   R5,E3414DEC        CONVERT TO DECIMAL
         UNPK  E3414LDO+16(11),E3414DEC+2(6) UNPACK LENGTH OF DATA
         OI    E3414LDO+26,X'F0'  SET SIGN
E3414RSP EQU   *
* RESP/RESP2
         LA    R5,E3414RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E3414DEC        CONVERT TO DECIMAL
         UNPK  E3414R2O,E3414DEC+6(2) UNPACK EIBRESP2
         OI    E3414R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E3414PRM           EXIT IF NONE
         UNPK  E3414WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E3414WK1(12),E3414TBL-240 CONVERT TO DISPLAY HEX
         MVC   E3414RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E3414RCO+12(12),E3414WK1 SET EIBRCODE
E3414PRM EQU   *
* CONTAINER
         MVI   E3414CNO,C'('      SET OPEN BRACKET
         MVC   E3414CNO+1(16),P3414CTN SET CONTAINER
         MVI   E3414CNO+17,C')'   SET CLOSE BRACKET
* CHANNEL
         MVI   E3414CHO,C'('      SET OPEN BRACKET
         MVC   E3414CHO+1(16),P3414CHN SET CHANNEL
         MVI   E3414CHO+17,C')'   SET CLOSE BRACKET
         CLI   P3414NOD,X'FF'     IS NODATA SPECIFIED ?
         BE    E3414NOH           EXIT IF IT IS
         CLI   P3414SET,X'FF'     IS SET SPECIFIED ?
         BE    E3414NOH           EXIT IF IT IS
* LENGTH OF INTO (00000000000)
         MVI   E3414LLA,DFHBMASK  SHOW LENGTH OF INTO
         MVC   E3414LIO,=C'(00000000000)' MOVE TEMPLATE
         L     R5,P3414FLN        R5=LENGTH
         CVD   R5,E3414DEC        CONVERT TO DECIMAL
         UNPK  E3414LIO+1(11),E3414DEC+2(6) UNPACK LENGTH
         OI    E3414LIO+11,X'F0'  SET SIGN
E3414NOH EQU   *
* NOHANDLE
         CLI   P3414NOH,X'FF'     ANY NOHANDLE ?
         BNE   E3414CDE           EXIT IF NOT
         MVC   E3414NHO,=C'NOHANDLE' SET NOHANDLE
E3414CDE EQU   *
         L     R0,P3414EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E3414PRO        SAVE PROGRAM NAME
         STG   R8,E3414PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E3414WK2        SAVE OFFSET
         UNPK  E3414WK1(9),E3414WK2(5) UNPACK OFFSET
         TR    E3414WK1(8),E3414TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E3414OFO,C'X'''    SET X'
         MVC   E3414OFO+2(6),E3414WK1+2 MOVE OFFSET
         MVI   E3414OFO+8,C''''   SET ENDING QUOTE
* FOR GET CONTAINER THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF3414L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P3414EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P3414EDL        SAME ?
         BE    E3414QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E3414QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E3414WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E3414WK1) INITIMG(0)
         ST    R6,E3414ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF3414L        LENGTH TO MOVE
         LA    R8,EDF3414S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P3414EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E3414WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF3414L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P3414EDL        LENGTH TO MOVE
         L     R8,P3414EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E3414ADD) LENGTH(E3414WK1)                    X
                    QUEUE('3414') REQID(E3414REQ)
         EXEC  CICS FREEMAIN DATA(E3414ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E3414ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E3414XMV MVC   E3414ISO+16(0),0(R5) MOVE INTO IN CHAR FORM
*
E3414ESA DS    CL(EIBLENG)        EIB SAVE AREA
E3414DEC DS    PL8
E3414WK1 DS    XL9
E3414ADD DS    0A
E3414WK2 DS    XL4
E3414REQ DC    CL8'3414'
E3414TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF3440  DS    0H
* MOVE CONTAINER
         USING *,R12
         USING (P3440,P3440END),R3
         L     DFHEIBR,P3440EIB   LOAD EIB ADDRESS
         MVC   E3440ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF3440S        ADDRESS MAP
         USING EDF3440S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF3440L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E3440TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E3440TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E3440TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E3440AFT           EXIT IF NOT
* 'BEFORE' MOVE CONTAINER
         MVC   E3440STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E3440REQ+4,C'B'    SET REQID
         MVI   E34401RA,DFHBMASD  HIDE RESPONSE
         MVI   E34402RA,DFHBMASD  HIDE EIBRESP2
         B     E3440PRM           EXIT
*
E3440AFT EQU   *
* 'AFTER' MOVE CONTAINER
         MVC   E3440STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E3440REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E3440RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E3440DEC        CONVERT TO DECIMAL
         UNPK  E3440R2O,E3440DEC+6(2) UNPACK EIBRESP2
         OI    E3440R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E3440PRM           EXIT IF NONE
         UNPK  E3440WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E3440WK1(12),E3440TBL-240 CONVERT TO DISPLAY HEX
         MVC   E3440RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E3440RCO+12(12),E3440WK1 SET EIBRCODE
E3440PRM EQU   *
* CONTAINER
         MVI   E3440CNO,C'('      SET OPEN BRACKET
         MVC   E3440CNO+1(16),P3440CTN SET CONTAINER
         MVI   E3440CNO+17,C')'   SET CLOSE BRACKET
* AS
         MVI   E3440ASO,C'('      SET OPEN BRACKET
         MVC   E3440ASO+1(16),P3440AS  SET AS
         MVI   E3440ASO+17,C')'   SET CLOSE BRACKET
* CHANNEL
         MVI   E3440CHO,C'('      SET OPEN BRACKET
         MVC   E3440CHO+1(16),P3440CHN SET CHANNEL
         MVI   E3440CHO+17,C')'   SET CLOSE BRACKET
* TOCHANNEL
         MVI   E3440TCO,C'('      SET OPEN BRACKET
         MVC   E3440TCO+1(16),P3440TOC SET TOCHANNEL
         MVI   E3440TCO+17,C')'   SET CLOSE BRACKET
* NOHANDLE
         CLI   P3440NOH,X'FF'     ANY NOHANDLE ?
         BNE   E3440CDE           EXIT IF NOT
         MVC   E3440NHO,=C'NOHANDLE' SET NOHANDLE
E3440CDE EQU   *
         L     R0,P3440EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E3440PRO        SAVE PROGRAM NAME
         STG   R8,E3440PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E3440WK2        SAVE OFFSET
         UNPK  E3440WK1(9),E3440WK2(5) UNPACK OFFSET
         TR    E3440WK1(8),E3440TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E3440OFO,C'X'''    SET X'
         MVC   E3440OFO+2(6),E3440WK1+2 MOVE OFFSET
         MVI   E3440OFO+8,C''''   SET ENDING QUOTE
* FOR MOVE CONTAINER THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF3440L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P3440EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P3440EDL        SAME ?
         BE    E3440QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E3440QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E3440WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E3440WK1) INITIMG(0)
         ST    R6,E3440ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF3440L        LENGTH TO MOVE
         LA    R8,EDF3440S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P3440EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E3440WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF3440L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P3440EDL        LENGTH TO MOVE
         L     R8,P3440EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E3440ADD) LENGTH(E3440WK1)                    X
                    QUEUE('3440') REQID(E3440REQ)
         EXEC  CICS FREEMAIN DATA(E3440ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E3440ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E3440ESA DS    CL(EIBLENG)        EIB SAVE AREA
E3440DEC DS    PL8
E3440WK1 DS    XL9
E3440ADD DS    0A
E3440WK2 DS    XL4
E3440REQ DC    CL8'3440'
E3440TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF3416  DS    0H
* PUT CONTAINER
         USING *,R12
         USING (P3416,P3416END),R3
         L     DFHEIBR,P3416EIB   LOAD EIB ADDRESS
         MVC   E3416ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF3416S        ADDRESS MAP
         USING EDF3416S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF3416L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E3416TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E3416TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E3416TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E3416AFT           EXIT IF NOT
* 'BEFORE' PUT CONTAINER
         MVC   E3416STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E3416REQ+4,C'B'    SET REQID
         MVI   E34161RA,DFHBMASD  HIDE RESPONSE
         MVI   E34162RA,DFHBMASD  HIDE EIBRESP2
         B     E3416PRM           EXIT
*
E3416AFT EQU   *
* 'AFTER' PUT CONTAINER
         MVC   E3416STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E3416REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E3416RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E3416DEC        CONVERT TO DECIMAL
         UNPK  E3416R2O,E3416DEC+6(2) UNPACK EIBRESP2
         OI    E3416R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E3416PRM           EXIT IF NONE
         UNPK  E3416WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E3416WK1(12),E3416TBL-240 CONVERT TO DISPLAY HEX
         MVC   E3416RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E3416RCO+12(12),E3416WK1 SET EIBRCODE
E3416PRM EQU   *
* CONTAINER
         MVI   E3416CNO,C'('      SET OPEN BRACKET
         MVC   E3416CNO+1(16),P3416CTN SET CONTAINER
         MVI   E3416CNO+17,C')'   SET CLOSE BRACKET
* CHANNEL
         MVI   E3416CHO,C'('      SET OPEN BRACKET
         MVC   E3416CHO+1(16),P3416CHN SET CHANNEL
         MVI   E3416CHO+17,C')'   SET CLOSE BRACKET
* FROM     (...//...)
         L     R5,P3416FRM        FROM ADDRESS
         L     R6,P3416FLN        R6=LENGTH
* PROTECT AGAINST BAD LENGTHS
         LTR   R7,R6              VALID LENGTH ?
         BP    E3416LOK           EXIT IF LENGTH OK
         LA    R7,1               SET VALID LENGTH
         B     E3416L65           EXIT
*
E3416LOK EQU   *
         CHI   R7,65              >65 ?
         BNH   E3416L65           EXIT IF IT IS
         LA    R7,65              SET MAXIMUM LENGTH
E3416L65 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E3416XMV        MOVE DATA IN CHAR FORM
         MVI   E3416FMO,C'('      SET FROM OPEN BRACKET
         LA    R5,E3416FMO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
* LENGTH   (00000000000)
         L     R5,P3416FLN        R5=LENGTH
         CVD   R5,E3416DEC        CONVERT TO DECIMAL
         UNPK  E3416LNO+1(11),E3416DEC+2(6) UNPACK LENGTH
         OI    E3416LNO+11,X'F0'  SET SIGN
         MVI   E3416LNO,C'('      SET LENGTH OPEN BRACKET
         MVI   E3416LNO+12,C')'   SET LENGTH CLOSE BRACKET
* NOHANDLE
         CLI   P3416NOH,X'FF'     ANY NOHANDLE ?
         BNE   E3416CDE           EXIT IF NOT
         MVC   E3416NHO,=C'NOHANDLE' SET NOHANDLE
E3416CDE EQU   *
         L     R0,P3416EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E3416PRO        SAVE PROGRAM NAME
         STG   R8,E3416PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E3416WK2        SAVE OFFSET
         UNPK  E3416WK1(9),E3416WK2(5) UNPACK OFFSET
         TR    E3416WK1(8),E3416TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E3416OFO,C'X'''    SET X'
         MVC   E3416OFO+2(6),E3416WK1+2 MOVE OFFSET
         MVI   E3416OFO+8,C''''   SET ENDING QUOTE
* FOR PUT CONTAINER THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF3416L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P3416EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P3416EDL        SAME ?
         BE    E3416QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E3416QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E3416WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E3416WK1) INITIMG(0)
         ST    R6,E3416ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF3416L        LENGTH TO MOVE
         LA    R8,EDF3416S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P3416EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E3416WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF3416L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P3416EDL        LENGTH TO MOVE
         L     R8,P3416EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E3416ADD) LENGTH(E3416WK1)                    X
                    QUEUE('3416') REQID(E3416REQ)
         EXEC  CICS FREEMAIN DATA(E3416ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E3416ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E3416XMV MVC   E3416FMO+1(0),0(R5) MOVE FROM IN CHAR FORM
*
E3416ESA DS    CL(EIBLENG)        EIB SAVE AREA
E3416DEC DS    PL8
E3416WK1 DS    XL9
E3416ADD DS    0A
E3416WK2 DS    XL4
E3416REQ DC    CL8'3416'
E3416TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF4A02  DS    0H
* 'AFTER' ASKTIME ABSTIME
         USING *,R12
         USING (P4A02,P4A02END),R3
         L     DFHEIBR,P4A02EIB   LOAD EIB ADDRESS
         MVC   E4A02ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF1002S        ADDRESS MAP
         USING EDF1002S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF1002L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E1002TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E1002TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E1002TNO+6,X'F0'   SET SIGN
         MVC   E1002STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E4A02REQ+4,C'A'    SET REQID
         L     R5,P4A02ABT        R5=ADDRESS OF ABSTIME
         MVI   E1002ATO,C'('      SET OPEN BRACKET
         UNPK  E1002ATO+1(15),0(8,R5) UNPACK ABSTIME
         OI    E1002ATO+15,X'F0'  SET SIGN
         MVI   E1002ATO+16,C')'   SET CLOSE BRACKET
* RESP/RESP2
         LA    R5,E1002RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E4A02DEC        CONVERT TO DECIMAL
         UNPK  E1002R2O,E4A02DEC+6(2) UNPACK EIBRESP2
         OI    E1002R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E4A02NRC           EXIT IF NONE
         UNPK  E4A02WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E4A02WK1(12),E4A02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E1002RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E1002RCO+12(12),E4A02WK1 SET EIBRCODE
E4A02NRC EQU   *
         MVC   E1002FNO,=C'X''4A02''' SET FUNCTION CODE
         CLI   P4A02NOH,X'FF'     ANY NOHANDLE ?
         BNE   E4A02CDE           EXIT IF NOT
         MVC   E1002NHO,=C'NOHANDLE' SET NOHANDLE
E4A02CDE EQU   *
         L     R0,P4A02EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E1002PRO        SAVE PROGRAM NAME
         STG   R8,E1002PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E4A02WK2        SAVE OFFSET
         UNPK  E4A02WK1(9),E4A02WK2(5) UNPACK OFFSET
         TR    E4A02WK1(8),E4A02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E1002OFO,C'X'''    SET X'
         MVC   E1002OFO+2(6),E4A02WK1+2 MOVE OFFSET
         MVI   E1002OFO+8,C''''   SET ENDING QUOTE
* FOR ASKTIME ABSTIME THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF1002L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P4A02EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P4A02EDL        SAME ?
         BE    E4A02QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E4A02QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E4A02WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E4A02WK1) INITIMG(0)
         ST    R6,E4A02ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF1002L        LENGTH TO MOVE
         LA    R8,EDF1002S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P4A02EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E4A02WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF1002L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P4A02EDL        LENGTH TO MOVE
         L     R8,P4A02EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E4A02ADD) LENGTH(E4A02WK1)                    X
                    QUEUE('1002') REQID(E4A02REQ)
         EXEC  CICS FREEMAIN DATA(E4A02ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E4A02ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E4A02ESA DS    CL(EIBLENG)        EIB SAVE AREA
E4A02DEC DS    PL8
E4A02WK1 DS    XL9
E4A02ADD DS    0A
E4A02WK2 DS    XL4
E4A02REQ DC    CL8'4A02'
E4A02TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF4A04  DS    0H
* FORMATTIME
         USING *,R12
         USING (P4A04,P4A04END),R3
         L     DFHEIBR,P4A04EIB   LOAD EIB ADDRESS
         MVC   E4A04ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF4A04S        ADDRESS MAP
         USING EDF4A04S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF4A04L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E4A04TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E4A04TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E4A04TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E4A04AFT           EXIT IF NOT
* 'BEFORE' FORMATTIME
         MVC   E4A04STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E4A04REQ+4,C'B'    SET REQID
         MVI   E4A041RA,DFHBMASD  HIDE RESPONSE
         MVI   E4A042RA,DFHBMASD  HIDE EIBRESP2
         B     E4A04PRM           EXIT
*
E4A04AFT EQU   *
* 'AFTER' FORMATTIME
         MVC   E4A04STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E4A04REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E4A04RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E4A04DEC        CONVERT TO DECIMAL
         UNPK  E4A04R2O,E4A04DEC+6(2) UNPACK EIBRESP2
         OI    E4A04R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E4A04PRM           EXIT IF NONE
         UNPK  E4A04WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E4A04WK1(12),E4A04TBL-240 CONVERT TO DISPLAY HEX
         MVC   E4A04RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E4A04RCO+12(12),E4A04WK1 SET EIBRCODE
E4A04PRM EQU   *
* THE MAP BODY IS BUILT IN Z390CEDF TO ENABLE PAGING
         L     R0,P4A04EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E4A04PRO        SAVE PROGRAM NAME
         STG   R8,E4A04PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E4A04WK2        SAVE OFFSET
         UNPK  E4A04WK1(9),E4A04WK2(5) UNPACK OFFSET
         TR    E4A04WK1(8),E4A04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E4A04OFO,C'X'''    SET X'
         MVC   E4A04OFO+2(6),E4A04WK1+2 MOVE OFFSET
         MVI   E4A04OFO+8,C''''   SET ENDING QUOTE
* FOR FORMATTIME THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*    P4A04 STRUCTURE
*    DS CL(E4A04LEN) FOR THE DATA
*
         LA    R9,EDF4A04L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P4A04EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P4A04EDL        SAME ?
         BE    E4A04QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E4A04QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
* + P4A04 STRUCTURE + E4A04LEN FOR THE DATA
         AHI   R9,(P4A04END-P4A04)+E4A04LEN CALC GETMAIN LENGTH
         STH   R9,E4A04WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E4A04WK1) INITIMG(0)
         ST    R6,E4A04ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF4A04L        LENGTH TO MOVE
         LA    R8,EDF4A04S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P4A04EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E4A04WK1        GETMAIN LENGTH
         AHI   R9,-(EDF4A04L+8+(P4A04END-P4A04)+E4A04LEN) CALC ALIGNED
*                                                         DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P4A04EDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0((P4A04END-P4A04),R6),P4A04 MOVE P4A04 STRUCTURE
* BUILD THE DATA AREA
         ICM   R9,15,P4A04DAT     ANY DATE ?
         BZ    E4A04NDT           EXIT IF NONE
         MVC   E4A04DAT,0(R9)     MOVE DATE
E4A04NDT EQU   *
         ICM   R9,15,P4A04DFM     ANY DATEFORM ?
         BZ    E4A04NDF           EXIT IF NONE
         MVC   E4A04DFM,0(R9)     MOVE DATEFORM
E4A04NDF EQU   *
         MVC   E4A04DSP,P4A04DSP  MOVE DATESEP
         ICM   R9,15,P4A04DST     ANY DATESTRING ?
         BZ    E4A04NDS           EXIT IF NONE
         MVC   E4A04DST,0(R9)     MOVE DATESTRING
E4A04NDS EQU   *
         ICM   R9,15,P4A04DYC     ANY DAYCOUNT ?
         BZ    E4A04NDC           EXIT IF NONE
         MVC   E4A04DYC,0(R9)     MOVE DAYCOUNT
E4A04NDC EQU   *
         ICM   R9,15,P4A04DOM     ANY DAYOFMONTH ?
         BZ    E4A04NDM           EXIT IF NONE
         MVC   E4A04DOM,0(R9)     MOVE DAYOFMONTH
E4A04NDM EQU   *
         ICM   R9,15,P4A04DOW     ANY DAYOFWEEK ?
         BZ    E4A04NDW           EXIT IF NONE
         MVC   E4A04DOW,0(R9)     MOVE DAYOFWEEK
E4A04NDW EQU   *
         ICM   R9,15,P4A04DM2     ANY DDMMYY ?
         BZ    E4A04NM2           EXIT IF NONE
         MVC   E4A04DM2,0(R9)     MOVE DDMMYY
E4A04NM2 EQU   *
         ICM   R9,15,P4A04DM4     ANY DDMMYYYY ?
         BZ    E4A04NM4           EXIT IF NONE
         MVC   E4A04DM4,0(R9)     MOVE DDMMYYYY
E4A04NM4 EQU   *
         ICM   R9,15,P4A04FDT     ANY FULLDATE ?
         BZ    E4A04NFD           EXIT IF NONE
         MVC   E4A04FDT,0(R9)     MOVE FULLDATE
E4A04NFD EQU   *
         ICM   R9,15,P4A04MD2     ANY MMDDYY ?
         BZ    E4A04ND2           EXIT IF NONE
         MVC   E4A04MD2,0(R9)     MOVE MMDDYY
E4A04ND2 EQU   *
         ICM   R9,15,P4A04MD4     ANY MMDDYYYY ?
         BZ    E4A04ND4           EXIT IF NONE
         MVC   E4A04MD4,0(R9)     MOVE MMDDYYYY
E4A04ND4 EQU   *
         ICM   R9,15,P4A04MOY     ANY MONTHOFYEAR ?
         BZ    E4A04NMY           EXIT IF NONE
         MVC   E4A04MOY,0(R9)     MOVE MONTHOFYEAR
E4A04NMY EQU   *
         ICM   R9,15,P4A04TIM     ANY TIME ?
         BZ    E4A04NTM           EXIT IF NONE
         MVC   E4A04TIM,0(R9)     MOVE TIME
E4A04NTM EQU   *
         MVC   E4A04TSP,P4A04TSP  MOVE TIMESEP
         ICM   R9,15,P4A04YR      ANY YEAR ?
         BZ    E4A04NYR           EXIT IF NONE
         MVC   E4A04YR,0(R9)      MOVE YEAR
E4A04NYR EQU   *
         ICM   R9,15,P4A04Y2D     ANY YYDDD ?
         BZ    E4A04N2D           EXIT IF NONE
         MVC   E4A04Y2D,0(R9)     MOVE YYDDD
E4A04N2D EQU   *
         ICM   R9,15,P4A04YD2     ANY YYDDMM ?
         BZ    E4A04NY2           EXIT IF NONE
         MVC   E4A04YD2,0(R9)     MOVE YYDDMM
E4A04NY2 EQU   *
         ICM   R9,15,P4A04YM2     ANY YYMMDD ?
         BZ    E4A04NYM           EXIT IF NONE
         MVC   E4A04YM2,0(R9)     MOVE YYMMDD
E4A04NYM EQU   *
         ICM   R9,15,P4A04Y4D     ANY YYYYDD ?
         BZ    E4A04N4D           EXIT IF NONE
         MVC   E4A04Y4D,0(R9)     MOVE YYYYDD
E4A04N4D EQU   *
         ICM   R9,15,P4A04YD4     ANY YYYYDDMM ?
         BZ    E4A04N4Y           EXIT IF NONE
         MVC   E4A04YD4,0(R9)     MOVE YYYYDDMM
E4A04N4Y EQU   *
         ICM   R9,15,P4A04YM4     ANY YYYYMMDD ?
         BZ    E4A04DUN           EXIT IF NONE
         MVC   E4A04YM4,0(R9)     MOVE YYYYMMDD
E4A04DUN EQU   *
         MVC   (P4A04END-P4A04)(E4A04LEN,R6),E4A04DAT MOVE DATA
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E4A04ADD) LENGTH(E4A04WK1)                    X
                    QUEUE('4A04') REQID(E4A04REQ)
         EXEC  CICS FREEMAIN DATA(E4A04ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E4A04ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E4A04ESA DS    CL(EIBLENG)        EIB SAVE AREA
E4A04DEC DS    PL8
E4A04WK1 DS    XL9
E4A04ADD DS    0A
E4A04WK2 DS    XL4
E4A04REQ DC    CL8'4A04'
E4A04TBL DC    C'0123456789ABCDEF'
*
E4A04DAT DC    CL8' '             DATE
E4A04DFM DC    CL6' '             DATEFORM
E4A04DSP DC    C' '               DATESEP
E4A04DST DC    CL25' '            DATESTRING
E4A04DYC DC    AL4(0)             DAYCOUNT
E4A04DOM DC    AL4(0)             DAYOFMONTH
E4A04DOW DC    AL4(0)             DAYOFWEEK
E4A04DM2 DC    CL8' '             DDMMYY
E4A04DM4 DC    CL10' '            DDMMYYYY
E4A04FDT DC    CL10' '            FULLDATE
E4A04MD2 DC    CL8' '             MMDDYY
E4A04MD4 DC    CL10' '            MMDDYYYY
E4A04MOY DC    AL4(0)             MONTHOFYEAR
E4A04TIM DC    CL8' '             TIME
E4A04TSP DC    C' '               TIMESEP
E4A04YR  DC    AL4(0)             YEAR
E4A04Y2D DC    CL6' '             YYDDD
E4A04YD2 DC    CL8' '             YYDDMM
E4A04YM2 DC    CL8' '             YYMMDD
E4A04Y4D DC    CL8' '             YYYYDDD
E4A04YD4 DC    CL10' '            YYYYDDMM
E4A04YM4 DC    CL10' '            YYYYMMDD
E4A04LEN EQU   *-E4A04DAT
*
         LTORG
         DROP  R12
*
EDF4C02  DS    0H
* INQUIRE FILE
         USING *,R12
         USING (P4C02,P4C02END),R3
         L     DFHEIBR,P4C02EIB   LOAD EIB ADDRESS
         MVC   E4C02ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF4C02S        ADDRESS MAP
         USING EDF4C02S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF4C02L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E4C02TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E4C02TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E4C02TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E4C02AFT           EXIT IF NOT
* 'BEFORE' INQUIRE FILE
         MVC   E4C02STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E4C02REQ+4,C'B'    SET REQID
         MVI   E4C021RA,DFHBMASD  HIDE RESPONSE
         MVI   E4C022RA,DFHBMASD  HIDE EIBRESP2
         B     E4C02PRM           EXIT
*
E4C02AFT EQU   *
* 'AFTER' INQUIRE FILE
         MVC   E4C02STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E4C02REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E4C02RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E4C02DEC        CONVERT TO DECIMAL
         UNPK  E4C02R2O,E4C02DEC+6(2) UNPACK EIBRESP2
         OI    E4C02R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E4C02PRM           EXIT IF NONE
         UNPK  E4C02WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E4C02WK1(12),E4C02TBL-240 CONVERT TO DISPLAY HEX
         MVC   E4C02RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E4C02RCO+12(12),E4C02WK1 SET EIBRCODE
E4C02PRM EQU   *
* THE MAP BODY IS BUILT IN Z390CEDF TO ENABLE PAGING
         L     R0,P4C02EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E4C02PRO        SAVE PROGRAM NAME
         STG   R8,E4C02PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E4C02WK2        SAVE OFFSET
         UNPK  E4C02WK1(9),E4C02WK2(5) UNPACK OFFSET
         TR    E4C02WK1(8),E4C02TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E4C02OFO,C'X'''    SET X'
         MVC   E4C02OFO+2(6),E4C02WK1+2 MOVE OFFSET
         MVI   E4C02OFO+8,C''''   SET ENDING QUOTE
* FOR INQUIRE FILE THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*    P4C02 STRUCTURE
*    DS 2CL128 FOR THE DSNAMES
*
         LA    R9,EDF4C02L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P4C02EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P4C02EDL        SAME ?
         BE    E4C02QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E4C02QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         AHI   R9,(P4C02END-P4C02)+256 + P4C02 STRUCTURE
*                                      + 2CL128 FOR DSNAMES
         STH   R9,E4C02WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E4C02WK1) INITIMG(0)
         ST    R6,E4C02ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF4C02L        LENGTH TO MOVE
         LA    R8,EDF4C02S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P4C02EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E4C02WK1        GETMAIN LENGTH
         AHI   R9,-(EDF4C02L+8+(P4C02END-P4C02)+256) CALC ALIGNED DSA
*                                                    LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LR    R7,R9              LENGTH TO MOVE (QUADWORD ALIGNED)
         L     R8,P4C02EDS        DSA ADDRESS
         MVCL  R6,R8              MOVE DSA AFTER MAP+DSA ADDR/LENS
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0((P4C02END-P4C02),R6),P4C02 MOVE P4C02 STRUCTURE
* NEXT
         CLI   P4C02NXT,X'FF'     IS IT NEXT ?
         BNE   E4C02NTX           EXIT IF NOT
         L     R9,P4C02FIL        R9=ADDRESS OF NEXT FILENAME AREA
         MVC   P4C02FIL-P4C02(8,R6),0(R9) MOVE CURRENT OR NEXT FILENAME
E4C02NTX EQU   *
         ICM   R9,15,P4C02DSN     ANY DSNAME ?
         BZ    E4C02NDS           EXIT IF NONE
         MVC   (P4C02END-P4C02)(128,R6),0(R9) MOVE DSNAME
E4C02NDS EQU   *
         ICM   R9,15,P4C02BSN     ANY BASEDSNAME ?
         BZ    E4C02NBS           EXIT IF NONE
         MVC   (P4C02END-P4C02)+128(128,R6),0(R9) MOVE BASEDSNAME
E4C02NBS EQU   *
* SUBSTITUTE ADDRESSES OF CVDA WITH THE ACTUAL CVDA
         ICM   R9,15,P4C02OPE     ANY OPENSTATUS ?
         BZ    E4C02NOP           EXIT IF NONE
         MVC   P4C02OPE-P4C02(4,R6),0(R9) MOVE OPENSTATUS CVDA
E4C02NOP EQU   *
         ICM   R9,15,P4C02ENA     ANY ENABLESTATUS ?
         BZ    E4C02NEN           EXIT IF NONE
         MVC   P4C02ENA-P4C02(4,R6),0(R9) MOVE ENABLESTATUS CVDA
E4C02NEN EQU   *
         ICM   R9,15,P4C02RD      ANY READ ?
         BZ    E4C02NRD           EXIT IF NONE
         MVC   P4C02RD-P4C02(4,R6),0(R9) MOVE READ CVDA
E4C02NRD EQU   *
         ICM   R9,15,P4C02UPD     ANY UPDATE ?
         BZ    E4C02NUP           EXIT IF NONE
         MVC   P4C02UPD-P4C02(4,R6),0(R9) MOVE UPDATE CVDA
E4C02NUP EQU   *
         ICM   R9,15,P4C02ADD     ANY ADD ?
         BZ    E4C02NAD           EXIT IF NONE
         MVC   P4C02ADD-P4C02(4,R6),0(R9) MOVE ADD CVDA
E4C02NAD EQU   *
         ICM   R9,15,P4C02BRW     ANY BROWSE ?
         BZ    E4C02NBR           EXIT IF NONE
         MVC   P4C02BRW-P4C02(4,R6),0(R9) MOVE BROWSE CVDA
E4C02NBR EQU   *
         ICM   R9,15,P4C02DEL     ANY DELETE ?
         BZ    E4C02NDL           EXIT IF NONE
         MVC   P4C02DEL-P4C02(4,R6),0(R9) MOVE DELETE CVDA
E4C02NDL EQU   *
         ICM   R9,15,P4C02KL      ANY KEYLENGTH ?
         BZ    E4C02NKL           EXIT IF NONE
         MVC   P4C02KL-P4C02(4,R6),0(R9) MOVE KEYLENGTH
         OI    P4C02KL-P4C02(R6),X'80' INDICATE KEYLENGTH REQUESTED
E4C02NKL EQU   *
         ICM   R9,15,P4C02KP      ANY KEYPOSITION ?
         BZ    E4C02NKP           EXIT IF NONE
         MVC   P4C02KP-P4C02(4,R6),0(R9) MOVE KEYPOSITION
         OI    P4C02KP-P4C02(R6),X'80' INDICATE KEYPOSITION REQUESTED
E4C02NKP EQU   *
         ICM   R9,15,P4C02OBJ     ANY OBJECT ?
         BZ    E4C02NOB           EXIT IF NONE
         MVC   P4C02OBJ-P4C02(4,R6),0(R9) MOVE OBJECT CVDA
E4C02NOB EQU   *
         ICM   R9,15,P4C02RCF     ANY RECORDFORMAT ?
         BZ    E4C02NRF           EXIT IF NONE
         MVC   P4C02RCF-P4C02(4,R6),0(R9) MOVE RECORDFORMAT CVDA
E4C02NRF EQU   *
         ICM   R9,15,P4C02RCS     ANY RECORDSIZE ?
         BZ    E4C02NRS           EXIT IF NONE
         MVC   P4C02RCS-P4C02(4,R6),0(R9) MOVE RECORDSIZE
         OI    P4C02RCS-P4C02(R6),X'80' INDICATE RECORDSIZE REQUESTED
E4C02NRS EQU   *
         ICM   R9,15,P4C02TYP     ANY TYPE ?
         BZ    E4C02NTP           EXIT IF NONE
         MVC   P4C02TYP-P4C02(4,R6),0(R9) MOVE TYPE CVDA
         OI    P4C02TYP-P4C02(R6),X'80' INDICATE TYPE REQUESTED
E4C02NTP EQU   *
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E4C02ADD) LENGTH(E4C02WK1)                    X
                    QUEUE('4C02') REQID(E4C02REQ)
         EXEC  CICS FREEMAIN DATA(E4C02ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E4C02ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E4C02ESA DS    CL(EIBLENG)        EIB SAVE AREA
E4C02DEC DS    PL8
E4C02WK1 DS    XL9
E4C02ADD DS    0A
E4C02WK2 DS    XL4
E4C02REQ DC    CL8'4C02'
E4C02TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF4C04  DS    0H
* SET FILE
         USING *,R12
         USING (P4C04,P4C04END),R3
         L     DFHEIBR,P4C04EIB   LOAD EIB ADDRESS
         MVC   E4C04ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF4C04S        ADDRESS MAP
         USING EDF4C04S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF4C04L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E4C04TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E4C04TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E4C04TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E4C04AFT           EXIT IF NOT
* 'BEFORE' SET FILE
         MVC   E4C04STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E4C04REQ+4,C'B'    SET REQID
         MVI   E4C041RA,DFHBMASD  HIDE RESPONSE
         MVI   E4C042RA,DFHBMASD  HIDE EIBRESP2
         B     E4C04PRM           EXIT
*
E4C04AFT EQU   *
* 'AFTER' SET FILE
         MVC   E4C04STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E4C04REQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E4C04RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E4C04DEC        CONVERT TO DECIMAL
         UNPK  E4C04R2O,E4C04DEC+6(2) UNPACK EIBRESP2
         OI    E4C04R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E4C04PRM           EXIT IF NONE
         UNPK  E4C04WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E4C04WK1(12),E4C04TBL-240 CONVERT TO DISPLAY HEX
         MVC   E4C04RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E4C04RCO+12(12),E4C04WK1 SET EIBRCODE
E4C04PRM EQU   *
* FILE (........)
         MVI   E4C04FLO,C'('      SET OPEN BRACKET
         MVC   E4C04FLO+1(8),P4C04FIL SET FILENAME
         MVI   E4C04FLO+9,C')'    SET CLOSE BRACKET
* OPENSTATUS
         OC    P4C04OPE,P4C04OPE  ANY OPENSTATUS ?
         BZ    E4C04ENA           EXIT IF NONE
         MVC   E4C04OSO,=C'OPENSTATUS   (CLOSED)' SET CLOSED
         CLC   P4C04OPE,DFHVALUE(OPEN) IS IT OPEN ?
         BNE   E4C04ENA           EXIT IF NOT
         MVC   E4C04OSO,=C'OPENSTATUS   (OPEN)  ' SET OPEN
E4C04ENA EQU   *
* ENABLESTATUS
         OC    P4C04ENA,P4C04ENA  ANY ENABLESTATUS ?
         BZ    E4C04RD            EXIT IF NONE
         MVC   E4C04ESO,=C'ENABLESTATUS (DISABLED)' SET DISABLED
         CLC   P4C04ENA,DFHVALUE(ENABLED) IS IT ENABLED ?
         BNE   E4C04RD            EXIT IF NOT
         MVC   E4C04ESO,=C'ENABLESTATUS (ENABLED) ' SET ENABLED
E4C04RD  EQU   *
* READSTATUS
         OC    P4C04RD,P4C04RD    ANY READSTATUS ?
         BZ    E4C04UPD           EXIT IF NONE
         MVC   E4C04RSO,=C'READSTATUS   (NOTREADABLE)' SET NOTREADABLE
         CLC   P4C04RD,DFHVALUE(READABLE) IS IT READABLE ?
         BNE   E4C04UPD           EXIT IF NOT
         MVC   E4C04RSO,=C'READSTATUS   (READABLE)   ' SET READABLE
E4C04UPD EQU   *
* UPDATESTATUS
         OC    P4C04UPD,P4C04UPD  ANY UPDATESTATUS ?
         BZ    E4C04AD            EXIT IF NONE
         MVC   E4C04USO,=C'UPDATESTATUS (NOTUPDATABLE)' SET NOTUPDATABL
         CLC   P4C04UPD,DFHVALUE(UPDATABLE) IS IT UPDATABLE ?
         BNE   E4C04AD            EXIT IF NOT
         MVC   E4C04USO,=C'UPDATESTATUS (UPDATABLE)   ' SET UPDATABLE
E4C04AD  EQU   *
* ADDSTATUS
         OC    P4C04ADD,P4C04ADD  ANY ADDSTATUS ?
         BZ    E4C04BRW           EXIT IF NONE
         MVC   E4C04ASO,=C'ADDSTATUS    (NOTADDABLE)' SET NOTADDABLE
         CLC   P4C04ADD,DFHVALUE(ADDABLE) IS IT ADDABLE ?
         BNE   E4C04BRW           EXIT IF NOT
         MVC   E4C04ASO,=C'ADDSTATUS    (ADDABLE)   ' SET ADDABLE
E4C04BRW EQU   *
* BROWSESTATUS
         OC    P4C04BRW,P4C04BRW  ANY BROWSESTATUS ?
         BZ    E4C04DEL           EXIT IF NONE
         MVC   E4C04BSO,=C'BROWSESTATUS (NOTBROWSABLE)' SET NOTBROWSABL
         CLC   P4C04BRW,DFHVALUE(BROWSABLE) IS IT BROWSABLE ?
         BNE   E4C04DEL           EXIT IF NOT
         MVC   E4C04BSO,=C'BROWSESTATUS (BROWSABLE)   ' SET BROWSABLE
E4C04DEL EQU   *
* DELETESTATUS
         OC    P4C04DEL,P4C04DEL  ANY DELETESTATUS ?
         BZ    E4C04DUN           EXIT IF NONE
         MVC   E4C04DSO,=C'DELETESTATUS (NOTDELETABLE)' SET NOTDELETABL
         CLC   P4C04DEL,DFHVALUE(DELETABLE) IS IT DELETABLE ?
         BNE   E4C04DUN           EXIT IF NOT
         MVC   E4C04DSO,=C'DELETESTATUS (DELETABLE)   ' SET DELETABLE
E4C04DUN EQU   *
* NOHANDLE
         CLI   P4C04NOH,X'FF'     ANY NOHANDLE ?
         BNE   E4C04CDE           EXIT IF NOT
         MVC   E4C04NHO,=C'NOHANDLE' SET NOHANDLE
E4C04CDE EQU   *
         L     R0,P4C04EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E4C04PRO        SAVE PROGRAM NAME
         STG   R8,E4C04PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E4C04WK2        SAVE OFFSET
         UNPK  E4C04WK1(9),E4C04WK2(5) UNPACK OFFSET
         TR    E4C04WK1(8),E4C04TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E4C04OFO,C'X'''    SET X'
         MVC   E4C04OFO+2(6),E4C04WK1+2 MOVE OFFSET
         MVI   E4C04OFO+8,C''''   SET ENDING QUOTE
* FOR SET FILE THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF4C04L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P4C04EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P4C04EDL        SAME ?
         BE    E4C04QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E4C04QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E4C04WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E4C04WK1) INITIMG(0)
         ST    R6,E4C04ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF4C04L        LENGTH TO MOVE
         LA    R8,EDF4C04S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P4C04EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E4C04WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF4C04L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P4C04EDL        LENGTH TO MOVE
         L     R8,P4C04EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE AND DSA
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E4C04ADD) LENGTH(E4C04WK1)                    X
                    QUEUE('4C04') REQID(E4C04REQ)
         EXEC  CICS FREEMAIN DATA(E4C04ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E4C04ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E4C04ESA DS    CL(EIBLENG)        EIB SAVE AREA
E4C04DEC DC    PL8'0'
E4C04WK1 DS    XL9
E4C04ADD DS    0A
E4C04WK2 DS    XL4
E4C04REQ DC    CL8'4C04'
E4C04TBL DC    C'0123456789ABCDEF'
         LTORG
         DROP  R12
*
EDF9626  DS    0H
* STARTBROWSE CONTAINER
         USING *,R12
         USING (P9626,P9626END),R3
         L     DFHEIBR,P9626EIB   LOAD EIB ADDRESS
         MVC   E9626ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF9626S        ADDRESS MAP
         USING EDF9626S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF9626L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E9626TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E9626TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E9626TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E9626AFT           EXIT IF NOT
* 'BEFORE' STARTBROWSE CONTAINER
         MVC   E9626STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E9626REQ+4,C'B'    SET REQID
         MVI   E96261RA,DFHBMASD  HIDE RESPONSE
         MVI   E96262RA,DFHBMASD  HIDE EIBRESP2
         B     E9626PRM           EXIT
*
E9626AFT EQU   *
* 'AFTER' STARTBROWSE CONTAINER
         MVC   E9626STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E9626REQ+4,C'A'    SET REQID
* CHANNEL
         MVI   E9626CHO,C'('      SET OPEN BRACKET
         MVC   E9626CHO+1(16),P9626CHN SET CHANNEL
         MVI   E9626CHO+17,C')'   SET CLOSE BRACKET
* BROWSETOKEN
         MVC   E9626BTO,=C'(X''00000000'')' SET TEMPLATE
         MVC   E9626WK2(4),TCTTETKN MOVE BROWSETOKEN
         UNPK  E9626WK1(9),E9626WK2(5) UNPACK BROWSETOKEN
         TR    E9626WK1(8),E9626TBL-240 CONVERT TO DISPLAY HEX
         MVC   E9626BTO+3(8),E9626WK1 MOVE BROWSETOKEN
* RESP/RESP2
         LA    R5,E9626RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E9626DEC        CONVERT TO DECIMAL
         UNPK  E9626R2O,E9626DEC+6(2) UNPACK EIBRESP2
         OI    E9626R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E9626PRM           EXIT IF NONE
         UNPK  E9626WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E9626WK1(12),E9626TBL-240 CONVERT TO DISPLAY HEX
         MVC   E9626RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E9626RCO+12(12),E9626WK1 SET EIBRCODE
E9626PRM EQU   *
* NOHANDLE
         CLI   P9626NOH,X'FF'     ANY NOHANDLE ?
         BNE   E9626CDE           EXIT IF NOT
         MVC   E9626NHO,=C'NOHANDLE' SET NOHANDLE
E9626CDE EQU   *
         L     R0,P9626EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E9626PRO        SAVE PROGRAM NAME
         STG   R8,E9626PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E9626WK2        SAVE OFFSET
         UNPK  E9626WK1(9),E9626WK2(5) UNPACK OFFSET
         TR    E9626WK1(8),E9626TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E9626OFO,C'X'''    SET X'
         MVC   E9626OFO+2(6),E9626WK1+2 MOVE OFFSET
         MVI   E9626OFO+8,C''''   SET ENDING QUOTE
* FOR STARTBROWSE CONTAINER THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF9626L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P9626EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P9626EDL        SAME ?
         BE    E9626QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E9626QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E9626WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E9626WK1) INITIMG(0)
         ST    R6,E9626ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF9626L        LENGTH TO MOVE
         LA    R8,EDF9626S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P9626EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E9626WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF9626L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P9626EDL        LENGTH TO MOVE
         L     R8,P9626EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E9626ADD) LENGTH(E9626WK1)                    X
                    QUEUE('9626') REQID(E9626REQ)
         EXEC  CICS FREEMAIN DATA(E9626ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E9626ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E9626ESA DS    CL(EIBLENG)        EIB SAVE AREA
E9626DEC DS    PL8
E9626WK1 DS    XL9
E9626ADD DS    0A
E9626WK2 DS    XL4
E9626REQ DC    CL8'9626'
E9626TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF9628  DS    0H
* GETNEXT CONTAINER
         USING *,R12
         USING (P9628,P9628END),R3
         L     DFHEIBR,P9628EIB   LOAD EIB ADDRESS
         MVC   E9628ESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF9628S        ADDRESS MAP
         USING EDF9628S,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF9628L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E9628TSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E9628TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E9628TNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E9628AFT           EXIT IF NOT
* 'BEFORE' GETNEXT CONTAINER
         MVC   E9628STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E9628REQ+4,C'B'    SET REQID
         MVI   E96281RA,DFHBMASD  HIDE RESPONSE
         MVI   E96282RA,DFHBMASD  HIDE EIBRESP2
         B     E9628PRM           EXIT
*
E9628AFT EQU   *
* 'AFTER' GETNEXT CONTAINER
         MVC   E9628STO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E9628REQ+4,C'A'    SET REQID
* CONTAINER
         MVI   E9628CNO,C'('      SET OPEN BRACKET
         L     R5,P9628CTN        R5=CONTAINER ADDRESS
         MVC   E9628CNO+1(16),0(R5) SET CONTAINER
         MVI   E9628CNO+17,C')'   SET CLOSE BRACKET
* RESP/RESP2
         LA    R5,E9628RPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E9628DEC        CONVERT TO DECIMAL
         UNPK  E9628R2O,E9628DEC+6(2) UNPACK EIBRESP2
         OI    E9628R2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E9628PRM           EXIT IF NONE
         UNPK  E9628WK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E9628WK1(12),E9628TBL-240 CONVERT TO DISPLAY HEX
         MVC   E9628RCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E9628RCO+12(12),E9628WK1 SET EIBRCODE
E9628PRM EQU   *
* BROWSETOKEN
         MVC   E9628BTO,=C'(X''00000000'')' SET TEMPLATE
         MVC   E9628WK2(4),P9628TKN MOVE BROWSETOKEN
         UNPK  E9628WK1(9),E9628WK2(5) UNPACK BROWSETOKEN
         TR    E9628WK1(8),E9628TBL-240 CONVERT TO DISPLAY HEX
         MVC   E9628BTO+3(8),E9628WK1 MOVE BROWSETOKEN
* NOHANDLE
         CLI   P9628NOH,X'FF'     ANY NOHANDLE ?
         BNE   E9628CDE           EXIT IF NOT
         MVC   E9628NHO,=C'NOHANDLE' SET NOHANDLE
E9628CDE EQU   *
         L     R0,P9628EDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E9628PRO        SAVE PROGRAM NAME
         STG   R8,E9628PGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E9628WK2        SAVE OFFSET
         UNPK  E9628WK1(9),E9628WK2(5) UNPACK OFFSET
         TR    E9628WK1(8),E9628TBL-240 CONVERT TO DISPLAY HEX
         MVHHI E9628OFO,C'X'''    SET X'
         MVC   E9628OFO+2(6),E9628WK1+2 MOVE OFFSET
         MVI   E9628OFO+8,C''''   SET ENDING QUOTE
* FOR GETNEXT CONTAINER THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF9628L        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P9628EDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P9628EDL        SAME ?
         BE    E9628QUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E9628QUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E9628WK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E9628WK1) INITIMG(0)
         ST    R6,E9628ADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF9628L        LENGTH TO MOVE
         LA    R8,EDF9628S        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P9628EDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E9628WK1        MAP+DSA LENGTH
         AHI   R9,-(EDF9628L+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P9628EDL        LENGTH TO MOVE
         L     R8,P9628EDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E9628ADD) LENGTH(E9628WK1)                    X
                    QUEUE('9628') REQID(E9628REQ)
         EXEC  CICS FREEMAIN DATA(E9628ADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E9628ESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E9628ESA DS    CL(EIBLENG)        EIB SAVE AREA
E9628DEC DS    PL8
E9628WK1 DS    XL9
E9628ADD DS    0A
E9628WK2 DS    XL4
E9628REQ DC    CL8'9628'
E9628TBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
EDF962A  DS    0H
* ENDBROWSE CONTAINER
         USING *,R12
         USING (P962A,P962AEND),R3
         L     DFHEIBR,P962AEIB   LOAD EIB ADDRESS
         MVC   E962AESA,DFHEIBLK  SAVE EIB
         LARL  R4,EDF962AS        ADDRESS MAP
         USING EDF962AS,R4
         LR    R6,R4              AREA TO CLEAR
         LA    R7,EDF962AL        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
* EIBTRNID
         MVC   E962ATSO,EIBTRNID  MOVE TRANSID
* EIBTASKN
         UNPK  E962ATNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E962ATNO+6,X'F0'   SET SIGN
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E962AAFT           EXIT IF NOT
* 'BEFORE' ENDBROWSE CONTAINER
         MVC   E962ASTO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         MVI   E962AREQ+4,C'B'    SET REQID
         MVI   E962A1RA,DFHBMASD  HIDE RESPONSE
         MVI   E962A2RA,DFHBMASD  HIDE EIBRESP2
         B     E962APRM           EXIT
*
E962AAFT EQU   *
* 'AFTER' ENDBROWSE CONTAINER
         MVC   E962ASTO,=C'COMMAND EXECUTION COMPLETE' SET STATUS
         MVI   E962AREQ+4,C'A'    SET REQID
* RESP/RESP2
         LA    R5,E962ARPO        R5=ADDRESS OF OUTPUT AREA
         JASL  R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E962ADEC        CONVERT TO DECIMAL
         UNPK  E962AR2O,E962ADEC+6(2) UNPACK EIBRESP2
         OI    E962AR2O+2,X'F0'   SET SIGN
* EIBRCODE
         OC    EIBRCODE,EIBRCODE  ANY EIBRCODE ?
         BZ    E962APRM           EXIT IF NONE
         UNPK  E962AWK1(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    E962AWK1(12),E962ATBL-240 CONVERT TO DISPLAY HEX
         MVC   E962ARCO,=C'EIBRCODE: X''000000000000''' SET TEMPLATE
         MVC   E962ARCO+12(12),E962AWK1 SET EIBRCODE
E962APRM EQU   *
* BROWSETOKEN
         MVC   E962ABTO,=C'(X''00000000'')' SET TEMPLATE
         MVC   E962AWK2(4),P962ATKN MOVE BROWSETOKEN
         UNPK  E962AWK1(9),E962AWK2(5) UNPACK BROWSETOKEN
         TR    E962AWK1(8),E962ATBL-240 CONVERT TO DISPLAY HEX
         MVC   E962ABTO+3(8),E962AWK1 MOVE BROWSETOKEN
* NOHANDLE
         CLI   P962ANOH,X'FF'     ANY NOHANDLE ?
         BNE   E962ACDE           EXIT IF NOT
         MVC   E962ANHO,=C'NOHANDLE' SET NOHANDLE
E962ACDE EQU   *
         L     R0,P962AEDF        R0=ADDRESS TO FIND
         JASL  R14,CDEFIND        FIND PROGRAM/OFFSET VIA CDE CHAIN
         STG   R8,E962APRO        SAVE PROGRAM NAME
         STG   R8,E962APGO        SAVE PROGRAM NAME TO HEADER
         ST    R9,E962AWK2        SAVE OFFSET
         UNPK  E962AWK1(9),E962AWK2(5) UNPACK OFFSET
         TR    E962AWK1(8),E962ATBL-240 CONVERT TO DISPLAY HEX
         MVHHI E962AOFO,C'X'''    SET X'
         MVC   E962AOFO+2(6),E962AWK1+2 MOVE OFFSET
         MVI   E962AOFO+8,C''''   SET ENDING QUOTE
* FOR ENDBROWSE CONTAINER THE GETMAIN IS FOR THE FOLLOWING:
*    MAP
*    AL4(DSAADDR),AL2(CICSDSALEN),AL2(DSALEN)
*    DSA (QUADWORD ALIGNED)
*
         LA    R9,EDF962AL        R9=MAP LENGTH
         AHI   R9,8               + 8 (FOR DSA ADDR AND LENGTHS)
* QUADWORD ALIGN THE DSA LENGTH FOR GETMAIN
         LH    R6,P962AEDL        R6=DSA LENGTH              54
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         SLL   R6,4               SHIFT BACK                 50
         CH    R6,P962AEDL        SAME ?
         BE    E962AQUD           EXIT IF ALREADY ALIGNED
         SRL   R6,4               SHIFT TO NO. OF QUADWORDS   5
         AHI   R6,1               +1                          6
         SLL   R6,4               SHIFT BACK                 60
E962AQUD EQU   *
         AR    R9,R6              + QUADWORD ALIGNED DSA LENGTH
         STH   R9,E962AWK1        SAVE IT
         EXEC  CICS GETMAIN SET(R6) LENGTH(E962AWK1) INITIMG(0)
         ST    R6,E962AADD        SAVE ADDRESS FOR FREEMAIN
* MOVE THE MAP
         LA    R7,EDF962AL        LENGTH TO MOVE
         LA    R8,EDF962AS        MAP ADDRESS
         LR    R9,R7              LENGTH TO MOVE
         MVCL  R6,R8              MOVE MAP
* R6 IS NEXT BYTE IN GETMAIN'D AREA
         MVC   0(6,R6),P962AEDS   SAVE DSA ADDR/CICS DSA LENGTH
         LH    R9,E962AWK1        MAP+DSA LENGTH
         AHI   R9,-(EDF962AL+8)   - MAP LENGTH+8 = ALIGNED DSA LENGTH
         STH   R9,6(R6)           SAVE ALIGNED DSA LENGTH
         AHI   R6,8               BUMP POINTER
* MOVE THE DSA
         LH    R7,P962AEDL        LENGTH TO MOVE
         L     R8,P962AEDS        DSA ADDRESS
         LR    R9,R7              DSA LENGTH
         MVCL  R6,R8              MOVE DSA AFTER MAP
         LARL  R9,PCEDFHCN        ADDRESS DUMMY DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAP STRUCTURE
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(TCTTEEDT) RTRANSID('SEND')                 X
                    FROM(E962AADD) LENGTH(E962AWK1)                    X
                    QUEUE('962A') REQID(E962AREQ)
         EXEC  CICS FREEMAIN DATA(E962AADD)
* Z390CEDF WILL CANCEL THIS DELAY
         EXEC  CICS DELAY FOR HOURS(1) REQID(CEDFRQID) NOHANDLE
         MVC   DFHEIBLK(EIBLENG),E962AESA RESTORE EIB
         DROP  R9
         PR    ,                  UNSTACK AND RETURN
*
E962AESA DS    CL(EIBLENG)        EIB SAVE AREA
E962ADEC DS    PL8
E962AWK1 DS    XL9
E962AADD DS    0A
E962AWK2 DS    XL4
E962AREQ DC    CL8'962A'
E962ATBL DC    C'0123456789ABCDEF'
*
         LTORG
         DROP  R12
*
* DUMMY DSA
*
PCEDFHCN DC    A(DFHEIHCN)        DUMMY A(DFHEIHCN)
DFHEIHCN DC    A(0)               DUMMY DFHEIHCN
*
* SUBROUTINES
*
DORESP   DS    0H
         LARL  R6,RESPTAB         R6=RESPONSE TABLE
DORESPLP EQU   *
         CLC   0(4,R6),EIBRESP    GOT ONE ?
         JE    GOTRESP            EXIT IF WE HAVE
         AHI   R6,16              BUMP POINTER
         CLI   0(R6),X'FF'        END OF TABLE ?
         JNE   DORESPLP           LOOP IF NOT
         DC    H'0'               ABEND, NEED TABLE ENTRY
GOTRESP  EQU   *
         MVC   0(12,R5),4(R6)     MOVE INTERPRETED EIBRESP
         BR    R14                RETURN
*
RESPTAB  DS    0F
         DC    F'00',CL12'NORMAL'
         DC    F'01',CL12'ERROR'
         DC    F'11',CL12'TERMIDERR'
         DC    F'12',CL12'FILENOTFOUND'
         DC    F'13',CL12'NOTFND'
         DC    F'14',CL12'DUPREC'
         DC    F'15',CL12'DUPKEY'
         DC    F'16',CL12'INVREQ'
         DC    F'17',CL12'IOERR'
         DC    F'18',CL12'NOSPACE'
         DC    F'19',CL12'NOTOPEN'
         DC    F'20',CL12'ENDFILE'
         DC    F'21',CL12'ILLOGIC'
         DC    F'22',CL12'LENGERR'
         DC    F'26',CL12'ITEMERR'
         DC    F'27',CL12'PGMIDERR'
         DC    F'28',CL12'TRANSIDERR'
         DC    F'29',CL12'ENDDATA'
         DC    F'31',CL12'EXPIRED'
         DC    F'36',CL12'MAPFAIL'
         DC    F'38',CL12'INVMPSZ'
         DC    F'40',CL12'OVERFLOW'
         DC    F'44',CL12'QIDERR'
         DC    F'55',CL12'ENQBUSY'
         DC    F'56',CL12'ENVDEFERR'
         DC    F'61',CL12'NOTALLOC'
         DC    F'83',CL12'END'
         DC    F'84',CL12'DISABLED'
         DC    F'109',CL12'ACTIVITYERR'
         DC    F'110',CL12'CONTAINERERR'
         DC    F'112',CL12'TOKENERR'
         DC    F'122',CL12'CHANNELERR'
         DC    X'FF'              STOPPER
*
DOAID    DS    0F
         LARL  R6,AIDTAB          R6=AID TABLE
DOAIDLP  EQU   *
         CLC   0(1,R6),EIBAID     GOT ONE ?
         JE    GOTAID             EXIT IF WE HAVE
         AHI   R6,6               BUMP POINTER
         CLI   0(R6),X'FF'        END OF TABLE ?
         JNE   DOAIDLP            LOOP IF NOT
         DC    H'0'               ABEND, UNKNOWN AID
GOTAID   EQU   *
         MVC   0(5,R5),1(R6)      MOVE INTERPRETED EIBAID
         BR    R14                RETURN
*
AIDTAB   DS    0H
         DC    X'7D',C'ENTER'
         DC    X'6D',C'CLEAR'
         DC    X'6C',C'PA1  '
         DC    X'6E',C'PA2  '
         DC    X'6B',C'PA3  '
         DC    X'F1',C'PF1  '
         DC    X'F2',C'PF2  '
         DC    X'F3',C'PF3  '
         DC    X'F4',C'PF4  '
         DC    X'F5',C'PF5  '
         DC    X'F6',C'PF6  '
         DC    X'F7',C'PF7  '
         DC    X'F8',C'PF8  '
         DC    X'F9',C'PF9  '
         DC    X'7A',C'PF10 '
         DC    X'7B',C'PF11 '
         DC    X'7C',C'PF12 '
         DC    X'C1',C'PF13 '
         DC    X'C2',C'PF14 '
         DC    X'C3',C'PF15 '
         DC    X'C4',C'PF16 '
         DC    X'C5',C'PF17 '
         DC    X'C6',C'PF18 '
         DC    X'C7',C'PF19 '
         DC    X'C8',C'PF20 '
         DC    X'C9',C'PF21 '
         DC    X'4A',C'PF22 '
         DC    X'4B',C'PF23 '
         DC    X'4C',C'PF24 '
         DC    X'FF'              STOPPER
*
DOFN     DS    0F
         LARL  R6,FNTAB           R6=FN TABLE
DOFNLOOP EQU   *
         CLC   0(2,R6),EIBFN      GOT ONE ?
         JE    GOTFN              EXIT IF WE HAVE
         AHI   R6,12              BUMP POINTER
         CLI   0(R6),X'FF'        END OF TABLE ?
         JNE   DOFNLOOP           LOOP IF NOT
         DC    H'0'               ABEND, NEED TABLE ENTRY
GOTFN    EQU   *
         MVC   0(10,R5),2(R6)     MOVE INTERPRETED EIBFN
         BR    R14                RETURN
*
FNTAB    DS    0H
         DC    X'0E02',CL10'LINK'
         DC    X'0E04',CL10'XCTL'
         DC    X'FF'              STOPPER
*
CDEFIND  DS    0H
* SET PROGRAM AND OFFSET VIA CDE CHAIN
* INPUT : R0=ADDRESS TO FIND
*
* OUTPUT: R8=PROGRAM NAME
*         R9=OFFSET
         L     R6,X'10'           R6=CVT ADDRESS (X'2000')
         USING IHACVT,R6
         L     R6,CVTCDE          R6=CDE CHAIN ADDRESS
         DROP  R6
         USING IHACDE,R6
CDELOOP  EQU   *
         L     R7,CDLOADPT        R7=LOAD POINT
         SLL   R7,1               ZERO TOP
         SRL   R7,1                        BIT
         CR    R7,R0              MIGHT IT BE THIS PROGRAM ?
         JNL   CDECHAIN           EXIT IF NOT
         LR    R9,R7              SAVE LOAD POINT
         A     R9,CDMODLEN        ADD PROGRAM LENGTH
         CR    R9,R0              IS IT THIS PROGRAM ?
         JL    CDECHAIN           EXIT IF NOT
* GOT OUR PROGRAM, SET UP NAME AND OFFSET
         LARL  R8,=CL8' '         BLANK
         LARL  R9,CDEPROG         R9=OUTPUT AREA
         MVC   0(8,R9),0(R8)      BLANK OUTPUT AREA
         LA    R8,CDNAME          R8=PROGRAM NAME
         LA    R5,8               R5=PROGRAM NAME LENGTH
CDEMOVE  EQU   *
         MVC   0(1,R9),0(R8)      MOVE BYTE AT A TIME
         AHI   R8,1               BUMP PROGRAM NAME POINTER
         AHI   R9,1               BUMP OUTPUT AREA POINTER
         CLI   0(R8),C'.'         TERMINATOR ?
         JE    CDEPDONE           EXIT IF IT IS
         JCT   R5,CDEMOVE         LOOP
*
CDEPDONE EQU   *
         LR    R9,R0              CALL ADDRESS
         SR    R9,R7              - LOAD POINT = OFFSET
         STRL  R7,CDELOAD         SAVE LOAD POINT
         LGRL  R8,CDEPROG         LOAD PROGRAM NAME
         BR    R14                RETURN
*
CDECHAIN EQU   *
         ICM   R6,15,CDCHAIN      NEXT CDE ?
         JNZ   CDELOOP            LOOP IF WE HAVE ONE
         DC    H'0'               IMPOSSIBLE !!!
*
CDEPROG  DS    CL8
CDELOAD  DS    AL4
*
CEDFRQID DC    C'!!CEDF!!'        DELAY REQID
*
* IF WE INTERCEPT A START, THE START HERE WILL DESTROY THE ORIGINAL
* PARAMETERS, SO WE HAVE TO USE A PRIVATE AREA AND NOT GENERATE IT
* IN THE MACRO
         P1008
*
         COPY  MAPEDF
         DFHMAPDS
*
         P0202 DSECT
         P0204 DSECT
         P0206 DSECT
         P0208 DSECT
         P020A DSECT
         P020C DSECT
         P020E DSECT
         P0402 DSECT
         P0404 DSECT
         P0602 DSECT
         P060C DSECT
         P060E DSECT
         P0610 DSECT
         P0612 DSECT
         P0614 DSECT
         P0A02 DSECT
         P0A04 DSECT
         P0A06 DSECT
         P0E02 DSECT
         P0E04 DSECT
         P0E06 DSECT
         P0E08 DSECT
         P0E0A DSECT
         P0E0C DSECT
         P0E0E DSECT
         P1002 DSECT
         P100A DSECT
         P100C DSECT
         P1204 DSECT
         P1206 DSECT
         P1802 DSECT
         P1804 DSECT
         P1812 DSECT
         P1C02 DSECT
         P3412 DSECT
         P3414 DSECT
         P3416 DSECT
         P3440 DSECT
         P4A02 DSECT
         P4A04 DSECT
         P4C02 DSECT
         P4C04 DSECT
         P9626 DSECT
         P9628 DSECT
         P962A DSECT
*
         DFHEIBLK                 EIB
         DFHTCTTE                 TCTTE
*
DFHEISTG DSECT
         DS    18F  SAVE AREA
         DS    A    EIB POINTER
         DS    A    COMMAREA POINTER
         DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
         DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
         DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
         DS    CL8  INVOKING PROGRAM FOR ASSIGN
         DS    CL8  RETURN PROGRAM FOR ASSIGN
         DS    CL16 CHANNEL FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
*
         COPY  DFHBMSCA
*
         CVTD  ,                  CVT
         CDED  ,                  CDE
*
         EQUREGS
*
         END
