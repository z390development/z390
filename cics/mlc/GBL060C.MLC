***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
GBL060C  SUBENTRY
*
* FN=060C  START BROWSE FILE
*
*         +0/DSCT +4/DSECT +8/IND   +12/IND +16
* R1  >>> WTOMSG, REQDSECT,DFHFCTAD,CONNID, TRCEZ390
* R14 = RETURN ADDRESS
         LR    R3,R1              SAVE PARM POINTER
         L     R4,16(R3)          ADDRESS OF TRCEZ390
         MVC   TRCEZ390,0(R4)     MOVE IT
         L     R9,0(R3)           WTODSECT ADDRESS
         USING WTODSECT,R9
         L     R6,4(R3)           ADDRESS RECEIVED DATA
         USING DFHFCBLK,R6
         L     R4,8(R3)           ADDRESS FCT ADDRESS
         L     R7,0(R4)           ADDRESS FCT
         USING DFHFCTDS,R7
         USING IHAACB,R8
         MVC   WTOTERM,FCPTERM    SET TERMID
         MVC   WTOTRAN,FCPTRAN    SET TRANSID
         MVI   WTOTYPE,C' '       NO TRANSID TYPE
         UNPK  WTOTASKN,FCPTASKN  UNPACK TASK NUMBER
         OI    WTOTASKN+6,X'F0'   CLEAR SIGN
         MVC   WTODESC,=CL45'<<<Z390KCP STARTBR    REQUEST'
         MVI   CICSTIND,C'A'      SET APPLICATION TYPE
         BAL   R11,CICSTRCE       TRACE IT
         BAL   R11,FOP1REF        OPEN ON 1ST REFERENCE
* SET UP VSWA FOR REQUEST
* R6= REQUEST DATA  (DFHFCBLK)
* R7= FCTTE ADDRESS (DFHFCTDS)
* R8= ACB
* R4= VSWA AND RPL
* R10=VCLR (CLUSTER ENTRY)
         TM    FCTSERV,FCTBRWSE   IS BROWSE ALLOWED ?
         BNO   STBRIV20           EXIT IF NOT
         LA    R5,FCTVSWA         R5=CHAINED FROM ADDRESS
         ICM   R4,15,FCTVSWA      R4=VSWA ANCHOR
         BZ    STBRNSLT           EXIT IF NO VSWAS
         USING DFHVSWAD,R4
* SCAN TO END OF CHAIN, CREATE A NEW VSWA
STBRFLP  EQU   *
         LTR   R4,R4              END OF CHAIN ?
         BZ    STBRNSLT           EXIT IF IT IS
* CHECK VSWA FOR BROWSE AND DUPLICATE TASKNO/REQID
         CLC   VSWTASKN,FCPTASKN  IS IT OURS ?
         BNE   STBRVCHN           CHAIN IF NOT
         CLI   VSWCTYPE,VSWCBRWS  IS IT BROWSE TYPE ?
         BNE   STBRVCHN           CHAIN IF NOT
         CLC   VSWREQID,FCPREQID  IS IT OUR REQID ?
         BE    STBRIV33           ERROR IF IT IS
STBRVCHN EQU   *
         LR    R5,R4              R5=CHAINED FROM ADDRESS
         L     R4,VSWCHAIN        NEXT ENTRY
         B     STBRFLP            LOOP
*
STBRNSLT EQU   *
* LOCATED LAST (OR 1ST) VSWA
* GETMAIN A NEW ONE AND CHAIN
         LA    R1,VSWLEN          R1=VSWA LENGTH
         GETMAIN R,LV=(R1),A=0(R5)
         LR    R4,R1              NEW VSWA
         XC    DFHVSWAD(VSWLEN),DFHVSWAD CLEAR IT
         MVC   VSWTASKN,FCPTASKN  SET TASK NUMBER
         MVC   VSWCTYPE,FCPCTYPE  SET COMMAND TYPE
         MVC   VSWREQID,FCPREQID  SET REQID
         USING IHARPL,VSWRPL
         L     R10,ACBVCLRA       R10=VCLR (CLUSTER ENTRY)
         USING IHAVCLR,R10
         CLI   FCPRDOPT,FCPRDXRB  XRBA REQUEST ?
         BE    STBRXRBA           EXIT IF IT IS
         CLI   FCPRDOPT,FCPRDRRN  RRN REQUEST ?
         BE    STBRRRN            EXIT IF IT IS
         CLI   FCPRDOPT,FCPRDKEY  FULL KEY REQUEST ?
         BE    STBRKEY            EXIT IF IT IS
         CLI   FCPRDOPT,FCPRDGEN  GENERIC KEY REQUEST ?
         BE    STBRKEY            EXIT IF IT IS
* ESDS RBA
         GENCB BLK=RPL,                                                X
               ACB=(R8),                                               X
               OPTCD=(ADR,SEQ),                                        X
               ARG=(S,FCPRBA),                                         X
               WAREA=IHARPL,                                           X
               LENGTH=RPLEND-IHARPL
         B     STBRPNT            EXIT
*
STBRXRBA EQU   *
* ESDS XRBA
         GENCB BLK=RPL,                                                X
               ACB=(R8),                                               X
               OPTCD=(ADR,SEQ,XRBA),                                   X
               ARG=(S,FCPXRBA),                                        X
               WAREA=IHARPL,                                           X
               LENGTH=RPLEND-IHARPL
         B     STBRPNT            EXIT
*
STBRRRN  EQU   *
* RRDS RRN
         GENCB BLK=RPL,                                                X
               ACB=(R8),                                               X
               OPTCD=(KEY,SEQ),                                        X
               ARG=(S,FCPRRN),                                         X
               WAREA=IHARPL,                                           X
               LENGTH=RPLEND-IHARPL
         B     STBRPNT            EXIT
*
STBRKEY  EQU   *
* KSDS
         GENCB BLK=RPL,                                                X
               ACB=(R8),                                               X
               OPTCD=(KEY,SEQ,FKS,KEQ),                                X
               ARG=(S,FCPRID),                                         X
               WAREA=IHARPL,                                           X
               LENGTH=RPLEND-IHARPL
         MVC   RPLLKEY,VCLRKLEN   DEFAULT TO CATALOG BASE KEYLENGTH
         ICM   R12,15,ACBVAIXA    IS THERE A PATH ?
         BZ    STBRGEN1           EXIT IF NOT
* THIS IS A PATH, USE THE ALTERNATE KEY LENGTH
         USING IHAVAIX,R12
         MVC   RPLLKEY,VAIXKLEN   DEFAULT TO CATALOG AIX KEYLENGTH
STBRGEN1 EQU   *
         CLI   FCPRDOPT,FCPRDGEN  GENERIC ?
         BNE   STBRGTE            EXIT IF NOT
* KSDS GENERIC
         OI    VSWOPT,VSWGEN      SET IN VSWA
         OI    RPLOPT1,RPLOPT1_GEN SET IN RPL
         MVC   RPLLKEY+2(2),FCPKEYLN MOVE REQUESTED GENERIC KEYLENGTH
         TM    RPLLKEY+2,X'80'    IS IT NEGATIVE ?
         BO    STBRIV42           ERROR IF IT IS
         LTR   R12,R12            IS THERE A PATH ?
         BZ    STBRBAS2           EXIT IF NOT
* THIS IS A PATH, TEST THE ALTERNATE KEY LENGTH
         CLC   FCPKEYLN,VAIXKLEN+2 VALIDATE AIX GENERIC KEYLENGTH ?
         BNL   STBRIV25           EXIT IF BAD
         DROP  R12
         B     STBRGTE            EXIT
*
STBRBAS2 EQU   *
         CLC   FCPKEYLN,VCLRKLEN+2 VALIDATE BASE GENERIC KEYLENGTH ?
         BNL   STBRIV25           EXIT IF BAD
STBRGTE  EQU   *
         CLI   FCPBROPT,FCPBRGTE  GTEQ ?
         BNE   STBRNTGE           EXIT IF NOT
* KSDS GTEQ
         OI    VSWOPT,VSWGTEQ     SET IN VSWA
         OI    RPLOPT1,RPLOPT1_KGE SET IN RPL
STBRNTGE EQU   *
         OC    FCPKEYLN,FCPKEYLN  KEYLENGTH=0 ?
         BNZ   STBRPNT            EXIT IF NOT
* KSDS KEYLENGTH(0)
*    ARG IS ALWAYS X'00' TO GET 1ST RECORD
*    GENERIC=KEYLENGTH(1) AND GTEQ FORCED
         XC    FCPRID,FCPRID      SET KEY TO X'00'
         OI    RPLOPT1,RPLOPT1_KGE FORCE GTEQ
         MVC   RPLLKEY,=F'1'      SET KEYLENGTH=1
*
STBRPNT  EQU   *
         POINT RPL=IHARPL         POSITION FILE FOR START BROWSE
         LTR   R15,R15            CHECK RC ?
         BNZ   STBRFAIL           EXIT IF BAD
* STARTBR COMPLETED
*   ESDS - SAVE   XRBA IN VSWA FOR CHECKING SKIP SEQUENTIAL
*   RRDS - SAVE FCPRRN IN VSWA FOR CHECKING SKIP SEQUENTIAL
*   KSDS - SAVE FCPRID AND KEYLENGTH IN VSWA FOR CHECKING SKIP
*          SEQUENTIAL
*   PASS REQUEST BLOCK BACK
         CLI   FCPRDOPT,FCPRDKEY  FULL KEY REQUEST ?
         BE    STBRSAVK           EXIT IF IT IS
         CLI   FCPRDOPT,FCPRDGEN  GENERIC KEY REQUEST ?
         BE    STBRSAVK           EXIT IF IT IS
         CLI   FCPRDOPT,FCPRDRRN  RRN REQUEST ?
         BE    STBRSAVR           EXIT IF IT IS
* ESDS
         MVC   VSWAXRBA,RPLCXRBA  SAVE XRBA
         B     STBRDONE           EXIT
*
STBRSAVR EQU   *
* RRDS
         MVC   VSWARRN,FCPRRN     SAVE RRN
         B     STBRDONE           EXIT
*
STBRSAVK EQU   *
* KSDS
         MVC   VSWARID,FCPRID     SAVE KEY
         MVC   VSWKEYLN,RPLLKEY+2 SAVE KEYLENGTH
*
STBRDONE EQU   *
         MVC   WTODESC,=CL45'<<<Z390KCP STARTBR    COMPLETED'
STBRSEND EQU   *
*        L     R8,CONNID          R8=CONN ID
         L     R8,12(R3)          R8=CONN ID ADDRESS
         L     R8,0(R8)           R8=CONNID
         TCPIO SEND,MSG=DFHFCBLK,LMSG=FCPTCPIO,CONN=(R8),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND780           EXIT IF BAD
         B     STBRTRCE           EXIT
*
STBRFAIL EQU   *
* STARTBR FAILURE PROCESSING
* FILE ERROR HANDLER
         LA    R15,FILEERTB       R15=ERROR TABLE ADDRESS
FILEERLP EQU   *
         CLC   0(4,15),RPLFEEDB   MATCH TO TABLE
         BNE   FILEERIN           EXIT IF NOT
         MVC   FCPRETCD-DFHFCBLK(4,R5),4(R15) MOVE RETURN CODE
         MVC   FCPRESP2-DFHFCBLK(4,R5),8(R15) MOVE RESP2
         MVC   FCPRESP2-DFHFCBLK(1,R5),1(R15) MOVE RPLFEEDB+1
         MVC   FCPRESP2+1-DFHFCBLK(1,R5),3(R15) MOVE RPLFEEDB+3
         B     FILEERDN           EXIT
*
FILEERIN EQU   *
         AHI   R15,20             BUMP TABLE POINTER
         CLI   0(R15),X'FF'       STOPPER ?
         BNE   FILEERLP           LOOP IF NOT
         J     ABEND790           MISSING TABLE ENTRY SHOULD NOT OCCUR
*
FILEERDN EQU   *
         MVC   WTODESC,=CL45'>>>Z390KCP STARTBR    FAILED'
         MVC   WTODESC+29(8),12(R15) MOVE CONDITION
         B     STBRSEND           EXIT
*
STBRIV20 EQU   *
         MVC   FCPRESP2,=F'20'    SET RESP2 (FUNCTION NOT PERMITTED)
         B     STBRINVQ           EXIT
*
STBRIV25 EQU   *
         MVC   FCPRESP2,=F'25'    SET RESP2 (KEYLENGTH>=ACTUAL)
         B     STBRINVQ           EXIT
*
STBRIV33 EQU   *
         MVC   FCPRESP2,=F'33'    SET RESP2 (DUPLICATE REQID)
         B     STBRINVQ           EXIT
*
STBRIV42 EQU   *
         MVC   FCPRESP2,=F'42'    SET RESP2 (KEYLENGTH<0)
STBRINVQ EQU   *
         MVC   FCPRETCD,DFHRESP(INVREQ) SET INVREQ
         MVC   WTODESC,=CL45'>>>Z390KCP STARTBR    FAILED'
         MVC   WTODESC+29(6),=C'INVREQ'
         LR    R9,R6              SET AS IF NEW DFHFCBLK
*        L     R8,CONNID          R8=CONN ID
         L     R8,12(R3)          R8=CONN ID ADDRESS
         L     R8,0(R8)           R8=CONNID
         LA    R15,FCPREFIX       R15=LENGTH TO SEND
         TCPIO SEND,MSG=(R9),LMSG=(R15),CONN=(R8),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND780           EXIT IF BAD
STBRTRCE EQU   *
         L     R9,0(R3)           WTODSECT ADDRESS
         MVI   CICSTIND,C'A'      SET APPLICATION TYPE
         BAL   R11,CICSTRCE       TRACE IT
         SUBEXIT
*
* SUBROUTINES
*
* MODIFIED CICSTRCE
CICSTRCE DS    0H
         CLI   TRCEZ390,C'N'      NO TRACING ?
         BER   R11                RETURN IF IT IS
         CLI   TRCEZ390,C'Y'      ALL TRACING ?
         BE    CICSTRGO           TRACE IF IT IS
         CLC   TRCEZ390,CICSTIND  TRACE TYPE=TRACE REQUEST ?
         BNER  R11                RETURN IF NOT
CICSTRGO EQU   *
         TIME  DEC,TIME,LINKAGE=SYSTEM GET TIME
         MVO   TIMEPACK,TIME      MOVE TO PACKED FIELD
         MVC   TIMEHERE(13),TIMEEDIT MOVE EDIT WORD
         ED    TIMEHERE(13),TIMEPACK EDIT TIME
         MVC   WTOTIME,TIMEHERE   SET TIME
         WTO   MF=(E,WTOMSG)      TRACE IT
         BR    R11                RETURN
*
FOP1REF DS     0H
* OPEN ON 1ST REFERENCE
FOP1LOOP EQU   *
* CHECK THE FCT STATUS
         CLC   FCPFILNM,FCTFILNM  MATCH REQUESTED FILENAME TO FCT ?
         BNE   FOP1INCR           EXIT IF NOT MATCHED
* FILE FOUND
         LA    R8,FCTTELEN(R7)    ADDRESS ACB
         TM    FCTFILST,FCTOPEN   IS FILE OPEN ?
         BOR   R11                RETURN IF IT IS
* FILE NOT OPEN
* TEST FILSTAT OPTIONS
*    OPENED,ENABLED   -- FILE OPENED AT START, CANNOT OCCUR HERE
*                     -- BUT TREATED AS OPEN ON 1ST REF
*    OPENED,DISABLED  -- FILE OPENED AT START, CANNOT OCCUR HERE
*                     -- BUT TREATED AS OPEN ON 1ST REF
*                     -- DISABLED STATUS RETURNED
*    OPENED,UNENABLED -- CANNOT OCCUR
*
*    CLOSED,ENABLED   -- FILE OPENED NOW (1ST REF)
*    CLOSED,DISABLED  -- DISABLED STATUS RETURNED
*    CLOSED,UNENABLED -- NOTOPEN STATUS RETURNED
         TM    FCTFILST,FCTOPCLO  FILSTAT=OPENED ?
         BO    FOP1OPEN           EXIT IF IT IS
* FILSTAT=CLOSED
         TM    FCTFILST,FCTENDIS  FILSTAT=ENABLED ?
         BO    FOP1OPEN           EXIT IF IT IS
* FILSTAT=CLOSED AND NOT ENABLED
         TM    FCTFILST,FCTUNENA  FILSTAT=UNENABLED ?
         BO    FOP1NOTO           EXIT IF NOTOPEN
         B     FOP1DISA           EXIT IF DISABLED
*
FOP1INCR EQU   *
         AHI   R7,FCTABLEN        POINT TO NEXT FCT ENTRY
         CLI   0(R7),X'FF'        END OF FCT ?
         BNE   FOP1LOOP           LOOP IF NOT
* FILE NOT FOUND
         B     FOP1FNTF           EXIT IF FILENOTFOUND
*
FOP1OPEN EQU   *
* OPEN ON 1ST REF
* INITIALIZE MESSAGE
         MVC   WTOFN,=C'06FE'     1ST REF FILE OPENS
         MVC   WTOTERM,=4C' '     NO TERMID
         MVC   WTOTRAN,=4C' '     NO PRESET TRANSID
         MVI   WTOTYPE,C' '       NO TRANSID TYPE
         MVC   WTOTASKN,=7C' '    NO TASK NUMBER
         MVC   WTODESC,=CL45'FILE ........ OPEN  FAILED'
         MVC   WTODESC+5(8),FCTFILNM MOVE FILENAME TO MSG
         TM    FCTSERV,FCTDELT+FCTUPDT+FCTADD REASON TO OPEN OUTPUT ?
         BZ    FOP1IN             EXIT IF NONE
* SET ALL BITS WE ARE LIKELY TO USE
*    ADR = ACCESS BY RBA
*    DIR = DIRECT ACCESS
*    KEY = ACCESS BY KEY
*    SEQ = SEQUENTIAL ACCESS
*    IN  = READ ONLY
*    OUT = READ OR WRITE
* OPEN FOR OUTPUT
         MODCB ACB=IHAACB,MACRF=(ADR,DIR,KEY,SEQ,OUT)
         OPEN  (IHAACB,OUTPUT)    OPEN FOR OUTPUT
         LTR   R15,R15            OK ?
         BNZ   FOP1OPER           EXIT IF NOT
         B     FOP1OPOK           EXIT
*
FOP1IN   EQU   *
* OPEN FOR INPUT
         MODCB ACB=IHAACB,MACRF=(ADR,DIR,KEY,SEQ,IN)
         OPEN  (IHAACB,INPUT)     OPEN FOR INPUT
         LTR   R15,R15            OK ?
         BNZ   FOP1OPER           EXIT IF NOT
FOP1OPOK EQU   *
* OPEN SUCCESSFUL, SAY SO
         MVC   WTODESC+20(6),=C'OK    ' SET OK
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         ST    R11,FOP1SV11       SAVE RETURN ADDRESS
         BAL   R11,CICSTRCE       TRACE IT
         L     R11,FOP1SV11       RESTORE RETURN ADDRESS
         OI    FCTFILST,FCTOPEN   SET FILE OPEN
         OI    FCTFILST,FCTOPCLO  SET FILSTAT=OPENED
         B     FOP1DIST           EXIT
*
FOP1OPER EQU   *
* OPEN UNSUCCESSFUL, SAY SO
         MVC   WTODESC+20(6),=C'FAILED' SET FAILED
         MVI   CICSTIND,C'I'      SET INTERNAL TYPE
         ST    R11,FOP1SV11       SAVE RETURN ADDRESS
         BAL   R11,CICSTRCE       TRACE IT
         L     R11,FOP1SV11       RESTORE RETURN ADDRESS
         MVI   FCTFILST,X'00'     SET FILE CLOSED,DISABLED
         B     FOP1DISA           EXIT IF DISABLED
*
FOP1DIST EQU   *
         TM    FCTFILST,FCTENDIS  IS FILSTAT=DISABLED ?
         BZ    FOP1DISA           EXIT IF DISABLED
         BR    R11                RETURN
*
FOP1FNTF EQU   *
         MVC   FCPRETCD,DFHRESP(FILENOTFOUND) SET FILENOTFOUND
         MVC   FCPRESP2,=F'1'     SET RESP2
         MVC   WTODESC,=CL45'>>>Z390KCP STARTBR    FAILED'
         MVC   WTODESC+29(12),=C'FILENOTFOUND'
         B     FOP1SEND           EXIT
*
FOP1DISA EQU   *
         MVC   FCPRETCD,DFHRESP(DISABLED) SET DISABLED
         MVC   FCPRESP2,=F'50'    SET RESP2
         MVC   WTODESC,=CL45'>>>Z390KCP STARTBR    FAILED'
         MVC   WTODESC+29(12),=C'DISABLED'
         B     FOP1SEND           EXIT
*
FOP1NOTO EQU   *
         MVC   FCPRETCD,DFHRESP(NOTOPEN) SET NOTOPEN
         MVC   FCPRESP2,=F'60'    SET RESP2
         MVC   WTODESC,=CL45'>>>Z390KCP STARTBR    FAILED'
         MVC   WTODESC+29(7),=C'NOTOPEN'
FOP1SEND EQU   *
         LR    R9,R6              SET AS IF NEW DFHFCBLK
*        L     R8,CONNID          R8=CONN ID
         L     R8,12(R3)          R8=CONN ID ADDRESS
         L     R8,0(R8)           R8=CONNID
         LA    R15,FCPREFIX       R15=LENGTH TO SEND
         TCPIO SEND,MSG=(R9),LMSG=(R15),CONN=(R8),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   ABEND780           EXIT IF BAD
         L     R9,0(R3)           WTODSECT ADDRESS
         MVI   CICSTIND,C'A'      SET APPLICATION TYPE
         BAL   R11,CICSTRCE       TRACE IT
         SUBEXIT
FOP1SV11 DS    A                  SAVE R11
*
ABEND780 ABEND 780,DUMP           TCPIO SEND FAILED
ABEND790 ABEND 790,DUMP           VSAM FEEDBACK NOT EXPECTED
*
CICSTIND DS    C                  TRACE TYPE INDICATOR
TRCEZ390 DS    C                  Z390 TRACE OPTION
*
         COPY  FILEERTB           RPL FEEDBACK ERROR TABLE
*
* TIME CONVERSION FIELDS
*
TIME     DS    CL4                HHMMSSTT
         DS    CL8                SPACE FOR DATE
TIMEPACK DC    PL5'0'             0HHMMSSTTC
TIMEEDIT DC    X'402021207A20207A20204B2020'
TIMEHERE DS    CL13
*
* WTO AREA DSECT
*
WTODSECT DSECT
WTOMSG   DS    AL4
WTOTIME  DS    CL13               TIME STAMP
         DS    C
WTOFN    DS    CL4                MODULE/FUNCTION REFERENCE (EIBFN)
         DS    C
WTOTERM  DS    CL4                TERMID
         DS    C
WTOTRAN  DS    CL4                TRANSID (OR BLANK)
         DS    C
WTOTYPE  DS    C                  TRANSID TYPE
         DS    C
WTOTASKN DS    CL7                TASK NUMBER
         DS    C
WTODESC  DS    CL45               DESCRIPTION
*
         ACBD  ,                  VSAM ACB
         VCDTD ,                  VSAM CLUSTER DEFINITION TABLE
         DFHFCTDS                 FILE CONTROL TABLE
         DFHFCBLK                 FILE CONTROL TCPIO BLOCK
         DFHVSWAD                 FILE CONTROL VSAM WORK AREA
*
         EQUREGS
*
         END
