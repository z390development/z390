***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
         DFHEISTG
MYCOMM   DS    CL5
*
TESTCHN1 DFHEIENT CODEREG=(R12,R3)
*
* TEST CHANNELS/CONTAINERS
*
* AFTER EACH COMMAND WRITEQ TS THE CHANNEL STRUCTURE,
* THEN USE CEBR TO CHECK IT'S OK
*    PASSED CHANNEL XXXXXXXXXXXXXXXX OR ******NONE******
*    CHANNEL@0000 XXXXXXXXXXXXXXXX OR ******NONE******
*       CONTAINER XXXXXXXXXXXXXXXX 0000012345 ---50 BYTES OF DATA---
*       CONTAINER YYYYYYYYYYYYYYYY 0000098765 ---50 BYTES OF DATA---
*    ETC.
*
**** PUT AND DELETE TESTS
*  1) PUT 3 CONTAINERS ON THE SAME CHANNEL
*     1ST PUT TESTS NEW CHANNEL BUILD
*  2) DELETE THE FIRST (CHAIN MEND TEST)
*  3) PUT TO REPLACE CONT02, 7 BYTES
*  4) PUT TO REPLACE CONT02 (LARGER FLENGTH)
*  5) CREATE CHAN02 AND CONTAINER CONT04
*
**** GET/MOVE TESTS
*  6) GET CONT02 NODATA, CHECK LENGTH
*  7) GET CONT02 SET
*  8) GET CONT02 INTO  , CHECK DATA
*  9) MOVE CONT03 TO NEW CHAN03
* 10) MOVE CONT02 TO CHAN03, RETAIN SET (CHAN01 NOW EMPTY)
* 11) MOVE CONT04 TO CONT02, TEST REPLACE AND CONT04 DELETE
*
* STATUS NOW:
*    CHAN01/CHAN02 EMPTY
*    CHAN03 HAS CHAN03CONT03/CHAN03CONT02
*
**** LINK TEST
* 12) LINK TO TESTCHN2 WITH COMMAREA AND CHANNEL CHAN01
*     TEST1:
*        CREATES CONT01 USING PASSED CHANNEL
*        CREATES CHAN04 AND CONT04
*        TESTS GET USING PASSED CHANNEL
*        MOVES CONT01 TO CHAN02 USING PASSED CHANNEL
*        AFTER RETURN, CHAN04 SHOULD BE DELETED
*
* STATUS NOW:
*    CHAN01 EMPTY
*    CHAN02 HAS CHAN02CONT2
*    CHAN03 HAS CHAN03CONT03/CHAN03CONT02
*
**** XCTL TEST
* 13) XCTL TO TESTCHN2 WITH COMMAREA AND CHANNEL CHAN02
*     TEST2:
*        CREATES CHAN02CONT05 USING PASSED CHANNEL
*        CREATES CHAN04 AND CONT04
*        ENDS WITH RETURN TRANSID COMMAREA CHANNEL IMMEDIATE
*     TEST3:
*        CHN2 INVOKED WITH CHAN04
*        ONLY CHAN04 SHOULD EXIST
*        DELETE CHAN04CONT04
*        ENDS WITH RETURN TRANSID COMMAREA CHANNEL IMMEDIATE
*     TEST4:
*        CHN2 INVOKED WITH CHAN05
*        ONLY CHAN05 SHOULD EXIST
*     TEST5:
*        BUILD TWO CHANNELS AND CONTAINERS FOR BROWSING
*        DO TWO STARTBROWSES AND GET 1 CONTAINER FROM EACH
*        RETURN
*
**** PUT AND DELETE TESTS
         EXEC  CICS SEND FROM(CHNMSG1) LENGTH(CHNMSG1L)
* CREATE CHAN01 AND CONTAINER CONT01
         EXEC  CICS PUT CONTAINER('CHAN01CONT01') CHANNEL('CHAN01')    X
               FROM(CN01DATA) FLENGTH(50)
* CREATE CONTAINER CONT02 ON CHAN01
         EXEC  CICS PUT CONTAINER('CHAN01CONT02') CHANNEL('CHAN01')    X
               FROM(CN02DATA) FLENGTH(40)
* CREATE CONTAINER CONT03 ON CHAN01
         EXEC  CICS PUT CONTAINER('CHAN01CONT03') CHANNEL('CHAN01')    X
               FROM(CN03DATA) FLENGTH(30)
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (1)
* DELETE CONT01 ON CHAN01
         EXEC  CICS DELETE CONTAINER('CHAN01CONT01') CHANNEL('CHAN01')    X
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (6)
* OVERWRITE CONT02, 1ST 7 BYTES
         EXEC  CICS PUT CONTAINER('CHAN01CONT02') CHANNEL('CHAN01')    X
               FROM(REPLACE)
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (10)
* OVERWRITE ALL CONT02, CHANGE LENGTH
         EXEC  CICS PUT CONTAINER('CHAN01CONT02') CHANNEL('CHAN01')    X
               FROM(REPLACES) FLENGTH(48)
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (14)
* CREATE CHAN02 AND CONTAINER CONT04
         EXEC  CICS PUT CONTAINER('CHAN02CONT04') CHANNEL('CHAN02')    X
               FROM(CN04DATA) FLENGTH(20)
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (18)
**** GET/MOVE TESTS
         EXEC  CICS SEND FROM(CHNMSG2) LENGTH(CHNMSG2L)
* GET CONT02 NODATA
         EXEC  CICS GET CONTAINER('CHAN01CONT02') CHANNEL('CHAN01')    X
               NODATA FLENGTH(MYFLEN)
         CHSI  MYFLEN,48          CORRECT LENGTH ?
         BE    LENOK              EXIT IF IT IS
         DC    H'1'               CODING ERROR
LENOK    EQU   *
* GET CONT02 SET
         EXEC  CICS GET CONTAINER('CHAN01CONT02') CHANNEL('CHAN01')    X
               SET(R7) FLENGTH(MYFLEN)
* GET CONT02 INTO, CHECK DATA
         EXEC  CICS GET CONTAINER('CHAN01CONT02') CHANNEL('CHAN01')    X
               INTO(MYINTO) FLENGTH(48)
         CLC   MYINTO,REPLACES    MATCH DATA ?
         BE    DATAOK             EXIT IF OK
         DC    H'2'               CODING ERROR
DATAOK   EQU   *
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (24)
* MOVE CONT03 TO NEW CHAN03
         EXEC  CICS MOVE CONTAINER('CHAN01CONT03') CHANNEL('CHAN01')   X
               AS('CHAN03CONT03') TOCHANNEL('CHAN03')
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (30)
* MOVE CONT02 TO CHAN03 (CHAN01 NOW EMPTY)
         EXEC  CICS MOVE CONTAINER('CHAN01CONT02') CHANNEL('CHAN01')   X
               AS('CHAN03CONT02') TOCHANNEL('CHAN03')
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (37)
* MOVE CONT04 TO CONT02, TEST REPLACE AND CONT04 DELETE
         EXEC  CICS MOVE CONTAINER('CHAN02CONT04') CHANNEL('CHAN02')   X
               AS('CHAN03CONT02') TOCHANNEL('CHAN03')
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (44)
**** LINK TEST
         EXEC  CICS SEND FROM(CHNMSG3) LENGTH(CHNMSG3L)
* LINK WITH EMPTY CHANNEL
         MVC   MYCOMM,=C'TEST1'   SET COMMAREA
         EXEC  CICS LINK PROGRAM('TESTCHN2') COMMAREA(MYCOMM)          X
               CHANNEL('CHAN01')
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (74)
**** XCTL TEST
         EXEC  CICS SEND FROM(CHNMSG4) LENGTH(CHNMSG4L)
* XCTL WITH CHANNEL CHAN02
         MVC   MYCOMM,=C'TEST2'   SET COMMAREA
         EXEC  CICS XCTL PROGRAM('TESTCHN2') COMMAREA(MYCOMM)          X
               CHANNEL('CHAN02')
*
* SUBROUTINES
*
WQTS     EQU   *
* WRITE PASSED CHANNEL AND CHANNEL/CONTAINER CHAIN TO TS
         EXEC  CICS ASSIGN CHANNEL(PASSCHAN)
         CLI   PASSCHAN,C' '      ANY PASSED CHANNEL ?
         BNE   WQTSNOPS           EXIT IF THERE IS
         MVC   PASSCHAN,NONE      SET MO CHANNEL NAME
WQTSNOPS EQU   *
         EXEC  CICS WRITEQ TS QUEUE('CHN1') FROM(PASSMSG)              X
               LENGTH(PASSMSGL)
* SCAN CHANNEL CHAIN
         MVC   CHNAME,NONE        SET DEFAULT CHANNEL NAME
         ICM   R4,15,TCTTECAQ     ANY CHANNEL CHAIN ?
         BZR   R9                 RETURN IF NONE
         USING DFHCHAN,R4
WQTSCHLP EQU   *
         LH    R5,CHANLINK        R5=LINK LEVEL
         CVD   R5,DEC             CONVERT TO DECIMAL
         UNPK  CHLINK-1(5),DEC+5(3) UNPACK LINK-LEVEL
         OI    CHLINK+3,X'F0'     SET SIGN
         MVI   CHLINK-1,C'@'      RESTORE @
         MVC   CHNAME,CHANNAME    SET CHANNEL NAME
         EXEC  CICS WRITEQ TS QUEUE('CHN1') FROM(CHAN) LENGTH(CHANL)
* SCAN CONTAINER CHAIN
         ICM   R6,15,CHANCONT     ANY CONTAINER CHAIN ?
         BZ    WQTSNXCH           EXIT IF NONE
         USING DFHCONT,R6
WQTSCNLP EQU   *
         MVC   CNNAME,CONTNAME    SET CONTAINER NAME
         L     R5,CONTLENG        R5=LENGTH
         CVD   R5,DEC             CONVERT TO DECIMAL
         UNPK  CNLENG-1(11),DEC+2(6) UNPACK LENGTH
         OI    CNLENG+9,X'F0'     SET SIGN
         MVI   CNLENG-1,C' '      RESTORE SPACE
         MVC   CNSET,=C'00'       DEFAULT SET INDICATOR
         OC    CONTSET,CONTSET    ANY SET ADDRESS ?
         BZ    WQTSNOST           EXIT IF NONE
         MVC   CNSET,=C'FF'       SET SET INDICATOR
WQTSNOST EQU   *
         XC    CNDATA,CNDATA      CLEAR DATA
         CHI   R5,50              TOO LONG ?
         BNH   WQTSLNOK           EXIT IF NOT
         LA    R5,50              SET TO MAXIMUM
WQTSLNOK EQU   *
         BCTR  R5,0               -1 FOR EXECUTE
         EX    R5,WQTSMVC         SET CONTAINER DATA
         EXEC  CICS WRITEQ TS QUEUE('CHN1') FROM(CONT) LENGTH(CONTL)
         ICM   R6,15,CONTADDR     ANY MORE CONTAINERS ?
         BNZ   WQTSCNLP           LOOP IF THERE ARE
WQTSNXCH EQU   *
         ICM   R4,15,CHANADDR     ANY MORE CHANNELS ?
         BNZ   WQTSCHLP           LOOP IF THERE ARE
         BR    R9                 RETURN
*
WQTSMVC  MVC   CNDATA(0),CONTDATA SET CONTAINER DATA
*
CN01DATA DC    50C'A'
CN02DATA DC    40C'B'
CN03DATA DC    30C'C'
CN04DATA DC    20C'D'
REPLACE  DC    C'REPLACE'
REPLACES DC    6C'REPLACES'
NONE     DC    C'******NONE******'
DEC      DC    PL8'0'
MYFLEN   DS    XL4
MYINTO   DS    XL48
*
PASSMSG  DC    C'PASSED CHANNEL '
PASSCHAN DS    CL16
PASSMSGL DC    AL2(*-PASSMSG)
*
CHAN     DC    C'CHANNEL@'
CHLINK   DS    CL4
         DC    C' '
CHNAME   DS    CL16
CHANL    DC    AL2(*-CHAN)
*
CONT     DC    C'   '
         DC    C'CONTAINER '
CNNAME   DS    CL16
         DC    C' '
CNLENG   DS    CL10
         DC    C' '
CNSET    DS    CL2
         DC    C' '
CNDATA   DS    CL50
CONTL    DC    AL2(*-CONT)
*
CHNMSG1  TN3270 WCC_KD,(SBA,3,2)
         DC    CL16'PUT/DELETE TESTS'
CHNMSG1L DC    AL2(*-CHNMSG1)
*
CHNMSG2  TN3270 WCC_KD,(SBA,4,2)
         DC    CL16'GET/MOVE TESTS'
CHNMSG2L DC    AL2(*-CHNMSG2)
*
CHNMSG3  TN3270 WCC_KD,(SBA,5,2)
         DC    CL16'LINK TEST'
CHNMSG3L DC    AL2(*-CHNMSG3)
*
CHNMSG4  TN3270 WCC_KD,(SBA,6,2)
         DC    CL16'XCTL TEST'
CHNMSG4L DC    AL2(*-CHNMSG4)
*
         DFHCHAN
*
         TN3270 SYMBOLS
         END
