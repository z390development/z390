***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
LCL0A02  CSECT
*
* FN=0A02  EXEC CICS WRITEQ TS
*
* R1  >>> P0A02 BLOCK POINTER
*
         USING *,R13
         B     12(R15)            BYPASS EYECATCHER
         DC    CL8'LCL0A02'
         LR    R13,R15            R13 AS BASE
         LR    R3,R1              SET BASE
         L     R3,0(R3)                    FOR PARMS
         USING (P0A02,P0A02END),R3
         L     DFHEIBR,P0A02EIB   LOAD EIB ADDRESS
         USING DFHEIBLK,DFHEIBR
         L     TCTTEAR,P0A02TCT   LOAD TCT ADDRESS
         USING DFHTCTTE,TCTTEAR
         MVC   EIBFN,P0A02FN      SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
         ICM   R1,15,P0A02RSP     R1=RESP ADDRESS
         BZ    NORESP             EXIT IF NONE
         XC    0(4,R1),0(R1)      CLEAR RESP
NORESP   EQU   *
         ICM   R1,15,P0A02RS2     R1=RESP2 ADDRESS
         BZ    NORESP2            EXIT IF NONE
         XC    0(4,R1),0(R1)      CLEAR RESP2
NORESP2  EQU   *
         CLI   P0A02NED,X'FF'     NOEDF ?
         BE    NOEDFB             EXIT IF IT IS
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         BNE   NOEDFB             EXIT IF NOT
         MVI   TCTTEEBA,X'00'     SET 'BEFORE' INTERCEPT
         MVI   TCTTEEDL,X'00'     SET NORMAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
*
NOEDFB   EQU   *
         MVI   TSLENSV,X'FF'      INVALIDATE TS LENGTH
         L     R4,P0A02LEN        R4=LENGTH
         LTR   R4,R4              VALID LENGTH ?
         BNP   LENGERR            ERROR IF NOT POSITIVE
         CHI   R4,32763           VALID LENGTH ?
         BH    LENGERR            ERROR IF TOO BIG
* GETMAIN AND MOVE THE DATA TO SEND
         LA    R1,TSPREFIX(R4)    R1=TS BLOCK LENGTH+DATA LENGTH
         ST    R1,TSLENSV         SAVE IT
         EXEC  CICS GETMAIN FLENGTH(TSLENSV) SET(R5) INITIMG(0)        X
               NOHANDLE
         ST    R5,TSBLKSV         SAVE TS BLOCK ADDRESS FOR FREEMAIN
         USING DFHTSBLK,R5
* RESET EIB FIELDS
         MVC   EIBFN,P0A02FN      SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
         MVC   TSPTCPIO,TSLENSV   MOVE LENGTH TO TSBLK
         MVC   TSPFN,=C'0A02'     SET FUNCTION CODE
         MVC   TSPTERM,TCTTETI    SET TERMINAL ID
         MVC   TSPTRAN,EIBTRNID   SET TRANSID
         MVC   TSPTASKN,EIBTASKN  SET TASK NUMBER
         MVC   EIBRSRCE,P0A02QNM  SET EIBRSRCE
         MVC   TSPNAME,P0A02QNM   SET QUEUE NAME
         MVC   TSPICTRM,P0A02ICM  SET ICTERM
         MVC   TSPICTRN,P0A02ICN  SET ICTRAN
* CHECK QUEUE NAME
         OC    TSPNAME,TSPNAME    ALL ZEROS ?
         BZ    INVREQ             ERROR IF IT IS
         CLI   TSPNAME,X'FA'      X'FA'-X'FF' ?
         BNL   INVREQ             ERROR IF IT IS
         CLC   TSPNAME(2),=C'**'  RESERVED ID ?
         BE    INVREQ             ERROR IF IT IS
         CLC   TSPNAME(2),=C'$$'  RESERVED ID ?
         BE    INVREQ             ERROR IF IT IS
* DF IS PERMITTED IF ICTRAN/ICTERM SPECIFIED
         OC    P0A02ICM(8),P0A02ICM ANY ICTERM/ICTRAN ?
         BNZ   GOTIC              EXIT IF THERE IS
         CLC   TSPNAME(2),=C'DF'  RESERVED ID ?
         BE    INVREQ             ERROR IF IT IS
GOTIC    EQU   *
         MVC   TSPITEM,P0A02ITM   SET ITEM NUMBER
         ST    R4,TSPLEN          SET LENGTH
* MOVE THE DATA
         L     R14,P0A02FRM       R14=SOURCE
         LR    R15,R4             R15=SOURCE LENGTH
         LA    R0,TSPDATA         R0=DESTINATION ADDRESS
         LR    R1,R4              R1=DESTINATION LENGTH
         MVCL  R0,R14             MOVE THE DATA
         AHI   R4,TSPREFIX        R4=DATA LENGTH+PREFIX
* SEND REQUEST TO SERVER, GET REPLY
         TCPIO SEND,MSG=(R5),LMSG=(R4),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   INVREQ             ERROR IF BAD
WRTEQRCV EQU   *
* ONLY THE PREFIX IS RECEIVED
         TCPIO RECEIVE,MSG=(R5),LMSG==A(TSPREFIX),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   INVREQ             ERROR IF BAD
         CLC   TSPFN,=C'10FF'     UNSOL IC SCAN ?
         BE    WRTEQRCV           EXIT IF IT IS
         CLC   TSPFN,=C'0A02'     WHAT WE ARE EXPECTING ?
         BE    WRTEQRCK           EXIT IF IT IS
         DC    H'0'               TCPIO BAD RECEIVE
WRTEQRCK EQU   *
         OC    TSPRETCD,TSPRETCD  BAD RETURN CODE ?
         BZ    WRITEQOK           EXIT IF NONE
         CLC   TSPRETCD,DFHRESP(ITEMERR) ITEMERR ?
         BE    ITEMERR            EXIT IF IT IS
         CLC   TSPRETCD,DFHRESP(QIDERR) QIDERR ?
         BE    QIDERR             EXIT IF IT IS
         CLC   TSPRETCD,DFHRESP(IOERR) IOERR ?
         BE    IOERR              EXIT IF IT IS
* SERVER HAS SENT UNKNOWN VALUE IN TSPRETCD
         B     INVREQ             SHOULD NOT OCCUR
*
WRITEQOK EQU   *
         ICM   R1,15,P0A02NUM     ANY NUMITEMS ADDRESS ?
         BZ    RETURN             RETURN IF NONE
         MVC   0(2,R1),TSPNUMIT   SET NUMITEMS
         B     RETURN             EXIT
*
INVREQ   EQU   *
* INVOKE INVREQ
         MVI   EIBRCODE,X'20'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(INVREQ) SET EIBRESP=INVREQ
         B     DORESP             EXIT
*
ITEMERR  EQU   *
* INVOKE ITEMERR
         MVI   EIBRCODE,X'01'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(ITEMERR) SET EIBRESP=ITEMERR
         B     DORESP             EXIT
*
LENGERR  EQU   *
* INVOKE LENGERR
         MVI   EIBRCODE,X'E1'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(LENGERR) SET EIBRESP=LENGERR
         B     DORESP             EXIT
*
QIDERR   EQU   *
* INVOKE QIDERR
         MVI   EIBRCODE,X'02'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(QIDERR) SET EIBRESP=QIDERR
         B     DORESP             EXIT
*
IOERR    EQU   *
* INVOKE IOERR
         MVI   EIBRCODE,X'04'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(IOERR) SET EIBRESP=IOERR
DORESP   EQU   *
         ICM   R14,15,P0A02RSP    R14=RESP ADDRESS
         BZ    DORESP2            EXIT IF NONE
         MVC   0(4,R14),EIBRESP   SET RESP
DORESP2  EQU   *
         ICM   R14,15,P0A02RS2    R14=RESP2 ADDRESS
         BZ    RETURN             EXIT IF NONE
         MVC   0(4,R14),EIBRESP2  SET RESP2
RETURN   EQU   *
         CLI   TSLENSV,X'FF'      DID WE GETMAIN ?
         BE    EXIT               EXIT IF NOT
         MVC   RCODE,EIBRCODE     SAVE RCODE
         MVC   RESP,EIBRESP       SAVE RESP
         MVC   RESP2,EIBRESP2     SAVE RESP2
         EXEC  CICS FREEMAIN DATA(TSBLKSV) NOHANDLE
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         BNZ   DORESP             EXIT IF THERE IS
         MVC   EIBFN,P0A02FN      SET EIBFN
         MVC   EIBRCODE,RCODE     RESTORE RCODE
         MVC   EIBRESP,RESP       RESTORE RESP
         MVC   EIBRESP2,RESP2     RESTORE RESP2
EXIT     EQU   *
         CLI   P0A02NED,X'FF'     NOEDF ?
         BE    NOEDFA             EXIT IF IT IS
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         BNE   NOEDFA             EXIT IF NOT
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'00'     SET NORMAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
*
NOEDFA   EQU   *
         PR    ,                  UNSTACK AND RETURN TO MACRO
*
TSBLKSV  DS    AL4                SAVE TS BLOCK ADDRESS
TSLENSV  DS    XL4                SAVE TS PREFIX+LENGTH
RCODE    DS    XL4                SAVE RCODE
RESP     DS    XL4                SAVE RESP
RESP2    DS    XL4                SAVE RESP2
*
         P0A02 DSECT
*
         DFHEIBLK                 EIB
         DFHTCTTE                 TCTTE
         DFHTSBLK                 TEMPORARY STORAGE PREFIX AREA
*
         EQUREGS REGS=GPR
*
         END
