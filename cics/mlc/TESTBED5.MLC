***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
*
* TEST HANDLE AID/PUSH/POP
* TEST GETMAIN/FREEMAIN
*
         DFHEISTG
GET1     DS    F
GET2     DS    F
GET3     DS    F
GET4     DS    F
GET5     DS    F
RECAREA  DS    CL80               RECEIVE AREA
RECLEN   DS    AL2                RECEIVED LENGTH
*
TESTBED5 DFHEIENT CODEREG=(R12,R3,R4)
*
         EXEC  CICS SEND FROM(HEAD) LENGTH(HEADL)
*
* CREATE AND MODIFY 1ST AID BLOCK
         EXEC  CICS HANDLE AID                                         X
               ENTER(BADKEY1)                                          X
               ANYKEY(BADKEY1)                                         X
               PF4(GOTPF4) CLEAR
*
KEYPRES1 EQU   *
         EXEC  CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN)
         CLI   EIBAID,DFHCLEAR    CLEAR PRESSED ?
         BE    RETURN             END TASK IF IT IS
         B     KEYPRES1           LOOP
*
BADKEY1  EQU   *
         EXEC  CICS SEND FROM(BADMSG1) LENGTH(BADMSG1L)
         B     KEYPRES1           WAIT FOR NEXT KEY
*
GOTPF4   EQU   *
         EXEC  CICS SEND FROM(PF4MSG) LENGTH(PF4MSGL)
         EXEC  CICS SEND FROM(PF5ASK) LENGTH(PF5ASKL)
* CREATE 2ND AID BLOCK
         EXEC  CICS PUSH HANDLE
* MODIFY 2ND AID BLOCK
         EXEC  CICS HANDLE AID                                         X
               ENTER(BADKEY2)                                          X
               ANYKEY(BADKEY2)                                         X
               PF5(GOTPF5) CLEAR
*
KEYPRES2 EQU   *
         EXEC  CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN)
         CLI   EIBAID,DFHCLEAR    CLEAR PRESSED ?
         BE    RETURN             END TASK IF IT IS
         B     KEYPRES2           LOOP
*
BADKEY2  EQU   *
         EXEC  CICS SEND FROM(BADMSG2) LENGTH(BADMSG2L)
         B     KEYPRES2           WAIT FOR NEXT KEY
*
GOTPF5   EQU   *
         EXEC  CICS SEND FROM(PF5MSG) LENGTH(PF5MSGL)
         EXEC  CICS SEND FROM(PF6ASK) LENGTH(PF6ASKL)
* DELETE 2ND AID BLOCK
         EXEC  CICS POP HANDLE
* MODIFY 1ST AID BLOCK
         EXEC  CICS HANDLE AID                                         X
               ENTER(BADKEY3)                                          X
               ANYKEY(BADKEY3)                                         X
               PF4 PF6(GOTPF6) CLEAR
*
KEYPRES3 EQU   *
         EXEC  CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN)
         CLI   EIBAID,DFHCLEAR    CLEAR PRESSED ?
         BE    RETURN             END TASK IF IT IS
         B     KEYPRES3           LOOP
*
BADKEY3  EQU   *
         EXEC  CICS SEND FROM(BADMSG3) LENGTH(BADMSG3L)
         B     KEYPRES3           WAIT FOR NEXT KEY
*
GOTPF6   EQU   *
         EXEC  CICS SEND FROM(PF6MSG) LENGTH(PF6MSGL)
*
* DELETE 1ST AID BLOCK
         EXEC  CICS POP HANDLE
*
* CREATE AND MODIFY 1ST CONDITION BLOCK
         EXEC  CICS HANDLE CONDITION PGMIDERR(GOTPGMER)
         EXEC  CICS SEND FROM(PGMMSG) LENGTH(PGMMSGL)
* THIS SHOULD RAISE PGMIDERR
         EXEC  CICS LINK PROGRAM('BADPROG1')
*
NEXT1    EQU   *
* CREATE 2ND CONDITION BLOCK
         EXEC  CICS PUSH HANDLE
* MODIFY 2ND CONDITION BLOCK
         EXEC  CICS HANDLE CONDITION ERROR(GOTERROR)
         EXEC  CICS SEND FROM(PGMMSG2) LENGTH(PGMMSG2L)
* THIS SHOULD RAISE PGMIDERR, BUT HANDLED BY ERROR
         EXEC  CICS LINK PROGRAM('BADPROG2')
*
NEXT2    EQU   *
         EXEC  CICS HANDLE CONDITION ERROR
         EXEC  CICS IGNORE CONDITION PGMIDERR
* THIS SHOULD BE IGNORED
         EXEC  CICS LINK PROGRAM('BADPROG3')
         EXEC  CICS SEND FROM(IGNMSG) LENGTH(IGNMSGL)
         EXEC  CICS HANDLE CONDITION PGMIDERR
* THIS SHOULD SUCCEED
         EXEC  CICS LINK PROGRAM('MMMMCIC2')
* GETMAIN/FREEMAIN TESTS
         EXEC  CICS GETMAIN SET(R5) LENGTH(100) INITIMG(1)
         ST    R5,GET1            SAVE ADDRESS
         EXEC  CICS GETMAIN SET(R5) LENGTH(200) INITIMG(X'02')
         ST    R5,GET2            SAVE ADDRESS
         EXEC  CICS GETMAIN SET(R5) LENGTH(300) INITIMG(B'11')
         ST    R5,GET3            SAVE ADDRESS
         EXEC  CICS GETMAIN SET(R5) LENGTH(400) INITIMG(4)
         ST    R5,GET4            SAVE ADDRESS
         EXEC  CICS GETMAIN SET(R5) LENGTH(500) INITIMG(INIT5)
         ST    R5,GET5            SAVE ADDRESS
* FREEMAIN IN RANDOM ORDER...42153
         L     R5,GET4            ADDRESS TO FREEMAIN
         EXEC  CICS FREEMAIN DATAPOINTER(R5)
         L     R5,GET2            ADDRESS TO FREEMAIN
         USING DUMDSECT,R5
         EXEC  CICS FREEMAIN DATA(DUMDSECT)
         L     R5,GET1            ADDRESS TO FREEMAIN
         EXEC  CICS FREEMAIN DATAPOINTER(R5)
         L     R5,GET5            ADDRESS TO FREEMAIN
         EXEC  CICS FREEMAIN DATA(DUMDSECT)
         L     R5,GET3            ADDRESS TO FREEMAIN
         EXEC  CICS FREEMAIN DATA(DUMDSECT)
         DROP  R5
         EXEC  CICS IGNORE CONDITION INVREQ
         L     R5,=4X'FF'         INVALID ADDRESS
         EXEC  CICS FREEMAIN DATAPOINTER(R5)
         EXEC  CICS SEND FROM(GTMMSG) LENGTH(GTMMSGL)
*
         EXEC  CICS SEND FROM(ABDMSG) LENGTH(ABDMSGL)
* THIS SHOULD ABEND PGMIDERR (AEI0)
         EXEC  CICS LINK PROGRAM('BADPROG4')
*
RETURN   EQU   *
         EXEC  CICS RETURN
*
GOTPGMER DS    0H
         EXEC  CICS SEND FROM(PGMMSGE) LENGTH(PGMMSGEL)
         B     NEXT1              EXIT
*
GOTERROR DS    0H
         EXEC  CICS SEND FROM(ERRMSG) LENGTH(ERRMSGL)
         B     NEXT2              EXIT
*
HEAD     TN3270 ESC,WRT_EW,WCC_KD,(SBA,2,2)
         DC    C'TESTBED5 TEST HANDLE, PUSH/POP AND GETMAIN/FREEMAIN'
         TN3270 (SBA,3,2)
         DC    C'PRESS PF KEY 4'
         TN3270 (SBA,4,2)
         DC    C'CLEAR WILL END TASK EARLY'
HEADL    DC    AL2(*-HEAD)
*
BADMSG1  TN3270 WCC_KD,(SBA,5,2)
         DC    C'THAT KEY WASN''T PF4'
BADMSG1L DC    AL2(*-BADMSG1)
*
PF4MSG   TN3270 WCC_KD,(SBA,5,2)
         DC    C'I GOT PF4, THANKYOU '
PF4MSGL  DC    AL2(*-PF4MSG)
*
PF5ASK   TN3270 WCC_KD,(SBA,6,2)
         DC    C'PRESS PF KEY 5'
PF5ASKL  DC    AL2(*-PF5ASK)
*
BADMSG2  TN3270 WCC_KD,(SBA,7,2)
         DC    C'THAT KEY WASN''T PF5'
BADMSG2L DC    AL2(*-BADMSG2)
*
PF5MSG   TN3270 WCC_KD,(SBA,7,2)
         DC    C'I GOT PF5, THANKYOU '
PF5MSGL  DC    AL2(*-PF5MSG)
*
PF6ASK   TN3270 WCC_KD,(SBA,8,2)
         DC    C'PRESS PF KEY 6'
PF6ASKL  DC    AL2(*-PF6ASK)
*
BADMSG3  TN3270 WCC_KD,(SBA,9,2)
         DC    C'THAT KEY WASN''T PF6'
BADMSG3L DC    AL2(*-BADMSG3)
*
PF6MSG   TN3270 WCC_KD,(SBA,9,2)
         DC    C'I GOT PF6, THANKYOU '
PF6MSGL  DC    AL2(*-PF6MSG)
*
PGMMSG   TN3270 WCC_KD,(SBA,10,2)
         DC    C'PGMIDERR WILL NOW BE RAISED'
PGMMSGL  DC    AL2(*-PGMMSG)
*
PGMMSGE  TN3270 WCC_KD,(SBA,11,2)
         DC    C'PGMIDERR CONDITION HANDLED OK'
PGMMSGEL DC    AL2(*-PGMMSGE)
*
PGMMSG2  TN3270 WCC_KD,(SBA,12,2)
         DC    C'PGMIDERR WILL NOW BE RAISED AGAIN'
PGMMSG2L DC    AL2(*-PGMMSG2)
*
ERRMSG   TN3270 WCC_KD,(SBA,13,2)
         DC    C'ERROR CONDITION HANDLED OK'
ERRMSGL  DC    AL2(*-ERRMSG)
*
IGNMSG   TN3270 WCC_KD,(SBA,14,2)
         DC    C'IGNORE CONDITION HANDLED OK'
IGNMSGL  DC    AL2(*-IGNMSG)
*
GTMMSG   TN3270 WCC_KD,(SBA,15,2)
         DC    C'GETMAIN/FREEMAIN TESTING, OK IF NO ABEND'
GTMMSGL  DC    AL2(*-GTMMSG)
*
ABDMSG   TN3270 WCC_KD,(SBA,16,2)
         DC    C'PGMIDERR WILL NOW CAUSE ABEND AEI0'
         TN3270 (SBA,17,2)
         DC    C'PRESS CLEAR'
ABDMSGL  DC    AL2(*-ABDMSG)
*
INIT5    DC    X'05'
*
DUMDSECT DSECT
*
         COPY  DFHAID
         TN3270 SYMBOLS
         END
