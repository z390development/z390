***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
         DFHEISTG
PARSE1   DS    CL4                TERM
PARSE2   DS    CL4                ON, OFF, SEND
EDFQUEUE DS    CL8                RETRIEVED QUEUE
EDFRCVE  DS    CL2500             RECEIVE AREA
EDFRCLEN DS    AL2                RECEIVE AREA LENGTH
INPUT    DS    XL10
LENINPUT DS    XL2
*
REDPMODE DS    C                  MODE STATUS FOR REDISPLAY
CURRMODE DS    C                  MODE STATUS FOR INTERCEPT
*                                    R=SAVE AND CONVERT TO EBCDIC
*                                    E=CONVERT TO EBCDIC
*                                    A=CONVERT TO ASCII
*                                    H=CONVERT TO HEX
EDFRDYQU DS    CL8                REDISPLAY SAVED QUEUE
EDFRDYAD DS    XL4                REDISPLAY READQ ADDRESS
EDFRDYNI DS    AL2                REDISPLAY NUMITEMS
EDFRDYMD DS    X                  FF=REDISPLAY MODE
EDFRDYIN DS    X                  FF=NO INPUT REDISPLAY NUMBER
EDFRDYWQ DS    X                  FF=REDISPLAY WRITEQ NOT WANTED
EDFRDYPG DS    X                  FE=REDISPLAY KEYS ACTIVE
*                                 FF=PAGING KEYS ACTIVE
EDFRDYNO DS    CL3                REDISPLAY NUMBER
EDFRDYDA DS    AL4                REDISPLAY SAVEAREA FOR TCTTEDA
EDFWKS   DS    (EDFWKSL)X         MAP STRUCTURE FOR WORKING STORAGE
*
Z390CEDF DFHEIENT CODEREG=(R12,R3)
*
* INPUT FORMATS:
*    CEDF         )
*    CEDF ,ON     ) SINGLE TERMINAL NOT YET SUPPORTED
*    CEDF ,OFF    )
*
*    CEDF term
*    CEDF term,ON
*    CEDF term,OFF
*    PF3 FROM A CEDF SCREEN WILL ALSO TURN CEDF OFF
*
*    CEDX NOT YET SUPPORTED...WE MAY NOT NEED IT
*
*    CEDZ IS AN INTERNAL TRANSID:
*       SET EDF ON/OFF AT INVOKED TERMINAL
*       RECEIVE EDF MAP STRUCTURES FROM THE INVOKED TERMINAL
*
         CLI   TCTTETYP,C'E'      CEDZ IS IC STARTED ?
         BNE   NOTIC              EXIT IF NOT
* CEDZ IS IC STARTED
         EXEC  CICS IGNORE CONDITION LENGERR
         MVC   EDFRCLEN,=X'7FFF'  SET RETRIEVED LENGTH TO MAX
         EXEC  CICS RETRIEVE RTERMID(TCTTEEDT) RTRANSID(PARSE2)        X
                    INTO(EDFRCVE) LENGTH(EDFRCLEN) QUEUE(EDFQUEUE)
* RETRIEVED AREA INCLUDES THE DSA AND EXTRA DATA WHEN PAGING NEEDED
* LENGTH CHECK
         MVC   EDFRDYQU,EDFQUEUE  PRESERVE QUEUE FOR REDISPLAY MODE
         CHHSI EDFRCLEN,2500      WITHIN LENGTH ?
         BNH   LENOK              EXIT IF IT IS
         DC    H'0'               ADJUST EDFRCVE
*
LENOK    EQU   *
         CLC   PARSE2(2),=C'ON'   IS IT ON ?
         BNE   CEDFOFF            EXIT IF NOT
* TURN CEDF ON AT INVOKED TERMINAL
         EXEC  CICS SEND FROM(EDFON) LENGTH(EDFONL)
         MVI   TCTTEEDF,X'FF'     TURN EDF ON
         B     RETURN             RETURN
*
CEDFOFF  EQU   *
         CLC   PARSE2(3),=C'OFF'  IS IT OFF ?
         BNE   CEDFSEND           EXIT IF NOT
* TURN CEDF OFF AT INVOKED TERMINAL
         MVI   TCTTEEDF,X'00'     TURN EDF OFF
         XC    TCTTEEDT,TCTTEEDT  CLEAR INVOKING TERMID
         EXEC  CICS DELETEQ TS QUEUE('--CEDF--')
         B     RETURN             EXIT
*
CEDFSEND EQU   *
         CLC   PARSE2,=C'SEND'    IS IT SEND ?
         BE    DOSEND             EXIT IF IT IS
         DC    H'0'               CANNOT OCCUR
DOSEND   EQU   *
         MVI   EDFRDYMD,X'00'     TURN OFF REDISPLAY MODE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVI   EDFRDYWQ,X'00'     RESET REDISPLAY WRITEQ SWITCH
         LA    R4,EDFRCVE         ADDRESS MAP STRUCTURE
* MAP STRUCTURE HAS ARRIVED FROM INVOKED TERMINAL
* SAVE AND CONVERT DATA TO EBCDIC, EACH SCREEN IS DIFFERENT
         MVI   CURRMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-INTERCEPT
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET AS PF2
         BAL   R7,KEYHUNT         PROCESS THE KEY
* FOR TASK TERMINATION, NO LOCK IS HELD
* IT'S UP TO THE APPLICATION TO INVOKE ANOTHER INTERCEPT
         CLC   EDFQUEUE(6),=C'0E08KC' TASK TERMINATION ?
         BE    RETURN             EXIT IF IT IS
*
* RECEIVE AND ANALYZE RESPONSE
*
* PRESSING ENTER TOO EARLY MAY CAUSE THE CANCEL TO RAISE NOTFND
         EXEC CICS HANDLE CONDITION NOTFND(RECEIVE)
RECEIVE  EQU   *
         EXEC  CICS RECEIVE INTO(INPUT) LENGTH(LENINPUT)
         CLI   INPUT,DFHENTER     IS IT ENTER ?
         BNE   NOTENTER           EXIT IF NOT
* ENTER: CANCEL THE HOLDING DELAY
         MVI   EDFRDYWQ,X'00'     ALLOW REDISPLAY WRITEQ
         EXEC  CICS CANCEL REQID(CEDFRQID)
         B     RETURN             EXIT
*
NOTENTER EQU   *
         CLI   INPUT,DFHPF3       IS IT PF3 ?
         BNE   OTHERPFK           EXIT IF NOT
ENDCEDF  EQU   *
* PF3  : CANCEL THE HOLDING DELAY AND TURN OFF EDF
*        DELETE THE REDISPLAY TS QUEUE
         EXEC  CICS CANCEL REQID(CEDFRQID) EDFOFF
         MVC   EDFPF3TM,EDFREQTM  SET INVOKED TERMID
         EXEC  CICS SEND FROM(EDFPF3) LENGTH(EDFPF3L)
         EXEC  CICS DELETEQ TS QUEUE('--CEDF--')
         B     RETURN             EXIT
*
OTHERPFK EQU   *
* EACH PF KEY MAY HAVE A UNIQUE PROCESS FOR THAT SCREEN
* INVOKE THE ROUTINE THAT MATCHES THE SCREEN AND KEY
         BAL   R7,KEYHUNT         PROCESS THE KEY
         B     RECEIVE            EXIT
*
NOTIC    EQU   *
         L     R6,TCTTEDA         INITIAL TIOA (NULL TERMINATED)
         AHI   R6,3               MISS AID, CURSOR ADDRESS
         CLI   0(R6),SBA          PRECEDING SBA ?
         BNE   NOSBA              EXIT IF NOT
         AHI   R6,3               MISS SBA
NOSBA    EQU   *
         AHI   R6,4               MISS CEDF
         XC    PARSE1(8),PARSE1   CLEAR PARSE AREAS
* FIND START OF 1ST PARM
* R6=CURRENT LOCATION
FRSTPARM EQU   *
         CLI   0(R6),X'00'        TIOA DONE ?
         BE    PARSERR1           EXIT IF NO TERM FOUND
         CLI   0(R6),C','         START OF NEXT PARM ?
         BE    PARSERR1           EXIT IF NO TERM FOUND
         CLI   0(R6),C' '         FIND BLANK ?
         BNE   FOUND1ST           EXIT WHEN PARM FOUND
         AHI   R6,1               BUMP TIOA POINTER
         B     FRSTPARM           LOOP
*
FOUND1ST EQU   *
         LA    R7,PARSE1          PARM ADDRESS
         BAL   R14,EXTRACT        EXTRACT PARM
*
* FIND 2ND PARM
*
         CLI   0(R6),X'00'        END OF TIOA ?
         BE    PROCESS            EXIT IF 2ND PARM NOT FOUND
         CLI   0(R6),C','         END OF 1ST PARM ?
         BNE   PARSERR2           ERROR, 1ST PARM NOT FOLLOWED BY COMMA
         AHI   R6,1               MISS COMMA
         LA    R7,PARSE2          PARM ADDRESS
         BAL   R14,EXTRACT        EXTRACT PARM
*
PROCESS  EQU   *
         OC    PARSE1,=4C' '      CONVERT 1ST PARM TO UPPER CASE
         OC    PARSE2,=4C' '      CONVERT 2ND PARM TO UPPER CASE
* VALIDATE TERMID
         CLC   PARSE1,TCTTETI     OUR TERMID ?
         BE    PARSERR1           ERROR IF IT IS
         CLC   PARSE1(3),TCTTETI  OUR TERMID PREFIX ?
         BNE   PARSERR2           ERROR IF NOT
* VALIDATE 2ND PARM
         CLC   PARSE2,=4C' '      ANY 2ND PARM ?
         BNE   CHKPARM2           EXIT IF OK
         MVC   PARSE2(2),=C'ON'   DEFAULT TO ,ON
         B     PARM2OK            EXIT
*
CHKPARM2 EQU   *
         CLC   PARSE2(2),=C'ON'   IS IT ON ?
         BE    PARM2OK            EXIT IF IT IS
         CLC   PARSE2(3),=C'OFF'  IS IT OFF ?
         BNE   PARSERR2           ERROR IF NOT
PARM2OK  EQU   *
* START CEDZ ON THE INVOKED TERMINAL
*    RTERMID  HAS OUR TERMID
*    RTRANSID HAS 'ON  ' OR 'OFF '
         EXEC  CICS START TRANSID('CEDZ')                              X
                    TERMID(PARSE1) RTERMID(TCTTETI) RTRANSID(PARSE2)   X
                    QUEUE('DUMMY')
         MVC   EDFREQTM,PARSE1    SET TERMID IN MESSAGE
         EXEC  CICS SEND FROM(EDFREQ) LENGTH(EDFREQL)
         B     RETURN             EXIT
*
* ERROR ROUTINES
*
PARSERR1 EQU   *
         EXEC  CICS SEND FROM(ERRMSG1) LENGTH(ERR1LEN)
         B     RETURN             EXIT
*
PARSERR2 EQU   *
         EXEC  CICS SEND FROM(ERRMSG2) LENGTH(ERR2LEN)
RETURN   EQU   *
         EXEC  CICS RETURN
*
* SUBROUTINES
*
EXTRACT  EQU   *
* EXTRACT PARM
* R6=1ST PARM CHAR
* R7=PARM LOCATION
         SR    R8,R8              ZERO PARM LENGTH
EXTRLOOP EQU   *
         CLI   0(R6),X'00'        END OF PARM ?
         BER   R14                RETURN IF IT IS
         CLI   0(R6),C','         END OF PARM ?
         BER   R14                RETURN IF IT IS
         CHI   R8,4               TOO MANY CHARS ?
         BE    PARSERR2           YES, ERROR IF OVER 4 CHARS
         MVC   0(1,R7),0(R6)      MOVE PARM CHAR
         AHI   R6,1               BUMP TIOA POINTER
         AHI   R7,1               BUMP PARM POINTER
         AHI   R8,1               COUNT THEM
         B     EXTRLOOP           LOOP
*
KEYHUNT  DS    0H
         LARL  R5,KEYTAB          R5=KEY TABLE
KEYLOOP  EQU   *
         CLC   0(6,R5),EDFQUEUE   OUR SCREEN ?
         BNE   KEYINCR            EXIT IF NOT
         CLC   6(1,R5),INPUT      OUR KEY ?
         BNE   KEYINCR            EXIT IF NOT
* MATCH
         L     R6,7(R5)           R6=PROCESSING ROUTINE
         BR    R6                 GO TO IT
*
KEYINCR  EQU   *
         AHI   R5,11              BUMP KEYTAB POINTER
         CLI   0(R5),X'FF'        STOPPER ?
         BE    RECEIVE            EXIT IF IT IS
         B     KEYLOOP            LOOP
*
         LTORG
*
CEDFRQID DC    C'!!CEDF!!'        DELAY REQID
*
EDFREQ   EQU   *
         TN3270 ESC,WRT_EW,WCC_KD,(SBA,2,1)
         DC    C'EDF REQUEST SENT TO TERMINAL '
EDFREQTM DS    CL4
EDFREQL  DC    AL2(*-EDFREQ)
*
EDFON    EQU   *
         TN3270 WCC_KD
         TN3270 (SBA,2,1)
         DC    C'THIS TERMINAL: EDF MODE ON'
EDFONL   DC    AL2(*-EDFON)
*
EDFPF3   EQU   *
         TN3270 ESC,WRT_EW,WCC_KD,(SBA,2,1)
         DC    C'EDF TURNED OFF AT TERMINAL '
EDFPF3TM DS    CL4
EDFPF3L  DC    AL2(*-EDFPF3)
*
ERRMSG1  EQU   *
         TN3270 WCC_KD
         TN3270 (SBA,2,1)
         DC    C'SINGLE TERMINAL OPERATION NOT YET SUPPORTED'
ERR1LEN  DC    AL2(*-ERRMSG1)
*
ERRMSG2  EQU   *
         TN3270 WCC_KD
         TN3270 (SBA,2,1)
         DC    C'INVALID PARAMETER'
ERR2LEN  DC    AL2(*-ERRMSG2)
*
*
KEYTAB   DS    0H
* TABLE OF SCREEN ID, KEY AND PROCESSING ROUTINE
* ADDRESS
         DC    C'0202  ',AL1(DFHCLEAR),AL4(K20202)
         DC    C'0202  ',AL1(DFHPF2),AL4(K20202)
         DC    C'0202  ',AL1(DFHPF5),AL4(K50202)
         DC    C'0202  ',AL1(DFHPF7),AL4(K70202)
         DC    C'0202  ',AL1(DFHPF8),AL4(K80202)
         DC    C'0202  ',AL1(DFHPF10),AL4(KA0202)
         DC    C'0202  ',AL1(DFHPF11),AL4(KB0202)
         DC    C'0202  ',AL1(DFHPF12),AL4(K20202)   REDISPLAY VIA PF2
* HANDLE CONDITION
         DC    C'0204  ',AL1(DFHCLEAR),AL4(K20204)
         DC    C'0204  ',AL1(DFHPF2),AL4(K20204)    INITIALIZE ONLY
         DC    C'0204  ',AL1(DFHPF5),AL4(K50204)
         DC    C'0204  ',AL1(DFHPF7),AL4(K70204)    )
         DC    C'0204  ',AL1(DFHPF8),AL4(K80204)    ) DUAL
         DC    C'0204  ',AL1(DFHPF10),AL4(KA0204)   )      PAGING
         DC    C'0204  ',AL1(DFHPF11),AL4(KB0204)   )
         DC    C'0204  ',AL1(DFHPF12),AL4(K20204)   REDISPLAY VIA PF2
* HANDLE AID
         DC    C'0206  ',AL1(DFHCLEAR),AL4(K20206)
         DC    C'0206  ',AL1(DFHPF2),AL4(K20206)    INITIALIZE ONLY
         DC    C'0206  ',AL1(DFHPF5),AL4(K50206)
         DC    C'0206  ',AL1(DFHPF7),AL4(K70206)    )
         DC    C'0206  ',AL1(DFHPF8),AL4(K80206)    ) DUAL
         DC    C'0206  ',AL1(DFHPF10),AL4(KA0206)   )      PAGING
         DC    C'0206  ',AL1(DFHPF11),AL4(KB0206)   )
         DC    C'0206  ',AL1(DFHPF12),AL4(K20206)   REDISPLAY VIA PF2
* ASSIGN
         DC    C'0208  ',AL1(DFHCLEAR),AL4(K20208)
         DC    C'0208  ',AL1(DFHPF2),AL4(K20208)    INITIALIZE ONLY
         DC    C'0208  ',AL1(DFHPF5),AL4(K50208)
         DC    C'0208  ',AL1(DFHPF7),AL4(K70208)    )
         DC    C'0208  ',AL1(DFHPF8),AL4(K80208)    ) DUAL
         DC    C'0208  ',AL1(DFHPF10),AL4(KA0208)   )      PAGING
         DC    C'0208  ',AL1(DFHPF11),AL4(KB0208)   )
         DC    C'0208  ',AL1(DFHPF12),AL4(K20208)   REDISPLAY VIA PF2
* IGNORE CONDITION
         DC    C'020A  ',AL1(DFHCLEAR),AL4(K2020A)
         DC    C'020A  ',AL1(DFHPF2),AL4(K2020A)    INITIALIZE ONLY
         DC    C'020A  ',AL1(DFHPF5),AL4(K5020A)
         DC    C'020A  ',AL1(DFHPF7),AL4(K7020A)    )
         DC    C'020A  ',AL1(DFHPF8),AL4(K8020A)    ) DUAL
         DC    C'020A  ',AL1(DFHPF10),AL4(KA020A)   )      PAGING
         DC    C'020A  ',AL1(DFHPF11),AL4(KB020A)   )
         DC    C'020A  ',AL1(DFHPF12),AL4(K2020A)   REDISPLAY VIA PF2
* PUSH HANDLE
         DC    C'020C  ',AL1(DFHCLEAR),AL4(K2020C)
         DC    C'020C  ',AL1(DFHPF2),AL4(K2020C)    INITIALIZE ONLY
         DC    C'020C  ',AL1(DFHPF5),AL4(K5020C)
         DC    C'020C  ',AL1(DFHPF7),AL4(K7020C)
         DC    C'020C  ',AL1(DFHPF8),AL4(K8020C)
         DC    C'020C  ',AL1(DFHPF10),AL4(KA020C)
         DC    C'020C  ',AL1(DFHPF11),AL4(KB020C)
         DC    C'020C  ',AL1(DFHPF12),AL4(K2020C)   REDISPLAY VIA PF2
* POP HANDLE
         DC    C'020E  ',AL1(DFHCLEAR),AL4(K2020E)
         DC    C'020E  ',AL1(DFHPF2),AL4(K2020E)    INITIALIZE ONLY
         DC    C'020E  ',AL1(DFHPF5),AL4(K5020E)
         DC    C'020E  ',AL1(DFHPF7),AL4(K7020E)
         DC    C'020E  ',AL1(DFHPF8),AL4(K8020E)
         DC    C'020E  ',AL1(DFHPF10),AL4(KA020E)
         DC    C'020E  ',AL1(DFHPF11),AL4(KB020E)
         DC    C'020E  ',AL1(DFHPF12),AL4(K2020E)   REDISPLAY VIA PF2
* RECEIVE
         DC    C'0402  ',AL1(DFHCLEAR),AL4(K20402)
         DC    C'0402  ',AL1(DFHPF2),AL4(K20402)
         DC    C'0402  ',AL1(DFHPF5),AL4(K50402)
         DC    C'0402  ',AL1(DFHPF7),AL4(K70402)
         DC    C'0402  ',AL1(DFHPF8),AL4(K80402)
         DC    C'0402  ',AL1(DFHPF10),AL4(KA0402)
         DC    C'0402  ',AL1(DFHPF11),AL4(KB0402)
         DC    C'0402  ',AL1(DFHPF12),AL4(K20402)   REDISPLAY VIA PF2
* SEND
         DC    C'0404  ',AL1(DFHCLEAR),AL4(K20404)
         DC    C'0404  ',AL1(DFHPF2),AL4(K20404)
         DC    C'0404  ',AL1(DFHPF5),AL4(K50404)
         DC    C'0404  ',AL1(DFHPF7),AL4(K70404)
         DC    C'0404  ',AL1(DFHPF8),AL4(K80404)
         DC    C'0404  ',AL1(DFHPF10),AL4(KA0404)
         DC    C'0404  ',AL1(DFHPF11),AL4(KB0404)
         DC    C'0404  ',AL1(DFHPF12),AL4(K20404)   REDISPLAY VIA PF2
* READ
         DC    C'0602  ',AL1(DFHCLEAR),AL4(K20602)
         DC    C'0602  ',AL1(DFHPF2),AL4(K20602)
         DC    C'0602  ',AL1(DFHPF5),AL4(K50602)
         DC    C'0602  ',AL1(DFHPF7),AL4(K70602)
         DC    C'0602  ',AL1(DFHPF8),AL4(K80602)
         DC    C'0602  ',AL1(DFHPF10),AL4(KA0602)
         DC    C'0602  ',AL1(DFHPF11),AL4(KB0602)
         DC    C'0602  ',AL1(DFHPF12),AL4(K20602)   REDISPLAY VIA PF2
* STARTBR
         DC    C'060C  ',AL1(DFHCLEAR),AL4(K2060C)
         DC    C'060C  ',AL1(DFHPF2),AL4(K2060C)
         DC    C'060C  ',AL1(DFHPF5),AL4(K5060C)
         DC    C'060C  ',AL1(DFHPF7),AL4(K7060C)
         DC    C'060C  ',AL1(DFHPF8),AL4(K8060C)
         DC    C'060C  ',AL1(DFHPF10),AL4(KA060C)
         DC    C'060C  ',AL1(DFHPF11),AL4(KB060C)
         DC    C'060C  ',AL1(DFHPF12),AL4(K2060C)   REDISPLAY VIA PF2
* READNEXT
         DC    C'060E  ',AL1(DFHCLEAR),AL4(K2060E)
         DC    C'060E  ',AL1(DFHPF2),AL4(K2060E)
         DC    C'060E  ',AL1(DFHPF5),AL4(K5060E)
         DC    C'060E  ',AL1(DFHPF7),AL4(K7060E)
         DC    C'060E  ',AL1(DFHPF8),AL4(K8060E)
         DC    C'060E  ',AL1(DFHPF10),AL4(KA060E)
         DC    C'060E  ',AL1(DFHPF11),AL4(KB060E)
         DC    C'060E  ',AL1(DFHPF12),AL4(K2060E)   REDISPLAY VIA PF2
* READPREV
         DC    C'0610  ',AL1(DFHCLEAR),AL4(K20610)
         DC    C'0610  ',AL1(DFHPF2),AL4(K20610)
         DC    C'0610  ',AL1(DFHPF5),AL4(K50610)
         DC    C'0610  ',AL1(DFHPF7),AL4(K70610)
         DC    C'0610  ',AL1(DFHPF8),AL4(K80610)
         DC    C'0610  ',AL1(DFHPF10),AL4(KA0610)
         DC    C'0610  ',AL1(DFHPF11),AL4(KB0610)
         DC    C'0610  ',AL1(DFHPF12),AL4(K20610)   REDISPLAY VIA PF2
* ENDBR
         DC    C'0612  ',AL1(DFHCLEAR),AL4(K20612)
         DC    C'0612  ',AL1(DFHPF2),AL4(K20612)    INITIALIZE ONLY
         DC    C'0612  ',AL1(DFHPF5),AL4(K50612)
         DC    C'0612  ',AL1(DFHPF7),AL4(K70612)
         DC    C'0612  ',AL1(DFHPF8),AL4(K80612)
         DC    C'0612  ',AL1(DFHPF10),AL4(KA0612)
         DC    C'0612  ',AL1(DFHPF11),AL4(KB0612)
         DC    C'0612  ',AL1(DFHPF12),AL4(K20612)   REDISPLAY VIA PF2
* RESETBR
         DC    C'0614  ',AL1(DFHCLEAR),AL4(K20614)
         DC    C'0614  ',AL1(DFHPF2),AL4(K20614)
         DC    C'0614  ',AL1(DFHPF5),AL4(K50614)
         DC    C'0614  ',AL1(DFHPF7),AL4(K70614)
         DC    C'0614  ',AL1(DFHPF8),AL4(K80614)
         DC    C'0614  ',AL1(DFHPF10),AL4(KA0614)
         DC    C'0614  ',AL1(DFHPF11),AL4(KB0614)
         DC    C'0614  ',AL1(DFHPF12),AL4(K20614)   REDISPLAY VIA PF2
* WRITEQ TS
         DC    C'0A02  ',AL1(DFHCLEAR),AL4(K20A02)
         DC    C'0A02  ',AL1(DFHPF2),AL4(K20A02)
         DC    C'0A02  ',AL1(DFHPF5),AL4(K50A02)
         DC    C'0A02  ',AL1(DFHPF7),AL4(K70A02)
         DC    C'0A02  ',AL1(DFHPF8),AL4(K80A02)
         DC    C'0A02  ',AL1(DFHPF10),AL4(KA0A02)
         DC    C'0A02  ',AL1(DFHPF11),AL4(KB0A02)
         DC    C'0A02  ',AL1(DFHPF12),AL4(K20A02)   REDISPLAY VIA PF2
* READQ TS
         DC    C'0A04  ',AL1(DFHCLEAR),AL4(K20A04)
         DC    C'0A04  ',AL1(DFHPF2),AL4(K20A04)
         DC    C'0A04  ',AL1(DFHPF5),AL4(K50A04)
         DC    C'0A04  ',AL1(DFHPF7),AL4(K70A04)
         DC    C'0A04  ',AL1(DFHPF8),AL4(K80A04)
         DC    C'0A04  ',AL1(DFHPF10),AL4(KA0A04)
         DC    C'0A04  ',AL1(DFHPF11),AL4(KB0A04)
         DC    C'0A04  ',AL1(DFHPF12),AL4(K20A04)   REDISPLAY VIA PF2
* DELETEQ TS
         DC    C'0A06  ',AL1(DFHCLEAR),AL4(K20A06)
         DC    C'0A06  ',AL1(DFHPF2),AL4(K20A06)
         DC    C'0A06  ',AL1(DFHPF5),AL4(K50A06)
         DC    C'0A06  ',AL1(DFHPF7),AL4(K70A06)
         DC    C'0A06  ',AL1(DFHPF8),AL4(K80A06)
         DC    C'0A06  ',AL1(DFHPF10),AL4(KA0A06)
         DC    C'0A06  ',AL1(DFHPF11),AL4(KB0A06)
         DC    C'0A06  ',AL1(DFHPF12),AL4(K20A06)   REDISPLAY VIA PF2
* GETMAIN
         DC    C'0C02  ',AL1(DFHCLEAR),AL4(K20C02)
         DC    C'0C02  ',AL1(DFHPF2),AL4(K20C02)    INITIALIZE ONLY
         DC    C'0C02  ',AL1(DFHPF5),AL4(K50C02)
         DC    C'0C02  ',AL1(DFHPF7),AL4(K70C02)
         DC    C'0C02  ',AL1(DFHPF8),AL4(K80C02)
         DC    C'0C02  ',AL1(DFHPF10),AL4(KA0C02)
         DC    C'0C02  ',AL1(DFHPF11),AL4(KB0C02)
         DC    C'0C02  ',AL1(DFHPF12),AL4(K20C02)   REDISPLAY VIA PF2
* FREEMAIN
         DC    C'0C04  ',AL1(DFHCLEAR),AL4(K20C04)
         DC    C'0C04  ',AL1(DFHPF2),AL4(K20C04)    INITIALIZE ONLY
         DC    C'0C04  ',AL1(DFHPF5),AL4(K50C04)
         DC    C'0C04  ',AL1(DFHPF7),AL4(K70C04)
         DC    C'0C04  ',AL1(DFHPF8),AL4(K80C04)
         DC    C'0C04  ',AL1(DFHPF10),AL4(KA0C04)
         DC    C'0C04  ',AL1(DFHPF11),AL4(KB0C04)
         DC    C'0C04  ',AL1(DFHPF12),AL4(K20C04)   REDISPLAY VIA PF2
* LINK: 'AFTER': PROGRAM INITIATION
         DC    C'0E02IN',AL1(DFHCLEAR),AL4(K20E02IN)
         DC    C'0E02IN',AL1(DFHPF2),AL4(K20E02IN)
         DC    C'0E02IN',AL1(DFHPF5),AL4(K50E02IN)
         DC    C'0E02IN',AL1(DFHPF7),AL4(K70E02IN)
         DC    C'0E02IN',AL1(DFHPF8),AL4(K80E02IN)
         DC    C'0E02IN',AL1(DFHPF10),AL4(KA0E02IN)
         DC    C'0E02IN',AL1(DFHPF11),AL4(KB0E02IN)
         DC    C'0E02IN',AL1(DFHPF12),AL4(K20E02IN) REDISPLAY VIA PF2
* LINK: 'BEFORE' (NOT LEVEL0)
* LINK: 'AFTER' FAIL
         DC    C'0E02  ',AL1(DFHCLEAR),AL4(K20E02)
         DC    C'0E02  ',AL1(DFHPF2),AL4(K20E02)
         DC    C'0E02  ',AL1(DFHPF5),AL4(K50E02)
         DC    C'0E02  ',AL1(DFHPF7),AL4(K70E02)
         DC    C'0E02  ',AL1(DFHPF8),AL4(K80E02)
         DC    C'0E02  ',AL1(DFHPF10),AL4(KA0E02)
         DC    C'0E02  ',AL1(DFHPF11),AL4(KB0E02)
         DC    C'0E02  ',AL1(DFHPF12),AL4(K20E02)   REDISPLAY VIA PF2
* XCTL: 'AFTER': PROGRAM INITIATION
         DC    C'0E04AF',AL1(DFHCLEAR),AL4(K20E02IN)
         DC    C'0E04AF',AL1(DFHPF2),AL4(K20E02IN)
         DC    C'0E04AF',AL1(DFHPF5),AL4(K50E02IN)
         DC    C'0E04AF',AL1(DFHPF7),AL4(K70E02IN)
         DC    C'0E04AF',AL1(DFHPF8),AL4(K80E02IN)
         DC    C'0E04AF',AL1(DFHPF10),AL4(KA0E02IN)
         DC    C'0E04AF',AL1(DFHPF11),AL4(KB0E02IN)
         DC    C'0E04AF',AL1(DFHPF12),AL4(K20E02IN) REDISPLAY VIA PF2
* XCTL: 'BEFORE'
* XCTL: 'AFTER' FAIL
         DC    C'0E04  ',AL1(DFHCLEAR),AL4(K20E04)
         DC    C'0E04  ',AL1(DFHPF2),AL4(K20E04)
         DC    C'0E04  ',AL1(DFHPF5),AL4(K50E04)
         DC    C'0E04  ',AL1(DFHPF7),AL4(K70E04)
         DC    C'0E04  ',AL1(DFHPF8),AL4(K80E04)
         DC    C'0E04  ',AL1(DFHPF10),AL4(KA0E04)
         DC    C'0E04  ',AL1(DFHPF11),AL4(KB0E04)
         DC    C'0E04  ',AL1(DFHPF12),AL4(K20E04)   REDISPLAY VIA PF2
* LOAD
         DC    C'0E06  ',AL1(DFHCLEAR),AL4(K20E06)
         DC    C'0E06  ',AL1(DFHPF2),AL4(K20E06)    INITIALIZE ONLY
         DC    C'0E06  ',AL1(DFHPF5),AL4(K50E06)
         DC    C'0E06  ',AL1(DFHPF7),AL4(K70E06)
         DC    C'0E06  ',AL1(DFHPF8),AL4(K80E06)
         DC    C'0E06  ',AL1(DFHPF10),AL4(KA0E06)
         DC    C'0E06  ',AL1(DFHPF11),AL4(KB0E06)
         DC    C'0E06  ',AL1(DFHPF12),AL4(K20E06)   REDISPLAY VIA PF2
* RETURN: 'BEFORE'
         DC    C'0E08  ',AL1(DFHCLEAR),AL4(K20E08)
         DC    C'0E08  ',AL1(DFHPF2),AL4(K20E08)
         DC    C'0E08  ',AL1(DFHPF5),AL4(K50E08)
         DC    C'0E08  ',AL1(DFHPF7),AL4(K70E08)
         DC    C'0E08  ',AL1(DFHPF8),AL4(K80E08)
         DC    C'0E08  ',AL1(DFHPF10),AL4(KA0E08)
         DC    C'0E08  ',AL1(DFHPF11),AL4(KB0E08)
         DC    C'0E08  ',AL1(DFHPF12),AL4(K20E08)   REDISPLAY VIA PF2
* RETURN: 'AFTER': PROGRAM TERMINATION
         DC    C'0E08PT',AL1(DFHCLEAR),AL4(K20E08PT)
         DC    C'0E08PT',AL1(DFHPF2),AL4(K20E08PT)
         DC    C'0E08PT',AL1(DFHPF7),AL4(K70E08PT)
         DC    C'0E08PT',AL1(DFHPF8),AL4(K80E08PT)
         DC    C'0E08PT',AL1(DFHPF10),AL4(KA0E08PT)
         DC    C'0E08PT',AL1(DFHPF11),AL4(KB0E08PT)
         DC    C'0E08PT',AL1(DFHPF12),AL4(K20E08PT) REDISPLAY VIA PF2
* RETURN: 'AFTER': TASK TERMINATION
         DC    C'0E08KC',AL1(DFHPF2),AL4(K20E08PT)
         DC    C'0E08KC',AL1(DFHPF7),AL4(K70E08PT)
         DC    C'0E08KC',AL1(DFHPF8),AL4(K80E08PT)
         DC    C'0E08KC',AL1(DFHPF10),AL4(KA0E08PT)
         DC    C'0E08KC',AL1(DFHPF11),AL4(KB0E08PT)
* RELEASE
         DC    C'0E0A  ',AL1(DFHCLEAR),AL4(K20E0A)
         DC    C'0E0A  ',AL1(DFHPF2),AL4(K20E0A)    INITIALIZE ONLY
         DC    C'0E0A  ',AL1(DFHPF5),AL4(K50E0A)
         DC    C'0E0A  ',AL1(DFHPF7),AL4(K70E0A)
         DC    C'0E0A  ',AL1(DFHPF8),AL4(K80E0A)
         DC    C'0E0A  ',AL1(DFHPF10),AL4(KA0E0A)
         DC    C'0E0A  ',AL1(DFHPF11),AL4(KB0E0A)
         DC    C'0E0A  ',AL1(DFHPF12),AL4(K20E0A)   REDISPLAY VIA PF2
* ABEND
         DC    C'0E0C  ',AL1(DFHCLEAR),AL4(K20E0C)
         DC    C'0E0C  ',AL1(DFHPF2),AL4(K20E0C)    INITIALIZE ONLY
         DC    C'0E0C  ',AL1(DFHPF5),AL4(K50E0C)
         DC    C'0E0C  ',AL1(DFHPF7),AL4(K70E0C)
         DC    C'0E0C  ',AL1(DFHPF8),AL4(K80E0C)
         DC    C'0E0C  ',AL1(DFHPF10),AL4(KA0E0C)
         DC    C'0E0C  ',AL1(DFHPF11),AL4(KB0E0C)
         DC    C'0E0C  ',AL1(DFHPF12),AL4(K20E0C)   REDISPLAY VIA PF2
* HANDLE ABEND
         DC    C'0E0E  ',AL1(DFHCLEAR),AL4(K20E0E)
         DC    C'0E0E  ',AL1(DFHPF2),AL4(K20E0E)    INITIALIZE ONLY
         DC    C'0E0E  ',AL1(DFHPF5),AL4(K50E0E)
         DC    C'0E0E  ',AL1(DFHPF7),AL4(K70E0E)
         DC    C'0E0E  ',AL1(DFHPF8),AL4(K80E0E)
         DC    C'0E0E  ',AL1(DFHPF10),AL4(KA0E0E)
         DC    C'0E0E  ',AL1(DFHPF11),AL4(KB0E0E)
         DC    C'0E0E  ',AL1(DFHPF12),AL4(K20E0E)   REDISPLAY VIA PF2
* ASKTIME
* ASKTIME ABSTIME
         DC    C'1002  ',AL1(DFHCLEAR),AL4(K21002)
         DC    C'1002  ',AL1(DFHPF2),AL4(K21002)    INITIALIZE ONLY
         DC    C'1002  ',AL1(DFHPF5),AL4(K51002)
         DC    C'1002  ',AL1(DFHPF7),AL4(K71002)
         DC    C'1002  ',AL1(DFHPF8),AL4(K81002)
         DC    C'1002  ',AL1(DFHPF10),AL4(KA1002)
         DC    C'1002  ',AL1(DFHPF11),AL4(KB1002)
         DC    C'1002  ',AL1(DFHPF12),AL4(K21002)   REDISPLAY VIA PF2
* DELAY
         DC    C'1004  ',AL1(DFHCLEAR),AL4(K21004)
         DC    C'1004  ',AL1(DFHPF2),AL4(K21004)
         DC    C'1004  ',AL1(DFHPF5),AL4(K51004)
         DC    C'1004  ',AL1(DFHPF7),AL4(K71004)
         DC    C'1004  ',AL1(DFHPF8),AL4(K81004)
         DC    C'1004  ',AL1(DFHPF10),AL4(KA1004)
         DC    C'1004  ',AL1(DFHPF11),AL4(KB1004)
         DC    C'1004  ',AL1(DFHPF12),AL4(K21004)   REDISPLAY VIA PF2
* START
         DC    C'1008  ',AL1(DFHCLEAR),AL4(K21008)
         DC    C'1008  ',AL1(DFHPF2),AL4(K21008)
         DC    C'1008  ',AL1(DFHPF5),AL4(K51008)
         DC    C'1008  ',AL1(DFHPF7),AL4(K71008)
         DC    C'1008  ',AL1(DFHPF8),AL4(K81008)
         DC    C'1008  ',AL1(DFHPF10),AL4(KA1008)
         DC    C'1008  ',AL1(DFHPF11),AL4(KB1008)
         DC    C'1008  ',AL1(DFHPF12),AL4(K21008)   REDISPLAY VIA PF2
* RETRIEVE
         DC    C'100A  ',AL1(DFHCLEAR),AL4(K2100A)
         DC    C'100A  ',AL1(DFHPF2),AL4(K2100A)
         DC    C'100A  ',AL1(DFHPF5),AL4(K5100A)
         DC    C'100A  ',AL1(DFHPF7),AL4(K7100A)
         DC    C'100A  ',AL1(DFHPF8),AL4(K8100A)
         DC    C'100A  ',AL1(DFHPF10),AL4(KA100A)
         DC    C'100A  ',AL1(DFHPF11),AL4(KB100A)
         DC    C'100A  ',AL1(DFHPF12),AL4(K2100A)   REDISPLAY VIA PF2
* CANCEL
         DC    C'100C  ',AL1(DFHCLEAR),AL4(K2100C)
         DC    C'100C  ',AL1(DFHPF2),AL4(K2100C)
         DC    C'100C  ',AL1(DFHPF5),AL4(K5100C)
         DC    C'100C  ',AL1(DFHPF7),AL4(K7100C)
         DC    C'100C  ',AL1(DFHPF8),AL4(K8100C)
         DC    C'100C  ',AL1(DFHPF10),AL4(KA100C)
         DC    C'100C  ',AL1(DFHPF11),AL4(KB100C)
         DC    C'100C  ',AL1(DFHPF12),AL4(K2100C)   REDISPLAY VIA PF2
* ENQ
         DC    C'1204  ',AL1(DFHCLEAR),AL4(K21204)
         DC    C'1204  ',AL1(DFHPF2),AL4(K21204)
         DC    C'1204  ',AL1(DFHPF5),AL4(K51204)
         DC    C'1204  ',AL1(DFHPF7),AL4(K71204)
         DC    C'1204  ',AL1(DFHPF8),AL4(K81204)
         DC    C'1204  ',AL1(DFHPF10),AL4(KA1204)
         DC    C'1204  ',AL1(DFHPF11),AL4(KB1204)
         DC    C'1204  ',AL1(DFHPF12),AL4(K21204)   REDISPLAY VIA PF2
* DEQ
         DC    C'1206  ',AL1(DFHCLEAR),AL4(K21206)
         DC    C'1206  ',AL1(DFHPF2),AL4(K21206)
         DC    C'1206  ',AL1(DFHPF5),AL4(K51206)
         DC    C'1206  ',AL1(DFHPF7),AL4(K71206)
         DC    C'1206  ',AL1(DFHPF8),AL4(K81206)
         DC    C'1206  ',AL1(DFHPF10),AL4(KA1206)
         DC    C'1206  ',AL1(DFHPF11),AL4(KB1206)
         DC    C'1206  ',AL1(DFHPF12),AL4(K21206)   REDISPLAY VIA PF2
* RECEIVE MAP
         DC    C'1802  ',AL1(DFHCLEAR),AL4(K21802)
         DC    C'1802  ',AL1(DFHPF2),AL4(K21802)    INITIALIZE ONLY
         DC    C'1802  ',AL1(DFHPF5),AL4(K51802)
         DC    C'1802  ',AL1(DFHPF7),AL4(K71802)
         DC    C'1802  ',AL1(DFHPF8),AL4(K81802)
         DC    C'1802  ',AL1(DFHPF10),AL4(KA1802)
         DC    C'1802  ',AL1(DFHPF11),AL4(KB1802)
         DC    C'1802  ',AL1(DFHPF12),AL4(K21802)   REDISPLAY VIA PF2
* SEND MAP
         DC    C'1804  ',AL1(DFHCLEAR),AL4(K21804)
         DC    C'1804  ',AL1(DFHPF2),AL4(K21804)    INITIALIZE ONLY
         DC    C'1804  ',AL1(DFHPF5),AL4(K51804)
         DC    C'1804  ',AL1(DFHPF7),AL4(K71804)
         DC    C'1804  ',AL1(DFHPF8),AL4(K81804)
         DC    C'1804  ',AL1(DFHPF10),AL4(KA1804)
         DC    C'1804  ',AL1(DFHPF11),AL4(KB1804)
         DC    C'1804  ',AL1(DFHPF12),AL4(K21804)   REDISPLAY VIA PF2
* SEND CONTROL
         DC    C'1812  ',AL1(DFHCLEAR),AL4(K21812)
         DC    C'1812  ',AL1(DFHPF2),AL4(K21812)    INITIALIZE ONLY
         DC    C'1812  ',AL1(DFHPF5),AL4(K51812)
         DC    C'1812  ',AL1(DFHPF7),AL4(K71812)
         DC    C'1812  ',AL1(DFHPF8),AL4(K81812)
         DC    C'1812  ',AL1(DFHPF10),AL4(KA1812)
         DC    C'1812  ',AL1(DFHPF11),AL4(KB1812)
         DC    C'1812  ',AL1(DFHPF12),AL4(K21812)   REDISPLAY VIA PF2
* DUMP TRANSACTION
         DC    C'1C02  ',AL1(DFHCLEAR),AL4(K21C02)
         DC    C'1C02  ',AL1(DFHPF2),AL4(K21C02)    INITIALIZE ONLY
         DC    C'1C02  ',AL1(DFHPF5),AL4(K51C02)
         DC    C'1C02  ',AL1(DFHPF7),AL4(K71C02)
         DC    C'1C02  ',AL1(DFHPF8),AL4(K81C02)
         DC    C'1C02  ',AL1(DFHPF10),AL4(KA1C02)
         DC    C'1C02  ',AL1(DFHPF11),AL4(KB1C02)
         DC    C'1C02  ',AL1(DFHPF12),AL4(K21C02)   REDISPLAY VIA PF2
* DELETE CONTAINER
         DC    C'3412  ',AL1(DFHCLEAR),AL4(K23412)
         DC    C'3412  ',AL1(DFHPF2),AL4(K23412)
         DC    C'3412  ',AL1(DFHPF5),AL4(K53412)
         DC    C'3412  ',AL1(DFHPF7),AL4(K73412)
         DC    C'3412  ',AL1(DFHPF8),AL4(K83412)
         DC    C'3412  ',AL1(DFHPF10),AL4(KA3412)
         DC    C'3412  ',AL1(DFHPF11),AL4(KB3412)
         DC    C'3412  ',AL1(DFHPF12),AL4(K23412)   REDISPLAY VIA PF2
* GET CONTAINER
         DC    C'3414  ',AL1(DFHCLEAR),AL4(K23414)
         DC    C'3414  ',AL1(DFHPF2),AL4(K23414)
         DC    C'3414  ',AL1(DFHPF5),AL4(K53414)
         DC    C'3414  ',AL1(DFHPF7),AL4(K73414)
         DC    C'3414  ',AL1(DFHPF8),AL4(K83414)
         DC    C'3414  ',AL1(DFHPF10),AL4(KA3414)
         DC    C'3414  ',AL1(DFHPF11),AL4(KB3414)
         DC    C'3414  ',AL1(DFHPF12),AL4(K23414)   REDISPLAY VIA PF2
* PUT CONTAINER
         DC    C'3416  ',AL1(DFHCLEAR),AL4(K23416)
         DC    C'3416  ',AL1(DFHPF2),AL4(K23416)
         DC    C'3416  ',AL1(DFHPF5),AL4(K53416)
         DC    C'3416  ',AL1(DFHPF7),AL4(K73416)
         DC    C'3416  ',AL1(DFHPF8),AL4(K83416)
         DC    C'3416  ',AL1(DFHPF10),AL4(KA3416)
         DC    C'3416  ',AL1(DFHPF11),AL4(KB3416)
         DC    C'3416  ',AL1(DFHPF12),AL4(K23416)   REDISPLAY VIA PF2
* MOVE CONTAINER
         DC    C'3440  ',AL1(DFHCLEAR),AL4(K23440)
         DC    C'3440  ',AL1(DFHPF2),AL4(K23440)
         DC    C'3440  ',AL1(DFHPF5),AL4(K53440)
         DC    C'3440  ',AL1(DFHPF7),AL4(K73440)
         DC    C'3440  ',AL1(DFHPF8),AL4(K83440)
         DC    C'3440  ',AL1(DFHPF10),AL4(KA3440)
         DC    C'3440  ',AL1(DFHPF11),AL4(KB3440)
         DC    C'3440  ',AL1(DFHPF12),AL4(K23440)   REDISPLAY VIA PF2
* FORMATTIME
         DC    C'4A04  ',AL1(DFHCLEAR),AL4(K24A04)
         DC    C'4A04  ',AL1(DFHPF2),AL4(K24A04)    INITIALIZE ONLY
         DC    C'4A04  ',AL1(DFHPF5),AL4(K54A04)
         DC    C'4A04  ',AL1(DFHPF7),AL4(K74A04)    )
         DC    C'4A04  ',AL1(DFHPF8),AL4(K84A04)    ) DUAL
         DC    C'4A04  ',AL1(DFHPF10),AL4(KA4A04)   )      PAGING
         DC    C'4A04  ',AL1(DFHPF11),AL4(KB4A04)   )
         DC    C'4A04  ',AL1(DFHPF12),AL4(K24A04)   REDISPLAY VIA PF2
* INQUIRE FILE
         DC    C'4C02  ',AL1(DFHCLEAR),AL4(K24C02)
         DC    C'4C02  ',AL1(DFHPF2),AL4(K24C02)    INITIALIZE ONLY
         DC    C'4C02  ',AL1(DFHPF5),AL4(K54C02)
         DC    C'4C02  ',AL1(DFHPF7),AL4(K74C02)    )
         DC    C'4C02  ',AL1(DFHPF8),AL4(K84C02)    ) DUAL
         DC    C'4C02  ',AL1(DFHPF10),AL4(KA4C02)   )      PAGING
         DC    C'4C02  ',AL1(DFHPF11),AL4(KB4C02)   )
         DC    C'4C02  ',AL1(DFHPF12),AL4(K24C02)   REDISPLAY VIA PF2
* SET FILE
         DC    C'4C04  ',AL1(DFHCLEAR),AL4(K24C04)
         DC    C'4C04  ',AL1(DFHPF2),AL4(K24C04)    INITIALIZE ONLY
         DC    C'4C04  ',AL1(DFHPF5),AL4(K54C04)
         DC    C'4C04  ',AL1(DFHPF7),AL4(K74C04)
         DC    C'4C04  ',AL1(DFHPF8),AL4(K84C04)
         DC    C'4C04  ',AL1(DFHPF10),AL4(KA4C04)
         DC    C'4C04  ',AL1(DFHPF11),AL4(KB4C04)
         DC    C'4C04  ',AL1(DFHPF12),AL4(K24C04)   REDISPLAY VIA PF2
* STARTBROWSE CONTAINER
         DC    C'9626  ',AL1(DFHCLEAR),AL4(K29626)
         DC    C'9626  ',AL1(DFHPF2),AL4(K29626)
         DC    C'9626  ',AL1(DFHPF5),AL4(K59626)
         DC    C'9626  ',AL1(DFHPF7),AL4(K79626)
         DC    C'9626  ',AL1(DFHPF8),AL4(K89626)
         DC    C'9626  ',AL1(DFHPF10),AL4(KA9626)
         DC    C'9626  ',AL1(DFHPF11),AL4(KB9626)
         DC    C'9626  ',AL1(DFHPF12),AL4(K29626)   REDISPLAY VIA PF2
* GETNEXT CONTAINER
         DC    C'9628  ',AL1(DFHCLEAR),AL4(K29628)
         DC    C'9628  ',AL1(DFHPF2),AL4(K29628)
         DC    C'9628  ',AL1(DFHPF5),AL4(K59628)
         DC    C'9628  ',AL1(DFHPF7),AL4(K79628)
         DC    C'9628  ',AL1(DFHPF8),AL4(K89628)
         DC    C'9628  ',AL1(DFHPF10),AL4(KA9628)
         DC    C'9628  ',AL1(DFHPF11),AL4(KB9628)
         DC    C'9628  ',AL1(DFHPF12),AL4(K29628)   REDISPLAY VIA PF2
* ENDBROWSE CONTAINER
         DC    C'962A  ',AL1(DFHCLEAR),AL4(K2962A)
         DC    C'962A  ',AL1(DFHPF2),AL4(K2962A)
         DC    C'962A  ',AL1(DFHPF5),AL4(K5962A)
         DC    C'962A  ',AL1(DFHPF7),AL4(K7962A)
         DC    C'962A  ',AL1(DFHPF8),AL4(K8962A)
         DC    C'962A  ',AL1(DFHPF10),AL4(KA962A)
         DC    C'962A  ',AL1(DFHPF11),AL4(KB962A)
         DC    C'962A  ',AL1(DFHPF12),AL4(K2962A)   REDISPLAY VIA PF2
*
         DC    X'FF'              STOPPER
*
         DROP  R12,R3
*
* KEY PROCESSING ROUTINES
*
K20202   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ADDRESS
* PF12 : ADDRESS - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0202S,R4
         MVC   E0202ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0202P7A,DFHBMASD  HIDE PF7
         MVI   E0202P8A,DFHBMASD  HIDE PF8
         MVI   E0202PAA,DFHBMASD  HIDE PF10
         MVI   E0202PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20202S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20202S4 EQU   *
         XC    E0202DIL,E0202DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20202S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0202PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20202S6           EXIT
*
K20202S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202NP           EXIT IF NOT
* REDISPLAY MODE
K20202S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0202PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0202DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0202DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0202DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0202DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20202DC        CONVERT TO DECIMAL
         UNPK  E0202DTO+1(3),K20202DC+6(2) UNPACK NUMITEMS
         OI    E0202DTO+3,X'F0'   SET SIGN
         MVI   E0202DTO,C'/'      SET /
         MVC   E0202ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20202DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20202DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K202027P           EXIT IF NOT
         MVI   E0202P7A,DFHBMASB  SHOW PF7
K202027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K202028P           EXIT IF NOT
         MVI   E0202P8A,DFHBMASB  SHOW PF8
K202028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20202AP           EXIT IF NOT
         MVI   E0202PAA,DFHBMASB  SHOW PF10
K20202AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20202NP           EXIT IF NOT
         MVI   E0202PBA,DFHBMASB  SHOW PF11
K20202NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20202SN           EXIT IF IT IS
* ONLY 'AFTER' IS LIKELY TO HAVE INPUT AREAS FOR CONVERSION
         MVI   E0202P2A,DFHBMASD  HIDE PF2
         CLI   E0202STO,C'A'      'BEFORE' ?
         BE    K20202SN           EXIT IF IT IS
* 'AFTER' ADDRESS
         CLI   E0202CMO,C'('      ANY COMMAREA ?
         BNE   K20202DW           EXIT IF NOT
* 'AFTER' ADDRESS AND COMMAREA
         MVI   E0202P2A,DFHBMASB  SHOW PF2
         PACK  K20202CD,E0202CHO+31(7) PACK COMMAREA LENGTH
         CVB   R8,K20202CD        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   K20202LC           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20202LC EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20202CD        SAVE DISPLAY LENGTH-1
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20202M2           EXIT IF IT IS
         B     K20202R2           EXIT
*
K20202M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20202R2           EXIT IF NOT
K20202M2 EQU   *
         EX    R8,K20202SC        SAVE COMMAREA
         EX    R8,K20202CE        COMMAREA TO EBCDIC
         B     K20202DW           EXIT
*
K20202R2 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20202M4           EXIT IF IT IS
         B     K20202EC           EXIT
*
K20202M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20202EC           EXIT IF NOT
K20202M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202CD        RESTORE LENGTH FOR EX
         EX    R8,K20202RC        MOVE COMMAREA BACK
         EX    R8,K20202CA        COMMAREA TO ASCII
         B     K20202DW           EXIT
*
K20202EC EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20202M6           EXIT IF IT IS
         B     K20202AC           EXIT
*
K20202M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20202AC           EXIT IF NOT
K20202M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202CD        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LA    R1,K20202TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20202CS        SOURCE ADDRESS
         XC    E0202CMO+1(69),E0202CMO+1 CLEAR COMMAREA DISPLAY
         MVHHI E0202CMO+1,C'X'''  MOVE X'
         LA    R14,E0202CMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20202HC           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20202HC EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0202CMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20202DW           EXIT
*
K20202AC EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202CD        RESTORE LENGTH FOR EX
         XC    E0202CMO+1(69),E0202CMO+1 CLEAR COMMAREA DISPLAY
         EX    R8,K20202RC        MOVE COMMAREA BACK
         EX    R8,K20202CE        COMMAREA TO EBCDIC
         LA    R5,E0202CMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
K20202DW EQU   *
* 'AFTER' ADDRESS AND CWA
         CLI   E0202WMO,C'('      ANY CWA ?
         BNE   K20202DE           EXIT IF NOT
* 'AFTER' ADDRESS AND CWA
         MVI   E0202P2A,DFHBMASB  SHOW PF2
         PACK  K20202WD,E0202WHO+31(7) PACK CWA LENGTH
         CVB   R8,K20202WD        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   K20202LW           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20202LW EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20202WD        SAVE DISPLAY LENGTH-1
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20202M8           EXIT IF IT IS
         B     K20202WR           EXIT
*
K20202M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20202WR           EXIT IF NOT
K20202M8 EQU   *
         EX    R8,K20202SW        SAVE CWA
         EX    R8,K20202WE        CWA TO EBCDIC
         B     K20202DE           EXIT
*
K20202WR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20202MA           EXIT IF IT IS
         B     K20202EW           EXIT
*
K20202M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20202EW           EXIT IF NOT
K20202MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202WD        RESTORE LENGTH FOR EX
         EX    R8,K20202RW        MOVE CWA BACK
         EX    R8,K20202WA        CWA TO ASCII
         B     K20202DE           EXIT
*
K20202EW EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20202MC           EXIT IF IT IS
         B     K20202AW           EXIT
*
K20202MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20202AW           EXIT IF NOT
K20202MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202WD        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=CWA LENGTH
         LA    R1,K20202TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20202WS        SOURCE ADDRESS
         XC    E0202WMO+1(69),E0202WMO+1 CLEAR CWA DISPLAY
         MVHHI E0202WMO+1,C'X'''  MOVE X'
         LA    R14,E0202WMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20202WH           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20202WH EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0202WMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20202DE           EXIT
*
K20202AW EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202WD        RESTORE LENGTH FOR EX
         XC    E0202WMO+1(69),E0202WMO+1 CLEAR CWA DISPLAY
         EX    R8,K20202RW        MOVE CWA BACK
         EX    R8,K20202WE        CWA TO EBCDIC
         LA    R5,E0202WMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET CWA CLOSE BRACKET
K20202DE EQU   *
* 'AFTER' ADDRESS AND EIB
         CLI   E0202EMO,C'('      ANY EIB ?
         BNE   K20202SM           EXIT IF NOT
* 'AFTER' ADDRESS AND EIB
         MVI   E0202P2A,DFHBMASB  SHOW PF2
         PACK  K20202ED,E0202EHO+31(7) PACK EIB LENGTH
         CVB   R8,K20202ED        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   K20202LE           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20202LE EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20202ED        SAVE DISPLAY LENGTH-1
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202MD           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20202ME           EXIT IF IT IS
         B     K20202R3           EXIT
*
K20202MD EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20202R3           EXIT IF NOT
K20202ME EQU   *
         EX    R8,K20202SE        SAVE EIB
         EX    R8,K20202EE        EIB TO EBCDIC
         B     K20202SM           EXIT
*
K20202R3 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202MF           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20202MG           EXIT IF IT IS
         B     K20202EH           EXIT
*
K20202MF EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20202EH           EXIT IF NOT
K20202MG EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202ED        RESTORE LENGTH FOR EX
         EX    R8,K20202RE        MOVE EIB BACK
         EX    R8,K20202EA        EIB TO ASCII
         B     K20202SM           EXIT
*
K20202EH EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202MH           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20202MI           EXIT IF IT IS
         B     K20202AE           EXIT
*
K20202MH EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20202AE           EXIT IF NOT
K20202MI EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202ED        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=EIB LENGTH
         LA    R1,K20202TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20202ES        SOURCE ADDRESS
         XC    E0202EMO+1(69),E0202EMO+1 CLEAR EIB DISPLAY
         MVHHI E0202EMO+1,C'X'''  MOVE X'
         LA    R14,E0202EMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20202HE           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20202HE EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0202EMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20202SM           EXIT
*
K20202AE EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20202ED        RESTORE LENGTH FOR EX
         XC    E0202EMO+1(69),E0202EMO+1 CLEAR EIB DISPLAY
         EX    R8,K20202RE        MOVE EIB BACK
         EX    R8,K20202EE        EIB TO EBCDIC
         LA    R5,E0202EMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET EIB CLOSE BRACKET
K20202SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20202NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20202MK           EXIT
*
K20202MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20202NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20202MK EQU   *
         MVC   E0202MDO,=CL6'EBCDIC' SET MODE
         B     K20202SN           EXIT
*
K20202NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K20202NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20202MM           EXIT
*
K20202ML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K20202NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20202MM EQU   *
         MVC   E0202MDO,=CL6'ASCII' SET MODE
         B     K20202SN           EXIT
*
K20202NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K20202NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20202MO           EXIT
*
K20202MN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K20202NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20202MO EQU   *
         MVC   E0202MDO,=CL6'HEX' SET MODE
         B     K20202SN           EXIT
*
K20202NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20202MP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20202MQ           EXIT
*
K20202MP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20202MQ EQU   *
         MVC   E0202MDO,=CL6'EBCDIC' SET MODE
K20202SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0202') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0202          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20202SC MVC   K20202CS(0),E0202CMO+1 SAVE COMMAREA
K20202SW MVC   K20202WS(0),E0202WMO+1 SAVE CWA
K20202SE MVC   K20202ES(0),E0202EMO+1 SAVE EIB
K20202CE TR    E0202CMO+1(0),K20202TE COMMAREA TO EBCDIC
K20202WE TR    E0202WMO+1(0),K20202TE CWA TO EBCDIC
K20202EE TR    E0202EMO+1(0),K20202TE EIB TO EBCDIC
K20202RC MVC   E0202CMO+1(0),K20202CS MOVE COMMAREA BACK
K20202RW MVC   E0202WMO+1(0),K20202WS MOVE CWA BACK
K20202RE MVC   E0202EMO+1(0),K20202ES MOVE EIB BACK
K20202CA TR    E0202CMO+1(0),K20202TA COMMAREA TO ASCII
K20202WA TR    E0202WMO+1(0),K20202TA CWA TO ASCII
K20202EA TR    E0202EMO+1(0),K20202TA EIB TO ASCII
*
K20202DC DC    PL8'0'
K20202CD DC    PL8'0'
K20202WD DC    PL8'0'
K20202ED DC    PL8'0'
K20202CS DS    XL67               COMMAREA
K20202WS DS    XL67               CWA
K20202ES DS    XL67               EIB
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20202TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20202TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20202TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50202   DS    0H
         USING *,R6
* PF5  : ADDRESS
* WORKING STORAGE DISPLAY
         USING EDF0202S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0202TSO   MOVE TRANSID
         MVC   EWKSPGO,E0202PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0202TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0202L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70202   DS    0H
         USING *,R6
* PF7  : ADDRESS
* REDISPLAY BACK 1
         USING EDF0202S,R4
         CLI   E0202P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70202DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70202DP,=P'1'     BACK 1
         CVB   R8,K70202DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70202DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0202P7A,DFHBMASD  HIDE PF7
         MVI   E0202P8A,DFHBMASB  SHOW PF8
         MVI   E0202PAA,DFHBMASD  HIDE PF10
         MVI   E0202PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K702027P           EXIT IF NOT
         MVI   E0202P7A,DFHBMASB  SHOW PF7
K702027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70202AP           EXIT IF NOT
         MVI   E0202PAA,DFHBMASB  SHOW PF10
K70202AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70202BP           EXIT IF NOT
         MVI   E0202PBA,DFHBMASB  SHOW PF11
K70202BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70202IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70202IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70202DP DC    PL8'0'
K70202IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80202   DS    0H
         USING *,R6
* PF8  : ADDRESS
* REDISPLAY FORWARD 1
         USING EDF0202S,R4
         CLI   E0202P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80202DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80202DP,=P'1'     FORWARD 1
         CVB   R8,K80202DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80202DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0202P7A,DFHBMASB  SHOW PF7
         MVI   E0202P8A,DFHBMASD  HIDE PF8
         MVI   E0202PAA,DFHBMASD  HIDE PF10
         MVI   E0202PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K802028P           EXIT IF NOT
         MVI   E0202P8A,DFHBMASB  SHOW PF8
K802028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80202AP           EXIT IF NOT
         MVI   E0202PAA,DFHBMASB  SHOW PF10
K80202AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80202BP           EXIT IF NOT
         MVI   E0202PBA,DFHBMASB  SHOW PF11
K80202BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80202IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80202IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80202DP DC    PL8'0'
K80202IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0202   DS    0H
         USING *,R6
* PF10 : ADDRESS
* REDISPLAY BACK 5
         USING EDF0202S,R4
         CLI   E0202PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0202DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0202DP,=P'5'     BACK 5
         CVB   R8,KA0202DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0202DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0202P7A,DFHBMASD  HIDE PF7
         MVI   E0202P8A,DFHBMASD  HIDE PF8
         MVI   E0202PAA,DFHBMASD  HIDE PF10
         MVI   E0202PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA02027P           EXIT IF NOT
         MVI   E0202P7A,DFHBMASB  SHOW PF7
KA02027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA02028P           EXIT IF NOT
         MVI   E0202P8A,DFHBMASB  SHOW PF8
KA02028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0202AP           EXIT IF NOT
         MVI   E0202PAA,DFHBMASB  SHOW PF10
KA0202AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0202IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0202IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0202DP DC    PL8'0'
KA0202IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0202   DS    0H
         USING *,R6
* PF11 : ADDRESS
* REDISPLAY FORWARD 5
         USING EDF0202S,R4
         CLI   E0202PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0202DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0202DP,=P'5'     FORWARD 5
         CVB   R8,KB0202DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0202DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0202P7A,DFHBMASD  HIDE PF7
         MVI   E0202P8A,DFHBMASD  HIDE PF8
         MVI   E0202PAA,DFHBMASB  SHOW PF10
         MVI   E0202PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB02027P           EXIT IF NOT
         MVI   E0202P7A,DFHBMASB  SHOW PF7
KB02027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB02028P           EXIT IF NOT
         MVI   E0202P8A,DFHBMASB  SHOW PF8
KB02028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0202BP           EXIT IF NOT
         MVI   E0202PBA,DFHBMASB  SHOW PF11
KB0202BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0202IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0202IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0202DP DC    PL8'0'
KB0202IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0202   DS    0H
         USING *,R6
* PF12 : ADDRESS
         USING EDF0202S,R4
         XC    KC0202RP,KC0202RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0202RP) LENGTH(KC0202LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0202RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0202L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0202') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0202BS           EXIT IF IT IS
         TM    E0202DIF,DFHBMEOF  ANY DATA ?
         BO    KC0202BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0202DII  SAVE INPUT REDISPLAY NUMBER
KC0202BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0202RP DS    CL50               RECEIVE AREA
KC0202LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20204   DS    0H
* HANDLE CONDITION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : HANDLE CONDITION - NO PROCESSING
* PF12 : HANDLE CONDITION - ACTIVATE REDISPLAY MODE--WITH PAGING
*        HANDLE CONDITION - WITHIN REDISPLAY MODE, SWITCH KEY SETS
         USING EDF0204S,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* HANDLE CLEAR IN REDISPLAY MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20204OK           EXIT IF NOT
* REDISPLAY MODE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BNE   K20204OK           EXIT IF NOT
* CLEAR IN REDISPLAY MODE
         L     R4,EDFRDYAD        R4=REDISPLAY MAP STRUCTURE
         AHI   R4,8               POINT TO REDISPLAY MAP
K20204OK EQU   *
         MVC   E0204ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVC   E0204P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVC   E0204P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVC   E0204PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         MVC   E0204PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E0204PCO,=C'PF12:REDISPLAY MODE' SET PF12 TEXT
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20204S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20204S4 EQU   *
         XC    E0204DIL,E0204DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20204S5           EXIT IF NOT
* PF12 PRESSED
         CLI   E0204PCA,DFHBMASD  PF12 HIDDEN ?
         BE    K20204S5           EXIT IF IT IS
* PF12 PRESSED AND SHOWN
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20204AR           EXIT IF NOT
* PF12 WHILE IN REDISPLAY MODE, SWITCH KEY SETS
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K20204S6           EXIT IF THEY ARE
         L     R14,K20204NC       R14=NO. OF POTENTIAL LINES
         S     R14,K20204LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20204NP           EXIT IF NOT
* REDISPLAY KEYS ACTIVE, SWITCH TO PAGING KEYS
         MVC   E0204ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E0204P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVC   E0204P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVC   E0204PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVC   E0204PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E0204PCO,=C'PF12:REDISPLAY KEYS' SET PF12 TEXT
         MVHHI E0204DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVI   EDFRDYPG,X'FF'     SET PAGING KEYS ACTIVE
         B     K20204NP           EXIT
*
K20204AR EQU   *
* PF12 AND NOT IN REDISPLAY MODE, ACTIVATE IT
         CLI   E0204PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20204S6           EXIT
*
K20204S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20204NP           EXIT IF NOT
* REDISPLAY MODE
K20204S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
         MVC   E0204ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E0204P7O,=C'PF7 :REDISPLAY BACK 1' SET PF7 TEXT
         MVC   E0204P8O,=C'PF8 :REDISPLAY FORWARD 1' SET PF8 TEXT
         MVC   E0204PAO,=C'PF10:REDISPLAY BACK 5' SET PF10 TEXT
         MVC   E0204PBO,=C'PF11:REDISPLAY FORWARD 5' SET PF11 TEXT
         MVC   E0204PCO,=C'PF12:PAGING KEYS   ' SET PF12 TEXT
         MVI   EDFRDYPG,X'FE'     SET REDISPLAY KEYS ACTIVE
         MVI   E0204PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0204DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0204DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0204DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0204DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20204DP        CONVERT TO DECIMAL
         UNPK  E0204DTO+1(3),K20204DP+6(2) UNPACK NUMITEMS
         OI    E0204DTO+3,X'F0'   SET SIGN
         MVI   E0204DTO,C'/'      SET /
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20204DP        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K202047P           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
K202047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K202048P           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
K202048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20204AP           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
K20204AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20204NP           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K20204NP EQU   *
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF0204L        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO CDLOADPT(4), P0204CND(30), P0204ADR(30XL4)
         ST    R9,K20204AD        SAVE IT
         XC    K20204LT,K20204LT  CLEAR OFFSET OF TOP LINE
         XC    K20204NC,K20204NC  CLEAR NO. OF CONDITIONS
         LA    R5,4(R9)           R5=CONDITION CODES
* COUNT NO. OF CONDITIONS
         LA    R8,30              R8=MAX CONDITIONS
K20204CC EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K20204CD           EXIT IF IT IS
         ASI   K20204NC,1         COUNT NO. OF CONDITIONS
         AHI   R5,1               BUMP CONDITIONS POINTER
         BCT   R8,K20204CC        LOOP
*
K20204CD EQU   *
         LA    R5,4(R9)           R5=CONDITION CODES
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
K20204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K20204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K20204IN           EXIT IF NONE
         MVC   16(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K20204W2,0(R1)     SAVE ADDRESS
         UNPK  K20204W1(9),K20204W2(5) UNPACK ADDRESS
         TR    K20204W1(8),K20204TB-240 CONVERT TO DISPLAY HEX
         MVC   19(8,R7),K20204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K20204W2        SAVE OFFSET
         UNPK  K20204W1(9),K20204W2(5) UNPACK OFFSET
         TR    K20204W1(8),K20204TB-240 CONVERT TO DISPLAY HEX
         MVC   34(6,R7),K20204W1+2 MOVE OFFSET
K20204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K20204LP        LOOP
*
* SCREEN FULL
         B     K20204SF           EXIT
*
K20204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K20204DN        LOOP
*
K20204SF EQU   *
* SET PAGING KEYS:
*    IF REDISPLAY NOT ACTIVE
*    IF REDISPLAY IS ACTIVE AND PAGING KEYS ARE DISPLAYED
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20204PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K20204PK           EXIT IF THEY ARE
* REDISPLAY KEYS ACTIVE, SHOW PF12 IF WE CAN PAGE
         L     R14,K20204NC       R14=NO. OF POTENTIAL LINES
         S     R14,K20204LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20204SN           EXIT IF NOT
         MVI   E0204PCA,DFHBMASB  SHOW PF12
         B     K20204SN           EXIT
*
* PAGING KEYS ACTIVE
* WE CAN ONLY GO FORWARD FROM HERE
K20204PK EQU   *
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         L     R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,K20204LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20204SN           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K20204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K20204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0204          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20204DP DC    PL8'0'
K20204W1 DS    XL9
K20204W2 DS    XL4
K20204TB DC    C'0123456789ABCDEF'
K20204AD DS    A                  ADDRESS OF CONDITION AREA
K20204LT DS    XL4                OFFSET OF TOP LINE
K20204NC DS    XL4                NO. OF CONDITIONS
*
         LTORG
*
K50204   DS    0H
         USING *,R6
* PF5  : HANDLE CONDITION
* WORKING STORAGE DISPLAY
         USING EDF0204S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0204TSO   MOVE TRANSID
         MVC   EWKSPGO,E0204PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0204TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0204L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70204   DS    0H
         USING *,R6
* PF7  : HANDLE CONDITION
* REDISPLAY KEYS: REDISPLAY BACK 1
* PAGING KEYS   : PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204P7A,DFHBMASD  IS PF7 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K70204PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K70204PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70204DP,=P'1'     BACK 1
         CVB   R8,K70204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVI   E0204P8A,DFHBMASB  SHOW PF8
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K702047P           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
K702047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70204AP           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
K70204AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70204BP           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K70204BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70204PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-6              - HALF PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-6*4            - HALF PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
K70204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K70204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K70204IN           EXIT IF NONE
         MVC   16(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K70204W2,0(R1)     SAVE ADDRESS
         UNPK  K70204W1(9),K70204W2(5) UNPACK ADDRESS
         TR    K70204W1(8),K70204TB-240 CONVERT TO DISPLAY HEX
         MVC   19(8,R7),K70204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K70204W2        SAVE OFFSET
         UNPK  K70204W1(9),K70204W2(5) UNPACK OFFSET
         TR    K70204W1(8),K70204TB-240 CONVERT TO DISPLAY HEX
         MVC   34(6,R7),K70204W1+2 MOVE OFFSET
K70204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K70204LP        LOOP
*
         B     K70204KP           EXIT
*
K70204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K70204DN        LOOP
*
K70204KP EQU   *
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVI   E0204P8A,DFHBMASB  SHOW PF8
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K70204KB           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K70204KB           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
K70204KB EQU   *
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K70204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K70204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0204          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K70204DP DC    PL8'0'
K70204W1 DS    XL9
K70204W2 DS    XL4
K70204TB DC    C'0123456789ABCDEF'
K70204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80204   DS    0H
         USING *,R6
* PF8  : HANDLE CONDITION
* REDISPLAY KEYS: REDISPLAY FORWARD 1
* PAGING KEYS   : PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204P8A,DFHBMASD  IS PF8 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K80204PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K80204PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80204DP,=P'1'     FORWARD 1
         CVB   R8,K80204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0204P7A,DFHBMASB  SHOW PF7
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K802048P           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
K802048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80204AP           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
K80204AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80204BP           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K80204BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80204PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,6               + HALF PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,6*4             + HALF PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
K80204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K80204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K80204IN           EXIT IF NONE
         MVC   16(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K80204W2,0(R1)     SAVE ADDRESS
         UNPK  K80204W1(9),K80204W2(5) UNPACK ADDRESS
         TR    K80204W1(8),K80204TB-240 CONVERT TO DISPLAY HEX
         MVC   19(8,R7),K80204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K80204W2        SAVE OFFSET
         UNPK  K80204W1(9),K80204W2(5) UNPACK OFFSET
         TR    K80204W1(8),K80204TB-240 CONVERT TO DISPLAY HEX
         MVC   34(6,R7),K80204W1+2 MOVE OFFSET
K80204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K80204LP        LOOP
*
         B     K80204KP           EXIT
*
K80204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,K80204DN        LOOP
*
K80204KP EQU   *
         MVI   E0204P7A,DFHBMASB  SHOW PF7
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K80204KA           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
K80204KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K80204KB           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
K80204KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K80204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
K80204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0204          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K80204DP DC    PL8'0'
K80204W1 DS    XL9
K80204W2 DS    XL4
K80204TB DC    C'0123456789ABCDEF'
K80204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0204   DS    0H
         USING *,R6
* PF10 : HANDLE CONDITION
* REDISPLAY KEYS: REDISPLAY BACK 5
* PAGING KEYS   : PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204PAA,DFHBMASD  IS PF10 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KA0204PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KA0204PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0204DP,=P'5'     BACK 5
         CVB   R8,KA0204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVI   E0204PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA02047P           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
KA02047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA02048P           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
KA02048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0204AP           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
KA0204AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0204PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-12             - FULL PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-12*4           - FULL PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
KA0204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KA0204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KA0204IN           EXIT IF NONE
         MVC   16(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KA0204W2,0(R1)     SAVE ADDRESS
         UNPK  KA0204W1(9),KA0204W2(5) UNPACK ADDRESS
         TR    KA0204W1(8),KA0204TB-240 CONVERT TO DISPLAY HEX
         MVC   19(8,R7),KA0204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KA0204W2        SAVE OFFSET
         UNPK  KA0204W1(9),KA0204W2(5) UNPACK OFFSET
         TR    KA0204W1(8),KA0204TB-240 CONVERT TO DISPLAY HEX
         MVC   34(6,R7),KA0204W1+2 MOVE OFFSET
KA0204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KA0204LP        LOOP
*
         B     KA0204KP           EXIT
*
KA0204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KA0204DN        LOOP
*
KA0204KP EQU   *
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVI   E0204PAA,DFHBMASD  HIDE PF10
         MVI   E0204PBA,DFHBMASB  SHOW PF11
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA0204K8           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
KA0204K8 EQU   *
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA0204KA           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
KA0204KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA0204SN           EXIT IF NOT
         MVI   E0204PAA,DFHBMASB  SHOW PF10
KA0204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0204          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KA0204DP DC    PL8'0'
KA0204W1 DS    XL9
KA0204W2 DS    XL4
KA0204TB DC    C'0123456789ABCDEF'
KA0204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0204   DS    0H
         USING *,R6
* PF11 : HANDLE CONDITION
* REDISPLAY KEYS: REDISPLAY FORWARD 5
* PAGING KEYS   : PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0204S,R4
         CLI   E0204PBA,DFHBMASD  IS PF11 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KB0204PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KB0204PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0204DP,=P'5'     FORWARD 5
         CVB   R8,KB0204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVI   E0204PAA,DFHBMASB  SHOW PF10
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB02047P           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
KB02047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB02048P           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
KB02048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0204BP           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
KB0204BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0204PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20204AD        R9=CONDITIONS AREA
         LARL  R8,K20204LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,12              + FULL PAGE
         LA    R1,34(R9)          R1=CONDITION ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,12*4            + FULL PAGE*4
         LA    R7,E0204C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND@(X'00000000')  +X'000000'
KB0204LP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KB0204DN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KB0204IN           EXIT IF NONE
         MVC   16(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KB0204W2,0(R1)     SAVE ADDRESS
         UNPK  KB0204W1(9),KB0204W2(5) UNPACK ADDRESS
         TR    KB0204W1(8),KB0204TB-240 CONVERT TO DISPLAY HEX
         MVC   19(8,R7),KB0204W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF CONDITION LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KB0204W2        SAVE OFFSET
         UNPK  KB0204W1(9),KB0204W2(5) UNPACK OFFSET
         TR    KB0204W1(8),KB0204TB-240 CONVERT TO DISPLAY HEX
         MVC   34(6,R7),KB0204W1+2 MOVE OFFSET
KB0204IN EQU   *
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R1,4               BUMP CONDITION ADDRESSES POINTER
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KB0204LP        LOOP
*
         B     KB0204KP           EXIT
*
KB0204DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         XC    16(25,R7),16(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0204C2O-E0204C1O) BUMP MAP POINTER
         JCT   R8,KB0204DN        LOOP
*
KB0204KP EQU   *
         MVI   E0204P7A,DFHBMASD  HIDE PF7
         MVI   E0204P8A,DFHBMASD  HIDE PF8
         MVI   E0204PAA,DFHBMASB  SHOW PF10
         MVI   E0204PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20204LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB0204K8           EXIT IF NOT
         MVI   E0204P7A,DFHBMASB  SHOW PF7
KB0204K8 EQU   *
         LRL   R14,K20204NC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB0204SN           EXIT IF NOT
         MVI   E0204P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB0204SN           EXIT IF NOT
         MVI   E0204PBA,DFHBMASB  SHOW PF11
KB0204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0204') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0204          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KB0204DP DC    PL8'0'
KB0204W1 DS    XL9
KB0204W2 DS    XL4
KB0204TB DC    C'0123456789ABCDEF'
KB0204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0204   DS    0H
         USING *,R6
* PF12 : HANDLE CONDITION
         USING EDF0204S,R4
         XC    KC0204RP,KC0204RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0204RP) LENGTH(KC0204LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0204RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0204L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0204') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0204BS           EXIT IF IT IS
         TM    E0204DIF,DFHBMEOF  ANY DATA ?
         BO    KC0204BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0204DII  SAVE INPUT REDISPLAY NUMBER
KC0204BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0204RP DS    CL50               RECEIVE AREA
KC0204LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20206   DS    0H
* HANDLE AID
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : HANDLE AID - NO PROCESSING
* PF12 : HANDLE AID - ACTIVATE REDISPLAY MODE--WITH PAGING
*        HANDLE AID - WITHIN REDISPLAY MODE, SWITCH KEY SETS
         USING EDF0206S,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* HANDLE CLEAR IN REDISPLAY MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20206OK           EXIT IF NOT
* REDISPLAY MODE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BNE   K20206OK           EXIT IF NOT
* CLEAR IN REDISPLAY MODE
         L     R4,EDFRDYAD        R4=REDISPLAY MAP STRUCTURE
         AHI   R4,8               POINT TO REDISPLAY MAP
K20206OK EQU   *
         MVC   E0206ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVC   E0206P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVC   E0206P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVC   E0206PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         MVC   E0206PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E0206PCO,=C'PF12:REDISPLAY MODE' SET PF12 TEXT
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20206S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20206S4 EQU   *
         XC    E0206DIL,E0206DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20206S5           EXIT IF NOT
* PF12 PRESSED
         CLI   E0206PCA,DFHBMASD  PF12 HIDDEN ?
         BE    K20206S5           EXIT IF IT IS
* PF12 PRESSED AND SHOWN
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20206AR           EXIT IF NOT
* PF12 WHILE IN REDISPLAY MODE, SWITCH KEY SETS
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K20206S6           EXIT IF THEY ARE
         L     R14,K20206NC       R14=NO. OF POTENTIAL LINES
         S     R14,K20206LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20206NP           EXIT IF NOT
* REDISPLAY KEYS ACTIVE, SWITCH TO PAGING KEYS
         MVC   E0206ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E0206P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVC   E0206P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVC   E0206PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVC   E0206PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E0206PCO,=C'PF12:REDISPLAY KEYS' SET PF12 TEXT
         MVHHI E0206DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVI   EDFRDYPG,X'FF'     SET PAGING KEYS ACTIVE
         B     K20206NP           EXIT
*
K20206AR EQU   *
* PF12 AND NOT IN REDISPLAY MODE, ACTIVATE IT
         CLI   E0206PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20206S6           EXIT
*
K20206S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20206NP           EXIT IF NOT
* REDISPLAY MODE
K20206S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
         MVC   E0206ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E0206P7O,=C'PF7 :REDISPLAY BACK 1' SET PF7 TEXT
         MVC   E0206P8O,=C'PF8 :REDISPLAY FORWARD 1' SET PF8 TEXT
         MVC   E0206PAO,=C'PF10:REDISPLAY BACK 5' SET PF10 TEXT
         MVC   E0206PBO,=C'PF11:REDISPLAY FORWARD 5' SET PF11 TEXT
         MVC   E0206PCO,=C'PF12:PAGING KEYS   ' SET PF12 TEXT
         MVI   EDFRDYPG,X'FE'     SET REDISPLAY KEYS ACTIVE
         MVI   E0206PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0206DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0206DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0206DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0206DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20206DP        CONVERT TO DECIMAL
         UNPK  E0206DTO+1(3),K20206DP+6(2) UNPACK NUMITEMS
         OI    E0206DTO+3,X'F0'   SET SIGN
         MVI   E0206DTO,C'/'      SET /
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20206DP        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K202067P           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
K202067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K202068P           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
K202068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20206AP           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
K20206AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20206NP           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K20206NP EQU   *
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF0206L        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO CDLOADPT(4), P0206ADS(30), P0206ADR(30XL4)
         ST    R9,K20206AD        SAVE IT
         XC    K20206LT,K20206LT  CLEAR OFFSET OF TOP LINE
         XC    K20206NC,K20206NC  CLEAR NO. OF AIDS
         LA    R5,4(R9)           R5=AID CODES
* COUNT NO. OF AIDS
         LA    R8,30              R8=MAX AIDS
K20206CC EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K20206CD           EXIT IF IT IS
         ASI   K20206NC,1         COUNT NO. OF AIDS
         AHI   R5,1               BUMP AIDS POINTER
         JCT   R8,K20206CC        LOOP
*
K20206CD EQU   *
         LA    R5,4(R9)           R5=AID CODES
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ANYKEY@(X'00000000')  +X'000000'
K20206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K20206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K20206IN           EXIT IF NONE
         MVC   10(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K20206W2,0(R1)     SAVE ADDRESS
         UNPK  K20206W1(9),K20206W2(5) UNPACK ADDRESS
         TR    K20206W1(8),K20206TB-240 CONVERT TO DISPLAY HEX
         MVC   13(8,R7),K20206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K20206W2        SAVE OFFSET
         UNPK  K20206W1(9),K20206W2(5) UNPACK OFFSET
         TR    K20206W1(8),K20206TB-240 CONVERT TO DISPLAY HEX
         MVC   28(6,R7),K20206W1+2 MOVE OFFSET
K20206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K20206LP        LOOP
*
* SCREEN FULL
         B     K20206SF           EXIT
*
K20206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K20206DN        LOOP
*
K20206SF EQU   *
* SET PAGING KEYS:
*    IF REDISPLAY NOT ACTIVE
*    IF REDISPLAY IS ACTIVE AND PAGING KEYS ARE DISPLAYED
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20206PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K20206PK           EXIT IF THEY ARE
* REDISPLAY KEYS ACTIVE, SHOW PF12 IF WE CAN PAGE
         L     R14,K20206NC       R14=NO. OF POTENTIAL LINES
         S     R14,K20206LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20206SN           EXIT IF NOT
         MVI   E0206PCA,DFHBMASB  SHOW PF12
         B     K20206SN           EXIT
*
* PAGING KEYS ACTIVE
* WE CAN ONLY GO FORWARD FROM HERE
K20206PK EQU   *
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         L     R14,K20206NC       R14=NO. OF AIDS
         S     R14,K20206LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20206SN           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K20206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K20206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0206          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20206DP DC    PL8'0'
K20206W1 DS    XL9
K20206W2 DS    XL4
K20206TB DC    C'0123456789ABCDEF'
K20206AD DS    A                  ADDRESS OF AID AREA
K20206LT DS    XL4                OFFSET OF TOP LINE
K20206NC DS    XL4                NO. OF AIDS
*
         LTORG
*
K50206   DS    0H
         USING *,R6
* PF5  : HANDLE AID
* WORKING STORAGE DISPLAY
         USING EDF0206S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0206TSO   MOVE TRANSID
         MVC   EWKSPGO,E0206PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0206TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0206L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70206   DS    0H
         USING *,R6
* PF7  : HANDLE AID
* REDISPLAY KEYS: REDISPLAY BACK 1
* PAGING KEYS   : PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206P7A,DFHBMASD  IS PF7 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K70206PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K70206PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70206DP,=P'1'     BACK 1
         CVB   R8,K70206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVI   E0206P8A,DFHBMASB  SHOW PF8
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K702067P           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
K702067P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70206AP           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
K70206AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70206BP           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K70206BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70206PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-6              - HALF PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-6*4            - HALF PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ANYKEY@(X'00000000')  +X'000000'
K70206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K70206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K70206IN           EXIT IF NONE
         MVC   10(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K70206W2,0(R1)     SAVE ADDRESS
         UNPK  K70206W1(9),K70206W2(5) UNPACK ADDRESS
         TR    K70206W1(8),K70206TB-240 CONVERT TO DISPLAY HEX
         MVC   13(8,R7),K70206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K70206W2        SAVE OFFSET
         UNPK  K70206W1(9),K70206W2(5) UNPACK OFFSET
         TR    K70206W1(8),K70206TB-240 CONVERT TO DISPLAY HEX
         MVC   28(6,R7),K70206W1+2 MOVE OFFSET
K70206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K70206LP        LOOP
*
         B     K70206KP           EXIT
*
K70206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K70206DN        LOOP
*
K70206KP EQU   *
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVI   E0206P8A,DFHBMASB  SHOW PF8
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K70206KB           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K70206KB           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
K70206KB EQU   *
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K70206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K70206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0206          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K70206DP DC    PL8'0'
K70206W1 DS    XL9
K70206W2 DS    XL4
K70206TB DC    C'0123456789ABCDEF'
K70206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80206   DS    0H
         USING *,R6
* PF8  : HANDLE AID
* REDISPLAY KEYS: REDISPLAY FORWARD 1
* PAGING KEYS   : PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206P8A,DFHBMASD  IS PF8 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K80206PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K80206PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80206DP,=P'1'     FORWARD 1
         CVB   R8,K80206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0206P7A,DFHBMASB  SHOW PF7
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K802068P           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
K802068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80206AP           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
K80206AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80206BP           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K80206BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80206PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,6               + HALF PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,6*4             + HALF PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ENTER@(X'00000000')  +X'000000'
K80206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    K80206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    K80206IN           EXIT IF NONE
         MVC   10(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   K80206W2,0(R1)     SAVE ADDRESS
         UNPK  K80206W1(9),K80206W2(5) UNPACK ADDRESS
         TR    K80206W1(8),K80206TB-240 CONVERT TO DISPLAY HEX
         MVC   13(8,R7),K80206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,K80206W2        SAVE OFFSET
         UNPK  K80206W1(9),K80206W2(5) UNPACK OFFSET
         TR    K80206W1(8),K80206TB-240 CONVERT TO DISPLAY HEX
         MVC   28(6,R7),K80206W1+2 MOVE OFFSET
K80206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K80206LP        LOOP
*
         B     K80206KP           EXIT
*
K80206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,K80206DN        LOOP
*
K80206KP EQU   *
         MVI   E0206P7A,DFHBMASB  SHOW PF7
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K80206KA           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
K80206KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K80206KB           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
K80206KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K80206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
K80206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0206          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K80206DP DC    PL8'0'
K80206W1 DS    XL9
K80206W2 DS    XL4
K80206TB DC    C'0123456789ABCDEF'
K80206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0206   DS    0H
         USING *,R6
* PF10 : HANDLE AID
* REDISPLAY KEYS: REDISPLAY BACK 5
* PAGING KEYS   : PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206PAA,DFHBMASD  IS PF10 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KA0206PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KA0206PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0206DP,=P'5'     BACK 5
         CVB   R8,KA0206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVI   E0206PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA02067P           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
KA02067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA02068P           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
KA02068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0206AP           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
KA0206AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0206PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-12             - FULL PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,-12*4           - FULL PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ENTER@(X'00000000')  +X'000000'
KA0206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    KA0206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KA0206IN           EXIT IF NONE
         MVC   10(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KA0206W2,0(R1)     SAVE ADDRESS
         UNPK  KA0206W1(9),KA0206W2(5) UNPACK ADDRESS
         TR    KA0206W1(8),KA0206TB-240 CONVERT TO DISPLAY HEX
         MVC   13(8,R7),KA0206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KA0206W2        SAVE OFFSET
         UNPK  KA0206W1(9),KA0206W2(5) UNPACK OFFSET
         TR    KA0206W1(8),KA0206TB-240 CONVERT TO DISPLAY HEX
         MVC   28(6,R7),KA0206W1+2 MOVE OFFSET
KA0206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KA0206LP        LOOP
*
         B     KA0206KP           EXIT
*
KA0206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KA0206DN        LOOP
*
KA0206KP EQU   *
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVI   E0206PAA,DFHBMASD  HIDE PF10
         MVI   E0206PBA,DFHBMASB  SHOW PF11
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA0206K8           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
KA0206K8 EQU   *
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA0206KA           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
KA0206KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA0206SN           EXIT IF NOT
         MVI   E0206PAA,DFHBMASB  SHOW PF10
KA0206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0206          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KA0206DP DC    PL8'0'
KA0206W1 DS    XL9
KA0206W2 DS    XL4
KA0206TB DC    C'0123456789ABCDEF'
KA0206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0206   DS    0H
         USING *,R6
* PF11 : HANDLE AID
* REDISPLAY KEYS: REDISPLAY FORWARD 5
* PAGING KEYS   : PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0206S,R4
         CLI   E0206PBA,DFHBMASD  IS PF11 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KB0206PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KB0206PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0206DP,=P'5'     FORWARD 5
         CVB   R8,KB0206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVI   E0206PAA,DFHBMASB  SHOW PF10
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB02067P           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
KB02067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB02068P           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
KB02068P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0206BP           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
KB0206BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0206PK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K20206AD        R9=AIDS AREA
         LARL  R8,K20206LT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=AID CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,12              + FULL PAGE
         LA    R1,34(R9)          R1=AID ADDRESSES,FF......=CLEAR
         A     R1,0(R8)           + CURRENT OFFSET*1
         A     R1,0(R8)           + CURRENT OFFSET*2
         A     R1,0(R8)           + CURRENT OFFSET*3
         A     R1,0(R8)           + CURRENT OFFSET*4
         AHI   R1,12*4            + FULL PAGE*4
         LA    R7,E0206C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @ANYKEY@(X'00000000')  +X'000000'
KB0206LP EQU   *
         CLI   0(R5),X'00'        END OF AIDS ?
         BE    KB0206DN           EXIT IF IT IS
         JASL  R14,DOAID          STORE AID NAME IN MAP
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         CLI   0(R1),X'FF'        ANY ADDRESS ?
         BE    KB0206IN           EXIT IF NONE
         MVC   10(25,R7),=C'(X''00000000'')  +X''000000''' SET TEMPLATE
         MVC   KB0206W2,0(R1)     SAVE ADDRESS
         UNPK  KB0206W1(9),KB0206W2(5) UNPACK ADDRESS
         TR    KB0206W1(8),KB0206TB-240 CONVERT TO DISPLAY HEX
         MVC   13(8,R7),KB0206W1  MOVE ADDRESS
         L     R0,0(R1)           R0=ADDRESS OF AID LABEL
         S     R0,0(R9)           - LOAD POINT = OFFSET
         ST    R0,KB0206W2        SAVE OFFSET
         UNPK  KB0206W1(9),KB0206W2(5) UNPACK OFFSET
         TR    KB0206W1(8),KB0206TB-240 CONVERT TO DISPLAY HEX
         MVC   28(6,R7),KB0206W1+2 MOVE OFFSET
KB0206IN EQU   *
         AHI   R5,1               BUMP AIDS POINTER
         AHI   R1,4               BUMP AID ADDRESSES POINTER
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KB0206LP        LOOP
*
         B     KB0206KP           EXIT
*
KB0206DN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(6,R7),0(R7)      CLEAR AID NAME
         XC    10(25,R7),10(R7)   CLEAR ADDRESS/OFFSET
         AHI   R7,(E0206C2O-E0206C1O) BUMP MAP POINTER
         JCT   R8,KB0206DN        LOOP
*
KB0206KP EQU   *
         MVI   E0206P7A,DFHBMASD  HIDE PF7
         MVI   E0206P8A,DFHBMASD  HIDE PF8
         MVI   E0206PAA,DFHBMASB  SHOW PF10
         MVI   E0206PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20206LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB0206K8           EXIT IF NOT
         MVI   E0206P7A,DFHBMASB  SHOW PF7
KB0206K8 EQU   *
         LRL   R14,K20206NC       R14=NO. OF AIDS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB0206SN           EXIT IF NOT
         MVI   E0206P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB0206SN           EXIT IF NOT
         MVI   E0206PBA,DFHBMASB  SHOW PF11
KB0206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0206') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0206          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KB0206DP DC    PL8'0'
KB0206W1 DS    XL9
KB0206W2 DS    XL4
KB0206TB DC    C'0123456789ABCDEF'
KB0206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0206   DS    0H
         USING *,R6
* PF12 : HANDLE AID
         USING EDF0206S,R4
         XC    KC0206RP,KC0206RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0206RP) LENGTH(KC0206LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0206RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0206L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0206') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0206BS           EXIT IF IT IS
         TM    E0206DIF,DFHBMEOF  ANY DATA ?
         BO    KC0206BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0206DII  SAVE INPUT REDISPLAY NUMBER
KC0206BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0206RP DS    CL50               RECEIVE AREA
KC0206LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20208   DS    0H
* ASSIGN
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ASSIGN - NO PROCESSING
* PF12 : ASSIGN - ACTIVATE REDISPLAY MODE--WITH PAGING
*        ASSIGN - WITHIN REDISPLAY MODE, SWITCH KEY SETS
         USING EDF0208S,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* HANDLE CLEAR IN REDISPLAY MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20208OK           EXIT IF NOT
* REDISPLAY MODE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BNE   K20208OK           EXIT IF NOT
* CLEAR IN REDISPLAY MODE
         L     R4,EDFRDYAD        R4=REDISPLAY MAP STRUCTURE
         AHI   R4,8               POINT TO REDISPLAY MAP
K20208OK EQU   *
         MVC   E0208ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVC   E0208P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVC   E0208P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVC   E0208PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         MVC   E0208PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E0208PCO,=C'PF12:REDISPLAY MODE' SET PF12 TEXT
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20208S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20208S4 EQU   *
         XC    E0208DIL,E0208DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20208S5           EXIT IF NOT
* PF12 PRESSED
         CLI   E0208PCA,DFHBMASD  PF12 HIDDEN ?
         BE    K20208S5           EXIT IF IT IS
* PF12 PRESSED AND SHOWN
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20208AR           EXIT IF NOT
* PF12 WHILE IN REDISPLAY MODE, SWITCH KEY SETS
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K20208S6           EXIT IF THEY ARE
         L     R14,K20208LU       R14=NO. OF POTENTIAL LINES
         S     R14,K20208LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20208NP           EXIT IF NOT
* REDISPLAY KEYS ACTIVE, SWITCH TO PAGING KEYS
         MVC   E0208ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E0208P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVC   E0208P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVC   E0208PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVC   E0208PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E0208PCO,=C'PF12:REDISPLAY KEYS' SET PF12 TEXT
         MVHHI E0208DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVI   EDFRDYPG,X'FF'     SET PAGING KEYS ACTIVE
         B     K20208NP           EXIT
*
K20208AR EQU   *
* PF12 AND NOT IN REDISPLAY MODE, ACTIVATE IT
         CLI   E0208PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20208S6           EXIT
*
K20208S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20208NP           EXIT IF NOT
* REDISPLAY MODE
K20208S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
         MVC   E0208ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E0208P7O,=C'PF7 :REDISPLAY BACK 1' SET PF7 TEXT
         MVC   E0208P8O,=C'PF8 :REDISPLAY FORWARD 1' SET PF8 TEXT
         MVC   E0208PAO,=C'PF10:REDISPLAY BACK 5' SET PF10 TEXT
         MVC   E0208PBO,=C'PF11:REDISPLAY FORWARD 5' SET PF11 TEXT
         MVC   E0208PCO,=C'PF12:PAGING KEYS   ' SET PF12 TEXT
         MVI   EDFRDYPG,X'FE'     SET REDISPLAY KEYS ACTIVE
         MVI   E0208PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0208DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0208DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0208DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0208DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20208DP        CONVERT TO DECIMAL
         UNPK  E0208DTO+1(3),K20208DP+6(2) UNPACK NUMITEMS
         OI    E0208DTO+3,X'F0'   SET SIGN
         MVI   E0208DTO,C'/'      SET /
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20208DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20208DP        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K202087P           EXIT IF NOT
         MVI   E0208P7A,DFHBMASB  SHOW PF7
K202087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K202088P           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
K202088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20208AP           EXIT IF NOT
         MVI   E0208PAA,DFHBMASB  SHOW PF10
K20208AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20208NP           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
K20208NP EQU   *
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF0208L        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO P0208 STRUCTURE, DATA AREA
         STRL  R9,KN0208P4        SAVE IT
         USING (P0208,P0208END),R9
         XC    K20208LT,K20208LT  CLEAR OFFSET OF TOP LINE
         XC    K20208LU,K20208LU  CLEAR NO. OF POTENTIAL LINES
* COUNT NO. OF POTENTIAL LINES
         OC    P0208ABC,P0208ABC  ANY ABCODE ?
         BZ    K20208C1           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C1 EQU   *
         OC    P0208ABP,P0208ABP  ANY ABDUMP ?
         BZ    K20208C2           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C2 EQU   *
         OC    P0208ABG,P0208ABG  ANY ABPROGRAM ?
         BZ    K20208C3           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C3 EQU   *
         OC    P0208APK,P0208APK  ANY APLKYBD ?
         BZ    K20208C4           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C4 EQU   *
         OC    P0208APT,P0208APT  ANY APLTEXT ?
         BZ    K20208C5           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C5 EQU   *
         OC    P0208ASP,P0208ASP  ANY ASRAPSW ?
         BZ    K20208C6           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C6 EQU   *
         OC    P0208ASR,P0208ASR  ANY ASRAREGS ?
         BZ    K20208C7           EXIT IF NONE
         ASI   K20208LU,4         COUNT NO. OF POTENTIAL LINES
K20208C7 EQU   *
         OC    P0208BTR,P0208BTR  ANY BTRANS ?
         BZ    K20208C8           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C8 EQU   *
         OC    P0208CHN,P0208CHN  ANY CHANNEL ?
         BZ    K20208ZZ           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208ZZ EQU   *
         OC    P0208CMD,P0208CMD  ANY CMDSEC ?
         BZ    K20208C9           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208C9 EQU   *
         OC    P0208COL,P0208COL  ANY COLOR ?
         BZ    K20208CA           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CA EQU   *
         OC    P0208CWA,P0208CWA  ANY CWALENG ?
         BZ    K20208CB           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CB EQU   *
         OC    P0208DSH,P0208DSH  ANY DEFSCRNHT ?
         BZ    K20208CC           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CC EQU   *
         OC    P0208DSW,P0208DSW  ANY DEFSCRNWD ?
         BZ    K20208CD           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CD EQU   *
         OC    P0208DSC,P0208DSC  ANY DSSCS ?
         BZ    K20208CE           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CE EQU   *
         OC    P0208D32,P0208D32  ANY DS3270 ?
         BZ    K20208CF           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CF EQU   *
         OC    P0208EWA,P0208EWA  ANY EWASUPP ?
         BZ    K20208CG           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CG EQU   *
         OC    P0208EXT,P0208EXT  ANY EXTDS ?
         BZ    K20208CH           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CH EQU   *
         OC    P0208FAC,P0208FAC  ANY FACILITY ?
         BZ    K20208CI           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CI EQU   *
         OC    P0208FCI,P0208FCI  ANY FCI ?
         BZ    K20208CJ           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CJ EQU   *
         OC    P0208GMM,P0208GMM  ANY GMMI ?
         BZ    K20208CK           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CK EQU   *
         OC    P0208HIL,P0208HIL  ANY HILIGHT ?
         BZ    K20208CL           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CL EQU   *
         OC    P0208INV,P0208INV  ANY INVPROGRAM ?
         BZ    K20208CM           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CM EQU   *
         OC    P0208KAT,P0208KAT  ANY KATAKANA ?
         BZ    K20208CN           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CN EQU   *
         OC    P0208LIU,P0208LIU  ANY LANGINUSE ?
         BZ    K20208CO           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CO EQU   *
         OC    P0208MCL,P0208MCL  ANY MAPCOLUMN ?
         BZ    K20208CP           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CP EQU   *
         OC    P0208MHT,P0208MHT  ANY MAPHEIGHT ?
         BZ    K20208CQ           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CQ EQU   *
         OC    P0208MLN,P0208MLN  ANY MAPLINE ?
         BZ    K20208CR           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CR EQU   *
         OC    P0208MWH,P0208MWH  ANY MAPWIDTH ?
         BZ    K20208CS           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CS EQU   *
         OC    P0208MSR,P0208MSR  ANY MSRCONTROL ?
         BZ    K20208CT           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CT EQU   *
         OC    P0208NIU,P0208NIU  ANY NATLANGINUSE ?
         BZ    K20208CU           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CU EQU   *
         OC    P0208NXT,P0208NXT  ANY NEXTTRANSID ?
         BZ    K20208CV           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CV EQU   *
         OC    P0208OUT,P0208OUT  ANY OUTLINE ?
         BZ    K20208CW           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CW EQU   *
         OC    P0208PRT,P0208PRT  ANY PARTNS ?
         BZ    K20208CX           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CX EQU   *
         OC    P0208PGM,P0208PGM  ANY PROGRAM ?
         BZ    K20208CY           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CY EQU   *
         OC    P0208PS,P0208PS    ANY PS ?
         BZ    K20208CZ           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208CZ EQU   *
         OC    P0208RSC,P0208RSC  ANY RESSEC ?
         BZ    K20208D0           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D0 EQU   *
         OC    P0208RES,P0208RES  ANY RESTART ?
         BZ    K20208D1           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D1 EQU   *
         OC    P0208RET,P0208RET  ANY RETPROGRAM ?
         BZ    K20208D2           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D2 EQU   *
         OC    P0208SCH,P0208SCH  ANY SCRNHT ?
         BZ    K20208D3           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D3 EQU   *
         OC    P0208SCW,P0208SCW  ANY SCRNWD ?
         BZ    K20208D4           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D4 EQU   *
         OC    P0208SOS,P0208SOS  ANY SOSI ?
         BZ    K20208D5           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D5 EQU   *
         OC    P0208STC,P0208STC  ANY STARTCODE ?
         BZ    K20208D6           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D6 EQU   *
         OC    P0208TKP,P0208TKP  ANY TASKPRIORITY ?
         BZ    K20208D7           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D7 EQU   *
         OC    P0208TUL,P0208TUL  ANY TCTUALENG ?
         BZ    K20208D8           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D8 EQU   *
         OC    P0208TMC,P0208TMC  ANY TERMCODE ?
         BZ    K20208D9           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208D9 EQU   *
         OC    P0208TMP,P0208TMP  ANY TERMPRIORITY ?
         BZ    K20208DA           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DA EQU   *
         OC    P0208TXK,P0208TXK  ANY TEXTKYBD ?
         BZ    K20208DB           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DB EQU   *
         OC    P0208TXP,P0208TXP  ANY TEXTPRINT ?
         BZ    K20208DC           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DC EQU   *
         OC    P0208TNP,P0208TNP  ANY TRANPRIORITY ?
         BZ    K20208DD           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DD EQU   *
         OC    P0208TWA,P0208TWA  ANY TWALENG ?
         BZ    K20208DE           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DE EQU   *
         OC    P0208UNA,P0208UNA  ANY UNATTEND ?
         BZ    K20208DF           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DF EQU   *
         OC    P0208USP,P0208USP  ANY USERPRIORITY ?
         BZ    K20208DG           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DG EQU   *
         OC    P0208VAL,P0208VAL  ANY VALIDATION ?
         BZ    K20208DH           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DH EQU   *
         CLI   P0208NOH,X'FF'     ANY NOHANDLE ?
         BNE   K20208DI           EXIT IF NONE
         ASI   K20208LU,1         COUNT NO. OF POTENTIAL LINES
K20208DI EQU   *
         SR    R5,R5              R5=OFFSET OF 1ST LINE
         JASL  R14,KN0208MP       SETUP MAP
*
* SET PAGING KEYS:
*    IF REDISPLAY NOT ACTIVE
*    IF REDISPLAY IS ACTIVE AND PAGING KEYS ARE DISPLAYED
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20208PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K20208PK           EXIT IF THEY ARE
* REDISPLAY KEYS ACTIVE, SHOW PF12 IF WE CAN PAGE
         L     R14,K20208LU       R14=NO. OF POTENTIAL LINES
         S     R14,K20208LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20208SN           EXIT IF NOT
         MVI   E0208PCA,DFHBMASB  SHOW PF12
         B     K20208SN           EXIT
*
* PAGING KEYS ACTIVE
* WE CAN ONLY GO FORWARD FROM HERE
K20208PK EQU   *
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         L     R14,K20208LU       R14=NO. OF POTENTIAL LINES
         S     R14,K20208LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K20208SN           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K20208SN           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
K20208SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0208') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0208          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20208DP DC    PL8'0'
K20208LT DS    XL4                OFFSET OF TOP LINE
K20208LU DS    XL4                NO. OF POTENTIAL LINES
*
         LTORG
*
K50208   DS    0H
         USING *,R6
* PF5  : ASSIGN
* WORKING STORAGE DISPLAY
         USING EDF0208S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0208TSO   MOVE TRANSID
         MVC   EWKSPGO,E0208PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0208TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0208L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70208   DS    0H
         USING *,R6
* PF7  : ASSIGN
* REDISPLAY KEYS: REDISPLAY BACK 1
* PAGING KEYS   : PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0208S,R4
         CLI   E0208P7A,DFHBMASD  IS PF7 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K70208PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K70208PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70208DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70208DP,=P'1'     BACK 1
         CVB   R8,K70208DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70208DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVI   E0208P8A,DFHBMASB  SHOW PF8
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K702087P           EXIT IF NOT
         MVI   E0208P7A,DFHBMASB  SHOW PF7
K702087P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70208AP           EXIT IF NOT
         MVI   E0208PAA,DFHBMASB  SHOW PF10
K70208AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70208BP           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
K70208BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70208IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70208IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70208PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         LRL   R5,K20208LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN0208MP       SETUP MAP
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVI   E0208P8A,DFHBMASB  SHOW PF8
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K70208KB           EXIT IF NOT
         MVI   E0208P7A,DFHBMASB  SHOW PF7
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K70208KB           EXIT IF NOT
         MVI   E0208PAA,DFHBMASB  SHOW PF10
K70208KB EQU   *
         LRL   R14,K20208LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K70208SN           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
K70208SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0208') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0208          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K70208DP DC    PL8'0'
K70208IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80208   DS    0H
         USING *,R6
* PF8  : ASSIGN
* REDISPLAY KEYS: REDISPLAY FORWARD 1
* PAGING KEYS   : PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0208S,R4
         CLI   E0208P8A,DFHBMASD  IS PF8 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K80208PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K80208PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80208DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80208DP,=P'1'     FORWARD 1
         CVB   R8,K80208DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80208DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0208P7A,DFHBMASB  SHOW PF7
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K802088P           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
K802088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80208AP           EXIT IF NOT
         MVI   E0208PAA,DFHBMASB  SHOW PF10
K80208AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80208BP           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
K80208BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80208IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80208IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80208PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R5,K20208LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN0208MP       SETUP MAP
         MVI   E0208P7A,DFHBMASB  SHOW PF7
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         LRL   R14,K20208LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K80208KA           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
K80208KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K80208KB           EXIT IF NOT
         MVI   E0208PAA,DFHBMASB  SHOW PF10
K80208KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K80208SN           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
K80208SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0208') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0208          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K80208DP DC    PL8'0'
K80208IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0208   DS    0H
         USING *,R6
* PF10 : ASSIGN
* REDISPLAY KEYS: REDISPLAY BACK 5
* PAGING KEYS   : PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0208S,R4
         CLI   E0208PAA,DFHBMASD  IS PF10 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KA0208PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KA0208PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0208DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0208DP,=P'5'     BACK 5
         CVB   R8,KA0208DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0208DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVI   E0208PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA02087P           EXIT IF NOT
         MVI   E0208P7A,DFHBMASB  SHOW PF7
KA02087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA02088P           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
KA02088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0208AP           EXIT IF NOT
         MVI   E0208PAA,DFHBMASB  SHOW PF10
KA0208AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0208IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0208IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0208PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         LRL   R5,K20208LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN0208MP       SETUP MAP
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVI   E0208PAA,DFHBMASD  HIDE PF10
         MVI   E0208PBA,DFHBMASB  SHOW PF11
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA0208K8           EXIT IF NOT
         MVI   E0208P7A,DFHBMASB  SHOW PF7
KA0208K8 EQU   *
         LRL   R14,K20208LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA0208SN           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA0208SN           EXIT IF NOT
         MVI   E0208PAA,DFHBMASB  SHOW PF10
KA0208SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0208') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0208          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KA0208DP DC    PL8'0'
KA0208IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0208   DS    0H
         USING *,R6
* PF11 : ASSIGN
* REDISPLAY KEYS: REDISPLAY FORWARD 5
* PAGING KEYS   : PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF0208S,R4
         CLI   E0208PBA,DFHBMASD  IS PF11 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KB0208PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KB0208PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0208DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0208DP,=P'5'     FORWARD 5
         CVB   R8,KB0208DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0208DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVI   E0208PAA,DFHBMASB  SHOW PF10
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB02087P           EXIT IF NOT
         MVI   E0208P7A,DFHBMASB  SHOW PF7
KB02087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB02088P           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
KB02088P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0208BP           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
KB0208BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0208IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0208IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0208PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         LRL   R5,K20208LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN0208MP       SETUP MAP
         MVI   E0208P7A,DFHBMASD  HIDE PF7
         MVI   E0208P8A,DFHBMASD  HIDE PF8
         MVI   E0208PAA,DFHBMASB  SHOW PF10
         MVI   E0208PBA,DFHBMASD  HIDE PF11
         LARL  R9,K20208LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB0208K8           EXIT IF NOT
         MVI   E0208P7A,DFHBMASB  SHOW PF7
KB0208K8 EQU   *
         LRL   R14,K20208LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB0208KA           EXIT IF NOT
         MVI   E0208P8A,DFHBMASB  SHOW PF8
KB0208KA EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB0208SN           EXIT IF NOT
         MVI   E0208PBA,DFHBMASB  SHOW PF11
KB0208SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0208') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC0208          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KB0208DP DC    PL8'0'
KB0208IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0208   DS    0H
         USING *,R6
* PF12 : ASSIGN
         USING EDF0208S,R4
         XC    KC0208RP,KC0208RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0208RP) LENGTH(KC0208LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0208RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0208L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0208') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0208BS           EXIT IF IT IS
         TM    E0208DIF,DFHBMEOF  ANY DATA ?
         BO    KC0208BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0208DII  SAVE INPUT REDISPLAY NUMBER
KC0208BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0208RP DS    CL50               RECEIVE AREA
KC0208LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
KN0208MP DS    0H
* BASE FREE SUBROUTINE
* SET UP LINES TO SCREEN LIMIT
* R5 HAS EXPECTED LINE OFFSET OF TOP LINE
* LINE BUILD IS ONLY VALID IF R5 IS -VE
*
* CLEAR SCREEN
         USING EDF0208S,R4
         STRL  R14,KN020814       SAVE RETURN ADDRESS
         LA    R7,E0208C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
KN0208CS EQU   *
         XC    0(54,R7),0(R7)     CLEAR LINE
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         JCT   R8,KN0208CS        LOOP
*
         LA    R7,E0208C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
         LRL   R9,KN0208P4        R9=ADDRESS OF P0208, DATA
         USING (P0208,P0208END),R9
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         USING E0208DCT,R14
         OC    P0208ABC,P0208ABC  ANY ABCODE ?
         JZ    KN0208S0           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S0           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'ABCODE            ' SET ABCODE
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A@           EXIT IF IT IS
         GEN_MVC 17(R7),6,=C'(....)' SET TEMPLATE
         MVC   18(4,R7),E0208ABC  MOVE ABCODE
KN0208A@ EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S0 EQU   *
         OC    P0208ABP,P0208ABP  ANY ABDUMP ?
         JZ    KN0208S1           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S1           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'ABDUMP            ' SET ABDUMP
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A0           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208ABP,X'00'     IS IT ZERO ?
         JE    KN0208A0           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208A0 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S1 EQU   *
         OC    P0208ABG,P0208ABG  ANY ABPROGRAM ?
         JZ    KN0208S2           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S2           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'ABPROGRAM         ' SET ABPROGRAM
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A1           EXIT IF IT IS
         GEN_MVC 17(R7),10,=C'(........)' SET TEMPLATE
         MVC   18(8,R7),E0208ABG  MOVE ABPROGRAM
KN0208A1 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S2 EQU   *
         OC    P0208APK,P0208APK  ANY APLKYBD ?
         JZ    KN0208S3           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S3           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'APLKYBD           ' SET APLKYBD
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A2           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208APK,X'00'     IS IT ZERO ?
         JE    KN0208A2           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208A2 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S3 EQU   *
         OC    P0208APT,P0208APT  ANY APLTEXT ?
         JZ    KN0208S4           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S4           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'APLTEXT           ' SET APLTEXT
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A3           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208APT,X'00'     IS IT ZERO ?
         JE    KN0208A3           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208A3 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S4 EQU   *
         OC    P0208ASP,P0208ASP  ANY ASRAPSW ?
         JZ    KN0208S5           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S5           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'ASRAPSW           ' SET ASRAPSW
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A4           EXIT IF IT IS
         GEN_MVC 17(R7),21,=C'(X''0000000000000000'') ' SET TEMPLATE
         LARL  R1,K20208TH        R1=TRANSLATE TABLE ADDRESS
         LA    R0,E0208ASP        SOURCE ADDRESS
         LA    R14,20(R7)         DESTINATION ADDRESS
         LA    R15,8              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
KN0208A4 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S5 EQU   *
* ASRAREGS R12-R15 (00000000 00000000 00000000 00000000)
         OC    P0208ASR,P0208ASR  ANY ASRAREGS ?
         JZ    KN0208S6           EXIT IF NONE
         AHI   R5,-4              DECREMENT OFFSET COUNT
         JNM   KN0208S6           EXIT IF NOT WANTED
* REGS R0-R3
         GEN_MVC 0(R7),17,=C'ASRAREGS R0 -R3   ' SET ASRAPSW (1)
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208R4           EXIT IF IT IS
         MVI   17(R7),C'('        SET OPEN BRACKET
         LARL  R1,K20208TH        R1=TRANSLATE TABLE ADDRESS
         LA    R0,E0208ASR        SOURCE ADDRESS
         LA    R14,18(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   26(R7),C' '        SET SPACE
         LA    R0,E0208ASR+4      SOURCE ADDRESS
         LA    R14,27(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   35(R7),C' '        SET SPACE
         LA    R0,E0208ASR+8      SOURCE ADDRESS
         LA    R14,36(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   44(R7),C' '        SET SPACE
         LA    R0,E0208ASR+12     SOURCE ADDRESS
         LA    R14,45(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   53(R7),C')'        SET CLOSE BRACKET
KN0208R4 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
* REGS R4-R7
         GEN_MVC 0(R7),17,=C'ASRAREGS R4 -R7   ' SET ASRAPSW (2)
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208R8           EXIT IF IT IS
         MVI   17(R7),C'('        SET OPEN BRACKET
         LARL  R1,K20208TH        R1=TRANSLATE TABLE ADDRESS
         LA    R0,E0208ASR+16     SOURCE ADDRESS
         LA    R14,18(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   26(R7),C' '        SET SPACE
         LA    R0,E0208ASR+20     SOURCE ADDRESS
         LA    R14,27(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   35(R7),C' '        SET SPACE
         LA    R0,E0208ASR+24     SOURCE ADDRESS
         LA    R14,36(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   44(R7),C' '        SET SPACE
         LA    R0,E0208ASR+28     SOURCE ADDRESS
         LA    R14,45(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   53(R7),C')'        SET CLOSE BRACKET
KN0208R8 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
* REGS R8-R11
         GEN_MVC 0(R7),17,=C'ASRAREGS R8 -R11  ' SET ASRAPSW (3)
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208RC           EXIT IF IT IS
         MVI   17(R7),C'('        SET OPEN BRACKET
         LARL  R1,K20208TH        R1=TRANSLATE TABLE ADDRESS
         LA    R0,E0208ASR+32     SOURCE ADDRESS
         LA    R14,18(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   26(R7),C' '        SET SPACE
         LA    R0,E0208ASR+36     SOURCE ADDRESS
         LA    R14,27(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   35(R7),C' '        SET SPACE
         LA    R0,E0208ASR+40     SOURCE ADDRESS
         LA    R14,36(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   44(R7),C' '        SET SPACE
         LA    R0,E0208ASR+44     SOURCE ADDRESS
         LA    R14,45(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   53(R7),C')'        SET CLOSE BRACKET
KN0208RC EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
* REGS R12-R15
         GEN_MVC 0(R7),17,=C'ASRAREGS R12-R15  ' SET ASRAPSW (4)
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A5           EXIT IF IT IS
         MVI   17(R7),C'('        SET OPEN BRACKET
         LARL  R1,K20208TH        R1=TRANSLATE TABLE ADDRESS
         LA    R0,E0208ASR+48     SOURCE ADDRESS
         LA    R14,18(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   26(R7),C' '        SET SPACE
         LA    R0,E0208ASR+52     SOURCE ADDRESS
         LA    R14,27(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   35(R7),C' '        SET SPACE
         LA    R0,E0208ASR+56     SOURCE ADDRESS
         LA    R14,36(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   44(R7),C' '        SET SPACE
         LA    R0,E0208ASR+60     SOURCE ADDRESS
         LA    R14,45(R7)         DESTINATION ADDRESS
         LA    R15,4              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
         MVI   53(R7),C')'        SET CLOSE BRACKET
KN0208A5 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S6 EQU   *
         OC    P0208BTR,P0208BTR  ANY BTRANS ?
         JZ    KN0208S7           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S7           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'BTRANS            ' SET BTRANS
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A6           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208BTR,X'00'     IS IT ZERO ?
         JE    KN0208A6           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208A6 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208S7 EQU   *
         OC    P0208CHN,P0208CHN  ANY CHANNEL ?
         JZ    KN0208Z7           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208Z7           EXIT IF NOT WANTED
         GEN_MVC 0(R7),26,=C'CHANNEL                   ' SET CHANNEL
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208Y6           EXIT IF IT IS
         GEN_MVC 17(R7),18,=C'(................)' SET TEMPLATE
         MVC   18(16,R7),E0208CHN MOVE CHANNEL
KN0208Y6 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208Z7 EQU   *
         OC    P0208CMD,P0208CMD  ANY CMDSEC ?
         JZ    KN0208S8           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S8           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'CMDSEC            ' SET CMDSEC
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A7           EXIT IF IT IS
         GEN_MVC 18(R7),3,=C'(.) ' SET TEMPLATE
         MVC   19(1,R7),E0208CMD  MOVE CMDSEC
KN0208A7 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208S8           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208S8 EQU   *
         OC    P0208COL,P0208COL  ANY COLOR ?
         JZ    KN0208S9           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208S9           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'COLOR             ' SET COLOR
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A8           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208COL,X'00'     IS IT ZERO ?
         JE    KN0208A8           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208A8 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208S9           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208S9 EQU   *
         OC    P0208CWA,P0208CWA  ANY CWALENG ?
         JZ    KN0208SA           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SA           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'CWASIZE           ' SET CWALENG
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208A9           EXIT IF IT IS
         LH    R0,E0208CWA        R0=CWALENG
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK CWALENG
         OI    22(R7),X'F0'       SET SIGN
KN0208A9 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN0208SA EQU   *
         OC    P0208DSH,P0208DSH  ANY DEFSCRNHT ?
         JZ    KN0208SB           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SB           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'DEFSCRNHT         ' SET DEFSCRNHT
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AA           EXIT IF IT IS
         LH    R0,E0208DSH        R0=DEFSCRNHT
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK DEFSCRNHT
         OI    22(R7),X'F0'       SET SIGN
KN0208AA EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SB           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SB EQU   *
         OC    P0208DSW,P0208DSW  ANY DEFSCRNWD ?
         JZ    KN0208SC           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SC           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'DEFSCRNWD         ' SET DEFSCRNWD
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AB           EXIT IF IT IS
         LH    R0,E0208DSW        R0=DEFSCRNWD
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK DEFSCRNWD
         OI    22(R7),X'F0'       SET SIGN
KN0208AB EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SC           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SC EQU   *
         OC    P0208DSC,P0208DSC  ANY DSSCS ?
         JZ    KN0208SD           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SD           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'DSSCS             ' SET DSSCS
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AC           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208DSC,X'00'     IS IT ZERO ?
         JE    KN0208AC           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AC EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SD           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SD EQU   *
         OC    P0208D32,P0208D32  ANY DS3270 ?
         JZ    KN0208SE           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SE           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'DS3270            ' SET DS3270
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AD           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208D32,X'00'     IS IT ZERO ?
         JE    KN0208AD           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AD EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SE           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SE EQU   *
         OC    P0208EWA,P0208EWA  ANY EWASUPP ?
         JZ    KN0208SF           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SF           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'EWASUPP           ' SET EWASUPP
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AE           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208EWA,X'00'     IS IT ZERO ?
         JE    KN0208AE           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AE EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SF           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SF EQU   *
         OC    P0208EXT,P0208EXT  ANY EXTDS ?
         JZ    KN0208SG           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SG           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'EXTDS             ' SET EXTDS
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AF           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208EXT,X'00'     IS IT ZERO ?
         JE    KN0208AF           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AF EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SG           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SG EQU   *
         OC    P0208FAC,P0208FAC  ANY FACILITY ?
         JZ    KN0208SH           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SH           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'FACILITY          ' SET FACILITY
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AG           EXIT IF IT IS
         GEN_MVC 18(R7),6,=C'(....)' SET TEMPLATE
         MVC   19(4,R7),E0208FAC  MOVE FACILITY
KN0208AG EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SH           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SH EQU   *
         OC    P0208FCI,P0208FCI  ANY FCI ?
         JZ    KN0208SI           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SI           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'FCI               ' SET FCI
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AH           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         LARL  R1,K20208TH        R1=TRANSLATE TABLE ADDRESS
         LA    R0,E0208FCI        SOURCE ADDRESS
         LA    R14,20(R7)         DESTINATION ADDRESS
         LA    R15,1              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
KN0208AH EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SI           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SI EQU   *
         OC    P0208GMM,P0208GMM  ANY GMMI ?
         JZ    KN0208SJ           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SJ           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'GMMI              ' SET GMMI
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AI           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208GMM,X'00'     IS IT ZERO ?
         JE    KN0208AI           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AI EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SJ           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SJ EQU   *
         OC    P0208HIL,P0208HIL  ANY HILIGHT ?
         JZ    KN0208SK           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SK           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'HILIGHT           ' SET HILIGHT
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AJ           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208HIL,X'00'     IS IT ZERO ?
         JE    KN0208AJ           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AJ EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SK           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SK EQU   *
         OC    P0208INV,P0208INV  ANY INVPROGRAM
         JZ    KN0208SL           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SL           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'INVOKINGPROG      ' SET INVPROGRAM
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AK           EXIT IF IT IS
         GEN_MVC 17(R7),10,=C'(........)' SET TEMPLATE
         MVC   18(8,R7),E0208INV  MOVE INVPROGRAM
KN0208AK EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SL           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SL EQU   *
         OC    P0208KAT,P0208KAT  ANY KATAKANA ?
         JZ    KN0208SM           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SM           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'KATAKANA          ' SET KATAKANA
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AL           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208KAT,X'00'     IS IT ZERO ?
         JE    KN0208AL           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AL EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SM           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SM EQU   *
         OC    P0208LIU,P0208LIU  ANY LANGINUSE ?
         JZ    KN0208SN           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SN           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'LANGINUSE         ' SET LANGINUSE
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AM           EXIT IF IT IS
         GEN_MVC 17(R7),5,=C'(...) ' SET TEMPLATE
         MVC   18(3,R7),E0208LIU  MOVE LANGINUSE
KN0208AM EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SN           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SN EQU   *
         OC    P0208MCL,P0208MCL  ANY MAPCOLUMN ?
         JZ    KN0208SO           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SO           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'MAPCOLUMN         ' SET MAPCOLUMN
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AN           EXIT IF IT IS
         LH    R0,E0208MCL        R0=MAPCOLUMN
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK MAPCOLUMN
         OI    22(R7),X'F0'       SET SIGN
KN0208AN EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SO           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SO EQU   *
         OC    P0208MHT,P0208MHT  ANY MAPHEIGHT ?
         JZ    KN0208SP           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SP           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'MAPHEIGHT         ' SET MAPHEIGHT
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AO           EXIT IF IT IS
         LH    R0,E0208MHT        R0=MAPHEIGHT
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK MAPHEIGHT
         OI    22(R7),X'F0'       SET SIGN
KN0208AO EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SP           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SP EQU   *
         OC    P0208MLN,P0208MLN  ANY MAPLINE ?
         JZ    KN0208SQ           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SQ           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'MAPLINE           ' SET MAPLINE
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AP           EXIT IF IT IS
         LH    R0,E0208MLN        R0=MAPLINE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK MAPLINE
         OI    22(R7),X'F0'       SET SIGN
KN0208AP EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SQ           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SQ EQU   *
         OC    P0208MWH,P0208MWH  ANY MAPWIDTH ?
         JZ    KN0208SR           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SR           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'MAPWIDTH          ' SET MAPWIDTH
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AQ           EXIT IF IT IS
         LH    R0,E0208MWH        R0=MAPWIDTH
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK MAPWIDTH
         OI    22(R7),X'F0'       SET SIGN
KN0208AQ EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SR           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SR EQU   *
         OC    P0208MSR,P0208MSR  ANY MSRCONTROL ?
         JZ    KN0208SS           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SS           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'MSRCONTROL        ' SET MSRCONTROL
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AR           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208MSR,X'00'     IS IT ZERO ?
         JE    KN0208AR           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AR EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SS           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SS EQU   *
         OC    P0208NIU,P0208NIU  ANY NATLANGINUSE ?
         JZ    KN0208ST           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208ST           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'NATLANGINUSE      ' SET NATLANGINUSE
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AS           EXIT IF IT IS
         GEN_MVC 17(R7),3,=C'(.) ' SET TEMPLATE
         MVC   18(1,R7),E0208NIU  MOVE NATLANGINUSE
KN0208AS EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208ST           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208ST EQU   *
         OC    P0208NXT,P0208NXT  ANY NEXTTRANSID ?
         JZ    KN0208SU           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SU           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'NEXTTRANSID       ' SET NEXTTRANSID
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AT           EXIT IF IT IS
         GEN_MVC 17(R7),6,=C'(....)' SET TEMPLATE
         MVC   18(4,R7),E0208NXT  MOVE NEXTTRANSID
KN0208AT EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SU           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SU EQU   *
         OC    P0208OUT,P0208OUT  ANY OUTLINE ?
         JZ    KN0208SV           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SV           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'OUTLINE           ' SET OUTLINE
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AU           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208OUT,X'00'     IS IT ZERO ?
         JE    KN0208AU           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AU EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SV           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SV EQU   *
         OC    P0208PRT,P0208PRT  ANY PARTNS ?
         JZ    KN0208SW           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SW           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'PARTNS            ' SET PARTNS
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AV           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208PRT,X'00'     IS IT ZERO ?
         JE    KN0208AV           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AV EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SW           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SW EQU   *
         OC    P0208PGM,P0208PGM  ANY PROGRAM ?
         JZ    KN0208SX           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SX           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'PROGRAM           ' SET PROGRAM
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AW           EXIT IF IT IS
         GEN_MVC 17(R7),10,=C'(........)' SET TEMPLATE
         MVC   18(8,R7),E0208PGM  MOVE PROGRAM
KN0208AW EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SX           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SX EQU   *
         OC    P0208PS,P0208PS    ANY PS ?
         JZ    KN0208SY           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SY           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'PS                ' SET PS
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AX           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208PS,X'00'      IS IT ZERO ?
         JE    KN0208AX           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AX EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SY           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SY EQU   *
         OC    P0208RSC,P0208RSC  ANY RESSEC ?
         JZ    KN0208SZ           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208SZ           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'RESSEC            ' SET RESSEC
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AY           EXIT IF IT IS
         GEN_MVC 17(R7),3,=C'(.) ' SET TEMPLATE
         MVC   18(1,R7),E0208RSC  SET RESSEC
KN0208AY EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208SZ           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208SZ EQU   *
         OC    P0208RES,P0208RES  ANY RESTART ?
         JZ    KN0208T0           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T0           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'RESTART           ' SET RESTART
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208AZ           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208RES,X'00'     IS IT ZERO ?
         JE    KN0208AZ           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208AZ EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T0           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T0 EQU   *
         OC    P0208RET,P0208RET  ANY RETPROGRAM ?
         JZ    KN0208T1           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T1           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'RETURNPROG        ' SET RETPROGRAM
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B0           EXIT IF IT IS
         GEN_MVC 17(R7),10,=C'(........)' SET TEMPLATE
         MVC   18(8,R7),E0208RET  MOVE RETPROGRAM
KN0208B0 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T1           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T1 EQU   *
         OC    P0208SCH,P0208SCH  ANY SCRNHT ?
         JZ    KN0208T2           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T2           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'SCRNHT            ' SET SCRNHT
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B1           EXIT IF IT IS
         LH    R0,E0208SCH        R0=SCRNHT
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK SCRNHT
         OI    22(R7),X'F0'       SET SIGN
KN0208B1 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T2           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T2 EQU   *
         OC    P0208SCW,P0208SCW  ANY SCRNWD ?
         JZ    KN0208T3           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T3           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'SCRNWD            ' SET SCRNWD
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B2           EXIT IF IT IS
         LH    R0,E0208SCW        R0=SCRNWD
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK SCRNWD
         OI    22(R7),X'F0'       SET SIGN
KN0208B2 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T3           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T3 EQU   *
         OC    P0208SOS,P0208SOS  ANY SOSI ?
         JZ    KN0208T4           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T4           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'SOSI              ' SET SOSI
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B3           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208SOS,X'00'     IS IT ZERO ?
         JE    KN0208B3           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208B3 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T4           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T4 EQU   *
         OC    P0208STC,P0208STC  ANY STARTCODE ?
         JZ    KN0208T5           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T5           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'STARTCODE         ' SET STARTCODE
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B4           EXIT IF IT IS
         GEN_MVC 17(R7),4,=C'(..)' SET TEMPLATE
         MVC   18(2,R7),E0208STC  SET STARTCODE
KN0208B4 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T5           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T5 EQU   *
         OC    P0208TKP,P0208TKP  ANY TASKPRIORITY ?
         JZ    KN0208T6           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T6           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TASKPRIORITY      ' SET TASKPRIORITY
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B5           EXIT IF IT IS
         LH    R0,E0208TKP        R0=TASKPRIORITY
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK TASKPRIORITY
         OI    22(R7),X'F0'       SET SIGN
KN0208B5 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T6           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T6 EQU   *
         OC    P0208TUL,P0208TUL  ANY TCTUALENG ?
         JZ    KN0208T7           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T7           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TCTUALENG         ' SET TCTUALENG
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B6           EXIT IF IT IS
         LH    R0,E0208TUL        R0=TCTUALENG
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK TCTUALENG
         OI    22(R7),X'F0'       SET SIGN
KN0208B6 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T7           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T7 EQU   *
         OC    P0208TMC,P0208TMC  ANY TERMCODE ?
         JZ    KN0208T8           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T8           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TERMCODE          ' SET TERMCODE
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B7           EXIT IF IT IS
         GEN_MVC 17(R7),9,=C'(X''0000'') ' SET TEMPLATE
         LARL  R1,K20208TH        R1=TRANSLATE TABLE ADDRESS
         LA    R0,E0208TMC        SOURCE ADDRESS
         LA    R14,20(R7)         DESTINATION ADDRESS
         LA    R15,2              SOURCE LENGTH
         TROT  R14,R0,1           TRANSLATE TO PRINTABLE HEX
         LA    R14,(P0208END-P0208)(R9) ADDRESS DATA
KN0208B7 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T8           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T8 EQU   *
         OC    P0208TMP,P0208TMP  ANY TERMPRIORITY ?
         JZ    KN0208T9           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208T9           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TERMPRIORITY      ' SET TERMPRIORITY
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B8           EXIT IF IT IS
         LH    R0,E0208TMP        R0=TERMPRIORITY
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK TERMPRIORITY
         OI    22(R7),X'F0'       SET SIGN
KN0208B8 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208T9           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208T9 EQU   *
         OC    P0208TXK,P0208TXK  ANY TEXTKYBD ?
         JZ    KN0208TA           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208TA           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TEXTKYBD          ' SET TEXTKYBD
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208B9           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208TXK,X'00'     IS IT ZERO ?
         JE    KN0208B9           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208B9 EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208TA           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208TA EQU   *
         OC    P0208TXP,P0208TXP  ANY TEXTPRINT ?
         JZ    KN0208TB           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208TB           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TEXTPRINT         ' SET TEXTPRINT
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208BA           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208TXP,X'00'     IS IT ZERO ?
         JE    KN0208BA           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208BA EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208TB           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208TB EQU   *
         OC    P0208TNP,P0208TNP  ANY TRANPRIORITY ?
         JZ    KN0208TC           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208TC           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TRANPRIORITY      ' SET TRANPRIORITY
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208BB           EXIT IF IT IS
         LH    R0,E0208TNP        R0=TRANPRIORITY
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK TRANPRIORITY
         OI    22(R7),X'F0'       SET SIGN
KN0208BB EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208TC           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208TC EQU   *
         OC    P0208TWA,P0208TWA  ANY TWALENG ?
         JZ    KN0208TD           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208TD           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'TWALENG           ' SET TWALENG
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208BC           EXIT IF IT IS
         LH    R0,E0208TWA        R0=TWALENG
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK TWALENG
         OI    22(R7),X'F0'       SET SIGN
KN0208BC EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208TD           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208TD EQU   *
         OC    P0208UNA,P0208UNA  ANY UNATTEND ?
         JZ    KN0208TE           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208TE           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'UNATTEND          ' SET UNATTEND
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208BD           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208UNA,X'00'     IS IT ZERO ?
         JE    KN0208BD           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208BD EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208TE           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208TE EQU   *
         OC    P0208USP,P0208USP  ANY USERPRIORITY ?
         JZ    KN0208TF           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208TF           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'USERPRIORITY      ' SET USERPRIORITY
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208BE           EXIT IF IT IS
         LH    R0,E0208USP        R0=USERPRIORITY
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 17(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN0208DC        ADDRESS DECIMAL FIELD
         UNPK  18(5,R7),5(3,R1)   UNPACK USERPRIORITY
         OI    22(R7),X'F0'       SET SIGN
KN0208BE EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208TF           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208TF EQU   *
         OC    P0208VAL,P0208VAL  ANY VALIDATION ?
         JZ    KN0208TG           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN0208TG           EXIT IF NOT WANTED
         GEN_MVC 0(R7),17,=C'VALIDATION        ' SET VALIDATION
         CLI   E0208STO,C'A'      'BEFORE' ?
         JE    KN0208BF           EXIT IF IT IS
         GEN_MVC 17(R7),7,=C'(X''00'') ' SET TEMPLATE
         CLI   E0208VAL,X'00'     IS IT ZERO ?
         JE    KN0208BF           EXIT IF IT IS
         GEN_MVC 20(R7),2,=C'FF'  SET FF
KN0208BF EQU   *
         AHI   R7,(E0208C2O-E0208C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN0208TG           EXIT IF SCREEN NOT FULL
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN0208TG EQU   *
         LRL   R14,KN020814       LOAD RETURN ADDRESS
         CLI   P0208NOH,X'FF'     ANY NOHANDLE ?
         BNER  R14                RETURN IF NONE
         GEN_MVC 0(R7),8,=C'NOHANDLE' SET NOHANDLE
         BR    R14                RETURN
         DROP  R14
*
KN0208DC DC    PL8'0'
KN0208P4 DS    A                  ADDRESS OF P0208, DATA
KN020814 DS    A                  SAVE RETURN ADDRESS
*
* TRANSLATE TABLE FOR HEX DISPLAY
*
         DS    0D
K20208TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         LTORG
*
         DROP  R9
*
K2020A   DS    0H
* IGNORE CONDITION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : IGNORE CONDITION - NO PROCESSING
* PF12 : IGNORE CONDITION - ACTIVATE REDISPLAY MODE--WITH PAGING
*        IGNORE CONDITION - WITHIN REDISPLAY MODE, SWITCH KEY SETS
         USING EDF020AS,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* HANDLE CLEAR IN REDISPLAY MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2020AOK           EXIT IF NOT
* REDISPLAY MODE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BNE   K2020AOK           EXIT IF NOT
* CLEAR IN REDISPLAY MODE
         L     R4,EDFRDYAD        R4=REDISPLAY MAP STRUCTURE
         AHI   R4,8               POINT TO REDISPLAY MAP
K2020AOK EQU   *
         MVC   E020AENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVC   E020AP7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVC   E020AP8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVC   E020APAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVI   E020APBA,DFHBMASD  HIDE PF11
         MVC   E020APBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E020APCO,=C'PF12:REDISPLAY MODE' SET PF12 TEXT
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2020AS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2020AS4 EQU   *
         XC    E020ADIL,E020ADIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2020AS5           EXIT IF NOT
* PF12 PRESSED
         CLI   E020APCA,DFHBMASD  PF12 HIDDEN ?
         BE    K2020AS5           EXIT IF IT IS
* PF12 PRESSED AND SHOWN
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2020AAR           EXIT IF NOT
* PF12 WHILE IN REDISPLAY MODE, SWITCH KEY SETS
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K2020AS6           EXIT IF THEY ARE
         L     R14,K2020ANC       R14=NO. OF POTENTIAL LINES
         S     R14,K2020ALT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K2020ANP           EXIT IF NOT
* REDISPLAY KEYS ACTIVE, SWITCH TO PAGING KEYS
         MVC   E020AENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E020AP7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVC   E020AP8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVC   E020APAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVC   E020APBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E020APCO,=C'PF12:REDISPLAY KEYS' SET PF12 TEXT
         MVHHI E020ADIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVI   EDFRDYPG,X'FF'     SET PAGING KEYS ACTIVE
         B     K2020ANP           EXIT
*
K2020AAR EQU   *
* PF12 AND NOT IN REDISPLAY MODE, ACTIVATE IT
         CLI   E020APCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2020AS6           EXIT
*
K2020AS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2020ANP           EXIT IF NOT
* REDISPLAY MODE
K2020AS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
         MVC   E020AENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E020AP7O,=C'PF7 :REDISPLAY BACK 1' SET PF7 TEXT
         MVC   E020AP8O,=C'PF8 :REDISPLAY FORWARD 1' SET PF8 TEXT
         MVC   E020APAO,=C'PF10:REDISPLAY BACK 5' SET PF10 TEXT
         MVC   E020APBO,=C'PF11:REDISPLAY FORWARD 5' SET PF11 TEXT
         MVC   E020APCO,=C'PF12:PAGING KEYS   ' SET PF12 TEXT
         MVI   EDFRDYPG,X'FE'     SET REDISPLAY KEYS ACTIVE
         MVI   E020APCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E020ADYA,DFHBMASB  SET DISPLAY ON
         MVI   E020ADIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E020ADIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E020ADIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2020ADP        CONVERT TO DECIMAL
         UNPK  E020ADTO+1(3),K2020ADP+6(2) UNPACK NUMITEMS
         OI    E020ADTO+3,X'F0'   SET SIGN
         MVI   E020ADTO,C'/'      SET /
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2020ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2020ADP        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2020A7P           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
K2020A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2020A8P           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
K2020A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2020AAP           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
K2020AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2020ANP           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K2020ANP EQU   *
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF020AL        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO CDLOADPT(4), P020ACND(30)
         ST    R9,K2020AAD        SAVE IT
         XC    K2020ALT,K2020ALT  CLEAR OFFSET OF TOP LINE
         XC    K2020ANC,K2020ANC  CLEAR NO. OF CONDITIONS
         LA    R5,4(R9)           R5=CONDITION CODES
* COUNT NO. OF CONDITIONS
         LA    R8,30              R8=MAX CONDITIONS
K2020ACC EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K2020ACD           EXIT IF IT IS
         ASI   K2020ANC,1         COUNT NO. OF CONDITIONS
         AHI   R5,1               BUMP CONDITIONS POINTER
         JCT   R8,K2020ACC        LOOP
*
K2020ACD EQU   *
         LA    R5,4(R9)           R5=CONDITION CODES
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
K2020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K2020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K2020ALP        LOOP
*
* SCREEN FULL
         B     K2020ASF           EXIT
*
K2020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K2020ADN        LOOP
*
K2020ASF EQU   *
* SET PAGING KEYS:
*    IF REDISPLAY NOT ACTIVE
*    IF REDISPLAY IS ACTIVE AND PAGING KEYS ARE DISPLAYED
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2020APK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K2020APK           EXIT IF THEY ARE
* REDISPLAY KEYS ACTIVE, SHOW PF12 IF WE CAN PAGE
         L     R14,K2020ANC       R14=NO. OF POTENTIAL LINES
         S     R14,K2020ALT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K2020ASN           EXIT IF NOT
         MVI   E020APCA,DFHBMASB  SHOW PF12
         B     K2020ASN           EXIT
*
* PAGING KEYS ACTIVE
* WE CAN ONLY GO FORWARD FROM HERE
K2020APK EQU   *
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVI   E020APBA,DFHBMASD  HIDE PF11
         L     R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,K2020ALT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K2020ASN           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K2020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K2020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC020A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2020ADP DC    PL8'0'
K2020AAD DS    A                  ADDRESS OF CONDITION AREA
K2020ALT DS    XL4                OFFSET OF TOP LINE
K2020ANC DS    XL4                NO. OF CONDITIONS
*
         LTORG
*
K5020A   DS    0H
         USING *,R6
* PF5  : IGNORE CONDITION
* WORKING STORAGE DISPLAY
         USING EDF020AS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E020ATSO   MOVE TRANSID
         MVC   EWKSPGO,E020APGO   MOVE PROGRAM
         MVC   EWKSTNO,E020ATNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF020AL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7020A   DS    0H
         USING *,R6
* PF7  : IGNORE CONDITION
* REDISPLAY KEYS: REDISPLAY BACK 1
* PAGING KEYS   : PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020AP7A,DFHBMASD  IS PF7 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K7020APK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K7020APK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7020ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7020ADP,=P'1'     BACK 1
         CVB   R8,K7020ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7020ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVI   E020AP8A,DFHBMASB  SHOW PF8
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVI   E020APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7020A7P           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
K7020A7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7020AAP           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
K7020AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7020ABP           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K7020ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7020AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7020AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7020APK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-6              - HALF PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
K7020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K7020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K7020ALP        LOOP
*
         B     K7020AKP           EXIT
*
K7020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K7020ADN        LOOP
*
K7020AKP EQU   *
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVI   E020AP8A,DFHBMASB  SHOW PF8
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVI   E020APBA,DFHBMASD  HIDE PF11
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K7020AKB           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K7020AKB           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
K7020AKB EQU   *
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K7020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K7020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC020A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K7020ADP DC    PL8'0'
K7020AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8020A   DS    0H
         USING *,R6
* PF8  : IGNORE CONDITION
* REDISPLAY KEYS: REDISPLAY FORWARD 1
* PAGING KEYS   : PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020AP8A,DFHBMASD  IS PF8 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K8020APK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K8020APK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8020ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8020ADP,=P'1'     FORWARD 1
         CVB   R8,K8020ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8020ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020AP7A,DFHBMASB  SHOW PF7
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVI   E020APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8020A8P           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
K8020A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8020AAP           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
K8020AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8020ABP           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K8020ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8020AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8020AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8020APK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,6               + HALF PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
K8020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    K8020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K8020ALP        LOOP
*
         B     K8020AKP           EXIT
*
K8020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,K8020ADN        LOOP
*
K8020AKP EQU   *
         MVI   E020AP7A,DFHBMASB  SHOW PF7
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVI   E020APBA,DFHBMASD  HIDE PF11
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K8020AKA           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
K8020AKA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K8020AKB           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
K8020AKB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K8020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
K8020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC020A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K8020ADP DC    PL8'0'
K8020AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA020A   DS    0H
         USING *,R6
* PF10 : IGNORE CONDITION
* REDISPLAY KEYS: REDISPLAY BACK 5
* PAGING KEYS   : PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020APAA,DFHBMASD  IS PF10 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KA020APK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KA020APK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA020ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA020ADP,=P'5'     BACK 5
         CVB   R8,KA020ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA020ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVI   E020APBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA020A7P           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
KA020A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA020A8P           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
KA020A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA020AAP           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
KA020AAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA020AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA020AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA020APK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,-12             - FULL PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
KA020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KA020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KA020ALP        LOOP
*
         B     KA020AKP           EXIT
*
KA020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KA020ADN        LOOP
*
KA020AKP EQU   *
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVI   E020APAA,DFHBMASD  HIDE PF10
         MVI   E020APBA,DFHBMASB  SHOW PF11
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA020AK8           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
KA020AK8 EQU   *
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA020AKA           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
KA020AKA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA020ASN           EXIT IF NOT
         MVI   E020APAA,DFHBMASB  SHOW PF10
KA020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC020A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KA020ADP DC    PL8'0'
KA020AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB020A   DS    0H
         USING *,R6
* PF11 : IGNORE CONDITION
* REDISPLAY KEYS: REDISPLAY FORWARD 5
* PAGING KEYS   : PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF020AS,R4
         CLI   E020APBA,DFHBMASD  IS PF11 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KB020APK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KB020APK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB020ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB020ADP,=P'5'     FORWARD 5
         CVB   R8,KB020ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB020ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVI   E020APAA,DFHBMASB  SHOW PF10
         MVI   E020APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB020A7P           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
KB020A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB020A8P           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
KB020A8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB020ABP           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
KB020ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB020AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB020AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB020APK EQU   *
* PAGING KEYS ACTIVE
         LRL   R9,K2020AAD        R9=CONDITIONS AREA
         LARL  R8,K2020ALT        R8=ADDRESS OFFSET OF TOP LINE
         LA    R5,4(R9)           R5=CONDITION CODES
         A     R5,0(R8)           + CURRENT OFFSET
         AHI   R5,12              + FULL PAGE
         LA    R7,E020AC1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
* @FILENOTFOUND
KB020ALP EQU   *
         CLI   0(R5),X'00'        END OF CONDITIONS ?
         BE    KB020ADN           EXIT IF IT IS
         JASL  R14,DOCOND         STORE CONDITION NAME IN MAP
         AHI   R5,1               BUMP CONDITIONS POINTER
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KB020ALP        LOOP
*
         B     KB020AKP           EXIT
*
KB020ADN EQU   *
* SCREEN NOT FULL, CLEAR REMAINING LINES
         XC    0(12,R7),0(R7)     CLEAR CONDITION NAME
         AHI   R7,(E020AC2O-E020AC1O) BUMP MAP POINTER
         JCT   R8,KB020ADN        LOOP
*
KB020AKP EQU   *
         MVI   E020AP7A,DFHBMASD  HIDE PF7
         MVI   E020AP8A,DFHBMASD  HIDE PF8
         MVI   E020APAA,DFHBMASB  SHOW PF10
         MVI   E020APBA,DFHBMASD  HIDE PF11
         LARL  R9,K2020ALT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB020AK8           EXIT IF NOT
         MVI   E020AP7A,DFHBMASB  SHOW PF7
KB020AK8 EQU   *
         LRL   R14,K2020ANC       R14=NO. OF CONDITIONS
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB020ASN           EXIT IF NOT
         MVI   E020AP8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB020ASN           EXIT IF NOT
         MVI   E020APBA,DFHBMASB  SHOW PF11
KB020ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020A') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC020A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KB020ADP DC    PL8'0'
KB020AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC020A   DS    0H
         USING *,R6
* PF12 : IGNORE CONDITION
         USING EDF020AS,R4
         XC    KC020ARP,KC020ARP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC020ARP) LENGTH(KC020ALP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC020ARP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF020AL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF020A') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC020ABS           EXIT IF IT IS
         TM    E020ADIF,DFHBMEOF  ANY DATA ?
         BO    KC020ABS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E020ADII  SAVE INPUT REDISPLAY NUMBER
KC020ABS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC020ARP DS    CL50               RECEIVE AREA
KC020ALP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K2020C   DS    0H
* PUSH HANDLE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : PUSH HANDLE - NO PROCESSING
* PF12 : PUSH HANDLE - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF020CS,R4
         MVC   E020CENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E020CP7A,DFHBMASD  HIDE PF7
         MVI   E020CP8A,DFHBMASD  HIDE PF8
         MVI   E020CPAA,DFHBMASD  HIDE PF10
         MVI   E020CPBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2020CS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2020CS4 EQU   *
         XC    E020CDIL,E020CDIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2020CS5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E020CPCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2020CS6           EXIT
*
K2020CS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2020CSN           EXIT IF NOT
* REDISPLAY MODE
K2020CS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E020CPCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E020CDYA,DFHBMASB  SET DISPLAY ON
         MVI   E020CDIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E020CDIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E020CDIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2020CDC        CONVERT TO DECIMAL
         UNPK  E020CDTO+1(3),K2020CDC+6(2) UNPACK NUMITEMS
         OI    E020CDTO+3,X'F0'   SET SIGN
         MVI   E020CDTO,C'/'      SET /
         MVC   E020CENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2020CDC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2020CDC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2020C7P           EXIT IF NOT
         MVI   E020CP7A,DFHBMASB  SHOW PF7
K2020C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2020C8P           EXIT IF NOT
         MVI   E020CP8A,DFHBMASB  SHOW PF8
K2020C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2020CAP           EXIT IF NOT
         MVI   E020CPAA,DFHBMASB  SHOW PF10
K2020CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2020CSN           EXIT IF NOT
         MVI   E020CPBA,DFHBMASB  SHOW PF11
K2020CSN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020C') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC020C          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2020CDC DC    PL8'0'
*
         LTORG
*
K5020C   DS    0H
         USING *,R6
* PF5  : PUSH HANDLE
* WORKING STORAGE DISPLAY
         USING EDF020CS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E020CTSO   MOVE TRANSID
         MVC   EWKSPGO,E020CPGO   MOVE PROGRAM
         MVC   EWKSTNO,E020CTNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF020CL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7020C   DS    0H
         USING *,R6
* PF7  : PUSH HANDLE
* REDISPLAY BACK 1
         USING EDF020CS,R4
         CLI   E020CP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7020CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7020CDP,=P'1'     BACK 1
         CVB   R8,K7020CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7020CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020CP7A,DFHBMASD  HIDE PF7
         MVI   E020CP8A,DFHBMASB  SHOW PF8
         MVI   E020CPAA,DFHBMASD  HIDE PF10
         MVI   E020CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7020C7P           EXIT IF NOT
         MVI   E020CP7A,DFHBMASB  SHOW PF7
K7020C7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7020CAP           EXIT IF NOT
         MVI   E020CPAA,DFHBMASB  SHOW PF10
K7020CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7020CBP           EXIT IF NOT
         MVI   E020CPBA,DFHBMASB  SHOW PF11
K7020CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7020CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7020CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7020CDP DC    PL8'0'
K7020CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8020C   DS    0H
         USING *,R6
* PF8  : PUSH HANDLE
* REDISPLAY FORWARD 1
         USING EDF020CS,R4
         CLI   E020CP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8020CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8020CDP,=P'1'     FORWARD 1
         CVB   R8,K8020CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8020CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020CP7A,DFHBMASB  SHOW PF7
         MVI   E020CP8A,DFHBMASD  HIDE PF8
         MVI   E020CPAA,DFHBMASD  HIDE PF10
         MVI   E020CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8020C8P           EXIT IF NOT
         MVI   E020CP8A,DFHBMASB  SHOW PF8
K8020C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8020CAP           EXIT IF NOT
         MVI   E020CPAA,DFHBMASB  SHOW PF10
K8020CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8020CBP           EXIT IF NOT
         MVI   E020CPBA,DFHBMASB  SHOW PF11
K8020CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8020CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8020CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8020CDP DC    PL8'0'
K8020CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA020C   DS    0H
         USING *,R6
* PF10 : PUSH HANDLE
* REDISPLAY BACK 5
         USING EDF020CS,R4
         CLI   E020CPAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA020CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA020CDP,=P'5'     BACK 5
         CVB   R8,KA020CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA020CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020CP7A,DFHBMASD  HIDE PF7
         MVI   E020CP8A,DFHBMASD  HIDE PF8
         MVI   E020CPAA,DFHBMASD  HIDE PF10
         MVI   E020CPBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA020C7P           EXIT IF NOT
         MVI   E020CP7A,DFHBMASB  SHOW PF7
KA020C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA020C8P           EXIT IF NOT
         MVI   E020CP8A,DFHBMASB  SHOW PF8
KA020C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA020CAP           EXIT IF NOT
         MVI   E020CPAA,DFHBMASB  SHOW PF10
KA020CAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA020CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA020CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA020CDP DC    PL8'0'
KA020CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB020C   DS    0H
         USING *,R6
* PF11 : PUSH HANDLE
* REDISPLAY FORWARD 5
         USING EDF020CS,R4
         CLI   E020CPBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB020CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB020CDP,=P'5'     FORWARD 5
         CVB   R8,KB020CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB020CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020CP7A,DFHBMASD  HIDE PF7
         MVI   E020CP8A,DFHBMASD  HIDE PF8
         MVI   E020CPAA,DFHBMASB  SHOW PF10
         MVI   E020CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB020C7P           EXIT IF NOT
         MVI   E020CP7A,DFHBMASB  SHOW PF7
KB020C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB020C8P           EXIT IF NOT
         MVI   E020CP8A,DFHBMASB  SHOW PF8
KB020C8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB020CBP           EXIT IF NOT
         MVI   E020CPBA,DFHBMASB  SHOW PF11
KB020CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB020CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB020CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB020CDP DC    PL8'0'
KB020CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC020C   DS    0H
         USING *,R6
* PF12 : PUSH HANDLE
         USING EDF020CS,R4
         XC    KC020CRP,KC020CRP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC020CRP) LENGTH(KC020CLP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC020CRP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF020CL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF020C') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC020CBS           EXIT IF IT IS
         TM    E020CDIF,DFHBMEOF  ANY DATA ?
         BO    KC020CBS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E020CDII  SAVE INPUT REDISPLAY NUMBER
KC020CBS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC020CRP DS    CL50               RECEIVE AREA
KC020CLP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K2020E   DS    0H
* POP HANDLE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : POP HANDLE - NO PROCESSING
* PF12 : POP HANDLE - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF020ES,R4
         MVC   E020EENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E020EP7A,DFHBMASD  HIDE PF7
         MVI   E020EP8A,DFHBMASD  HIDE PF8
         MVI   E020EPAA,DFHBMASD  HIDE PF10
         MVI   E020EPBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2020ES4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2020ES4 EQU   *
         XC    E020EDIL,E020EDIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2020ES5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E020EPCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2020ES6           EXIT
*
K2020ES5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2020ESN           EXIT IF NOT
* REDISPLAY MODE
K2020ES6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E020EPCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E020EDYA,DFHBMASB  SET DISPLAY ON
         MVI   E020EDIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E020EDIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E020EDIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2020EDC        CONVERT TO DECIMAL
         UNPK  E020EDTO+1(3),K2020EDC+6(2) UNPACK NUMITEMS
         OI    E020EDTO+3,X'F0'   SET SIGN
         MVI   E020EDTO,C'/'      SET /
         MVC   E020EENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2020EDC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2020EDC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2020E7P           EXIT IF NOT
         MVI   E020EP7A,DFHBMASB  SHOW PF7
K2020E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2020E8P           EXIT IF NOT
         MVI   E020EP8A,DFHBMASB  SHOW PF8
K2020E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2020EAP           EXIT IF NOT
         MVI   E020EPAA,DFHBMASB  SHOW PF10
K2020EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2020ESN           EXIT IF NOT
         MVI   E020EPBA,DFHBMASB  SHOW PF11
K2020ESN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF020E') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC020E          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2020EDC DC    PL8'0'
*
         LTORG
*
K5020E   DS    0H
         USING *,R6
* PF5  : POP HANDLE
* WORKING STORAGE DISPLAY
         USING EDF020ES,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E020ETSO   MOVE TRANSID
         MVC   EWKSPGO,E020EPGO   MOVE PROGRAM
         MVC   EWKSTNO,E020ETNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF020EL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7020E   DS    0H
         USING *,R6
* PF7  : POP HANDLE
* REDISPLAY BACK 1
         USING EDF020ES,R4
         CLI   E020EP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7020EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7020EDP,=P'1'     BACK 1
         CVB   R8,K7020EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7020EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020EP7A,DFHBMASD  HIDE PF7
         MVI   E020EP8A,DFHBMASB  SHOW PF8
         MVI   E020EPAA,DFHBMASD  HIDE PF10
         MVI   E020EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7020E7P           EXIT IF NOT
         MVI   E020EP7A,DFHBMASB  SHOW PF7
K7020E7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7020EAP           EXIT IF NOT
         MVI   E020EPAA,DFHBMASB  SHOW PF10
K7020EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7020EBP           EXIT IF NOT
         MVI   E020EPBA,DFHBMASB  SHOW PF11
K7020EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7020EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7020EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7020EDP DC    PL8'0'
K7020EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8020E   DS    0H
         USING *,R6
* PF8  : POP HANDLE
* REDISPLAY FORWARD 1
         USING EDF020ES,R4
         CLI   E020EP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8020EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8020EDP,=P'1'     FORWARD 1
         CVB   R8,K8020EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8020EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020EP7A,DFHBMASB  SHOW PF7
         MVI   E020EP8A,DFHBMASD  HIDE PF8
         MVI   E020EPAA,DFHBMASD  HIDE PF10
         MVI   E020EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8020E8P           EXIT IF NOT
         MVI   E020EP8A,DFHBMASB  SHOW PF8
K8020E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8020EAP           EXIT IF NOT
         MVI   E020EPAA,DFHBMASB  SHOW PF10
K8020EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8020EBP           EXIT IF NOT
         MVI   E020EPBA,DFHBMASB  SHOW PF11
K8020EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8020EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8020EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8020EDP DC    PL8'0'
K8020EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA020E   DS    0H
         USING *,R6
* PF10 : POP HANDLE
* REDISPLAY BACK 5
         USING EDF020ES,R4
         CLI   E020EPAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA020EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA020EDP,=P'5'     BACK 5
         CVB   R8,KA020EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA020EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020EP7A,DFHBMASD  HIDE PF7
         MVI   E020EP8A,DFHBMASD  HIDE PF8
         MVI   E020EPAA,DFHBMASD  HIDE PF10
         MVI   E020EPBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA020E7P           EXIT IF NOT
         MVI   E020EP7A,DFHBMASB  SHOW PF7
KA020E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA020E8P           EXIT IF NOT
         MVI   E020EP8A,DFHBMASB  SHOW PF8
KA020E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA020EAP           EXIT IF NOT
         MVI   E020EPAA,DFHBMASB  SHOW PF10
KA020EAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA020EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA020EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA020EDP DC    PL8'0'
KA020EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB020E   DS    0H
         USING *,R6
* PF11 : POP HANDLE
* REDISPLAY FORWARD 5
         USING EDF020ES,R4
         CLI   E020EPBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB020EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB020EDP,=P'5'     FORWARD 5
         CVB   R8,KB020EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB020EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E020EP7A,DFHBMASD  HIDE PF7
         MVI   E020EP8A,DFHBMASD  HIDE PF8
         MVI   E020EPAA,DFHBMASB  SHOW PF10
         MVI   E020EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB020E7P           EXIT IF NOT
         MVI   E020EP7A,DFHBMASB  SHOW PF7
KB020E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB020E8P           EXIT IF NOT
         MVI   E020EP8A,DFHBMASB  SHOW PF8
KB020E8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB020EBP           EXIT IF NOT
         MVI   E020EPBA,DFHBMASB  SHOW PF11
KB020EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB020EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB020EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB020EDP DC    PL8'0'
KB020EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC020E   DS    0H
         USING *,R6
* PF12 : POP HANDLE
         USING EDF020ES,R4
         XC    KC020ERP,KC020ERP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC020ERP) LENGTH(KC020ELP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC020ERP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF020EL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF020E') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC020EBS           EXIT IF IT IS
         TM    E020EDIF,DFHBMEOF  ANY DATA ?
         BO    KC020EBS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E020EDII  SAVE INPUT REDISPLAY NUMBER
KC020EBS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC020ERP DS    CL50               RECEIVE AREA
KC020ELP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20402   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : RECEIVE
* PF12 : RECEIVE - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0402S,R4
         MVC   E0402ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0402P7A,DFHBMASD  HIDE PF7
         MVI   E0402P8A,DFHBMASD  HIDE PF8
         MVI   E0402PAA,DFHBMASD  HIDE PF10
         MVI   E0402PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20402S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20402S4 EQU   *
         XC    E0402DIL,E0402DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20402S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0402PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20402S6           EXIT
*
K20402S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20402NP           EXIT IF NOT
* REDISPLAY MODE
K20402S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0402PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0402DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0402DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0402DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0402DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20402DC        CONVERT TO DECIMAL
         UNPK  E0402DTO+1(3),K20402DC+6(2) UNPACK NUMITEMS
         OI    E0402DTO+3,X'F0'   SET SIGN
         MVI   E0402DTO,C'/'      SET /
         MVC   E0402ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20402DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20402DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K204027P           EXIT IF NOT
         MVI   E0402P7A,DFHBMASB  SHOW PF7
K204027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K204028P           EXIT IF NOT
         MVI   E0402P8A,DFHBMASB  SHOW PF8
K204028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20402AP           EXIT IF NOT
         MVI   E0402PAA,DFHBMASB  SHOW PF10
K20402AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20402NP           EXIT IF NOT
         MVI   E0402PBA,DFHBMASB  SHOW PF11
K20402NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20402SN           EXIT IF IT IS
* ONLY 'AFTER' IS LIKELY TO HAVE INPUT AREA FOR CONVERSION
         MVI   E0402P2A,DFHBMASD  HIDE PF2
         CLI   E0402STO,C'A'      'BEFORE' ?
         BE    K20402SN           EXIT IF IT IS
* 'AFTER' RECEIVE
         CLI   E0402INO,C'('      ANY INTO ?
         BNE   K20402SN           EXIT IF NOT
* 'AFTER' RECEIVE AND INTO
         MVI   E0402P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20402M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20402NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20402M2           EXIT
*
K20402M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20402NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20402M2 EQU   *
         PACK  K20402SC,E0402LIO+1(5) PACK INTO LENGTH
         CLI   E0402LDO,C'L'      ANY LENGTH OF DATA ?
         BNE   K20402ND           EXIT IF NOT
         PACK  K20402SC,E0402LDO+16(5) PACK INTO DATA LENGTH
K20402ND EQU   *
         CVB   R8,K20402SC        CONVERT TO BINARY
         CHI   R8,61              >61 ?
         BNH   K20402EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20402EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20402SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20402SI        SAVE INTO
         EX    R8,K20402IE        INTO TO EBCDIC
         MVC   E0402MDO,=CL6'EBCDIC' SET MODE
         B     K20402SN           EXIT
*
K20402NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20402M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K20402NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20402M4           EXIT
*
K20402M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20402NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20402M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20402SC        RESTORE LENGTH FOR EX
         EX    R8,K20402RI        MOVE INTO BACK
         EX    R8,K20402IA        INTO TO ASCII
         MVC   E0402MDO,=CL6'ASCII' SET MODE
         B     K20402SN           EXIT
*
K20402NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20402M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K20402NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20402M6           EXIT
*
K20402M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20402NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20402M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20402SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20402TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20402SV        SOURCE ADDRESS
         XC    E0402INO+1(62),E0402INO+1 CLEAR INTO DISPLAY
         MVHHI E0402INO+1,C'X'''  MOVE X'
         LA    R14,E0402INO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20402HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20402HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0402INO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0402MDO,=CL6'HEX' SET MODE
         B     K20402SN           EXIT
*
K20402NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20402M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20402M8           EXIT
*
K20402M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20402M8 EQU   *
         XC    E0402INO+1(62),E0402INO+1 CLEAR INTO DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20402SC        RESTORE LENGTH-1 FOR EX
         EX    R8,K20402RI        MOVE INTO BACK
         EX    R8,K20402IE        INTO TO EBCDIC
         LA    R5,E0402INO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
         MVC   E0402MDO,=CL6'EBCDIC' SET MODE
K20402SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0402') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0402          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20402DC DC    PL8'0'
K20402SC DC    PL8'0'
K20402SV DS    XL61
K20402SI MVC   K20402SV(0),E0402INO+1 SAVE INTO
K20402IE TR    E0402INO+1(0),K20402TE INTO TO EBCDIC
K20402RI MVC   E0402INO+1(0),K20402SV MOVE INTO BACK
K20402IA TR    E0402INO+1(0),K20402TA INTO TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20402TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20402TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20402TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50402   DS    0H
         USING *,R6
* PF5  : RECEIVE
* WORKING STORAGE DISPLAY
         USING EDF0402S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0402TSO   MOVE TRANSID
         MVC   EWKSPGO,E0402PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0402TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0402L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70402   DS    0H
         USING *,R6
* PF7  : RECEIVE
* REDISPLAY BACK 1
         USING EDF0402S,R4
         CLI   E0402P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70402DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70402DP,=P'1'     BACK 1
         CVB   R8,K70402DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70402DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0402P7A,DFHBMASD  HIDE PF7
         MVI   E0402P8A,DFHBMASB  SHOW PF8
         MVI   E0402PAA,DFHBMASD  HIDE PF10
         MVI   E0402PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K704027P           EXIT IF NOT
         MVI   E0402P7A,DFHBMASB  SHOW PF7
K704027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70402AP           EXIT IF NOT
         MVI   E0402PAA,DFHBMASB  SHOW PF10
K70402AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70402BP           EXIT IF NOT
         MVI   E0402PBA,DFHBMASB  SHOW PF11
K70402BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70402IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70402IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70402DP DC    PL8'0'
K70402IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80402   DS    0H
         USING *,R6
* PF8  : RECEIVE
* REDISPLAY FORWARD 1
         USING EDF0402S,R4
         CLI   E0402P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80402DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80402DP,=P'1'     FORWARD 1
         CVB   R8,K80402DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80402DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0402P7A,DFHBMASB  SHOW PF7
         MVI   E0402P8A,DFHBMASD  HIDE PF8
         MVI   E0402PAA,DFHBMASD  HIDE PF10
         MVI   E0402PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K804028P           EXIT IF NOT
         MVI   E0402P8A,DFHBMASB  SHOW PF8
K804028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80402AP           EXIT IF NOT
         MVI   E0402PAA,DFHBMASB  SHOW PF10
K80402AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80402BP           EXIT IF NOT
         MVI   E0402PBA,DFHBMASB  SHOW PF11
K80402BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80402IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80402IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80402DP DC    PL8'0'
K80402IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0402   DS    0H
         USING *,R6
* PF10 : RECEIVE
* REDISPLAY BACK 5
         USING EDF0402S,R4
         CLI   E0402PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0402DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0402DP,=P'5'     BACK 5
         CVB   R8,KA0402DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0402DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0402P7A,DFHBMASD  HIDE PF7
         MVI   E0402P8A,DFHBMASD  HIDE PF8
         MVI   E0402PAA,DFHBMASD  HIDE PF10
         MVI   E0402PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA04027P           EXIT IF NOT
         MVI   E0402P7A,DFHBMASB  SHOW PF7
KA04027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA04028P           EXIT IF NOT
         MVI   E0402P8A,DFHBMASB  SHOW PF8
KA04028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0402AP           EXIT IF NOT
         MVI   E0402PAA,DFHBMASB  SHOW PF10
KA0402AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0402IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0402IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0402DP DC    PL8'0'
KA0402IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0402   DS    0H
         USING *,R6
* PF11 : RECEIVE
* REDISPLAY FORWARD 5
         USING EDF0402S,R4
         CLI   E0402PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0402DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0402DP,=P'5'     FORWARD 5
         CVB   R8,KB0402DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0402DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0402P7A,DFHBMASD  HIDE PF7
         MVI   E0402P8A,DFHBMASD  HIDE PF8
         MVI   E0402PAA,DFHBMASB  SHOW PF10
         MVI   E0402PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB04027P           EXIT IF NOT
         MVI   E0402P7A,DFHBMASB  SHOW PF7
KB04027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB04028P           EXIT IF NOT
         MVI   E0402P8A,DFHBMASB  SHOW PF8
KB04028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0402BP           EXIT IF NOT
         MVI   E0402PBA,DFHBMASB  SHOW PF11
KB0402BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0402IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0402IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0402DP DC    PL8'0'
KB0402IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0402   DS    0H
         USING *,R6
* PF12 : RECEIVE
         USING EDF0402S,R4
         XC    KC0402RP,KC0402RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0402RP) LENGTH(KC0402LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0402RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0402L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0402') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0402BS           EXIT IF IT IS
         TM    E0402DIF,DFHBMEOF  ANY DATA ?
         BO    KC0402BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0402DII  SAVE INPUT REDISPLAY NUMBER
KC0402BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0402RP DS    CL50               RECEIVE AREA
KC0402LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20404   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : SEND
* PF12 : SEND - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0404S,R4
         MVC   E0404ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0404P7A,DFHBMASD  HIDE PF7
         MVI   E0404P8A,DFHBMASD  HIDE PF8
         MVI   E0404PAA,DFHBMASD  HIDE PF10
         MVI   E0404PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20404S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20404S4 EQU   *
         XC    E0404DIL,E0404DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20404S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0404PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20404S6           EXIT
*
K20404S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20404NP           EXIT IF NOT
* REDISPLAY MODE
K20404S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0404PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0404DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0404DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0404DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0404DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20404DC        CONVERT TO DECIMAL
         UNPK  E0404DTO+1(3),K20404DC+6(2) UNPACK NUMITEMS
         OI    E0404DTO+3,X'F0'   SET SIGN
         MVI   E0404DTO,C'/'      SET /
         MVC   E0404ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20404DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20404DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K204047P           EXIT IF NOT
         MVI   E0404P7A,DFHBMASB  SHOW PF7
K204047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K204048P           EXIT IF NOT
         MVI   E0404P8A,DFHBMASB  SHOW PF8
K204048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20404AP           EXIT IF NOT
         MVI   E0404PAA,DFHBMASB  SHOW PF10
K20404AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20404NP           EXIT IF NOT
         MVI   E0404PBA,DFHBMASB  SHOW PF11
K20404NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20404SN           EXIT IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20404M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20404NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20404M2           EXIT
*
K20404M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20404NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20404M2 EQU   *
         PACK  K20404SC,E0404LNO+1(5) PACK FROM LENGTH
         CVB   R8,K20404SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20404LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20404EX           EXIT
*
K20404LK EQU   *
         CHI   R8,69              >69 ?
         BNH   K20404EX           EXIT IF NOT
         LA    R8,69              SET MAXIMUM LENGTH
K20404EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20404SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20404MF        SAVE FROM
         EX    R8,K20404RE        FROM TO EBCDIC
         MVC   E0404MDO,=CL6'EBCDIC' SET MODE
         B     K20404SN           EXIT
*
K20404NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20404M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K20404NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20404M4           EXIT
*
K20404M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20404NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20404M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20404SC        RESTORE LENGTH FOR EX
         EX    R8,K20404FB        MOVE FROM BACK
         EX    R8,K20404FA        FROM TO ASCII
         MVC   E0404MDO,=CL6'ASCII' SET MODE
         B     K20404SN           EXIT
*
K20404NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20404M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K20404NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20404M6           EXIT
*
K20404M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20404NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20404M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20404SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 69 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 69-3=66/2=33
         LA    R15,1(R8)          R15=FROM LENGTH
         LA    R1,K20404TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20404FR        SOURCE ADDRESS
         XC    E0404FMO+1(70),E0404FMO+1 CLEAR FROM DISPLAY
         MVHHI E0404FMO+1,C'X'''  MOVE X'
         LA    R14,E0404FMO+3     DESTINATION ADDRESS
         CHI   R15,33             >33 ?
         BNH   K20404HX           EXIT IF NOT
         LA    R15,33             SET MAXIMUM
K20404HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0404FMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0404MDO,=CL6'HEX' SET MODE
         B     K20404SN           EXIT
*
K20404NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20404M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20404M8           EXIT
*
K20404M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20404M8 EQU   *
         XC    E0404FMO+1(70),E0404FMO+1 CLEAR FROM DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20404SC        RESTORE LENGTH-1 FOR EX
         EX    R8,K20404FB        MOVE FROM BACK
         EX    R8,K20404RE        FROM TO EBCDIC
         LA    R5,E0404FMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
         MVC   E0404MDO,=CL6'EBCDIC' SET MODE
K20404SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0404') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0404          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20404DC DC    PL8'0'
K20404SC DC    PL8'0'
K20404FR DS    XL69
K20404MF MVC   K20404FR(0),E0404FMO+1 SAVE FROM
K20404RE TR    E0404FMO+1(0),K20404TE FROM TO EBCDIC
K20404FB MVC   E0404FMO+1(0),K20404FR MOVE FROM BACK
K20404FA TR    E0404FMO+1(0),K20404TA FROM TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20404TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20404TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20404TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50404   DS    0H
         USING *,R6
* PF5  : SEND
* WORKING STORAGE DISPLAY
         USING EDF0404S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0404TSO   MOVE TRANSID
         MVC   EWKSPGO,E0404PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0404TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0404L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70404   DS    0H
         USING *,R6
* PF7  : SEND
* REDISPLAY BACK 1
         USING EDF0404S,R4
         CLI   E0404P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70404DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70404DP,=P'1'     BACK 1
         CVB   R8,K70404DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70404DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0404P7A,DFHBMASD  HIDE PF7
         MVI   E0404P8A,DFHBMASB  SHOW PF8
         MVI   E0404PAA,DFHBMASD  HIDE PF10
         MVI   E0404PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K704047P           EXIT IF NOT
         MVI   E0404P7A,DFHBMASB  SHOW PF7
K704047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70404AP           EXIT IF NOT
         MVI   E0404PAA,DFHBMASB  SHOW PF10
K70404AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70404BP           EXIT IF NOT
         MVI   E0404PBA,DFHBMASB  SHOW PF11
K70404BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70404IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70404IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70404DP DC    PL8'0'
K70404IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80404   DS    0H
         USING *,R6
* PF8  : SEND
* REDISPLAY FORWARD 1
         USING EDF0404S,R4
         CLI   E0404P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80404DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80404DP,=P'1'     FORWARD 1
         CVB   R8,K80404DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80404DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0404P7A,DFHBMASB  SHOW PF7
         MVI   E0404P8A,DFHBMASD  HIDE PF8
         MVI   E0404PAA,DFHBMASD  HIDE PF10
         MVI   E0404PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K804048P           EXIT IF NOT
         MVI   E0404P8A,DFHBMASB  SHOW PF8
K804048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80404AP           EXIT IF NOT
         MVI   E0404PAA,DFHBMASB  SHOW PF10
K80404AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80404BP           EXIT IF NOT
         MVI   E0404PBA,DFHBMASB  SHOW PF11
K80404BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80404IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80404IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80404DP DC    PL8'0'
K80404IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0404   DS    0H
         USING *,R6
* PF10 : SEND
* REDISPLAY BACK 5
         USING EDF0404S,R4
         CLI   E0404PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0404DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0404DP,=P'5'     BACK 5
         CVB   R8,KA0404DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0404DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0404P7A,DFHBMASD  HIDE PF7
         MVI   E0404P8A,DFHBMASD  HIDE PF8
         MVI   E0404PAA,DFHBMASD  HIDE PF10
         MVI   E0404PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA04047P           EXIT IF NOT
         MVI   E0404P7A,DFHBMASB  SHOW PF7
KA04047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA04048P           EXIT IF NOT
         MVI   E0404P8A,DFHBMASB  SHOW PF8
KA04048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0404AP           EXIT IF NOT
         MVI   E0404PAA,DFHBMASB  SHOW PF10
KA0404AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0404IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0404IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0404DP DC    PL8'0'
KA0404IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0404   DS    0H
         USING *,R6
* PF11 : SEND
* REDISPLAY FORWARD 5
         USING EDF0404S,R4
         CLI   E0404PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0404DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0404DP,=P'5'     FORWARD 5
         CVB   R8,KB0404DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0404DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0404P7A,DFHBMASD  HIDE PF7
         MVI   E0404P8A,DFHBMASD  HIDE PF8
         MVI   E0404PAA,DFHBMASB  SHOW PF10
         MVI   E0404PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB04047P           EXIT IF NOT
         MVI   E0404P7A,DFHBMASB  SHOW PF7
KB04047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB04048P           EXIT IF NOT
         MVI   E0404P8A,DFHBMASB  SHOW PF8
KB04048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0404BP           EXIT IF NOT
         MVI   E0404PBA,DFHBMASB  SHOW PF11
KB0404BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0404IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0404IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0404DP DC    PL8'0'
KB0404IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0404   DS    0H
         USING *,R6
* PF12 : SEND
         USING EDF0404S,R4
         XC    KC0404RP,KC0404RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0404RP) LENGTH(KC0404LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0404RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0404L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0404') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0404BS           EXIT IF IT IS
         TM    E0404DIF,DFHBMEOF  ANY DATA ?
         BO    KC0404BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0404DII  SAVE INPUT REDISPLAY NUMBER
KC0404BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0404RP DS    CL50               RECEIVE AREA
KC0404LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20602   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : READ
* PF12 : READ - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0602S,R4
         MVC   E0602ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0602P7A,DFHBMASD  HIDE PF7
         MVI   E0602P8A,DFHBMASD  HIDE PF8
         MVI   E0602PAA,DFHBMASD  HIDE PF10
         MVI   E0602PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20602S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20602S4 EQU   *
         XC    E0602DIL,E0602DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20602S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0602PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20602S6           EXIT
*
K20602S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602NP           EXIT IF NOT
* REDISPLAY MODE
K20602S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0602PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0602DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0602DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0602DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0602DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20602DC        CONVERT TO DECIMAL
         UNPK  E0602DTO+1(3),K20602DC+6(2) UNPACK NUMITEMS
         OI    E0602DTO+3,X'F0'   SET SIGN
         MVI   E0602DTO,C'/'      SET /
         MVC   E0602ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20602DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20602DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K206027P           EXIT IF NOT
         MVI   E0602P7A,DFHBMASB  SHOW PF7
K206027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K206028P           EXIT IF NOT
         MVI   E0602P8A,DFHBMASB  SHOW PF8
K206028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20602AP           EXIT IF NOT
         MVI   E0602PAA,DFHBMASB  SHOW PF10
K20602AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20602NP           EXIT IF NOT
         MVI   E0602PBA,DFHBMASB  SHOW PF11
K20602NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20602SN           EXIT IF IT IS
         MVI   E0602P2A,DFHBMASD  HIDE PF2
* INTO (...//...)
         CLI   E0602ISO,C'S'      SET ?
         BE    K20602DI           EXIT IF IT IS
         CLI   E0602ISO+15,C'('   ANY INTO ?
         BNE   K20602DI           EXIT IF NONE
         MVI   E0602P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20602M2           EXIT IF IT IS
         B     K206022R           EXIT
*
K20602M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K206022R           EXIT IF NOT
K20602M2 EQU   *
         PACK  K20602IC,E0602LIO+16(11) PACK INTO LENGTH
         CLI   E0602LDO,C'L'      ANY LENGTH OF DATA ?
         BNE   K20602ND           EXIT IF NOT
         PACK  K20602IC,E0602LDO+16(11) PACK INTO DATA LENGTH
K20602ND EQU   *
         CVB   R8,K20602IC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20602LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20602EX           EXIT
*
K20602LK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20602EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20602EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20602IC        SAVE DISPLAY LENGTH-1
         EX    R8,K20602MI        SAVE INTO
         EX    R8,K20602RE        INTO TO EBCDIC
         B     K20602DI           EXIT
*
K206022R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20602M4           EXIT IF IT IS
         B     K206022E           EXIT
*
K20602M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K206022E           EXIT IF NOT
K20602M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602IC        RESTORE LENGTH FOR EX
         EX    R8,K20602IB        MOVE INTO BACK
         EX    R8,K20602IA        INTO TO ASCII
         B     K20602DI           EXIT
*
K206022E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20602M6           EXIT IF IT IS
         B     K206022A           EXIT
*
K20602M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K206022A           EXIT IF NOT
K20602M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602IC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20602TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20602IN        SOURCE ADDRESS
         XC    E0602ISO+16(63),E0602ISO+16 CLEAR INTO DISPLAY
         MVHHI E0602ISO+16,C'X'''  MOVE X'
         LA    R14,E0602ISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20602HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20602HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0602ISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20602DI           EXIT
*
K206022A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602IC        RESTORE LENGTH-1 FOR EX
         XC    E0602ISO+16(63),E0602ISO+16 CLEAR INTO DISPLAY
         EX    R8,K20602IB        MOVE INTO BACK
         EX    R8,K20602RE        INTO TO EBCDIC
         LA    R5,E0602ISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K20602DI EQU   *
* RIDFLD
         CLI   E0602RBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K20602SM           EXIT IF THERE IS
         MVI   E0602P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20602M8           EXIT IF IT IS
         B     K206023R           EXIT
*
K20602M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K206023R           EXIT IF NOT
K20602M8 EQU   *
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
         PACK  K20602D2,E0602RLO+16(5) PACK RIDFLD LENGTH
         CLI   E0602KLO,C'K'      ANY KEYLENGTH ?
         BNE   K20602NK           EXIT IF NONE
         CLC   E0602KLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K20602NK           EXIT IF IT IS
         PACK  K20602D2,E0602KLO+16(5) PACK KEYLENGTH
K20602NK EQU   *
         CVB   R8,K20602D2        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20602RK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20602RX           EXIT
*
K20602RK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20602RX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20602RX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20602D2        SAVE DISPLAY LENGTH-1
         EX    R8,K20602MD        SAVE RIDFLD
         EX    R8,K20602DE        RIDFLD TO EBCDIC
         B     K20602SM           EXIT
*
K206023R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20602MA           EXIT IF IT IS
         B     K206023E           EXIT
*
K20602M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K206023E           EXIT IF NOT
K20602MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602D2        RESTORE LENGTH FOR EX
         EX    R8,K20602DB        MOVE RIDFLD BACK
         EX    R8,K20602DA        RIDFLD TO ASCII
         B     K20602SM           EXIT
*
K206023E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20602MC           EXIT IF IT IS
         B     K206023A           EXIT
*
K20602MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K206023A           EXIT IF NOT
K20602MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602D2        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K20602TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20602RI        SOURCE ADDRESS
         XC    E0602RIO+1(63),E0602RIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E0602RIO+1,C'X'''  MOVE X'
         LA    R14,E0602RIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20602DX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20602DX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0602RIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20602SM           EXIT
*
K206023A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20602D2        RESTORE LENGTH-1 FOR EX
         XC    E0602RIO+1(63),E0602RIO+1 CLEAR RIDFLD DISPLAY
         EX    R8,K20602DB        MOVE RIDFLD BACK
         EX    R8,K20602DE        RIDFLD TO EBCDIC
         LA    R5,E0602RIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
K20602SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   E0602P2A,DFHBMASD  PF2 HIDDEN ?
         BE    K20602SN           EXIT IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20602NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20602MK           EXIT
*
K20602MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20602NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20602MK EQU   *
         MVC   E0602MDO,=CL6'EBCDIC' SET MODE
         B     K20602SN           EXIT
*
K20602NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K20602NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20602MM           EXIT
*
K20602ML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K20602NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20602MM EQU   *
         MVC   E0602MDO,=CL6'ASCII' SET MODE
         B     K20602SN           EXIT
*
K20602NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K20602NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20602MO           EXIT
*
K20602MN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K20602NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20602MO EQU   *
         MVC   E0602MDO,=CL6'HEX' SET MODE
         B     K20602SN           EXIT
*
K20602NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20602MP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20602MQ           EXIT
*
K20602MP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20602MQ EQU   *
         MVC   E0602MDO,=CL6'EBCDIC' SET MODE
K20602SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0602') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0602          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20602MI MVC   K20602IN(0),E0602ISO+16 SAVE INTO
K20602RE TR    E0602ISO+16(0),K20602TE INTO TO EBCDIC
K20602IB MVC   E0602ISO+16(0),K20602IN MOVE INTO BACK
K20602IA TR    E0602ISO+16(0),K20602TA INTO TO ASCII
K20602MD MVC   K20602RI(0),E0602RIO+1 SAVE RIDFLD
K20602DE TR    E0602RIO+1(0),K20602TE RIDFLD TO EBCDIC
K20602DB MVC   E0602RIO+1(0),K20602RI MOVE RIDFLD BACK
K20602DA TR    E0602RIO+1(0),K20602TA RIDFLD TO ASCII
*
K20602DC DC    PL8'0'
K20602IC DC    PL8'0'
K20602D2 DC    PL8'0'
K20602IN DS    XL61               INTO
K20602RI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20602TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20602TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20602TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50602   DS    0H
         USING *,R6
* PF5  : READ
* WORKING STORAGE DISPLAY
         USING EDF0602S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0602TSO   MOVE TRANSID
         MVC   EWKSPGO,E0602PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0602TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0602L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70602   DS    0H
         USING *,R6
* PF7  : READ
* REDISPLAY BACK 1
         USING EDF0602S,R4
         CLI   E0602P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70602DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70602DP,=P'1'     BACK 1
         CVB   R8,K70602DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70602DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0602P7A,DFHBMASD  HIDE PF7
         MVI   E0602P8A,DFHBMASB  SHOW PF8
         MVI   E0602PAA,DFHBMASD  HIDE PF10
         MVI   E0602PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K706027P           EXIT IF NOT
         MVI   E0602P7A,DFHBMASB  SHOW PF7
K706027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70602AP           EXIT IF NOT
         MVI   E0602PAA,DFHBMASB  SHOW PF10
K70602AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70602BP           EXIT IF NOT
         MVI   E0602PBA,DFHBMASB  SHOW PF11
K70602BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70602IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70602IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70602DP DC    PL8'0'
K70602IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80602   DS    0H
         USING *,R6
* PF8  : READ
* REDISPLAY FORWARD 1
         USING EDF0602S,R4
         CLI   E0602P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80602DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80602DP,=P'1'     FORWARD 1
         CVB   R8,K80602DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80602DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0602P7A,DFHBMASB  SHOW PF7
         MVI   E0602P8A,DFHBMASD  HIDE PF8
         MVI   E0602PAA,DFHBMASD  HIDE PF10
         MVI   E0602PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K806028P           EXIT IF NOT
         MVI   E0602P8A,DFHBMASB  SHOW PF8
K806028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80602AP           EXIT IF NOT
         MVI   E0602PAA,DFHBMASB  SHOW PF10
K80602AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80602BP           EXIT IF NOT
         MVI   E0602PBA,DFHBMASB  SHOW PF11
K80602BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80602IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80602IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80602DP DC    PL8'0'
K80602IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0602   DS    0H
         USING *,R6
* PF10 : READ
* REDISPLAY BACK 5
         USING EDF0602S,R4
         CLI   E0602PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0602DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0602DP,=P'5'     BACK 5
         CVB   R8,KA0602DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0602DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0602P7A,DFHBMASD  HIDE PF7
         MVI   E0602P8A,DFHBMASD  HIDE PF8
         MVI   E0602PAA,DFHBMASD  HIDE PF10
         MVI   E0602PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA06027P           EXIT IF NOT
         MVI   E0602P7A,DFHBMASB  SHOW PF7
KA06027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA06028P           EXIT IF NOT
         MVI   E0602P8A,DFHBMASB  SHOW PF8
KA06028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0602AP           EXIT IF NOT
         MVI   E0602PAA,DFHBMASB  SHOW PF10
KA0602AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0602IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0602IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0602DP DC    PL8'0'
KA0602IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0602   DS    0H
         USING *,R6
* PF11 : READ
* REDISPLAY FORWARD 5
         USING EDF0602S,R4
         CLI   E0602PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0602DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0602DP,=P'5'     FORWARD 5
         CVB   R8,KB0602DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0602DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0602P7A,DFHBMASD  HIDE PF7
         MVI   E0602P8A,DFHBMASD  HIDE PF8
         MVI   E0602PAA,DFHBMASB  SHOW PF10
         MVI   E0602PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB06027P           EXIT IF NOT
         MVI   E0602P7A,DFHBMASB  SHOW PF7
KB06027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB06028P           EXIT IF NOT
         MVI   E0602P8A,DFHBMASB  SHOW PF8
KB06028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0602BP           EXIT IF NOT
         MVI   E0602PBA,DFHBMASB  SHOW PF11
KB0602BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0602IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0602IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0602DP DC    PL8'0'
KB0602IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0602   DS    0H
         USING *,R6
* PF12 : READ
         USING EDF0602S,R4
         XC    KC0602RP,KC0602RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0602RP) LENGTH(KC0602LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0602RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0602L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0602') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0602BS           EXIT IF IT IS
         TM    E0602DIF,DFHBMEOF  ANY DATA ?
         BO    KC0602BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0602DII  SAVE INPUT REDISPLAY NUMBER
KC0602BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0602RP DS    CL50               RECEIVE AREA
KC0602LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K2060C   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : STARTBR
* PF12 : STARTBR - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF060CS,R4
         MVC   E060CENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E060CP7A,DFHBMASD  HIDE PF7
         MVI   E060CP8A,DFHBMASD  HIDE PF8
         MVI   E060CPAA,DFHBMASD  HIDE PF10
         MVI   E060CPBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2060CS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2060CS4 EQU   *
         XC    E060CDIL,E060CDIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2060CS5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E060CPCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2060CS6           EXIT
*
K2060CS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060CNP           EXIT IF NOT
* REDISPLAY MODE
K2060CS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E060CPCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E060CDYA,DFHBMASB  SET DISPLAY ON
         MVI   E060CDIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E060CDIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E060CDIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2060CDC        CONVERT TO DECIMAL
         UNPK  E060CDTO+1(3),K2060CDC+6(2) UNPACK NUMITEMS
         OI    E060CDTO+3,X'F0'   SET SIGN
         MVI   E060CDTO,C'/'      SET /
         MVC   E060CENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2060CDC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2060CDC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2060C7P           EXIT IF NOT
         MVI   E060CP7A,DFHBMASB  SHOW PF7
K2060C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2060C8P           EXIT IF NOT
         MVI   E060CP8A,DFHBMASB  SHOW PF8
K2060C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2060CAP           EXIT IF NOT
         MVI   E060CPAA,DFHBMASB  SHOW PF10
K2060CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2060CNP           EXIT IF NOT
         MVI   E060CPBA,DFHBMASB  SHOW PF11
K2060CNP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2060CSN           EXIT IF IT IS
* RIDFLD
         CLI   E060CRBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K2060CSN           EXIT IF THERE IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060CM1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K2060C3R           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2060CM2           EXIT
*
K2060CM1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2060C3R           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2060CM2 EQU   *
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K2060CSC,E060CRLO+16(5) PACK RIDFLD LENGTH
         CLI   E060CSTO,C'A'      'BEFORE' ?
         BNE   K2060CNK           EXIT IF NOT
         CLI   E060CKLO,C'K'      ANY KEYLENGTH ?
         BNE   K2060CNK           EXIT IF NONE
         CLC   E060CKLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K2060CNK           EXIT IF IT IS
         PACK  K2060CSC,E060CKLO+16(5) PACK KEYLENGTH
K2060CNK EQU   *
         CVB   R8,K2060CSC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2060CRK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2060CRX           EXIT
*
K2060CRK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2060CRX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2060CRX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2060CSC        SAVE DISPLAY LENGTH-1
         EX    R8,K2060CMD        SAVE RIDFLD
         EX    R8,K2060CDE        RIDFLD TO EBCDIC
         MVC   E060CMDO,=CL6'EBCDIC' SET MODE
         B     K2060CSN           EXIT
*
K2060C3R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060CM3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K2060C3E           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K2060CM4           EXIT
*
K2060CM3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2060C3E           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K2060CM4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060CSC        RESTORE LENGTH FOR EX
         EX    R8,K2060CDB        MOVE RIDFLD BACK
         EX    R8,K2060CDA        RIDFLD TO ASCII
         MVC   E060CMDO,=CL6'ASCII' SET MODE
         B     K2060CSN           EXIT
*
K2060C3E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060CM5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K2060C3A           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K2060CM6           EXIT
*
K2060CM5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2060C3A           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K2060CM6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060CSC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K2060CTH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2060CRI        SOURCE ADDRESS
         XC    E060CRIO+1(63),E060CRIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E060CRIO+1,C'X'''  MOVE X'
         LA    R14,E060CRIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2060CDX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2060CDX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E060CRIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E060CMDO,=CL6'HEX' SET MODE
         B     K2060CSN           EXIT
*
K2060C3A EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060CM7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2060CM8           EXIT
*
K2060CM7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2060CM8 EQU   *
         XC    E060CRIO+1(63),E060CRIO+1 CLEAR RIDFLD DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060CSC        RESTORE LENGTH-1 FOR EX
         EX    R8,K2060CDB        MOVE RIDFLD BACK
         EX    R8,K2060CDE        RIDFLD TO EBCDIC
         LA    R5,E060CRIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
         MVC   E060CMDO,=CL6'EBCDIC' SET MODE
K2060CSN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF060C') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC060C          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2060CDC DC    PL8'0'
K2060CSC DC    PL8'0'
K2060CRI DS    XL61               RIDFLD
K2060CMD MVC   K2060CRI(0),E060CRIO+1 SAVE RIDFLD
K2060CDE TR    E060CRIO+1(0),K2060CTE RIDFLD TO EBCDIC
K2060CDB MVC   E060CRIO+1(0),K2060CRI MOVE RIDFLD BACK
K2060CDA TR    E060CRIO+1(0),K2060CTA RIDFLD TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2060CTE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2060CTA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2060CTH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K5060C   DS    0H
         USING *,R6
* PF5  : STARTBR
* WORKING STORAGE DISPLAY
         USING EDF060CS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E060CTSO   MOVE TRANSID
         MVC   EWKSPGO,E060CPGO   MOVE PROGRAM
         MVC   EWKSTNO,E060CTNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF060CL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7060C   DS    0H
         USING *,R6
* PF7  : STARTBR
* REDISPLAY BACK 1
         USING EDF060CS,R4
         CLI   E060CP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7060CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7060CDP,=P'1'     BACK 1
         CVB   R8,K7060CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7060CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060CP7A,DFHBMASD  HIDE PF7
         MVI   E060CP8A,DFHBMASB  SHOW PF8
         MVI   E060CPAA,DFHBMASD  HIDE PF10
         MVI   E060CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7060C7P           EXIT IF NOT
         MVI   E060CP7A,DFHBMASB  SHOW PF7
K7060C7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7060CAP           EXIT IF NOT
         MVI   E060CPAA,DFHBMASB  SHOW PF10
K7060CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7060CBP           EXIT IF NOT
         MVI   E060CPBA,DFHBMASB  SHOW PF11
K7060CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7060CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7060CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7060CDP DC    PL8'0'
K7060CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8060C   DS    0H
         USING *,R6
* PF8  : STARTBR
* REDISPLAY FORWARD 1
         USING EDF060CS,R4
         CLI   E060CP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8060CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8060CDP,=P'1'     FORWARD 1
         CVB   R8,K8060CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8060CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060CP7A,DFHBMASB  SHOW PF7
         MVI   E060CP8A,DFHBMASD  HIDE PF8
         MVI   E060CPAA,DFHBMASD  HIDE PF10
         MVI   E060CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8060C8P           EXIT IF NOT
         MVI   E060CP8A,DFHBMASB  SHOW PF8
K8060C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8060CAP           EXIT IF NOT
         MVI   E060CPAA,DFHBMASB  SHOW PF10
K8060CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8060CBP           EXIT IF NOT
         MVI   E060CPBA,DFHBMASB  SHOW PF11
K8060CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8060CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8060CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8060CDP DC    PL8'0'
K8060CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA060C   DS    0H
         USING *,R6
* PF10 : STARTBR
* REDISPLAY BACK 5
         USING EDF060CS,R4
         CLI   E060CPAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA060CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA060CDP,=P'5'     BACK 5
         CVB   R8,KA060CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA060CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060CP7A,DFHBMASD  HIDE PF7
         MVI   E060CP8A,DFHBMASD  HIDE PF8
         MVI   E060CPAA,DFHBMASD  HIDE PF10
         MVI   E060CPBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA060C7P           EXIT IF NOT
         MVI   E060CP7A,DFHBMASB  SHOW PF7
KA060C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA060C8P           EXIT IF NOT
         MVI   E060CP8A,DFHBMASB  SHOW PF8
KA060C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA060CAP           EXIT IF NOT
         MVI   E060CPAA,DFHBMASB  SHOW PF10
KA060CAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA060CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA060CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA060CDP DC    PL8'0'
KA060CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB060C   DS    0H
         USING *,R6
* PF11 : STARTBR
* REDISPLAY FORWARD 5
         USING EDF060CS,R4
         CLI   E060CPBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB060CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB060CDP,=P'5'     FORWARD 5
         CVB   R8,KB060CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB060CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060CP7A,DFHBMASD  HIDE PF7
         MVI   E060CP8A,DFHBMASD  HIDE PF8
         MVI   E060CPAA,DFHBMASB  SHOW PF10
         MVI   E060CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB060C7P           EXIT IF NOT
         MVI   E060CP7A,DFHBMASB  SHOW PF7
KB060C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB060C8P           EXIT IF NOT
         MVI   E060CP8A,DFHBMASB  SHOW PF8
KB060C8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB060CBP           EXIT IF NOT
         MVI   E060CPBA,DFHBMASB  SHOW PF11
KB060CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB060CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB060CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB060CDP DC    PL8'0'
KB060CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC060C   DS    0H
         USING *,R6
* PF12 : STARTBR
         USING EDF060CS,R4
         XC    KC060CRP,KC060CRP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC060CRP) LENGTH(KC060CLP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC060CRP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF060CL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF060C') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC060CBS           EXIT IF IT IS
         TM    E060CDIF,DFHBMEOF  ANY DATA ?
         BO    KC060CBS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E060CDII  SAVE INPUT REDISPLAY NUMBER
KC060CBS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC060CRP DS    CL50               RECEIVE AREA
KC060CLP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K2060E   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : READNEXT
* PF12 : READNEXT - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF060ES,R4
         MVC   E060EENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E060EP7A,DFHBMASD  HIDE PF7
         MVI   E060EP8A,DFHBMASD  HIDE PF8
         MVI   E060EPAA,DFHBMASD  HIDE PF10
         MVI   E060EPBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2060ES4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2060ES4 EQU   *
         XC    E060EDIL,E060EDIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2060ES5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E060EPCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2060ES6           EXIT
*
K2060ES5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060ENP           EXIT IF NOT
* REDISPLAY MODE
K2060ES6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E060EPCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E060EDYA,DFHBMASB  SET DISPLAY ON
         MVI   E060EDIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E060EDIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E060EDIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2060EDC        CONVERT TO DECIMAL
         UNPK  E060EDTO+1(3),K2060EDC+6(2) UNPACK NUMITEMS
         OI    E060EDTO+3,X'F0'   SET SIGN
         MVI   E060EDTO,C'/'      SET /
         MVC   E060EENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2060EDC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2060EDC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2060E7P           EXIT IF NOT
         MVI   E060EP7A,DFHBMASB  SHOW PF7
K2060E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2060E8P           EXIT IF NOT
         MVI   E060EP8A,DFHBMASB  SHOW PF8
K2060E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2060EAP           EXIT IF NOT
         MVI   E060EPAA,DFHBMASB  SHOW PF10
K2060EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2060ENP           EXIT IF NOT
         MVI   E060EPBA,DFHBMASB  SHOW PF11
K2060ENP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2060ESN           EXIT IF IT IS
         MVI   E060EP2A,DFHBMASD  HIDE PF2
* INTO (...//...)
         CLI   E060EISO,C'S'      SET ?
         BE    K2060EDI           EXIT IF IT IS
         CLI   E060EISO+15,C'('   ANY INTO ?
         BNE   K2060EDI           EXIT IF NONE
         MVI   E060EP2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EM1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K2060EM2           EXIT IF IT IS
         B     K2060E2R           EXIT
*
K2060EM1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2060E2R           EXIT IF NOT
K2060EM2 EQU   *
         PACK  K2060ESC,E060ELIO+16(11) PACK INTO LENGTH
         CLI   E060ELDO,C'L'      ANY LENGTH OF DATA ?
         BNE   K2060END           EXIT IF NOT
         PACK  K2060ESC,E060ELDO+16(11) PACK INTO DATA LENGTH
K2060END EQU   *
         CVB   R8,K2060ESC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2060ELK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2060EEX           EXIT
*
K2060ELK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2060EEX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2060EEX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2060ESC        SAVE DISPLAY LENGTH-1
         EX    R8,K2060EMI        SAVE INTO
         EX    R8,K2060ERE        INTO TO EBCDIC
         B     K2060EDI           EXIT
*
K2060E2R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EM3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K2060EM4           EXIT IF IT IS
         B     K2060E2E           EXIT
*
K2060EM3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2060E2E           EXIT IF NOT
K2060EM4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ESC        RESTORE LENGTH FOR EX
         EX    R8,K2060EIB        MOVE INTO BACK
         EX    R8,K2060EIA        INTO TO ASCII
         B     K2060EDI           EXIT
*
K2060E2E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EM5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K2060EM6           EXIT IF IT IS
         B     K2060E2A           EXIT
*
K2060EM5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2060E2A           EXIT IF NOT
K2060EM6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ESC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K2060ETH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2060EIN        SOURCE ADDRESS
         XC    E060EISO+16(63),E060EISO+16 CLEAR INTO DISPLAY
         MVHHI E060EISO+16,C'X'''  MOVE X'
         LA    R14,E060EISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2060EHX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2060EHX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E060EISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K2060EDI           EXIT
*
K2060E2A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ESC        RESTORE LENGTH-1 FOR EX
         XC    E060EISO+16(63),E060EISO+16 CLEAR INTO DISPLAY
         EX    R8,K2060EIB        MOVE INTO BACK
         EX    R8,K2060ERE        INTO TO EBCDIC
         LA    R5,E060EISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K2060EDI EQU   *
* RIDFLD
         CLI   E060ERBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K2060ESM           EXIT IF THERE IS
         MVI   E060EP2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EM7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K2060EM8           EXIT IF IT IS
         B     K2060E3R           EXIT
*
K2060EM7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2060E3R           EXIT IF NOT
K2060EM8 EQU   *
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K2060ED2,E060ERLO+16(5) PACK RIDFLD LENGTH
         CLI   E060ESTO,C'A'      'BEFORE' ?
         BNE   K2060ENK           EXIT IF NOT
         CLI   E060EKLO,C'K'      ANY KEYLENGTH ?
         BNE   K2060ENK           EXIT IF NONE
         CLC   E060EKLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K2060ENK           EXIT IF IT IS
         PACK  K2060ED2,E060EKLO+16(5) PACK KEYLENGTH
K2060ENK EQU   *
         CVB   R8,K2060ED2        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2060ERK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2060ERX           EXIT
*
K2060ERK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2060ERX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2060ERX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2060ED2        SAVE DISPLAY LENGTH-1
         EX    R8,K2060EMD        SAVE RIDFLD
         EX    R8,K2060EDE        RIDFLD TO EBCDIC
         B     K2060ESM           EXIT
*
K2060E3R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EM9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K2060EMA           EXIT IF IT IS
         B     K2060E3E           EXIT
*
K2060EM9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2060E3E           EXIT IF NOT
K2060EMA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ED2        RESTORE LENGTH FOR EX
         EX    R8,K2060EDB        MOVE RIDFLD BACK
         EX    R8,K2060EDA        RIDFLD TO ASCII
         B     K2060ESM           EXIT
*
K2060E3E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EMB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K2060EMC           EXIT IF IT IS
         B     K2060E3A           EXIT
*
K2060EMB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2060E3A           EXIT IF NOT
K2060EMC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ED2        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K2060ETH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2060ERI        SOURCE ADDRESS
         XC    E060ERIO+1(63),E060ERIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E060ERIO+1,C'X'''  MOVE X'
         LA    R14,E060ERIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2060EDX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2060EDX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E060ERIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K2060ESM           EXIT
*
K2060E3A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2060ED2        RESTORE LENGTH-1 FOR EX
         XC    E060ERIO+1(63),E060ERIO+1 CLEAR RIDFLD DISPLAY
         EX    R8,K2060EDB        MOVE RIDFLD BACK
         EX    R8,K2060EDE        RIDFLD TO EBCDIC
         LA    R5,E060ERIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
K2060ESM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   E060EP2A,DFHBMASD  PF2 HIDDEN ?
         BE    K2060ESN           EXIT IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EMJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K2060ENR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2060EMK           EXIT
*
K2060EMJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2060ENR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2060EMK EQU   *
         MVC   E060EMDO,=CL6'EBCDIC' SET MODE
         B     K2060ESN           EXIT
*
K2060ENR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K2060ENE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K2060EMM           EXIT
*
K2060EML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K2060ENE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K2060EMM EQU   *
         MVC   E060EMDO,=CL6'ASCII' SET MODE
         B     K2060ESN           EXIT
*
K2060ENE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EMN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K2060ENA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K2060EMO           EXIT
*
K2060EMN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K2060ENA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K2060EMO EQU   *
         MVC   E060EMDO,=CL6'HEX' SET MODE
         B     K2060ESN           EXIT
*
K2060ENA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2060EMP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2060EMQ           EXIT
*
K2060EMP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2060EMQ EQU   *
         MVC   E060EMDO,=CL6'EBCDIC' SET MODE
K2060ESN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF060E') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC060E          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2060EMI MVC   K2060EIN(0),E060EISO+16 SAVE INTO
K2060ERE TR    E060EISO+16(0),K2060ETE INTO TO EBCDIC
K2060EIB MVC   E060EISO+16(0),K2060EIN MOVE INTO BACK
K2060EIA TR    E060EISO+16(0),K2060ETA INTO TO ASCII
K2060EMD MVC   K2060ERI(0),E060ERIO+1 SAVE RIDFLD
K2060EDE TR    E060ERIO+1(0),K2060ETE RIDFLD TO EBCDIC
K2060EDB MVC   E060ERIO+1(0),K2060ERI MOVE RIDFLD BACK
K2060EDA TR    E060ERIO+1(0),K2060ETA RIDFLD TO ASCII
*
K2060EDC DC    PL8'0'
K2060ESC DC    PL8'0'
K2060ED2 DC    PL8'0'
K2060EIN DS    XL61               INTO
K2060ERI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2060ETE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2060ETA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2060ETH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K5060E   DS    0H
         USING *,R6
* PF5  : READNEXT
* WORKING STORAGE DISPLAY
         USING EDF060ES,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E060ETSO   MOVE TRANSID
         MVC   EWKSPGO,E060EPGO   MOVE PROGRAM
         MVC   EWKSTNO,E060ETNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF060EL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7060E   DS    0H
         USING *,R6
* PF7  : READNEXT
* REDISPLAY BACK 1
         USING EDF060ES,R4
         CLI   E060EP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7060EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7060EDP,=P'1'     BACK 1
         CVB   R8,K7060EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7060EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060EP7A,DFHBMASD  HIDE PF7
         MVI   E060EP8A,DFHBMASB  SHOW PF8
         MVI   E060EPAA,DFHBMASD  HIDE PF10
         MVI   E060EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7060E7P           EXIT IF NOT
         MVI   E060EP7A,DFHBMASB  SHOW PF7
K7060E7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7060EAP           EXIT IF NOT
         MVI   E060EPAA,DFHBMASB  SHOW PF10
K7060EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7060EBP           EXIT IF NOT
         MVI   E060EPBA,DFHBMASB  SHOW PF11
K7060EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7060EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7060EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7060EDP DC    PL8'0'
K7060EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8060E   DS    0H
         USING *,R6
* PF8  : READNEXT
* REDISPLAY FORWARD 1
         USING EDF060ES,R4
         CLI   E060EP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8060EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8060EDP,=P'1'     FORWARD 1
         CVB   R8,K8060EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8060EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060EP7A,DFHBMASB  SHOW PF7
         MVI   E060EP8A,DFHBMASD  HIDE PF8
         MVI   E060EPAA,DFHBMASD  HIDE PF10
         MVI   E060EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8060E8P           EXIT IF NOT
         MVI   E060EP8A,DFHBMASB  SHOW PF8
K8060E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8060EAP           EXIT IF NOT
         MVI   E060EPAA,DFHBMASB  SHOW PF10
K8060EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8060EBP           EXIT IF NOT
         MVI   E060EPBA,DFHBMASB  SHOW PF11
K8060EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8060EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8060EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8060EDP DC    PL8'0'
K8060EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA060E   DS    0H
         USING *,R6
* PF10 : READNEXT
* REDISPLAY BACK 5
         USING EDF060ES,R4
         CLI   E060EPAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA060EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA060EDP,=P'5'     BACK 5
         CVB   R8,KA060EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA060EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060EP7A,DFHBMASD  HIDE PF7
         MVI   E060EP8A,DFHBMASD  HIDE PF8
         MVI   E060EPAA,DFHBMASD  HIDE PF10
         MVI   E060EPBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA060E7P           EXIT IF NOT
         MVI   E060EP7A,DFHBMASB  SHOW PF7
KA060E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA060E8P           EXIT IF NOT
         MVI   E060EP8A,DFHBMASB  SHOW PF8
KA060E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA060EAP           EXIT IF NOT
         MVI   E060EPAA,DFHBMASB  SHOW PF10
KA060EAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA060EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA060EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA060EDP DC    PL8'0'
KA060EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB060E   DS    0H
         USING *,R6
* PF11 : READNEXT
* REDISPLAY FORWARD 5
         USING EDF060ES,R4
         CLI   E060EPBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB060EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB060EDP,=P'5'     FORWARD 5
         CVB   R8,KB060EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB060EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E060EP7A,DFHBMASD  HIDE PF7
         MVI   E060EP8A,DFHBMASD  HIDE PF8
         MVI   E060EPAA,DFHBMASB  SHOW PF10
         MVI   E060EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB060E7P           EXIT IF NOT
         MVI   E060EP7A,DFHBMASB  SHOW PF7
KB060E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB060E8P           EXIT IF NOT
         MVI   E060EP8A,DFHBMASB  SHOW PF8
KB060E8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB060EBP           EXIT IF NOT
         MVI   E060EPBA,DFHBMASB  SHOW PF11
KB060EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB060EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB060EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB060EDP DC    PL8'0'
KB060EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC060E   DS    0H
         USING *,R6
* PF12 : READNEXT
         USING EDF060ES,R4
         XC    KC060ERP,KC060ERP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC060ERP) LENGTH(KC060ELP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC060ERP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF060EL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF060E') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC060EBS           EXIT IF IT IS
         TM    E060EDIF,DFHBMEOF  ANY DATA ?
         BO    KC060EBS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E060EDII  SAVE INPUT REDISPLAY NUMBER
KC060EBS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC060ERP DS    CL50               RECEIVE AREA
KC060ELP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20610   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : READPREV
* PF12 : READPREV - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0610S,R4
         MVC   E0610ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0610P7A,DFHBMASD  HIDE PF7
         MVI   E0610P8A,DFHBMASD  HIDE PF8
         MVI   E0610PAA,DFHBMASD  HIDE PF10
         MVI   E0610PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20610S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20610S4 EQU   *
         XC    E0610DIL,E0610DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20610S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0610PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20610S6           EXIT
*
K20610S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610NP           EXIT IF NOT
* REDISPLAY MODE
K20610S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0610PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0610DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0610DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0610DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0610DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20610DC        CONVERT TO DECIMAL
         UNPK  E0610DTO+1(3),K20610DC+6(2) UNPACK NUMITEMS
         OI    E0610DTO+3,X'F0'   SET SIGN
         MVI   E0610DTO,C'/'      SET /
         MVC   E0610ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20610DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20610DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K206107P           EXIT IF NOT
         MVI   E0610P7A,DFHBMASB  SHOW PF7
K206107P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K206108P           EXIT IF NOT
         MVI   E0610P8A,DFHBMASB  SHOW PF8
K206108P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20610AP           EXIT IF NOT
         MVI   E0610PAA,DFHBMASB  SHOW PF10
K20610AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20610NP           EXIT IF NOT
         MVI   E0610PBA,DFHBMASB  SHOW PF11
K20610NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20610SN           EXIT IF IT IS
         MVI   E0610P2A,DFHBMASD  HIDE PF2
* INTO (...//...)
         CLI   E0610ISO,C'S'      SET ?
         BE    K20610DI           EXIT IF IT IS
         CLI   E0610ISO+15,C'('   ANY INTO ?
         BNE   K20610DI           EXIT IF NONE
         MVI   E0610P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20610M2           EXIT IF IT IS
         B     K206102R           EXIT
*
K20610M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K206102R           EXIT IF NOT
K20610M2 EQU   *
         PACK  K20610SC,E0610LIO+16(11) PACK INTO LENGTH
         CLI   E0610LDO,C'L'      ANY LENGTH OF DATA ?
         BNE   K20610ND           EXIT IF NOT
         PACK  K20610SC,E0610LDO+16(11) PACK INTO DATA LENGTH
K20610ND EQU   *
         CVB   R8,K20610SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20610LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20610EX           EXIT
*
K20610LK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20610EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20610EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20610SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20610MI        SAVE INTO
         EX    R8,K20610RE        INTO TO EBCDIC
         B     K20610DI           EXIT
*
K206102R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20610M4           EXIT IF IT IS
         B     K206102E           EXIT
*
K20610M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K206102E           EXIT IF NOT
K20610M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610SC        RESTORE LENGTH FOR EX
         EX    R8,K20610IB        MOVE INTO BACK
         EX    R8,K20610IA        INTO TO ASCII
         B     K20610DI           EXIT
*
K206102E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20610M6           EXIT IF IT IS
         B     K206102A           EXIT
*
K20610M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K206102A           EXIT IF NOT
K20610M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20610TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20610IN        SOURCE ADDRESS
         XC    E0610ISO+16(63),E0610ISO+16 CLEAR INTO DISPLAY
         MVHHI E0610ISO+16,C'X'''  MOVE X'
         LA    R14,E0610ISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20610HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20610HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0610ISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20610DI           EXIT
*
K206102A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610SC        RESTORE LENGTH-1 FOR EX
         XC    E0610ISO+16(63),E0610ISO+16 CLEAR INTO DISPLAY
         EX    R8,K20610IB        MOVE INTO BACK
         EX    R8,K20610RE        INTO TO EBCDIC
         LA    R5,E0610ISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K20610DI EQU   *
* RIDFLD
         CLI   E0610RBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K20610SM           EXIT IF THERE IS
         MVI   E0610P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20610M8           EXIT IF IT IS
         B     K206103R           EXIT
*
K20610M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K206103R           EXIT IF NOT
K20610M8 EQU   *
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K20610D2,E0610RLO+16(5) PACK RIDFLD LENGTH
         CLI   E0610STO,C'A'      'BEFORE' ?
         BNE   K20610NK           EXIT IF MOT
         CLI   E0610KLO,C'K'      ANY KEYLENGTH ?
         BNE   K20610NK           EXIT IF NONE
         CLC   E0610KLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K20610NK           EXIT IF IT IS
         PACK  K20610D2,E0610KLO+16(5) PACK KEYLENGTH
K20610NK EQU   *
         CVB   R8,K20610D2        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20610RK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20610RX           EXIT
*
K20610RK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20610RX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20610RX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20610D2        SAVE DISPLAY LENGTH-1
         EX    R8,K20610MD        SAVE RIDFLD
         EX    R8,K20610DE        RIDFLD TO EBCDIC
         B     K20610SM           EXIT
*
K206103R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20610MA           EXIT IF IT IS
         B     K206103E           EXIT
*
K20610M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K206103E           EXIT IF NOT
K20610MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610D2        RESTORE LENGTH FOR EX
         EX    R8,K20610DB        MOVE RIDFLD BACK
         EX    R8,K20610DA        RIDFLD TO ASCII
         B     K20610SM           EXIT
*
K206103E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20610MC           EXIT IF IT IS
         B     K206103A           EXIT
*
K20610MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K206103A           EXIT IF NOT
K20610MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610D2        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K20610TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20610RI        SOURCE ADDRESS
         XC    E0610RIO+1(63),E0610RIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E0610RIO+1,C'X'''  MOVE X'
         LA    R14,E0610RIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20610DX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20610DX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0610RIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20610SM           EXIT
*
K206103A EQU   *
* HAS TO BE IN HEX MODE
         XC    E0610RIO+1(63),E0610RIO+1 CLEAR RIDFLD DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20610D2        RESTORE LENGTH-1 FOR EX
         EX    R8,K20610DB        MOVE RIDFLD BACK
         EX    R8,K20610DE        RIDFLD TO EBCDIC
         LA    R5,E0610RIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
K20610SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   E0610P2A,DFHBMASD  PF2 HIDDEN ?
         BE    K20610SN           EXIT IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20610NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20610MK           EXIT
*
K20610MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20610NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20610MK EQU   *
         MVC   E0610MDO,=CL6'EBCDIC' SET MODE
         B     K20610SN           EXIT
*
K20610NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K20610NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20610MM           EXIT
*
K20610ML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K20610NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20610MM EQU   *
         MVC   E0610MDO,=CL6'ASCII' SET MODE
         B     K20610SN           EXIT
*
K20610NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K20610NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20610MO           EXIT
*
K20610MN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K20610NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20610MO EQU   *
         MVC   E0610MDO,=CL6'HEX' SET MODE
         B     K20610SN           EXIT
*
K20610NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20610MP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20610MQ           EXIT
*
K20610MP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20610MQ EQU   *
         MVC   E0610MDO,=CL6'EBCDIC' SET MODE
K20610SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0610') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0610          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20610MI MVC   K20610IN(0),E0610ISO+16 SAVE INTO
K20610RE TR    E0610ISO+16(0),K20610TE INTO TO EBCDIC
K20610IB MVC   E0610ISO+16(0),K20610IN MOVE INTO BACK
K20610IA TR    E0610ISO+16(0),K20610TA INTO TO ASCII
K20610MD MVC   K20610RI(0),E0610RIO+1 SAVE RIDFLD
K20610DE TR    E0610RIO+1(0),K20610TE RIDFLD TO EBCDIC
K20610DB MVC   E0610RIO+1(0),K20610RI MOVE RIDFLD BACK
K20610DA TR    E0610RIO+1(0),K20610TA RIDFLD TO ASCII
*
K20610DC DC    PL8'0'
K20610SC DC    PL8'0'
K20610D2 DC    PL8'0'
K20610IN DS    XL61               INTO
K20610RI DS    XL61               RIDFLD
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20610TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20610TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20610TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50610   DS    0H
         USING *,R6
* PF5  : READPREV
* WORKING STORAGE DISPLAY
         USING EDF0610S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0610TSO   MOVE TRANSID
         MVC   EWKSPGO,E0610PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0610TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0610L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70610   DS    0H
         USING *,R6
* PF7  : READPREV
* REDISPLAY BACK 1
         USING EDF0610S,R4
         CLI   E0610P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70610DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70610DP,=P'1'     BACK 1
         CVB   R8,K70610DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70610DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0610P7A,DFHBMASD  HIDE PF7
         MVI   E0610P8A,DFHBMASB  SHOW PF8
         MVI   E0610PAA,DFHBMASD  HIDE PF10
         MVI   E0610PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K706107P           EXIT IF NOT
         MVI   E0610P7A,DFHBMASB  SHOW PF7
K706107P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70610AP           EXIT IF NOT
         MVI   E0610PAA,DFHBMASB  SHOW PF10
K70610AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70610BP           EXIT IF NOT
         MVI   E0610PBA,DFHBMASB  SHOW PF11
K70610BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70610IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70610IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70610DP DC    PL8'0'
K70610IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80610   DS    0H
         USING *,R6
* PF8  : READPREV
* REDISPLAY FORWARD 1
         USING EDF0610S,R4
         CLI   E0610P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80610DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80610DP,=P'1'     FORWARD 1
         CVB   R8,K80610DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80610DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0610P7A,DFHBMASB  SHOW PF7
         MVI   E0610P8A,DFHBMASD  HIDE PF8
         MVI   E0610PAA,DFHBMASD  HIDE PF10
         MVI   E0610PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K806108P           EXIT IF NOT
         MVI   E0610P8A,DFHBMASB  SHOW PF8
K806108P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80610AP           EXIT IF NOT
         MVI   E0610PAA,DFHBMASB  SHOW PF10
K80610AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80610BP           EXIT IF NOT
         MVI   E0610PBA,DFHBMASB  SHOW PF11
K80610BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80610IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80610IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80610DP DC    PL8'0'
K80610IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0610   DS    0H
         USING *,R6
* PF10 : READPREV
* REDISPLAY BACK 5
         USING EDF0610S,R4
         CLI   E0610PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0610DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0610DP,=P'5'     BACK 5
         CVB   R8,KA0610DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0610DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0610P7A,DFHBMASD  HIDE PF7
         MVI   E0610P8A,DFHBMASD  HIDE PF8
         MVI   E0610PAA,DFHBMASD  HIDE PF10
         MVI   E0610PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA06107P           EXIT IF NOT
         MVI   E0610P7A,DFHBMASB  SHOW PF7
KA06107P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA06108P           EXIT IF NOT
         MVI   E0610P8A,DFHBMASB  SHOW PF8
KA06108P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0610AP           EXIT IF NOT
         MVI   E0610PAA,DFHBMASB  SHOW PF10
KA0610AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0610IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0610IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0610DP DC    PL8'0'
KA0610IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0610   DS    0H
         USING *,R6
* PF11 : READPREV
* REDISPLAY FORWARD 5
         USING EDF0610S,R4
         CLI   E0610PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0610DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0610DP,=P'5'     FORWARD 5
         CVB   R8,KB0610DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0610DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0610P7A,DFHBMASD  HIDE PF7
         MVI   E0610P8A,DFHBMASD  HIDE PF8
         MVI   E0610PAA,DFHBMASB  SHOW PF10
         MVI   E0610PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB06107P           EXIT IF NOT
         MVI   E0610P7A,DFHBMASB  SHOW PF7
KB06107P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB06108P           EXIT IF NOT
         MVI   E0610P8A,DFHBMASB  SHOW PF8
KB06108P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0610BP           EXIT IF NOT
         MVI   E0610PBA,DFHBMASB  SHOW PF11
KB0610BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0610IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0610IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0610DP DC    PL8'0'
KB0610IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0610   DS    0H
         USING *,R6
* PF12 : READPREV
         USING EDF0610S,R4
         XC    KC0610RP,KC0610RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0610RP) LENGTH(KC0610LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0610RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0610L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0610') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0610BS           EXIT IF IT IS
         TM    E0610DIF,DFHBMEOF  ANY DATA ?
         BO    KC0610BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0610DII  SAVE INPUT REDISPLAY NUMBER
KC0610BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0610RP DS    CL50               RECEIVE AREA
KC0610LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20612   DS    0H
* ENDBR
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ENDBR - NO PROCESSING
* PF12 : ENDBR - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0612S,R4
         MVC   E0612ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0612P7A,DFHBMASD  HIDE PF7
         MVI   E0612P8A,DFHBMASD  HIDE PF8
         MVI   E0612PAA,DFHBMASD  HIDE PF10
         MVI   E0612PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20612S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20612S4 EQU   *
         XC    E0612DIL,E0612DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20612S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0612PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20612S6           EXIT
*
K20612S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20612NP           EXIT IF NOT
* REDISPLAY MODE
K20612S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0612PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0612DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0612DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0612DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0612DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20612DC        CONVERT TO DECIMAL
         UNPK  E0612DTO+1(3),K20612DC+6(2) UNPACK NUMITEMS
         OI    E0612DTO+3,X'F0'   SET SIGN
         MVI   E0612DTO,C'/'      SET /
         MVC   E0612ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20612DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20612DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K206127P           EXIT IF NOT
         MVI   E0612P7A,DFHBMASB  SHOW PF7
K206127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K206128P           EXIT IF NOT
         MVI   E0612P8A,DFHBMASB  SHOW PF8
K206128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20612AP           EXIT IF NOT
         MVI   E0612PAA,DFHBMASB  SHOW PF10
K20612AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20612NP           EXIT IF NOT
         MVI   E0612PBA,DFHBMASB  SHOW PF11
K20612NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0612') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0612          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20612DC DC    PL8'0'
*
K50612   DS    0H
         USING *,R6
* PF5  : ENDBR
* WORKING STORAGE DISPLAY
         USING EDF0612S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0612TSO   MOVE TRANSID
         MVC   EWKSPGO,E0612PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0612TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0612L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70612   DS    0H
         USING *,R6
* PF7  : ENDBR
* REDISPLAY BACK 1
         USING EDF0612S,R4
         CLI   E0612P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70612DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70612DP,=P'1'     BACK 1
         CVB   R8,K70612DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70612DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0612P7A,DFHBMASD  HIDE PF7
         MVI   E0612P8A,DFHBMASB  SHOW PF8
         MVI   E0612PAA,DFHBMASD  HIDE PF10
         MVI   E0612PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K706127P           EXIT IF NOT
         MVI   E0612P7A,DFHBMASB  SHOW PF7
K706127P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70612AP           EXIT IF NOT
         MVI   E0612PAA,DFHBMASB  SHOW PF10
K70612AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70612BP           EXIT IF NOT
         MVI   E0612PBA,DFHBMASB  SHOW PF11
K70612BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70612IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70612IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70612DP DC    PL8'0'
K70612IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80612   DS    0H
         USING *,R6
* PF8  : ENDBR
* REDISPLAY FORWARD 1
         USING EDF0612S,R4
         CLI   E0612P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80612DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80612DP,=P'1'     FORWARD 1
         CVB   R8,K80612DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80612DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0612P7A,DFHBMASB  SHOW PF7
         MVI   E0612P8A,DFHBMASD  HIDE PF8
         MVI   E0612PAA,DFHBMASD  HIDE PF10
         MVI   E0612PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K806128P           EXIT IF NOT
         MVI   E0612P8A,DFHBMASB  SHOW PF8
K806128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80612AP           EXIT IF NOT
         MVI   E0612PAA,DFHBMASB  SHOW PF10
K80612AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80612BP           EXIT IF NOT
         MVI   E0612PBA,DFHBMASB  SHOW PF11
K80612BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80612IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80612IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80612DP DC    PL8'0'
K80612IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0612   DS    0H
         USING *,R6
* PF10 : ENDBR
* REDISPLAY BACK 5
         USING EDF0612S,R4
         CLI   E0612PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0612DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0612DP,=P'5'     BACK 5
         CVB   R8,KA0612DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0612DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0612P7A,DFHBMASD  HIDE PF7
         MVI   E0612P8A,DFHBMASD  HIDE PF8
         MVI   E0612PAA,DFHBMASD  HIDE PF10
         MVI   E0612PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA06127P           EXIT IF NOT
         MVI   E0612P7A,DFHBMASB  SHOW PF7
KA06127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA06128P           EXIT IF NOT
         MVI   E0612P8A,DFHBMASB  SHOW PF8
KA06128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0612AP           EXIT IF NOT
         MVI   E0612PAA,DFHBMASB  SHOW PF10
KA0612AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0612IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0612IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0612DP DC    PL8'0'
KA0612IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0612   DS    0H
         USING *,R6
* PF11 : ENDBR
* REDISPLAY FORWARD 5
         USING EDF0612S,R4
         CLI   E0612PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0612DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0612DP,=P'5'     FORWARD 5
         CVB   R8,KB0612DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0612DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0612P7A,DFHBMASD  HIDE PF7
         MVI   E0612P8A,DFHBMASD  HIDE PF8
         MVI   E0612PAA,DFHBMASB  SHOW PF10
         MVI   E0612PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB06127P           EXIT IF NOT
         MVI   E0612P7A,DFHBMASB  SHOW PF7
KB06127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB06128P           EXIT IF NOT
         MVI   E0612P8A,DFHBMASB  SHOW PF8
KB06128P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0612BP           EXIT IF NOT
         MVI   E0612PBA,DFHBMASB  SHOW PF11
KB0612BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0612IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0612IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0612DP DC    PL8'0'
KB0612IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0612   DS    0H
         USING *,R6
* PF12 : ENDBR
         USING EDF0612S,R4
         XC    KC0612RP,KC0612RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0612RP) LENGTH(KC0612LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0612RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0612L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0612') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0612BS           EXIT IF IT IS
         TM    E0612DIF,DFHBMEOF  ANY DATA ?
         BO    KC0612BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0612DII  SAVE INPUT REDISPLAY NUMBER
KC0612BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0612RP DS    CL50               RECEIVE AREA
KC0612LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20614   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : RESETBR
* PF12 : RESETBR - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0614S,R4
         MVC   E0614ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0614P7A,DFHBMASD  HIDE PF7
         MVI   E0614P8A,DFHBMASD  HIDE PF8
         MVI   E0614PAA,DFHBMASD  HIDE PF10
         MVI   E0614PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20614S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20614S4 EQU   *
         XC    E0614DIL,E0614DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20614S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0614PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20614S6           EXIT
*
K20614S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20614NP           EXIT IF NOT
* REDISPLAY MODE
K20614S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0614PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0614DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0614DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0614DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0614DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20614DC        CONVERT TO DECIMAL
         UNPK  E0614DTO+1(3),K20614DC+6(2) UNPACK NUMITEMS
         OI    E0614DTO+3,X'F0'   SET SIGN
         MVI   E0614DTO,C'/'      SET /
         MVC   E0614ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20614DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20614DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K206147P           EXIT IF NOT
         MVI   E0614P7A,DFHBMASB  SHOW PF7
K206147P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K206148P           EXIT IF NOT
         MVI   E0614P8A,DFHBMASB  SHOW PF8
K206148P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20614AP           EXIT IF NOT
         MVI   E0614PAA,DFHBMASB  SHOW PF10
K20614AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20614NP           EXIT IF NOT
         MVI   E0614PBA,DFHBMASB  SHOW PF11
K20614NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20614SN           EXIT IF IT IS
* RIDFLD
         CLI   E0614RBO,X'00'     ANY RBA/XRBA/RRN ?
         BNE   K20614SN           EXIT IF THERE IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20614M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K206143R           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20614M2           EXIT
*
K20614M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K206143R           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20614M2 EQU   *
* USE KEYLENGTH IF VALID AND NOT ZERO ELSE RIDFLD LENGTH
* USE RIDFLD AFTER COMMAND
         PACK  K20614SC,E0614RLO+16(5) PACK RIDFLD LENGTH
         CLI   E0614STO,C'A'      'BEFORE' ?
         BNE   K20614NK           EXIT IF NOT
         CLI   E0614KLO,C'K'      ANY KEYLENGTH ?
         BNE   K20614NK           EXIT IF NONE
         CLC   E0614KLO+16(5),=C'00000' ZERO KEYLENGTH ?
         BE    K20614NK           EXIT IF IT IS
         PACK  K20614SC,E0614KLO+16(5) PACK KEYLENGTH
K20614NK EQU   *
         CVB   R8,K20614SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20614RK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20614RX           EXIT
*
K20614RK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20614RX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20614RX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20614SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20614MD        SAVE RIDFLD
         EX    R8,K20614DE        RIDFLD TO EBCDIC
         MVC   E0614MDO,=CL6'EBCDIC' SET MODE
         B     K20614SN           EXIT
*
K206143R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20614M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K206143E           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20614M4           EXIT
*
K20614M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K206143E           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20614M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20614SC        RESTORE LENGTH FOR EX
         EX    R8,K20614DB        MOVE RIDFLD BACK
         EX    R8,K20614DA        RIDFLD TO ASCII
         MVC   E0614MDO,=CL6'ASCII' SET MODE
         B     K20614SN           EXIT
*
K206143E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20614M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K206143A           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20614M6           EXIT
*
K20614M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K206143A           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20614M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20614SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=RIDFLD LENGTH
         LA    R1,K20614TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20614RI        SOURCE ADDRESS
         XC    E0614RIO+1(63),E0614RIO+1 CLEAR RIDFLD DISPLAY
         MVHHI E0614RIO+1,C'X'''  MOVE X'
         LA    R14,E0614RIO+3     DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20614DX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20614DX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0614RIO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0614MDO,=CL6'HEX' SET MODE
         B     K20614SN           EXIT
*
K206143A EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20614M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20614M8           EXIT
*
K20614M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20614M8 EQU   *
         XC    E0614RIO+1(63),E0614RIO+1 CLEAR RIDFLD DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20614SC        RESTORE LENGTH-1 FOR EX
         EX    R8,K20614DB        MOVE RIDFLD BACK
         EX    R8,K20614DE        RIDFLD TO EBCDIC
         LA    R5,E0614RIO+2(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RIDFLD CLOSE BRACKET
         MVC   E0614MDO,=CL6'EBCDIC' SET MODE
K20614SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0614') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0614          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20614DC DC    PL8'0'
K20614SC DC    PL8'0'
K20614RI DS    XL61               RIDFLD
K20614MD MVC   K20614RI(0),E0614RIO+1 SAVE RIDFLD
K20614DE TR    E0614RIO+1(0),K20614TE RIDFLD TO EBCDIC
K20614DB MVC   E0614RIO+1(0),K20614RI MOVE RIDFLD BACK
K20614DA TR    E0614RIO+1(0),K20614TA RIDFLD TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20614TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20614TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20614TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50614   DS    0H
         USING *,R6
* PF5  : RESETBR
* WORKING STORAGE DISPLAY
         USING EDF0614S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0614TSO   MOVE TRANSID
         MVC   EWKSPGO,E0614PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0614TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0614L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70614   DS    0H
         USING *,R6
* PF7  : RESETBR
* REDISPLAY BACK 1
         USING EDF0614S,R4
         CLI   E0614P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70614DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70614DP,=P'1'     BACK 1
         CVB   R8,K70614DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70614DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0614P7A,DFHBMASD  HIDE PF7
         MVI   E0614P8A,DFHBMASB  SHOW PF8
         MVI   E0614PAA,DFHBMASD  HIDE PF10
         MVI   E0614PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K706147P           EXIT IF NOT
         MVI   E0614P7A,DFHBMASB  SHOW PF7
K706147P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70614AP           EXIT IF NOT
         MVI   E0614PAA,DFHBMASB  SHOW PF10
K70614AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70614BP           EXIT IF NOT
         MVI   E0614PBA,DFHBMASB  SHOW PF11
K70614BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70614IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70614IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70614DP DC    PL8'0'
K70614IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80614   DS    0H
         USING *,R6
* PF8  : RESETBR
* REDISPLAY FORWARD 1
         USING EDF0614S,R4
         CLI   E0614P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80614DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80614DP,=P'1'     FORWARD 1
         CVB   R8,K80614DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80614DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0614P7A,DFHBMASB  SHOW PF7
         MVI   E0614P8A,DFHBMASD  HIDE PF8
         MVI   E0614PAA,DFHBMASD  HIDE PF10
         MVI   E0614PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K806148P           EXIT IF NOT
         MVI   E0614P8A,DFHBMASB  SHOW PF8
K806148P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80614AP           EXIT IF NOT
         MVI   E0614PAA,DFHBMASB  SHOW PF10
K80614AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80614BP           EXIT IF NOT
         MVI   E0614PBA,DFHBMASB  SHOW PF11
K80614BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80614IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80614IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80614DP DC    PL8'0'
K80614IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0614   DS    0H
         USING *,R6
* PF10 : RESETBR
* REDISPLAY BACK 5
         USING EDF0614S,R4
         CLI   E0614PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0614DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0614DP,=P'5'     BACK 5
         CVB   R8,KA0614DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0614DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0614P7A,DFHBMASD  HIDE PF7
         MVI   E0614P8A,DFHBMASD  HIDE PF8
         MVI   E0614PAA,DFHBMASD  HIDE PF10
         MVI   E0614PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA06147P           EXIT IF NOT
         MVI   E0614P7A,DFHBMASB  SHOW PF7
KA06147P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA06148P           EXIT IF NOT
         MVI   E0614P8A,DFHBMASB  SHOW PF8
KA06148P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0614AP           EXIT IF NOT
         MVI   E0614PAA,DFHBMASB  SHOW PF10
KA0614AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0614IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0614IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0614DP DC    PL8'0'
KA0614IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0614   DS    0H
         USING *,R6
* PF11 : RESETBR
* REDISPLAY FORWARD 5
         USING EDF0614S,R4
         CLI   E0614PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0614DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0614DP,=P'5'     FORWARD 5
         CVB   R8,KB0614DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0614DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0614P7A,DFHBMASD  HIDE PF7
         MVI   E0614P8A,DFHBMASD  HIDE PF8
         MVI   E0614PAA,DFHBMASB  SHOW PF10
         MVI   E0614PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB06147P           EXIT IF NOT
         MVI   E0614P7A,DFHBMASB  SHOW PF7
KB06147P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB06148P           EXIT IF NOT
         MVI   E0614P8A,DFHBMASB  SHOW PF8
KB06148P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0614BP           EXIT IF NOT
         MVI   E0614PBA,DFHBMASB  SHOW PF11
KB0614BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0614IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0614IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0614DP DC    PL8'0'
KB0614IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0614   DS    0H
         USING *,R6
* PF12 : RESETBR
         USING EDF0614S,R4
         XC    KC0614RP,KC0614RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0614RP) LENGTH(KC0614LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0614RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0614L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0614') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0614BS           EXIT IF IT IS
         TM    E0614DIF,DFHBMEOF  ANY DATA ?
         BO    KC0614BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0614DII  SAVE INPUT REDISPLAY NUMBER
KC0614BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0614RP DS    CL50               RECEIVE AREA
KC0614LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20A02   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : WRITEQ TS
* PF12 : WRITEQ TS - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0A02S,R4
         MVC   E0A02ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0A02P7A,DFHBMASD  HIDE PF7
         MVI   E0A02P8A,DFHBMASD  HIDE PF8
         MVI   E0A02PAA,DFHBMASD  HIDE PF10
         MVI   E0A02PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20A02S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20A02S4 EQU   *
         XC    E0A02DIL,E0A02DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20A02S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0A02PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20A02S6           EXIT
*
K20A02S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02NP           EXIT IF NOT
* REDISPLAY MODE
K20A02S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0A02PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0A02DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0A02DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0A02DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0A02DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20A02DC        CONVERT TO DECIMAL
         UNPK  E0A02DTO+1(3),K20A02DC+6(2) UNPACK NUMITEMS
         OI    E0A02DTO+3,X'F0'   SET SIGN
         MVI   E0A02DTO,C'/'      SET /
         MVC   E0A02ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20A02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20A02DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20A027P           EXIT IF NOT
         MVI   E0A02P7A,DFHBMASB  SHOW PF7
K20A027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20A028P           EXIT IF NOT
         MVI   E0A02P8A,DFHBMASB  SHOW PF8
K20A028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20A02AP           EXIT IF NOT
         MVI   E0A02PAA,DFHBMASB  SHOW PF10
K20A02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20A02NP           EXIT IF NOT
         MVI   E0A02PBA,DFHBMASB  SHOW PF11
K20A02NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20A02SN           EXIT IF IT IS
* QNAME
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20A02M2           EXIT IF IT IS
         B     K20A025R           EXIT
*
K20A02M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20A025R           EXIT IF NOT
K20A02M2 EQU   *
         MVC   K20A02QE,E0A02QUO+1 SAVE QNAME
         TR    E0A02QUO+1(16),K20A02TE QNAME TO EBCDIC
         B     K20A02FR           EXIT
*
K20A025R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20A02M4           EXIT IF IT IS
         B     K20A025E           EXIT
*
K20A02M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20A025E           EXIT IF NOT
K20A02M4 EQU   *
         MVC   E0A02QUO+1(16),K20A02QE MOVE QNAME BACK
         TR    E0A02QUO+1(16),K20A02TA QNAME TO ASCII
         B     K20A02FR           EXIT
*
K20A025E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20A02M6           EXIT IF IT IS
         B     K20A025A           EXIT
*
K20A02M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20A025A           EXIT IF NOT
K20A02M6 EQU   *
         LA    R1,K20A02TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A02QE        SOURCE ADDRESS
         XC    E0A02QUO,E0A02QUO  CLEAR QNAME DISPLAY
         MVC   E0A02QUO(3),=C'(X'''  MOVE (X'
         LA    R14,E0A02QUO+3     DESTINATION ADDRESS
         LA    R15,16             R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E0A02QUO+35,C''')' MOVE END ')
         B     K20A02FR           EXIT
*
K20A025A EQU   *
* HAS TO BE IN HEX MODE
         XC    E0A02QUO+1(36),E0A02QUO+1 CLEAR QNAME DISPLAY
         MVC   E0A02QUO+1(16),K20A02QE MOVE QUEUE BACK
         TR    E0A02QUO+1(16),K20A02TE QUEUE TO EBCDIC
         MVI   E0A02QUO+17,C')'   SET QUEUE CLOSE BRACKET
K20A02FR EQU   *
* FROM (...//...)
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20A02M8           EXIT IF IT IS
         B     K20A022R           EXIT
*
K20A02M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20A022R           EXIT IF NOT
K20A02M8 EQU   *
         PACK  K20A02SC,E0A02LNO+1(11) PACK FROM LENGTH
         CVB   R8,K20A02SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20A02LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20A02EX           EXIT
*
K20A02LK EQU   *
         CHI   R8,67              >67 ?
         BNH   K20A02EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20A02EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20A02SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20A02MF        SAVE FROM
         EX    R8,K20A02RE        FROM TO EBCDIC
         B     K20A02SM           EXIT
*
K20A022R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20A02MA           EXIT IF IT IS
         B     K20A022E           EXIT
*
K20A02M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20A022E           EXIT IF NOT
K20A02MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A02SC        RESTORE LENGTH FOR EX
         EX    R8,K20A02FB        MOVE FROM BACK
         EX    R8,K20A02FA        FROM TO ASCII
         B     K20A02SM           EXIT
*
K20A022E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20A02MC           EXIT IF IT IS
         B     K20A022A           EXIT
*
K20A02MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20A022A           EXIT IF NOT
K20A02MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A02SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=FROM LENGTH
         LA    R1,K20A02TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A02FM        SOURCE ADDRESS
         XC    E0A02FMO+1(68),E0A02FMO+1 CLEAR FROM DISPLAY
         MVHHI E0A02FMO+1,C'X'''  MOVE X'
         LA    R14,E0A02FMO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20A02HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20A02HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0A02FMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20A02SM           EXIT
*
K20A022A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A02SC        RESTORE LENGTH-1 FOR EX
         XC    E0A02FMO+1(68),E0A02FMO+1 CLEAR FROM DISPLAY
         EX    R8,K20A02FB        MOVE FROM BACK
         EX    R8,K20A02RE        FROM TO EBCDIC
         LA    R5,E0A02FMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
K20A02SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20A02NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20A02MK           EXIT
*
K20A02MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20A02NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20A02MK EQU   *
         MVC   E0A02MDO,=CL6'EBCDIC' SET MODE
         B     K20A02SN           EXIT
*
K20A02NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K20A02NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20A02MM           EXIT
*
K20A02ML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K20A02NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20A02MM EQU   *
         MVC   E0A02MDO,=CL6'ASCII' SET MODE
         B     K20A02SN           EXIT
*
K20A02NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K20A02NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20A02MO           EXIT
*
K20A02MN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K20A02NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20A02MO EQU   *
         MVC   E0A02MDO,=CL6'HEX' SET MODE
         B     K20A02SN           EXIT
*
K20A02NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A02MP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20A02MQ           EXIT
*
K20A02MP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20A02MQ EQU   *
         MVC   E0A02MDO,=CL6'EBCDIC' SET MODE
K20A02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0A02') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0A02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20A02DC DC    PL8'0'
K20A02SC DC    PL8'0'
K20A02QE DS    XL16               QNAME
K20A02FM DS    XL67               FROM
K20A02MF MVC   K20A02FM(0),E0A02FMO+1 SAVE FROM
K20A02RE TR    E0A02FMO+1(0),K20A02TE FROM TO EBCDIC
K20A02FB MVC   E0A02FMO+1(0),K20A02FM MOVE FROM BACK
K20A02FA TR    E0A02FMO+1(0),K20A02TA FROM TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20A02TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20A02TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20A02TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50A02   DS    0H
         USING *,R6
* PF5  : WRITEQ TS
* WORKING STORAGE DISPLAY
         USING EDF0A02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0A02TSO   MOVE TRANSID
         MVC   EWKSPGO,E0A02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0A02TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0A02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70A02   DS    0H
         USING *,R6
* PF7  : WRITEQ TS
* REDISPLAY BACK 1
         USING EDF0A02S,R4
         CLI   E0A02P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70A02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70A02DP,=P'1'     BACK 1
         CVB   R8,K70A02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70A02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A02P7A,DFHBMASD  HIDE PF7
         MVI   E0A02P8A,DFHBMASB  SHOW PF8
         MVI   E0A02PAA,DFHBMASD  HIDE PF10
         MVI   E0A02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70A027P           EXIT IF NOT
         MVI   E0A02P7A,DFHBMASB  SHOW PF7
K70A027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70A02AP           EXIT IF NOT
         MVI   E0A02PAA,DFHBMASB  SHOW PF10
K70A02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70A02BP           EXIT IF NOT
         MVI   E0A02PBA,DFHBMASB  SHOW PF11
K70A02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70A02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70A02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70A02DP DC    PL8'0'
K70A02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80A02   DS    0H
         USING *,R6
* PF8  : WRITEQ TS
* REDISPLAY FORWARD 1
         USING EDF0A02S,R4
         CLI   E0A02P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80A02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80A02DP,=P'1'     FORWARD 1
         CVB   R8,K80A02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80A02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A02P7A,DFHBMASB  SHOW PF7
         MVI   E0A02P8A,DFHBMASD  HIDE PF8
         MVI   E0A02PAA,DFHBMASD  HIDE PF10
         MVI   E0A02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80A028P           EXIT IF NOT
         MVI   E0A02P8A,DFHBMASB  SHOW PF8
K80A028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80A02AP           EXIT IF NOT
         MVI   E0A02PAA,DFHBMASB  SHOW PF10
K80A02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80A02BP           EXIT IF NOT
         MVI   E0A02PBA,DFHBMASB  SHOW PF11
K80A02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80A02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80A02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80A02DP DC    PL8'0'
K80A02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0A02   DS    0H
         USING *,R6
* PF10 : WRITEQ TS
* REDISPLAY BACK 5
         USING EDF0A02S,R4
         CLI   E0A02PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0A02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0A02DP,=P'5'     BACK 5
         CVB   R8,KA0A02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0A02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A02P7A,DFHBMASD  HIDE PF7
         MVI   E0A02P8A,DFHBMASD  HIDE PF8
         MVI   E0A02PAA,DFHBMASD  HIDE PF10
         MVI   E0A02PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0A027P           EXIT IF NOT
         MVI   E0A02P7A,DFHBMASB  SHOW PF7
KA0A027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0A028P           EXIT IF NOT
         MVI   E0A02P8A,DFHBMASB  SHOW PF8
KA0A028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0A02AP           EXIT IF NOT
         MVI   E0A02PAA,DFHBMASB  SHOW PF10
KA0A02AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0A02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0A02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0A02DP DC    PL8'0'
KA0A02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0A02   DS    0H
         USING *,R6
* PF11 : WRITEQ TS
* REDISPLAY FORWARD 5
         USING EDF0A02S,R4
         CLI   E0A02PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0A02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0A02DP,=P'5'     FORWARD 5
         CVB   R8,KB0A02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0A02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A02P7A,DFHBMASD  HIDE PF7
         MVI   E0A02P8A,DFHBMASD  HIDE PF8
         MVI   E0A02PAA,DFHBMASB  SHOW PF10
         MVI   E0A02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0A027P           EXIT IF NOT
         MVI   E0A02P7A,DFHBMASB  SHOW PF7
KB0A027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0A028P           EXIT IF NOT
         MVI   E0A02P8A,DFHBMASB  SHOW PF8
KB0A028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0A02BP           EXIT IF NOT
         MVI   E0A02PBA,DFHBMASB  SHOW PF11
KB0A02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0A02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0A02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0A02DP DC    PL8'0'
KB0A02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0A02   DS    0H
         USING *,R6
* PF12 : WRITEQ TS
         USING EDF0A02S,R4
         XC    KC0A02RP,KC0A02RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0A02RP) LENGTH(KC0A02LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0A02RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0A02L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0A02') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0A02BS           EXIT IF IT IS
         TM    E0A02DIF,DFHBMEOF  ANY DATA ?
         BO    KC0A02BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0A02DII  SAVE INPUT REDISPLAY NUMBER
KC0A02BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0A02RP DS    CL50               RECEIVE AREA
KC0A02LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20A04   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : READQ TS
* PF12 : READQ TS - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0A04S,R4
         MVC   E0A04ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0A04P7A,DFHBMASD  HIDE PF7
         MVI   E0A04P8A,DFHBMASD  HIDE PF8
         MVI   E0A04PAA,DFHBMASD  HIDE PF10
         MVI   E0A04PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20A04S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20A04S4 EQU   *
         XC    E0A04DIL,E0A04DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20A04S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0A04PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20A04S6           EXIT
*
K20A04S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04NP           EXIT IF NOT
* REDISPLAY MODE
K20A04S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0A04PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0A04DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0A04DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0A04DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0A04DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20A04DC        CONVERT TO DECIMAL
         UNPK  E0A04DTO+1(3),K20A04DC+6(2) UNPACK NUMITEMS
         OI    E0A04DTO+3,X'F0'   SET SIGN
         MVI   E0A04DTO,C'/'      SET /
         MVC   E0A04ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20A04DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20A04DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20A047P           EXIT IF NOT
         MVI   E0A04P7A,DFHBMASB  SHOW PF7
K20A047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20A048P           EXIT IF NOT
         MVI   E0A04P8A,DFHBMASB  SHOW PF8
K20A048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20A04AP           EXIT IF NOT
         MVI   E0A04PAA,DFHBMASB  SHOW PF10
K20A04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20A04NP           EXIT IF NOT
         MVI   E0A04PBA,DFHBMASB  SHOW PF11
K20A04NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20A04SN           EXIT IF IT IS
* QNAME
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20A04M2           EXIT IF IT IS
         B     K20A045R           EXIT
*
K20A04M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20A045R           EXIT IF NOT
K20A04M2 EQU   *
         MVC   K20A04QE,E0A04QUO+1 SAVE QNAME
         TR    E0A04QUO+1(16),K20A04TE QNAME TO EBCDIC
         B     K20A04IS           EXIT
*
K20A045R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20A04M4           EXIT IF IT IS
         B     K20A045E           EXIT
*
K20A04M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20A045E           EXIT IF NOT
K20A04M4 EQU   *
         MVC   E0A04QUO+1(16),K20A04QE MOVE QNAME BACK
         TR    E0A04QUO+1(16),K20A04TA QNAME TO ASCII
         B     K20A04IS           EXIT
*
K20A045E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20A04M6           EXIT IF IT IS
         B     K20A045A           EXIT
*
K20A04M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20A045A           EXIT IF NOT
K20A04M6 EQU   *
         LA    R1,K20A04TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A04QE        SOURCE ADDRESS
         XC    E0A04QUO,E0A04QUO  CLEAR QNAME DISPLAY
         MVC   E0A04QUO(3),=C'(X'''  MOVE (X'
         LA    R14,E0A04QUO+3     DESTINATION ADDRESS
         LA    R15,16             R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E0A04QUO+35,C''')' MOVE END ')
         B     K20A04IS           EXIT
*
K20A045A EQU   *
* HAS TO BE IN HEX MODE
         XC    E0A04QUO+1(36),E0A04QUO+1 CLEAR QNAME DISPLAY
         MVC   E0A04QUO+1(16),K20A04QE MOVE QUEUE BACK
         TR    E0A04QUO+1(16),K20A04TE QUEUE TO EBCDIC
         MVI   E0A04QUO+17,C')'   SET QUEUE CLOSE BRACKET
K20A04IS EQU   *
* INTO (...//...)
         CLI   E0A04ISO,C'S'      SET ?
         BE    K20A04SM           EXIT IF IT IS
         CLI   E0A04ISO+15,C'('   ANY INTO ?
         BNE   K20A04SM           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K20A04M8           EXIT IF IT IS
         B     K20A042R           EXIT
*
K20A04M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20A042R           EXIT IF NOT
K20A04M8 EQU   *
         PACK  K20A04SC,E0A04LIO+1(5) PACK INTO LENGTH
         CVB   R8,K20A04SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K20A04LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K20A04EX           EXIT
*
K20A04LK EQU   *
         CHI   R8,61              >61 ?
         BNH   K20A04EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K20A04EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20A04SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20A04MI        SAVE INTO
         EX    R8,K20A04RE        INTO TO EBCDIC
         B     K20A04SM           EXIT
*
K20A042R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K20A04MA           EXIT IF IT IS
         B     K20A042E           EXIT
*
K20A04M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20A042E           EXIT IF NOT
K20A04MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A04SC        RESTORE LENGTH FOR EX
         EX    R8,K20A04IB        MOVE INTO BACK
         EX    R8,K20A04IA        INTO TO ASCII
         B     K20A04SM           EXIT
*
K20A042E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K20A04MC           EXIT IF IT IS
         B     K20A042A           EXIT
*
K20A04MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20A042A           EXIT IF NOT
K20A04MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A04SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K20A04TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A04IN        SOURCE ADDRESS
         XC    E0A04ISO+16(63),E0A04ISO+16 CLEAR INTO DISPLAY
         MVHHI E0A04ISO+16,C'X'''  MOVE X'
         LA    R14,E0A04ISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K20A04HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K20A04HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0A04ISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K20A04SM           EXIT
*
K20A042A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20A04SC        RESTORE LENGTH-1 FOR EX
         XC    E0A04ISO+16(63),E0A04ISO+16 CLEAR INTO DISPLAY
         EX    R8,K20A04IB        MOVE INTO BACK
         EX    R8,K20A04RE        INTO TO EBCDIC
         LA    R5,E0A04ISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K20A04SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20A04NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20A04MK           EXIT
*
K20A04MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20A04NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20A04MK EQU   *
         MVC   E0A04MDO,=CL6'EBCDIC' SET MODE
         B     K20A04SN           EXIT
*
K20A04NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K20A04NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20A04MM           EXIT
*
K20A04ML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K20A04NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20A04MM EQU   *
         MVC   E0A04MDO,=CL6'ASCII' SET MODE
         B     K20A04SN           EXIT
*
K20A04NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K20A04NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20A04MO           EXIT
*
K20A04MN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K20A04NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20A04MO EQU   *
         MVC   E0A04MDO,=CL6'HEX' SET MODE
         B     K20A04SN           EXIT
*
K20A04NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A04MP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20A04MQ           EXIT
*
K20A04MP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20A04MQ EQU   *
         MVC   E0A04MDO,=CL6'EBCDIC' SET MODE
K20A04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0A04') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0A04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20A04DC DC    PL8'0'
K20A04SC DC    PL8'0'
K20A04QE DS    XL16               QNAME
K20A04IN DS    XL61               INTO
K20A04MI MVC   K20A04IN(0),E0A04ISO+16 SAVE INTO
K20A04RE TR    E0A04ISO+16(0),K20A04TE INTO TO EBCDIC
K20A04IB MVC   E0A04ISO+16(0),K20A04IN MOVE INTO BACK
K20A04IA TR    E0A04ISO+16(0),K20A04TA INTO TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20A04TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20A04TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20A04TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50A04   DS    0H
         USING *,R6
* PF5  : READQ TS
* WORKING STORAGE DISPLAY
         USING EDF0A04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0A04TSO   MOVE TRANSID
         MVC   EWKSPGO,E0A04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0A04TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0A04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70A04   DS    0H
         USING *,R6
* PF7  : READQ TS
* REDISPLAY BACK 1
         USING EDF0A04S,R4
         CLI   E0A04P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70A04DP,=P'1'     BACK 1
         CVB   R8,K70A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A04P7A,DFHBMASD  HIDE PF7
         MVI   E0A04P8A,DFHBMASB  SHOW PF8
         MVI   E0A04PAA,DFHBMASD  HIDE PF10
         MVI   E0A04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70A047P           EXIT IF NOT
         MVI   E0A04P7A,DFHBMASB  SHOW PF7
K70A047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70A04AP           EXIT IF NOT
         MVI   E0A04PAA,DFHBMASB  SHOW PF10
K70A04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70A04BP           EXIT IF NOT
         MVI   E0A04PBA,DFHBMASB  SHOW PF11
K70A04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70A04DP DC    PL8'0'
K70A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80A04   DS    0H
         USING *,R6
* PF8  : READQ TS
* REDISPLAY FORWARD 1
         USING EDF0A04S,R4
         CLI   E0A04P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80A04DP,=P'1'     FORWARD 1
         CVB   R8,K80A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A04P7A,DFHBMASB  SHOW PF7
         MVI   E0A04P8A,DFHBMASD  HIDE PF8
         MVI   E0A04PAA,DFHBMASD  HIDE PF10
         MVI   E0A04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80A048P           EXIT IF NOT
         MVI   E0A04P8A,DFHBMASB  SHOW PF8
K80A048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80A04AP           EXIT IF NOT
         MVI   E0A04PAA,DFHBMASB  SHOW PF10
K80A04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80A04BP           EXIT IF NOT
         MVI   E0A04PBA,DFHBMASB  SHOW PF11
K80A04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80A04DP DC    PL8'0'
K80A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0A04   DS    0H
         USING *,R6
* PF10 : READQ TS
* REDISPLAY BACK 5
         USING EDF0A04S,R4
         CLI   E0A04PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0A04DP,=P'5'     BACK 5
         CVB   R8,KA0A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A04P7A,DFHBMASD  HIDE PF7
         MVI   E0A04P8A,DFHBMASD  HIDE PF8
         MVI   E0A04PAA,DFHBMASD  HIDE PF10
         MVI   E0A04PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0A047P           EXIT IF NOT
         MVI   E0A04P7A,DFHBMASB  SHOW PF7
KA0A047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0A048P           EXIT IF NOT
         MVI   E0A04P8A,DFHBMASB  SHOW PF8
KA0A048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0A04AP           EXIT IF NOT
         MVI   E0A04PAA,DFHBMASB  SHOW PF10
KA0A04AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0A04DP DC    PL8'0'
KA0A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0A04   DS    0H
         USING *,R6
* PF11 : READQ TS
* REDISPLAY FORWARD 5
         USING EDF0A04S,R4
         CLI   E0A04PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0A04DP,=P'5'     FORWARD 5
         CVB   R8,KB0A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A04P7A,DFHBMASD  HIDE PF7
         MVI   E0A04P8A,DFHBMASD  HIDE PF8
         MVI   E0A04PAA,DFHBMASB  SHOW PF10
         MVI   E0A04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0A047P           EXIT IF NOT
         MVI   E0A04P7A,DFHBMASB  SHOW PF7
KB0A047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0A048P           EXIT IF NOT
         MVI   E0A04P8A,DFHBMASB  SHOW PF8
KB0A048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0A04BP           EXIT IF NOT
         MVI   E0A04PBA,DFHBMASB  SHOW PF11
KB0A04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0A04DP DC    PL8'0'
KB0A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0A04   DS    0H
         USING *,R6
* PF12 : READQ TS
         USING EDF0A04S,R4
         XC    KC0A04RP,KC0A04RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0A04RP) LENGTH(KC0A04LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0A04RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0A04L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0A04') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0A04BS           EXIT IF IT IS
         TM    E0A04DIF,DFHBMEOF  ANY DATA ?
         BO    KC0A04BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0A04DII  SAVE INPUT REDISPLAY NUMBER
KC0A04BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0A04RP DS    CL50               RECEIVE AREA
KC0A04LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20A06   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : DELETEQ TS
* PF12 : DELETEQ TS - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0A06S,R4
         MVC   E0A06ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0A06P7A,DFHBMASD  HIDE PF7
         MVI   E0A06P8A,DFHBMASD  HIDE PF8
         MVI   E0A06PAA,DFHBMASD  HIDE PF10
         MVI   E0A06PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20A06S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20A06S4 EQU   *
         XC    E0A06DIL,E0A06DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20A06S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0A06PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20A06S6           EXIT
*
K20A06S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A06NP           EXIT IF NOT
* REDISPLAY MODE
K20A06S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0A06PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0A06DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0A06DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0A06DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0A06DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20A06DC        CONVERT TO DECIMAL
         UNPK  E0A06DTO+1(3),K20A06DC+6(2) UNPACK NUMITEMS
         OI    E0A06DTO+3,X'F0'   SET SIGN
         MVI   E0A06DTO,C'/'      SET /
         MVC   E0A06ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20A06DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20A06DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20A067P           EXIT IF NOT
         MVI   E0A06P7A,DFHBMASB  SHOW PF7
K20A067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20A068P           EXIT IF NOT
         MVI   E0A06P8A,DFHBMASB  SHOW PF8
K20A068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20A06AP           EXIT IF NOT
         MVI   E0A06PAA,DFHBMASB  SHOW PF10
K20A06AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20A06NP           EXIT IF NOT
         MVI   E0A06PBA,DFHBMASB  SHOW PF11
K20A06NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20A06SN           EXIT IF IT IS
* QNAME
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A06M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20A065R           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20A06M2           EXIT
*
K20A06M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20A065R           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20A06M2 EQU   *
         MVC   K20A06QE,E0A06QUO+1 SAVE QNAME
         TR    E0A06QUO+1(16),K20A06TE QNAME TO EBCDIC
         MVC   E0A06MDO,=CL6'EBCDIC' SET MODE
         B     K20A06SN           EXIT
*
K20A065R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A06M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K20A065E           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20A06M4           EXIT
*
K20A06M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20A065E           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20A06M4 EQU   *
         MVC   E0A06QUO+1(16),K20A06QE MOVE QNAME BACK
         TR    E0A06QUO+1(16),K20A06TA QNAME TO ASCII
         MVC   E0A06MDO,=CL6'ASCII' SET MODE
         B     K20A06SN           EXIT
*
K20A065E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A06M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K20A065A           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20A06M6           EXIT
*
K20A06M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20A065A           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20A06M6 EQU   *
         LA    R1,K20A06TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20A06QE        SOURCE ADDRESS
         XC    E0A06QUO,E0A06QUO  CLEAR QNAME DISPLAY
         MVC   E0A06QUO(3),=C'(X'''  MOVE (X'
         LA    R14,E0A06QUO+3     DESTINATION ADDRESS
         LA    R15,16             R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E0A06QUO+35,C''')' MOVE END ')
         MVC   E0A06MDO,=CL6'HEX' SET MODE
         B     K20A06SN           EXIT
*
K20A065A EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20A06M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20A06M8           EXIT
*
K20A06M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20A06M8 EQU   *
         XC    E0A06QUO+1(36),E0A06QUO+1 CLEAR QNAME DISPLAY
         MVC   E0A06QUO+1(16),K20A06QE MOVE QUEUE BACK
         TR    E0A06QUO+1(16),K20A06TE QUEUE TO EBCDIC
         MVI   E0A06QUO+17,C')'   SET QUEUE CLOSE BRACKET
         MVC   E0A06MDO,=CL6'EBCDIC' SET MODE
K20A06SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0A06') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0A06          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20A06DC DC    PL8'0'
K20A06QE DS    XL16               QNAME
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20A06TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20A06TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20A06TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50A06   DS    0H
         USING *,R6
* PF5  : DELETEQ TS
* WORKING STORAGE DISPLAY
         USING EDF0A06S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0A06TSO   MOVE TRANSID
         MVC   EWKSPGO,E0A06PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0A06TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0A06L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70A06   DS    0H
         USING *,R6
* PF7  : DELETEQ TS
* REDISPLAY BACK 1
         USING EDF0A06S,R4
         CLI   E0A06P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70A06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70A06DP,=P'1'     BACK 1
         CVB   R8,K70A06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70A06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A06P7A,DFHBMASD  HIDE PF7
         MVI   E0A06P8A,DFHBMASB  SHOW PF8
         MVI   E0A06PAA,DFHBMASD  HIDE PF10
         MVI   E0A06PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70A067P           EXIT IF NOT
         MVI   E0A06P7A,DFHBMASB  SHOW PF7
K70A067P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70A06AP           EXIT IF NOT
         MVI   E0A06PAA,DFHBMASB  SHOW PF10
K70A06AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70A06BP           EXIT IF NOT
         MVI   E0A06PBA,DFHBMASB  SHOW PF11
K70A06BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70A06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70A06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70A06DP DC    PL8'0'
K70A06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80A06   DS    0H
         USING *,R6
* PF8  : DELETEQ TS
* REDISPLAY FORWARD 1
         USING EDF0A06S,R4
         CLI   E0A06P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80A06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80A06DP,=P'1'     FORWARD 1
         CVB   R8,K80A06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80A06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A06P7A,DFHBMASB  SHOW PF7
         MVI   E0A06P8A,DFHBMASD  HIDE PF8
         MVI   E0A06PAA,DFHBMASD  HIDE PF10
         MVI   E0A06PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80A068P           EXIT IF NOT
         MVI   E0A06P8A,DFHBMASB  SHOW PF8
K80A068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80A06AP           EXIT IF NOT
         MVI   E0A06PAA,DFHBMASB  SHOW PF10
K80A06AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80A06BP           EXIT IF NOT
         MVI   E0A06PBA,DFHBMASB  SHOW PF11
K80A06BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80A06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80A06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80A06DP DC    PL8'0'
K80A06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0A06   DS    0H
         USING *,R6
* PF10 : DELETEQ TS
* REDISPLAY BACK 5
         USING EDF0A06S,R4
         CLI   E0A06PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0A06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0A06DP,=P'5'     BACK 5
         CVB   R8,KA0A06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0A06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A06P7A,DFHBMASD  HIDE PF7
         MVI   E0A06P8A,DFHBMASD  HIDE PF8
         MVI   E0A06PAA,DFHBMASD  HIDE PF10
         MVI   E0A06PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0A067P           EXIT IF NOT
         MVI   E0A06P7A,DFHBMASB  SHOW PF7
KA0A067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0A068P           EXIT IF NOT
         MVI   E0A06P8A,DFHBMASB  SHOW PF8
KA0A068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0A06AP           EXIT IF NOT
         MVI   E0A06PAA,DFHBMASB  SHOW PF10
KA0A06AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0A06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0A06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0A06DP DC    PL8'0'
KA0A06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0A06   DS    0H
         USING *,R6
* PF11 : DELETEQ TS
* REDISPLAY FORWARD 5
         USING EDF0A06S,R4
         CLI   E0A06PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0A06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0A06DP,=P'5'     FORWARD 5
         CVB   R8,KB0A06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0A06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0A06P7A,DFHBMASD  HIDE PF7
         MVI   E0A06P8A,DFHBMASD  HIDE PF8
         MVI   E0A06PAA,DFHBMASB  SHOW PF10
         MVI   E0A06PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0A067P           EXIT IF NOT
         MVI   E0A06P7A,DFHBMASB  SHOW PF7
KB0A067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0A068P           EXIT IF NOT
         MVI   E0A06P8A,DFHBMASB  SHOW PF8
KB0A068P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0A06BP           EXIT IF NOT
         MVI   E0A06PBA,DFHBMASB  SHOW PF11
KB0A06BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0A06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0A06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0A06DP DC    PL8'0'
KB0A06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0A06   DS    0H
         USING *,R6
* PF12 : DELETEQ TS
         USING EDF0A06S,R4
         XC    KC0A06RP,KC0A06RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0A06RP) LENGTH(KC0A06LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0A06RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0A06L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0A06') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0A06BS           EXIT IF IT IS
         TM    E0A06DIF,DFHBMEOF  ANY DATA ?
         BO    KC0A06BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0A06DII  SAVE INPUT REDISPLAY NUMBER
KC0A06BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0A06RP DS    CL50               RECEIVE AREA
KC0A06LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20C02   DS    0H
* GETMAIN
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : GETMAIN - NO PROCESSING
* PF12 : GETMAIN - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0C02S,R4
         MVC   E0C02ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0C02P7A,DFHBMASD  HIDE PF7
         MVI   E0C02P8A,DFHBMASD  HIDE PF8
         MVI   E0C02PAA,DFHBMASD  HIDE PF10
         MVI   E0C02PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20C02S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20C02S4 EQU   *
         XC    E0C02DIL,E0C02DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20C02S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0C02PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20C02S6           EXIT
*
K20C02S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20C02NP           EXIT IF NOT
* REDISPLAY MODE
K20C02S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0C02PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0C02DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0C02DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0C02DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0C02DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20C02DC        CONVERT TO DECIMAL
         UNPK  E0C02DTO+1(3),K20C02DC+6(2) UNPACK NUMITEMS
         OI    E0C02DTO+3,X'F0'   SET SIGN
         MVI   E0C02DTO,C'/'      SET /
         MVC   E0C02ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20C02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20C02DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20C027P           EXIT IF NOT
         MVI   E0C02P7A,DFHBMASB  SHOW PF7
K20C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20C028P           EXIT IF NOT
         MVI   E0C02P8A,DFHBMASB  SHOW PF8
K20C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20C02AP           EXIT IF NOT
         MVI   E0C02PAA,DFHBMASB  SHOW PF10
K20C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20C02NP           EXIT IF NOT
         MVI   E0C02PBA,DFHBMASB  SHOW PF11
K20C02NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0C02') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0C02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20C02DC DC    PL8'0'
*
K50C02   DS    0H
         USING *,R6
* PF5  : GETMAIN
* WORKING STORAGE DISPLAY
         USING EDF0C02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0C02TSO   MOVE TRANSID
         MVC   EWKSPGO,E0C02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0C02TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0C02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70C02   DS    0H
         USING *,R6
* PF7  : GETMAIN
* REDISPLAY BACK 1
         USING EDF0C02S,R4
         CLI   E0C02P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70C02DP,=P'1'     BACK 1
         CVB   R8,K70C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C02P7A,DFHBMASD  HIDE PF7
         MVI   E0C02P8A,DFHBMASB  SHOW PF8
         MVI   E0C02PAA,DFHBMASD  HIDE PF10
         MVI   E0C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70C027P           EXIT IF NOT
         MVI   E0C02P7A,DFHBMASB  SHOW PF7
K70C027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70C02AP           EXIT IF NOT
         MVI   E0C02PAA,DFHBMASB  SHOW PF10
K70C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70C02BP           EXIT IF NOT
         MVI   E0C02PBA,DFHBMASB  SHOW PF11
K70C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70C02DP DC    PL8'0'
K70C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80C02   DS    0H
         USING *,R6
* PF8  : GETMAIN
* REDISPLAY FORWARD 1
         USING EDF0C02S,R4
         CLI   E0C02P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80C02DP,=P'1'     FORWARD 1
         CVB   R8,K80C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C02P7A,DFHBMASB  SHOW PF7
         MVI   E0C02P8A,DFHBMASD  HIDE PF8
         MVI   E0C02PAA,DFHBMASD  HIDE PF10
         MVI   E0C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80C028P           EXIT IF NOT
         MVI   E0C02P8A,DFHBMASB  SHOW PF8
K80C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80C02AP           EXIT IF NOT
         MVI   E0C02PAA,DFHBMASB  SHOW PF10
K80C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80C02BP           EXIT IF NOT
         MVI   E0C02PBA,DFHBMASB  SHOW PF11
K80C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80C02DP DC    PL8'0'
K80C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0C02   DS    0H
         USING *,R6
* PF10 : GETMAIN
* REDISPLAY BACK 5
         USING EDF0C02S,R4
         CLI   E0C02PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0C02DP,=P'5'     BACK 5
         CVB   R8,KA0C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C02P7A,DFHBMASD  HIDE PF7
         MVI   E0C02P8A,DFHBMASD  HIDE PF8
         MVI   E0C02PAA,DFHBMASD  HIDE PF10
         MVI   E0C02PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0C027P           EXIT IF NOT
         MVI   E0C02P7A,DFHBMASB  SHOW PF7
KA0C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0C028P           EXIT IF NOT
         MVI   E0C02P8A,DFHBMASB  SHOW PF8
KA0C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0C02AP           EXIT IF NOT
         MVI   E0C02PAA,DFHBMASB  SHOW PF10
KA0C02AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0C02DP DC    PL8'0'
KA0C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0C02   DS    0H
         USING *,R6
* PF11 : GETMAIN
* REDISPLAY FORWARD 5
         USING EDF0C02S,R4
         CLI   E0C02PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0C02DP,=P'5'     FORWARD 5
         CVB   R8,KB0C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C02P7A,DFHBMASD  HIDE PF7
         MVI   E0C02P8A,DFHBMASD  HIDE PF8
         MVI   E0C02PAA,DFHBMASB  SHOW PF10
         MVI   E0C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0C027P           EXIT IF NOT
         MVI   E0C02P7A,DFHBMASB  SHOW PF7
KB0C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0C028P           EXIT IF NOT
         MVI   E0C02P8A,DFHBMASB  SHOW PF8
KB0C028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0C02BP           EXIT IF NOT
         MVI   E0C02PBA,DFHBMASB  SHOW PF11
KB0C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0C02DP DC    PL8'0'
KB0C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0C02   DS    0H
         USING *,R6
* PF12 : GETMAIN
         USING EDF0C02S,R4
         XC    KC0C02RP,KC0C02RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0C02RP) LENGTH(KC0C02LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0C02RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0C02L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0C02') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0C02BS           EXIT IF IT IS
         TM    E0C02DIF,DFHBMEOF  ANY DATA ?
         BO    KC0C02BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0C02DII  SAVE INPUT REDISPLAY NUMBER
KC0C02BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0C02RP DS    CL50               RECEIVE AREA
KC0C02LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20C04   DS    0H
* FREEMAIN
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : FREEMAIN - NO PROCESSING
* PF12 : FREEMAIN - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0C04S,R4
         MVC   E0C04ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0C04P7A,DFHBMASD  HIDE PF7
         MVI   E0C04P8A,DFHBMASD  HIDE PF8
         MVI   E0C04PAA,DFHBMASD  HIDE PF10
         MVI   E0C04PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20C04S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20C04S4 EQU   *
         XC    E0C04DIL,E0C04DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20C04S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0C04PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20C04S6           EXIT
*
K20C04S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20C04NP           EXIT IF NOT
* REDISPLAY MODE
K20C04S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0C04PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0C04DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0C04DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0C04DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0C04DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20C04DC        CONVERT TO DECIMAL
         UNPK  E0C04DTO+1(3),K20C04DC+6(2) UNPACK NUMITEMS
         OI    E0C04DTO+3,X'F0'   SET SIGN
         MVI   E0C04DTO,C'/'      SET /
         MVC   E0C04ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20C04DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20C04DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20C047P           EXIT IF NOT
         MVI   E0C04P7A,DFHBMASB  SHOW PF7
K20C047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20C048P           EXIT IF NOT
         MVI   E0C04P8A,DFHBMASB  SHOW PF8
K20C048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20C04AP           EXIT IF NOT
         MVI   E0C04PAA,DFHBMASB  SHOW PF10
K20C04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20C04NP           EXIT IF NOT
         MVI   E0C04PBA,DFHBMASB  SHOW PF11
K20C04NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0C04') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0C04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20C04DC DC    PL8'0'
*
K50C04   DS    0H
         USING *,R6
* PF5  : FREEMAIN
* WORKING STORAGE DISPLAY
         USING EDF0C04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0C04TSO   MOVE TRANSID
         MVC   EWKSPGO,E0C04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0C04TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0C04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70C04   DS    0H
         USING *,R6
* PF7  : FREEMAIN
* REDISPLAY BACK 1
         USING EDF0C04S,R4
         CLI   E0C04P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70C04DP,=P'1'     BACK 1
         CVB   R8,K70C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C04P7A,DFHBMASD  HIDE PF7
         MVI   E0C04P8A,DFHBMASB  SHOW PF8
         MVI   E0C04PAA,DFHBMASD  HIDE PF10
         MVI   E0C04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70C047P           EXIT IF NOT
         MVI   E0C04P7A,DFHBMASB  SHOW PF7
K70C047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70C04AP           EXIT IF NOT
         MVI   E0C04PAA,DFHBMASB  SHOW PF10
K70C04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70C04BP           EXIT IF NOT
         MVI   E0C04PBA,DFHBMASB  SHOW PF11
K70C04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70C04DP DC    PL8'0'
K70C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80C04   DS    0H
         USING *,R6
* PF8  : FREEMAIN
* REDISPLAY FORWARD 1
         USING EDF0C04S,R4
         CLI   E0C04P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80C04DP,=P'1'     FORWARD 1
         CVB   R8,K80C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C04P7A,DFHBMASB  SHOW PF7
         MVI   E0C04P8A,DFHBMASD  HIDE PF8
         MVI   E0C04PAA,DFHBMASD  HIDE PF10
         MVI   E0C04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80C048P           EXIT IF NOT
         MVI   E0C04P8A,DFHBMASB  SHOW PF8
K80C048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80C04AP           EXIT IF NOT
         MVI   E0C04PAA,DFHBMASB  SHOW PF10
K80C04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80C04BP           EXIT IF NOT
         MVI   E0C04PBA,DFHBMASB  SHOW PF11
K80C04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80C04DP DC    PL8'0'
K80C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0C04   DS    0H
         USING *,R6
* PF10 : FREEMAIN
* REDISPLAY BACK 5
         USING EDF0C04S,R4
         CLI   E0C04PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0C04DP,=P'5'     BACK 5
         CVB   R8,KA0C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C04P7A,DFHBMASD  HIDE PF7
         MVI   E0C04P8A,DFHBMASD  HIDE PF8
         MVI   E0C04PAA,DFHBMASD  HIDE PF10
         MVI   E0C04PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0C047P           EXIT IF NOT
         MVI   E0C04P7A,DFHBMASB  SHOW PF7
KA0C047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0C048P           EXIT IF NOT
         MVI   E0C04P8A,DFHBMASB  SHOW PF8
KA0C048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0C04AP           EXIT IF NOT
         MVI   E0C04PAA,DFHBMASB  SHOW PF10
KA0C04AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0C04DP DC    PL8'0'
KA0C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0C04   DS    0H
         USING *,R6
* PF11 : FREEMAIN
* REDISPLAY FORWARD 5
         USING EDF0C04S,R4
         CLI   E0C04PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0C04DP,=P'5'     FORWARD 5
         CVB   R8,KB0C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0C04P7A,DFHBMASD  HIDE PF7
         MVI   E0C04P8A,DFHBMASD  HIDE PF8
         MVI   E0C04PAA,DFHBMASB  SHOW PF10
         MVI   E0C04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0C047P           EXIT IF NOT
         MVI   E0C04P7A,DFHBMASB  SHOW PF7
KB0C047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0C048P           EXIT IF NOT
         MVI   E0C04P8A,DFHBMASB  SHOW PF8
KB0C048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0C04BP           EXIT IF NOT
         MVI   E0C04PBA,DFHBMASB  SHOW PF11
KB0C04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0C04DP DC    PL8'0'
KB0C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0C04   DS    0H
         USING *,R6
* PF12 : FREEMAIN
         USING EDF0C04S,R4
         XC    KC0C04RP,KC0C04RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0C04RP) LENGTH(KC0C04LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0C04RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0C04L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0C04') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0C04BS           EXIT IF IT IS
         TM    E0C04DIF,DFHBMEOF  ANY DATA ?
         BO    KC0C04BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0C04DII  SAVE INPUT REDISPLAY NUMBER
KC0C04BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0C04RP DS    CL50               RECEIVE AREA
KC0C04LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E02IN DS    0H
         USING *,R6
* PROGRAM INITIATION (LINK OR XCTL)
*
* CLEAR: RESEND MAP
* PF2  : PROGRAM INITIATION
* PF12 : PROGRAM INITIATION - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF01S,R4
         MVC   E01ENTRO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E01PF7A,DFHBMASD   HIDE PF7
         MVI   E01PF8A,DFHBMASD   HIDE PF8
         MVI   E01PF10A,DFHBMASD  HIDE PF10
         MVI   E01PF11A,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E024S           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E024S EQU   *
         XC    E01DSNOL,E01DSNOL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E025S           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E01PF12A,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E026S           EXIT
*
K20E025S EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E02RD           EXIT IF NOT
* REDISPLAY MODE
K20E026S EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E01PF12A,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E01DISPA,DFHBMASB  SET DISPLAY ON
         MVI   E01DSNOA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E01DSNOL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E01DSNOO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E02DP        CONVERT TO DECIMAL
         UNPK  E01DSTLO+1(3),K20E02DP+6(2) UNPACK NUMITEMS
         OI    E01DSTLO+3,X'F0'   SET SIGN
         MVI   E01DSTLO,C'/'      SET /
         MVC   E01ENTRO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E02DP        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E027N           EXIT IF NOT
         MVI   E01PF7A,DFHBMASB   SHOW PF7
K20E027N EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E028N           EXIT IF NOT
         MVI   E01PF8A,DFHBMASB   SHOW PF8
K20E028N EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E02AN           EXIT IF NOT
         MVI   E01PF10A,DFHBMASB  SHOW PF10
K20E02AN EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E02RD           EXIT IF NOT
         MVI   E01PF11A,DFHBMASB  SHOW PF11
K20E02RD EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20E02SN           EXIT IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E021M           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20E02NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E022M           EXIT
*
K20E021M EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20E02NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E022M EQU   *
         MVC   K20E02SA,E01EBRQO  SAVE EIBREQID
         TR    E01EBRQO(8),K20E02TE EIBREQID TO EBCDIC
         MVC   E01EBRQO+8(11),=11C' ' CLEAR REMAINDER
         MVC   K20E02SB,E01EBRSO  SAVE EIBRSRCE
         TR    E01EBRSO(8),K20E02TE EIBRSRCE TO EBCDIC
         MVC   E01EBRSO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01MODEO,=CL6'EBCDIC' SET MODE
         B     K20E02SN           EXIT
*
K20E02NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E023M           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K20E02NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20E024M           EXIT
*
K20E023M EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20E02NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20E024M EQU   *
         MVC   E01EBRQO(8),K20E02SA MOVE EIBREQID
         TR    E01EBRQO(8),K20E02TA EIBREQID TO ASCII
         MVC   E01EBRQO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01EBRSO(8),K20E02SB MOVE EIBRSRCE
         TR    E01EBRSO(8),K20E02TA EIBRSRCE TO ASCII
         MVC   E01EBRSO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01MODEO,=CL6'ASCII' SET MODE
         B     K20E02SN           EXIT
*
K20E02NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E025M           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K20E02NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20E026M           EXIT
*
K20E025M EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20E02NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20E026M EQU   *
* EIBREQID TO HEX
         LA    R1,K20E02TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20E02SA        SOURCE ADDRESS
         MVHHI E01EBRQO,C'X'''    MOVE X'
         LA    R14,E01EBRQO+2     DESTINATION ADDRESS
         LA    R15,8              SOURCE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVI   E01EBRQO+18,C''''  MOVE ENDING QUOTE
* EIBRSRCE TO HEX
         LA    R8,K20E02SB        SOURCE ADDRESS
         MVHHI E01EBRSO,C'X'''    MOVE X'
         LA    R14,E01EBRSO+2     DESTINATION ADDRESS
         LA    R15,8              SOURCE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVI   E01EBRSO+18,C''''  MOVE ENDING QUOTE
         MVC   E01MODEO,=CL6'HEX' SET MODE
         B     K20E02SN           EXIT
*
K20E02NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E027M           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E028M           EXIT
*
K20E027M EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E028M EQU   *
         MVC   E01EBRQO(8),K20E02SA MOVE EIBREQID
         TR    E01EBRQO(8),K20E02TE EIBREQID TO EBCDIC
         MVC   E01EBRQO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01EBRSO(8),K20E02SB MOVE EIBRSRCE
         TR    E01EBRSO(8),K20E02TE EIBRSRCE TO EBCDIC
         MVC   E01EBRSO+8(11),=11C' ' CLEAR REMAINDER
         MVC   E01MODEO,=CL6'EBCDIC' SET MODE
K20E02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF01') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E02IN        ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E02DP DC    PL8'0'
K20E02SA DS    XL8                SAVE EIBREQID
K20E02SB DS    XL8                SAVE EIBRSRCE
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20E02TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20E02TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20E02TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50E02IN DS    0H
         USING *,R6
* PF5  : PROGRAM INITIATION : 'AFTER' LINK
*        PROGRAM INITIATION : 'AFTER' XCTL
* WORKING STORAGE DISPLAY
         USING EDF01S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E01TRANO   MOVE TRANSID
         MVC   EWKSPGO,E01PROGO   MOVE PROGRAM
         MVC   EWKSTNO,E01TSKNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF01L          BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E02IN DS    0H
         USING *,R6
* PF7  : PROGRAM INITIATION : 'AFTER' LINK
*        PROGRAM INITIATION : 'AFTER' XCTL
* REDISPLAY BACK 1
         USING EDF01S,R4
         CLI   E01PF7A,DFHBMASD   IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E02DC,=P'1'     BACK 1
         CVB   R8,K70E02DC        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E02DC+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E01PF7A,DFHBMASD   HIDE PF7
         MVI   E01PF8A,DFHBMASB   SHOW PF8
         MVI   E01PF10A,DFHBMASD  HIDE PF10
         MVI   E01PF11A,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E027N           EXIT IF NOT
         MVI   E01PF7A,DFHBMASB   SHOW PF7
K70E027N EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E02AN           EXIT IF NOT
         MVI   E01PF10A,DFHBMASB  SHOW PF10
K70E02AN EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E02BN           EXIT IF NOT
         MVI   E01PF11A,DFHBMASB  SHOW PF11
K70E02BN EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E02IM        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E02IM)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E02DC DC    PL8'0'
K70E02IM DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E02IN DS    0H
         USING *,R6
* PF8  : PROGRAM INITIATION : 'AFTER' LINK
*        PROGRAM INITIATION : 'AFTER' XCTL
* REDISPLAY FORWARD 1
         USING EDF01S,R4
         CLI   E01PF8A,DFHBMASD   IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E02DC,=P'1'     FORWARD 1
         CVB   R8,K80E02DC        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E02DC+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E01PF7A,DFHBMASB   SHOW PF7
         MVI   E01PF8A,DFHBMASD   HIDE PF8
         MVI   E01PF10A,DFHBMASD  HIDE PF10
         MVI   E01PF11A,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E028N           EXIT IF NOT
         MVI   E01PF8A,DFHBMASB   SHOW PF8
K80E028N EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E02AN           EXIT IF NOT
         MVI   E01PF10A,DFHBMASB  SHOW PF10
K80E02AN EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E02BN           EXIT IF NOT
         MVI   E01PF11A,DFHBMASB  SHOW PF11
K80E02BN EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E02IM        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E02IM)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E02DC DC    PL8'0'
K80E02IM DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E02IN DS    0H
         USING *,R6
* PF10 : PROGRAM INITIATION : 'AFTER' LINK
*        PROGRAM INITIATION : 'AFTER' XCTL
* REDISPLAY BACK 5
         USING EDF01S,R4
         CLI   E01PF10A,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E02DC,=P'5'     BACK 5
         CVB   R8,KA0E02DC        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E02DC+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E01PF7A,DFHBMASD   HIDE PF7
         MVI   E01PF8A,DFHBMASD   HIDE PF8
         MVI   E01PF10A,DFHBMASD  HIDE PF10
         MVI   E01PF11A,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E027N           EXIT IF NOT
         MVI   E01PF7A,DFHBMASB   SHOW PF7
KA0E027N EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E028N           EXIT IF NOT
         MVI   E01PF8A,DFHBMASB   SHOW PF8
KA0E028N EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E02AN           EXIT IF NOT
         MVI   E01PF10A,DFHBMASB  SHOW PF10
KA0E02AN EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E02IM        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E02IM)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E02DC DC    PL8'0'
KA0E02IM DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E02IN DS    0H
         USING *,R6
* PF11 : PROGRAM INITIATION : 'AFTER' LINK
*        PROGRAM INITIATION : 'AFTER' XCTL
* REDISPLAY FORWARD 5
         USING EDF01S,R4
         CLI   E01PF11A,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E02DC,=P'5'     FORWARD 5
         CVB   R8,KB0E02DC        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E02DC+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E01PF7A,DFHBMASD   HIDE PF7
         MVI   E01PF8A,DFHBMASD   HIDE PF8
         MVI   E01PF10A,DFHBMASB  SHOW PF10
         MVI   E01PF11A,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E027N           EXIT IF NOT
         MVI   E01PF7A,DFHBMASB   SHOW PF7
KB0E027N EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E028N           EXIT IF NOT
         MVI   E01PF8A,DFHBMASB   SHOW PF8
KB0E028N EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E02BN           EXIT IF NOT
         MVI   E01PF11A,DFHBMASB  SHOW PF11
KB0E02BN EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E02IM        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E02IM)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E02DC DC    PL8'0'
KB0E02IM DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E02IN DS    0H
         USING *,R6
* PF12 : PROGRAM INITIATION : 'AFTER' LINK
*        PROGRAM INITIATION : 'AFTER' XCTL
         USING EDF01S,R4
         XC    KC0E02RC,KC0E02RC  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E02RC) LENGTH(KC0E02LN)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E02RC        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF01L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF01') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E02BR           EXIT IF IT IS
         TM    E01DSNOF,DFHBMEOF  ANY DATA ?
         BO    KC0E02BR           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E01DSNOI  SAVE INPUT REDISPLAY NUMBER
KC0E02BR EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E02RC DS    CL50               RECEIVE AREA
KC0E02LN DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E02   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' LINK (NOT LEVEL0)
*      : 'AFTER' LINK FAIL
         USING EDF0E02S,R4
         MVC   E0E02ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0E02P7A,DFHBMASD  HIDE PF7
         MVI   E0E02P8A,DFHBMASD  HIDE PF8
         MVI   E0E02PAA,DFHBMASD  HIDE PF10
         MVI   E0E02PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E02S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E02S4 EQU   *
         XC    E0E02DIL,E0E02DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E02S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0E02PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E02S6           EXIT
*
K20E02S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E02NP           EXIT IF NOT
* REDISPLAY MODE
K20E02S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0E02PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0E02DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0E02DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0E02DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0E02DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E02DC        CONVERT TO DECIMAL
         UNPK  E0E02DTO+1(3),K20E02DC+6(2) UNPACK NUMITEMS
         OI    E0E02DTO+3,X'F0'   SET SIGN
         MVI   E0E02DTO,C'/'      SET /
         MVC   E0E02ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E02DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E027P           EXIT IF NOT
         MVI   E0E02P7A,DFHBMASB  SHOW PF7
K20E027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E028P           EXIT IF NOT
         MVI   E0E02P8A,DFHBMASB  SHOW PF8
K20E028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E02AP           EXIT IF NOT
         MVI   E0E02PAA,DFHBMASB  SHOW PF10
K20E02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E02NP           EXIT IF NOT
         MVI   E0E02PBA,DFHBMASB  SHOW PF11
K20E02NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20E02S2           EXIT IF IT IS
* COMMAREA TO BE CONVERTED IF PRESENT
         MVI   E0E02P2A,DFHBMASD  HIDE PF2
         CLI   E0E02CMO,C'C'      ANY COMMAREA ?
         BNE   K20E02S2           EXIT IF NONE
* THERE IS A COMMAREA
         MVI   E0E02P2A,DFHBMASB  SHOW PF2
         PACK  K20E02CD,E0E02LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E02CD        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   K20E02EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20E02EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20E02CD        SAVE DISPLAY LENGTH-1
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E02M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20E02R2           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E02M2           EXIT
*
K20E02M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20E02R2           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E02M2 EQU   *
         EX    R8,K20E02SC        SAVE COMMAREA
         EX    R8,K20E02CE        COMMAREA TO EBCDIC
         MVC   E0E02MDO,=CL6'EBCDIC' SET MODE
         B     K20E02S2           EXIT
*
K20E02R2 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E02M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K20E02E2           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20E02M4           EXIT
*
K20E02M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20E02E2           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20E02M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E02CD        RESTORE LENGTH FOR EX
         EX    R8,K20E02RC        MOVE COMMAREA BACK
         EX    R8,K20E02CA        COMMAREA TO ASCII
         MVC   E0E02MDO,=CL6'ASCII' SET MODE
         B     K20E02S2           EXIT
*
K20E02E2 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E02M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K20E02A2           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20E02M6           EXIT
*
K20E02M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20E02A2           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20E02M6 EQU   *
* MAX DATA LENGTH IS 67 AS COMMAREA (..//..)
* HEX DATA FORMAT WILL BE  COMMAREA (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LR    R0,R15             SAVE LENGTH
         LA    R1,K20E022H        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20E02SV        SOURCE ADDRESS
         XC    E0E02CMO+10(69),E0E02CMO+10 CLEAR COMMAREA DISPLAY
         MVHHI E0E02CMO+10,C'X''' MOVE X'
         LA    R14,E0E02CMO+12    DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20E02HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20E02HX EQU   *
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0E02CMO+12(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0E02MDO,=CL6'HEX' SET MODE
         B     K20E02S2           EXIT
*
K20E02A2 EQU   *
* HAS TO BE IN HEX MODE
         PACK  K20E02CD,E0E02LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E02CD        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   K20E02X2           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20E02X2 EQU   *
         BCTR  R8,0               -1 FOR EX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E02M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E02M8           EXIT
*
K20E02M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E02M8 EQU   *
         XC    E0E02CMO+10(69),E0E02CMO+10 CLEAR COMMAREA DISPLAY
         EX    R8,K20E02RC        MOVE COMMAREA BACK
         EX    R8,K20E02CE        COMMAREA TO EBCDIC
         LA    R5,E0E02CMO+11(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
         MVC   E0E02MDO,=CL6'EBCDIC' SET MODE
K20E02S2 EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E02') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E02DC DC    PL8'0'
K20E02CD DC    PL8'0'
K20E02SV DS    XL67
K20E02SC MVC   K20E02SV(0),E0E02CMO+10 SAVE COMMAREA
K20E02CE TR    E0E02CMO+10(0),K20E022E COMMAREA TO EBCDIC
K20E02RC MVC   E0E02CMO+10(0),K20E02SV MOVE COMMAREA BACK
K20E02CA TR    E0E02CMO+10(0),K20E022A COMMAREA TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20E022E EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20E022A EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20E022H DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50E02   DS    0H
         USING *,R6
* PF5  : 'BEFORE' LINK (NOT LEVEL0)
*      : 'AFTER' LINK FAIL
* WORKING STORAGE DISPLAY
         USING EDF0E02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E02TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E02TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0E02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E02   DS    0H
         USING *,R6
* PF7  : 'BEFORE' LINK (NOT LEVEL0)
*      : 'AFTER' LINK FAIL
* REDISPLAY BACK 1
         USING EDF0E02S,R4
         CLI   E0E02P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E02DP,=P'1'     BACK 1
         CVB   R8,K70E02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E02P7A,DFHBMASD  HIDE PF7
         MVI   E0E02P8A,DFHBMASB  SHOW PF8
         MVI   E0E02PAA,DFHBMASD  HIDE PF10
         MVI   E0E02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E027P           EXIT IF NOT
         MVI   E0E02P7A,DFHBMASB  SHOW PF7
K70E027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E02AP           EXIT IF NOT
         MVI   E0E02PAA,DFHBMASB  SHOW PF10
K70E02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E02BP           EXIT IF NOT
         MVI   E0E02PBA,DFHBMASB  SHOW PF11
K70E02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E02DP DC    PL8'0'
K70E02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E02   DS    0H
         USING *,R6
* PF8  : 'BEFORE' LINK (NOT LEVEL0)
*      : 'AFTER' LINK FAIL
* REDISPLAY FORWARD 1
         USING EDF0E02S,R4
         CLI   E0E02P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E02DP,=P'1'     FORWARD 1
         CVB   R8,K80E02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E02P7A,DFHBMASB  SHOW PF7
         MVI   E0E02P8A,DFHBMASD  HIDE PF8
         MVI   E0E02PAA,DFHBMASD  HIDE PF10
         MVI   E0E02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E028P           EXIT IF NOT
         MVI   E0E02P8A,DFHBMASB  SHOW PF8
K80E028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E02AP           EXIT IF NOT
         MVI   E0E02PAA,DFHBMASB  SHOW PF10
K80E02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E02BP           EXIT IF NOT
         MVI   E0E02PBA,DFHBMASB  SHOW PF11
K80E02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E02DP DC    PL8'0'
K80E02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E02   DS    0H
         USING *,R6
* PF10 : 'BEFORE' LINK (NOT LEVEL0)
*      : 'AFTER' LINK FAIL
* REDISPLAY BACK 5
         USING EDF0E02S,R4
         CLI   E0E02PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E02DP,=P'5'     BACK 5
         CVB   R8,KA0E02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E02P7A,DFHBMASD  HIDE PF7
         MVI   E0E02P8A,DFHBMASD  HIDE PF8
         MVI   E0E02PAA,DFHBMASD  HIDE PF10
         MVI   E0E02PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E027P           EXIT IF NOT
         MVI   E0E02P7A,DFHBMASB  SHOW PF7
KA0E027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E028P           EXIT IF NOT
         MVI   E0E02P8A,DFHBMASB  SHOW PF8
KA0E028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E02AP           EXIT IF NOT
         MVI   E0E02PAA,DFHBMASB  SHOW PF10
KA0E02AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E02DP DC    PL8'0'
KA0E02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E02   DS    0H
         USING *,R6
* PF11 : 'BEFORE' LINK (NOT LEVEL0)
*      : 'AFTER' LINK FAIL
* REDISPLAY FORWARD 5
         USING EDF0E02S,R4
         CLI   E0E02PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E02DP,=P'5'     FORWARD 5
         CVB   R8,KB0E02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E02P7A,DFHBMASD  HIDE PF7
         MVI   E0E02P8A,DFHBMASD  HIDE PF8
         MVI   E0E02PAA,DFHBMASB  SHOW PF10
         MVI   E0E02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E027P           EXIT IF NOT
         MVI   E0E02P7A,DFHBMASB  SHOW PF7
KB0E027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E028P           EXIT IF NOT
         MVI   E0E02P8A,DFHBMASB  SHOW PF8
KB0E028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E02BP           EXIT IF NOT
         MVI   E0E02PBA,DFHBMASB  SHOW PF11
KB0E02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E02DP DC    PL8'0'
KB0E02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E02   DS    0H
         USING *,R6
* PF12 : 'BEFORE' LINK (NOT LEVEL0)
*      : 'AFTER' LINK FAIL
         USING EDF0E02S,R4
         XC    KC0E02RP,KC0E02RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E02RP) LENGTH(KC0E02LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E02RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0E02L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0E02') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E02BS           EXIT IF IT IS
         TM    E0E02DIF,DFHBMEOF  ANY DATA ?
         BO    KC0E02BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0E02DII  SAVE INPUT REDISPLAY NUMBER
KC0E02BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E02RP DS    CL50               RECEIVE AREA
KC0E02LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E04   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' XCTL
* PF12 : 'BEFORE' XCTL - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0E04S,R4
         MVC   E0E04ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0E04P7A,DFHBMASD  HIDE PF7
         MVI   E0E04P8A,DFHBMASD  HIDE PF8
         MVI   E0E04PAA,DFHBMASD  HIDE PF10
         MVI   E0E04PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E04S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E04S4 EQU   *
         XC    E0E04DIL,E0E04DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E04S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0E04PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E04S6           EXIT
*
K20E04S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E04NP           EXIT IF NOT
* REDISPLAY MODE
K20E04S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0E04PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0E04DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0E04DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0E04DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0E04DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E04DC        CONVERT TO DECIMAL
         UNPK  E0E04DTO+1(3),K20E04DC+6(2) UNPACK NUMITEMS
         OI    E0E04DTO+3,X'F0'   SET SIGN
         MVI   E0E04DTO,C'/'      SET /
         MVC   E0E04ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E04DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E04DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E047P           EXIT IF NOT
         MVI   E0E04P7A,DFHBMASB  SHOW PF7
K20E047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E048P           EXIT IF NOT
         MVI   E0E04P8A,DFHBMASB  SHOW PF8
K20E048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E04AP           EXIT IF NOT
         MVI   E0E04PAA,DFHBMASB  SHOW PF10
K20E04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E04NP           EXIT IF NOT
         MVI   E0E04PBA,DFHBMASB  SHOW PF11
K20E04NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20E04SN           EXIT IF IT IS
* COMMAREA TO BE CONVERTED IF PRESENT
         MVI   E0E04P2A,DFHBMASD  HIDE PF2
         CLI   E0E04CMO,C'C'      ANY COMMAREA ?
         BNE   K20E04SN           EXIT IF NONE
* THERE IS A COMMAREA
         MVI   E0E04P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E04M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20E04NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E04M2           EXIT
*
K20E04M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20E04NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E04M2 EQU   *
         PACK  K20E04SC,E0E04LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E04SC        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   K20E04EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20E04EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20E04SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20E04MC        SAVE COMMAREA
         EX    R8,K20E04CE        COMMAREA TO EBCDIC
         MVC   E0E04MDO,=CL6'EBCDIC' SET MODE
         B     K20E04SN           EXIT
*
K20E04NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E04M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K20E04NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20E04M4           EXIT
*
K20E04M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20E04NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20E04M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E04SC        RESTORE LENGTH FOR EX
         EX    R8,K20E04RC        MOVE COMMAREA BACK
         EX    R8,K20E04CA        COMMAREA TO ASCII
         MVC   E0E04MDO,=CL6'ASCII' SET MODE
         B     K20E04SN           EXIT
*
K20E04NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E04M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K20E04NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20E04M6           EXIT
*
K20E04M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20E04NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20E04M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E04SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS COMMAREA (..//..)
* HEX DATA FORMAT WILL BE  COMMAREA (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LA    R1,K20E04TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20E04SV        SOURCE ADDRESS
         XC    E0E04CMO+10(69),E0E04CMO+10 CLEAR COMMAREA DISPLAY
         MVHHI E0E04CMO+10,C'X''' MOVE X'
         LA    R14,E0E04CMO+12    DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20E04LN           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20E04LN EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0E04CMO+12(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0E04MDO,=CL6'HEX' SET MODE
         B     K20E04SN           EXIT
*
K20E04NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E04M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E04M8           EXIT
*
K20E04M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E04M8 EQU   *
         XC    E0E04CMO+10(69),E0E04CMO+10 CLEAR COMMAREA DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E04SC        RESTORE LENGTH FOR EX
         EX    R8,K20E04RC        MOVE COMMAREA BACK
         EX    R8,K20E04CE        COMMAREA TO EBCDIC
         LA    R5,E0E04CMO+11(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
         MVC   E0E04MDO,=CL6'EBCDIC' SET MODE
K20E04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E04') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E04DC DC    PL8'0'
K20E04SC DC    PL8'0'
K20E04SV DS    XL67
K20E04MC MVC   K20E04SV(0),E0E04CMO+10 SAVE COMMAREA
K20E04CE TR    E0E04CMO+10(0),K20E04TE COMMAREA TO EBCDIC
K20E04RC MVC   E0E04CMO+10(0),K20E04SV MOVE COMMAREA BACK
K20E04CA TR    E0E04CMO+10(0),K20E04TA COMMAREA TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20E04TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20E04TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20E04TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50E04   DS    0H
         USING *,R6
* PF5  : 'BEFORE' XCTL
* WORKING STORAGE DISPLAY
         USING EDF0E04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E04TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E04TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0E04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E04   DS    0H
         USING *,R6
* PF7  : 'BEFORE' XCTL
* REDISPLAY BACK 1
         USING EDF0E04S,R4
         CLI   E0E04P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E04DP,=P'1'     BACK 1
         CVB   R8,K70E04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E04P7A,DFHBMASD  HIDE PF7
         MVI   E0E04P8A,DFHBMASB  SHOW PF8
         MVI   E0E04PAA,DFHBMASD  HIDE PF10
         MVI   E0E04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E047P           EXIT IF NOT
         MVI   E0E04P7A,DFHBMASB  SHOW PF7
K70E047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E04AP           EXIT IF NOT
         MVI   E0E04PAA,DFHBMASB  SHOW PF10
K70E04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E04BP           EXIT IF NOT
         MVI   E0E04PBA,DFHBMASB  SHOW PF11
K70E04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E04DP DC    PL8'0'
K70E04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E04   DS    0H
         USING *,R6
* PF8  : 'BEFORE' XCTL
* REDISPLAY FORWARD 1
         USING EDF0E04S,R4
         CLI   E0E04P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E04DP,=P'1'     FORWARD 1
         CVB   R8,K80E04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E04P7A,DFHBMASB  SHOW PF7
         MVI   E0E04P8A,DFHBMASD  HIDE PF8
         MVI   E0E04PAA,DFHBMASD  HIDE PF10
         MVI   E0E04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E048P           EXIT IF NOT
         MVI   E0E04P8A,DFHBMASB  SHOW PF8
K80E048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E04AP           EXIT IF NOT
         MVI   E0E04PAA,DFHBMASB  SHOW PF10
K80E04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E04BP           EXIT IF NOT
         MVI   E0E04PBA,DFHBMASB  SHOW PF11
K80E04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E04DP DC    PL8'0'
K80E04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E04   DS    0H
         USING *,R6
* PF10 : 'BEFORE' XCTL
* REDISPLAY BACK 5
         USING EDF0E04S,R4
         CLI   E0E04PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E04DP,=P'5'     BACK 5
         CVB   R8,KA0E04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E04P7A,DFHBMASD  HIDE PF7
         MVI   E0E04P8A,DFHBMASD  HIDE PF8
         MVI   E0E04PAA,DFHBMASD  HIDE PF10
         MVI   E0E04PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E047P           EXIT IF NOT
         MVI   E0E04P7A,DFHBMASB  SHOW PF7
KA0E047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E048P           EXIT IF NOT
         MVI   E0E04P8A,DFHBMASB  SHOW PF8
KA0E048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E04AP           EXIT IF NOT
         MVI   E0E04PAA,DFHBMASB  SHOW PF10
KA0E04AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E04DP DC    PL8'0'
KA0E04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E04   DS    0H
         USING *,R6
* PF11 : 'BEFORE' XCTL
* REDISPLAY FORWARD 5
         USING EDF0E04S,R4
         CLI   E0E04PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E04DP,=P'5'     FORWARD 5
         CVB   R8,KB0E04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E04P7A,DFHBMASD  HIDE PF7
         MVI   E0E04P8A,DFHBMASD  HIDE PF8
         MVI   E0E04PAA,DFHBMASB  SHOW PF10
         MVI   E0E04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E047P           EXIT IF NOT
         MVI   E0E04P7A,DFHBMASB  SHOW PF7
KB0E047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E048P           EXIT IF NOT
         MVI   E0E04P8A,DFHBMASB  SHOW PF8
KB0E048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E04BP           EXIT IF NOT
         MVI   E0E04PBA,DFHBMASB  SHOW PF11
KB0E04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E04DP DC    PL8'0'
KB0E04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E04   DS    0H
         USING *,R6
* PF12 : 'BEFORE' XCTL
         USING EDF0E04S,R4
         XC    KC0E04RP,KC0E04RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E04RP) LENGTH(KC0E04LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E04RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0E04L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0E04') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E04BS           EXIT IF IT IS
         TM    E0E04DIF,DFHBMEOF  ANY DATA ?
         BO    KC0E04BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0E04DII  SAVE INPUT REDISPLAY NUMBER
KC0E04BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E04RP DS    CL50               RECEIVE AREA
KC0E04LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E06   DS    0H
* LOAD
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : LOAD - NO PROCESSING
* PF12 : LOAD - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0E06S,R4
         MVC   E0E06ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0E06P7A,DFHBMASD  HIDE PF7
         MVI   E0E06P8A,DFHBMASD  HIDE PF8
         MVI   E0E06PAA,DFHBMASD  HIDE PF10
         MVI   E0E06PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E06S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E06S4 EQU   *
         XC    E0E06DIL,E0E06DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E06S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0E06PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E06S6           EXIT
*
K20E06S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E06NP           EXIT IF NOT
* REDISPLAY MODE
K20E06S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0E06PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0E06DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0E06DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0E06DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0E06DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E06DC        CONVERT TO DECIMAL
         UNPK  E0E06DTO+1(3),K20E06DC+6(2) UNPACK NUMITEMS
         OI    E0E06DTO+3,X'F0'   SET SIGN
         MVI   E0E06DTO,C'/'      SET /
         MVC   E0E06ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E06DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E06DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E067P           EXIT IF NOT
         MVI   E0E06P7A,DFHBMASB  SHOW PF7
K20E067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E068P           EXIT IF NOT
         MVI   E0E06P8A,DFHBMASB  SHOW PF8
K20E068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E06AP           EXIT IF NOT
         MVI   E0E06PAA,DFHBMASB  SHOW PF10
K20E06AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E06NP           EXIT IF NOT
         MVI   E0E06PBA,DFHBMASB  SHOW PF11
K20E06NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E06') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E06          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E06DC DC    PL8'0'
*
K50E06   DS    0H
         USING *,R6
* PF5  : LOAD
* WORKING STORAGE DISPLAY
         USING EDF0E06S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E06TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E06PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E06TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0E06L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E06   DS    0H
         USING *,R6
* PF7  : LOAD
* REDISPLAY BACK 1
         USING EDF0E06S,R4
         CLI   E0E06P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E06DP,=P'1'     BACK 1
         CVB   R8,K70E06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E06P7A,DFHBMASD  HIDE PF7
         MVI   E0E06P8A,DFHBMASB  SHOW PF8
         MVI   E0E06PAA,DFHBMASD  HIDE PF10
         MVI   E0E06PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E067P           EXIT IF NOT
         MVI   E0E06P7A,DFHBMASB  SHOW PF7
K70E067P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E06AP           EXIT IF NOT
         MVI   E0E06PAA,DFHBMASB  SHOW PF10
K70E06AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E06BP           EXIT IF NOT
         MVI   E0E06PBA,DFHBMASB  SHOW PF11
K70E06BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E06DP DC    PL8'0'
K70E06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E06   DS    0H
         USING *,R6
* PF8  : LOAD
* REDISPLAY FORWARD 1
         USING EDF0E06S,R4
         CLI   E0E06P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E06DP,=P'1'     FORWARD 1
         CVB   R8,K80E06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E06P7A,DFHBMASB  SHOW PF7
         MVI   E0E06P8A,DFHBMASD  HIDE PF8
         MVI   E0E06PAA,DFHBMASD  HIDE PF10
         MVI   E0E06PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E068P           EXIT IF NOT
         MVI   E0E06P8A,DFHBMASB  SHOW PF8
K80E068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E06AP           EXIT IF NOT
         MVI   E0E06PAA,DFHBMASB  SHOW PF10
K80E06AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E06BP           EXIT IF NOT
         MVI   E0E06PBA,DFHBMASB  SHOW PF11
K80E06BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E06DP DC    PL8'0'
K80E06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E06   DS    0H
         USING *,R6
* PF10 : LOAD
* REDISPLAY BACK 5
         USING EDF0E06S,R4
         CLI   E0E06PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E06DP,=P'5'     BACK 5
         CVB   R8,KA0E06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E06P7A,DFHBMASD  HIDE PF7
         MVI   E0E06P8A,DFHBMASD  HIDE PF8
         MVI   E0E06PAA,DFHBMASD  HIDE PF10
         MVI   E0E06PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E067P           EXIT IF NOT
         MVI   E0E06P7A,DFHBMASB  SHOW PF7
KA0E067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E068P           EXIT IF NOT
         MVI   E0E06P8A,DFHBMASB  SHOW PF8
KA0E068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E06AP           EXIT IF NOT
         MVI   E0E06PAA,DFHBMASB  SHOW PF10
KA0E06AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E06DP DC    PL8'0'
KA0E06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E06   DS    0H
         USING *,R6
* PF11 : LOAD
* REDISPLAY FORWARD 5
         USING EDF0E06S,R4
         CLI   E0E06PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E06DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E06DP,=P'5'     FORWARD 5
         CVB   R8,KB0E06DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E06DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E06P7A,DFHBMASD  HIDE PF7
         MVI   E0E06P8A,DFHBMASD  HIDE PF8
         MVI   E0E06PAA,DFHBMASB  SHOW PF10
         MVI   E0E06PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E067P           EXIT IF NOT
         MVI   E0E06P7A,DFHBMASB  SHOW PF7
KB0E067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E068P           EXIT IF NOT
         MVI   E0E06P8A,DFHBMASB  SHOW PF8
KB0E068P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E06BP           EXIT IF NOT
         MVI   E0E06PBA,DFHBMASB  SHOW PF11
KB0E06BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E06IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E06IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E06DP DC    PL8'0'
KB0E06IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E06   DS    0H
         USING *,R6
* PF12 : LOAD
         USING EDF0E06S,R4
         XC    KC0E06RP,KC0E06RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E06RP) LENGTH(KC0E06LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E06RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0E06L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0E06') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E06BS           EXIT IF IT IS
         TM    E0E06DIF,DFHBMEOF  ANY DATA ?
         BO    KC0E06BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0E06DII  SAVE INPUT REDISPLAY NUMBER
KC0E06BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E06RP DS    CL50               RECEIVE AREA
KC0E06LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E08   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'BEFORE' RETURN
* PF12 : 'BEFORE' RETURN - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0E08S,R4
         MVC   E0E08ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0E08P7A,DFHBMASD  HIDE PF7
         MVI   E0E08P8A,DFHBMASD  HIDE PF8
         MVI   E0E08PAA,DFHBMASD  HIDE PF10
         MVI   E0E08PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E08S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E08S4 EQU   *
         XC    E0E08DIL,E0E08DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E08S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0E08PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E08S6           EXIT
*
K20E08S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E08NP           EXIT IF NOT
* REDISPLAY MODE
K20E08S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0E08PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0E08DYA,DFHBMASB  SET DISPLAY ON
         MVI   E0E08DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0E08DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0E08DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E08DC        CONVERT TO DECIMAL
         UNPK  E0E08DTO+1(3),K20E08DC+6(2) UNPACK NUMITEMS
         OI    E0E08DTO+3,X'F0'   SET SIGN
         MVI   E0E08DTO,C'/'      SET /
         MVC   E0E08ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E08DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E08DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E087P           EXIT IF NOT
         MVI   E0E08P7A,DFHBMASB  SHOW PF7
K20E087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E088P           EXIT IF NOT
         MVI   E0E08P8A,DFHBMASB  SHOW PF8
K20E088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E08AP           EXIT IF NOT
         MVI   E0E08PAA,DFHBMASB  SHOW PF10
K20E08AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E08NP           EXIT IF NOT
         MVI   E0E08PBA,DFHBMASB  SHOW PF11
K20E08NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K20E08SN           EXIT IF IT IS
* COMMAREA TO BE CONVERTED IF PRESENT
         MVI   E0E08P2A,DFHBMASD  HIDE PF2
         CLI   E0E08CMO,C'C'      ANY COMMAREA ?
         BNE   K20E08SN           EXIT IF NONE
* THERE IS A COMMAREA
         MVI   E0E08P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E08M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K20E08NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E08M2           EXIT
*
K20E08M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K20E08NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E08M2 EQU   *
         PACK  K20E08SC,E0E08LNO+10(5) PACK COMMAREA LENGTH
         CVB   R8,K20E08SC        CONVERT TO BINARY
         CHI   R8,67              >67 ?
         BNH   K20E08LN           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K20E08LN EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K20E08SC        SAVE DISPLAY LENGTH-1
         EX    R8,K20E08CS        SAVE COMMAREA
         EX    R8,K20E08CE        COMMAREA TO EBCDIC
         MVC   E0E08MDO,=CL6'EBCDIC' SET MODE
         B     K20E08SN           EXIT
*
K20E08NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E08M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K20E08NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K20E08M4           EXIT
*
K20E08M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K20E08NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K20E08M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E08SC        RESTORE LENGTH-1 FOR EX
         EX    R8,K20E08RC        MOVE COMMAREA BACK
         EX    R8,K20E08CA        COMMAREA TO ASCII
         MVC   E0E08MDO,=CL6'ASCII' SET MODE
         B     K20E08SN           EXIT
*
K20E08NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E08M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K20E08NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K20E08M6           EXIT
*
K20E08M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K20E08NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K20E08M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E08SC        RESTORE LENGTH-1 FOR EX
* MAX DATA LENGTH IS 67 AS COMMAREA (..//..)
* HEX DATA FORMAT WILL BE  COMMAREA (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=COMMAREA LENGTH
         LA    R1,K20E08TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K20E08SV        SOURCE ADDRESS
         XC    E0E08CMO+10(69),E0E08CMO+10 CLEAR COMMAREA DISPLAY
         MVHHI E0E08CMO+10,C'X''' MOVE X'
         LA    R14,E0E08CMO+12    DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K20E08HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K20E08HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E0E08CMO+12(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E0E08MDO,=CL6'HEX' SET MODE
         B     K20E08SN           EXIT
*
K20E08NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E08M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K20E08M8           EXIT
*
K20E08M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K20E08M8 EQU   *
         XC    E0E08CMO+10(69),E0E08CMO+10 CLEAR COMMAREA DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K20E08SC        RESTORE LENGTH-1 FOR EX
         EX    R8,K20E08RC        MOVE COMMAREA BACK
         EX    R8,K20E08CE        COMMAREA TO EBCDIC
         LA    R5,E0E08CMO+11(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET COMMAREA CLOSE BRACKET
         MVC   E0E08MDO,=CL6'EBCDIC' SET MODE
K20E08SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E08') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E08          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E08DC DC    PL8'0'
K20E08SC DC    PL8'0'
K20E08SV DS    XL67
K20E08CS MVC   K20E08SV(0),E0E08CMO+10 SAVE COMMAREA
K20E08CE TR    E0E08CMO+10(0),K20E08TE COMMAREA TO EBCDIC
K20E08RC MVC   E0E08CMO+10(0),K20E08SV MOVE COMMAREA BACK
K20E08CA TR    E0E08CMO+10(0),K20E08TA COMMAREA TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K20E08TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K20E08TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K20E08TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K50E08   DS    0H
         USING *,R6
* PF5  : 'BEFORE' RETURN
* WORKING STORAGE DISPLAY
         USING EDF0E08S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E08TSO   MOVE TRANSID
         MVC   EWKSPGO,E0E08PGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E08TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0E08L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E08   DS    0H
         USING *,R6
* PF7  : 'BEFORE' RETURN
* REDISPLAY BACK 1
         USING EDF0E08S,R4
         CLI   E0E08P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E08DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E08DP,=P'1'     BACK 1
         CVB   R8,K70E08DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E08DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E08P7A,DFHBMASD  HIDE PF7
         MVI   E0E08P8A,DFHBMASB  SHOW PF8
         MVI   E0E08PAA,DFHBMASD  HIDE PF10
         MVI   E0E08PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E087P           EXIT IF NOT
         MVI   E0E08P7A,DFHBMASB  SHOW PF7
K70E087P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E08AP           EXIT IF NOT
         MVI   E0E08PAA,DFHBMASB  SHOW PF10
K70E08AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E08BP           EXIT IF NOT
         MVI   E0E08PBA,DFHBMASB  SHOW PF11
K70E08BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E08IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E08IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E08DP DC    PL8'0'
K70E08IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E08   DS    0H
         USING *,R6
* PF8  : 'BEFORE' RETURN
* REDISPLAY FORWARD 1
         USING EDF0E08S,R4
         CLI   E0E08P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E08DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E08DP,=P'1'     FORWARD 1
         CVB   R8,K80E08DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E08DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E08P7A,DFHBMASB  SHOW PF7
         MVI   E0E08P8A,DFHBMASD  HIDE PF8
         MVI   E0E08PAA,DFHBMASD  HIDE PF10
         MVI   E0E08PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E088P           EXIT IF NOT
         MVI   E0E08P8A,DFHBMASB  SHOW PF8
K80E088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E08AP           EXIT IF NOT
         MVI   E0E08PAA,DFHBMASB  SHOW PF10
K80E08AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E08BP           EXIT IF NOT
         MVI   E0E08PBA,DFHBMASB  SHOW PF11
K80E08BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E08IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E08IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E08DP DC    PL8'0'
K80E08IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E08   DS    0H
         USING *,R6
* PF10 : 'BEFORE' RETURN
* REDISPLAY BACK 5
         USING EDF0E08S,R4
         CLI   E0E08PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E08DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E08DP,=P'5'     BACK 5
         CVB   R8,KA0E08DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E08DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E08P7A,DFHBMASD  HIDE PF7
         MVI   E0E08P8A,DFHBMASD  HIDE PF8
         MVI   E0E08PAA,DFHBMASD  HIDE PF10
         MVI   E0E08PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E087P           EXIT IF NOT
         MVI   E0E08P7A,DFHBMASB  SHOW PF7
KA0E087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E088P           EXIT IF NOT
         MVI   E0E08P8A,DFHBMASB  SHOW PF8
KA0E088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E08AP           EXIT IF NOT
         MVI   E0E08PAA,DFHBMASB  SHOW PF10
KA0E08AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E08IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E08IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E08DP DC    PL8'0'
KA0E08IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E08   DS    0H
         USING *,R6
* PF11 : 'BEFORE' RETURN
* REDISPLAY FORWARD 5
         USING EDF0E08S,R4
         CLI   E0E08PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E08DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E08DP,=P'5'     FORWARD 5
         CVB   R8,KB0E08DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E08DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E08P7A,DFHBMASD  HIDE PF7
         MVI   E0E08P8A,DFHBMASD  HIDE PF8
         MVI   E0E08PAA,DFHBMASB  SHOW PF10
         MVI   E0E08PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E087P           EXIT IF NOT
         MVI   E0E08P7A,DFHBMASB  SHOW PF7
KB0E087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E088P           EXIT IF NOT
         MVI   E0E08P8A,DFHBMASB  SHOW PF8
KB0E088P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E08BP           EXIT IF NOT
         MVI   E0E08PBA,DFHBMASB  SHOW PF11
KB0E08BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E08IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E08IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E08DP DC    PL8'0'
KB0E08IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E08   DS    0H
         USING *,R6
* PF12 : 'BEFORE' RETURN
         USING EDF0E08S,R4
         XC    KC0E08RP,KC0E08RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E08RP) LENGTH(KC0E08LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E08RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0E08L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0E08') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E08BS           EXIT IF IT IS
         TM    E0E08DIF,DFHBMEOF  ANY DATA ?
         BO    KC0E08BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0E08DII  SAVE INPUT REDISPLAY NUMBER
KC0E08BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E08RP DS    CL50               RECEIVE AREA
KC0E08LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E08PT DS    0H
* 'AFTER' RETURN : PROGRAM/TASK TERMINATION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : 'AFTER' RETURN - NO PROCESSING
* PF12 : 'AFTER' RETURN - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDFKCPS,R4
         MVC   EKCPENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   EKCPP7A,DFHBMASD   HIDE PF7
         MVI   EKCPP8A,DFHBMASD   HIDE PF8
         MVI   EKCPPAA,DFHBMASD   HIDE PF10
         MVI   EKCPPBA,DFHBMASD   HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2KCPS4            EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2KCPS4  EQU   *
         XC    EKCPDIL,EKCPDIL    SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2KCPS5            EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   EKCPPCA,DFHBMASD   REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2KCPS6            EXIT
*
K2KCPS5  EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2KCPNP            EXIT IF NOT
* REDISPLAY MODE
K2KCPS6  EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   EKCPPCA,DFHBMASD   HIDE PF12
         MVI   EKCPP3A,DFHBMASB   SHOW PF3 (NOT ON FOR TASK END)
* SET UP DISPLAY FIELDS
         MVI   EKCPDYA,DFHBMASB   SET DISPLAY ON
         MVI   EKCPDIA,DFHBMUNN   SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI EKCPDIL,X'FFFF'    SET SYMBOLIC CURSOR POSITION
         MVC   EKCPDIO,EDFRDYNO   SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2KCPDC         CONVERT TO DECIMAL
         UNPK  EKCPDTO+1(3),K2KCPDC+6(2) UNPACK NUMITEMS
         OI    EKCPDTO+3,X'F0'    SET SIGN
         MVI   EKCPDTO,C'/'       SET /
         MVI   EKCPENKA,DFHBMASB  SHOW ENTER (NOT ON FOR TASK END)
         MVI   EKCPENA,DFHBMASB   SHOW ENTER DATA (NOT ON FOR TASK END)
         MVC   EKCPENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2KCPDC,EDFRDYNO   PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2KCPDC         R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2KCP7P            EXIT IF NOT
         MVI   EKCPP7A,DFHBMASB   SHOW PF7
K2KCP7P  EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2KCP8P            EXIT IF NOT
         MVI   EKCPP8A,DFHBMASB   SHOW PF8
K2KCP8P  EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2KCPAP            EXIT IF NOT
         MVI   EKCPPAA,DFHBMASB   SHOW PF10
K2KCPAP  EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2KCPNP            EXIT IF NOT
         MVI   EKCPPBA,DFHBMASB   SHOW PF11
K2KCPNP  EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDFKCP') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E08PT        ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2KCPDC  DC    PL8'0'
*
         LTORG
*
K70E08PT DS    0H
         USING *,R6
* PF7  : 'AFTER' RETURN : PROGRAM/TASK TERMINATION
* REDISPLAY BACK 1
         USING EDFKCPS,R4
         CLI   EKCPP7A,DFHBMASD   IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7KCPDP,EDFRDYNO   PACK CURRENT DISPLAY NUMBER
         AP    K7KCPDP,=P'1'      BACK 1
         CVB   R8,K7KCPDP         R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7KCPDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   EKCPP7A,DFHBMASD   HIDE PF7
         MVI   EKCPP8A,DFHBMASB   SHOW PF8
         MVI   EKCPPAA,DFHBMASD   HIDE PF10
         MVI   EKCPPBA,DFHBMASD   HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7KCP7P            EXIT IF NOT
         MVI   EKCPP7A,DFHBMASB   SHOW PF7
K7KCP7P  EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7KCPAP            EXIT IF NOT
         MVI   EKCPPAA,DFHBMASB   SHOW PF10
K7KCPAP  EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7KCPBP            EXIT IF NOT
         MVI   EKCPPBA,DFHBMASB   SHOW PF11
K7KCPBP  EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7KCPIP         SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7KCPIP)   X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7KCPDP  DC    PL8'0'
K7KCPIP  DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E08PT DS    0H
         USING *,R6
* PF8  : 'AFTER' RETURN : PROGRAM/TASK TERMINATION
* REDISPLAY FORWARD 1
         USING EDFKCPS,R4
         CLI   EKCPP8A,DFHBMASD   IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8KCPDP,EDFRDYNO   PACK CURRENT DISPLAY NUMBER
         SP    K8KCPDP,=P'1'      FORWARD 1
         CVB   R8,K8KCPDP         R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8KCPDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   EKCPP7A,DFHBMASB   SHOW PF7
         MVI   EKCPP8A,DFHBMASD   HIDE PF8
         MVI   EKCPPAA,DFHBMASD   HIDE PF10
         MVI   EKCPPBA,DFHBMASD   HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8KCP8P            EXIT IF NOT
         MVI   EKCPP8A,DFHBMASB   SHOW PF8
K8KCP8P  EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8KCPAP            EXIT IF NOT
         MVI   EKCPPAA,DFHBMASB   SHOW PF10
K8KCPAP  EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8KCPBP            EXIT IF NOT
         MVI   EKCPPBA,DFHBMASB   SHOW PF11
K8KCPBP  EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8KCPIP         SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8KCPIP)   X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8KCPDP  DC    PL8'0'
K8KCPIP  DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E08PT DS    0H
         USING *,R6
* PF10 : 'AFTER' RETURN : PROGRAM/TASK TERMINATION
* REDISPLAY BACK 5
         USING EDFKCPS,R4
         CLI   EKCPPAA,DFHBMASD   IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KAKCPDP,EDFRDYNO   PACK CURRENT DISPLAY NUMBER
         AP    KAKCPDP,=P'5'      BACK 5
         CVB   R8,KAKCPDP         R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KAKCPDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   EKCPP7A,DFHBMASD   HIDE PF7
         MVI   EKCPP8A,DFHBMASD   HIDE PF8
         MVI   EKCPPAA,DFHBMASD   HIDE PF10
         MVI   EKCPPBA,DFHBMASB   SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KAKCP7P            EXIT IF NOT
         MVI   EKCPP7A,DFHBMASB   SHOW PF7
KAKCP7P  EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KAKCP8P            EXIT IF NOT
         MVI   EKCPP8A,DFHBMASB   SHOW PF8
KAKCP8P  EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KAKCPAP            EXIT IF NOT
         MVI   EKCPPAA,DFHBMASB   SHOW PF10
KAKCPAP  EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KAKCPIP         SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KAKCPIP)   X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KAKCPDP  DC    PL8'0'
KAKCPIP  DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E08PT DS    0H
         USING *,R6
* PF11 : 'AFTER' RETURN : PROGRAM/TASK TERMINATION
* REDISPLAY FORWARD 5
         USING EDFKCPS,R4
         CLI   EKCPPBA,DFHBMASD   IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KBKCPDP,EDFRDYNO   PACK CURRENT DISPLAY NUMBER
         SP    KBKCPDP,=P'5'      FORWARD 5
         CVB   R8,KBKCPDP         R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KBKCPDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   EKCPP7A,DFHBMASD   HIDE PF7
         MVI   EKCPP8A,DFHBMASD   HIDE PF8
         MVI   EKCPPAA,DFHBMASB   SHOW PF10
         MVI   EKCPPBA,DFHBMASD   HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KBKCP7P            EXIT IF NOT
         MVI   EKCPP7A,DFHBMASB   SHOW PF7
KBKCP7P  EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KBKCP8P            EXIT IF NOT
         MVI   EKCPP8A,DFHBMASB   SHOW PF8
KBKCP8P  EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KBKCPBP            EXIT IF NOT
         MVI   EKCPPBA,DFHBMASB   SHOW PF11
KBKCPBP  EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KBKCPIP         SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KBKCPIP)   X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KBKCPDP  DC    PL8'0'
KBKCPIP  DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E08PT DS    0H
         USING *,R6
* PF12 : 'AFTER' RETURN : PROGRAM/TASK TERMINATION
         USING EDFKCPS,R4
         XC    KCKCPRP,KCKCPRP    CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KCKCPRP) LENGTH(KCKCPLP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KCKCPRP         R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDFKCPL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDFKCP') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KCKCPBS            EXIT IF IT IS
         TM    EKCPDIF,DFHBMEOF   ANY DATA ?
         BO    KCKCPBS            EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,EKCPDII   SAVE INPUT REDISPLAY NUMBER
KCKCPBS  EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KCKCPRP  DS    CL50               RECEIVE AREA
KCKCPLP  DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E0A   DS    0H
* RELEASE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : RELEASE - NO PROCESSING
* PF12 : RELEASE - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0E0AS,R4
         MVC   E0E0AENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0E0AP7A,DFHBMASD  HIDE PF7
         MVI   E0E0AP8A,DFHBMASD  HIDE PF8
         MVI   E0E0APAA,DFHBMASD  HIDE PF10
         MVI   E0E0APBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E0AS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E0AS4 EQU   *
         XC    E0E0ADIL,E0E0ADIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E0AS5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0E0APCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E0AS6           EXIT
*
K20E0AS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E0ANP           EXIT IF NOT
* REDISPLAY MODE
K20E0AS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0E0APCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0E0ADYA,DFHBMASB  SET DISPLAY ON
         MVI   E0E0ADIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0E0ADIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0E0ADIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E0ADC        CONVERT TO DECIMAL
         UNPK  E0E0ADTO+1(3),K20E0ADC+6(2) UNPACK NUMITEMS
         OI    E0E0ADTO+3,X'F0'   SET SIGN
         MVI   E0E0ADTO,C'/'      SET /
         MVC   E0E0AENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E0ADC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E0ADC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E0A7P           EXIT IF NOT
         MVI   E0E0AP7A,DFHBMASB  SHOW PF7
K20E0A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E0A8P           EXIT IF NOT
         MVI   E0E0AP8A,DFHBMASB  SHOW PF8
K20E0A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E0AAP           EXIT IF NOT
         MVI   E0E0APAA,DFHBMASB  SHOW PF10
K20E0AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E0ANP           EXIT IF NOT
         MVI   E0E0APBA,DFHBMASB  SHOW PF11
K20E0ANP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E0A') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E0A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E0ADC DC    PL8'0'
*
K50E0A   DS    0H
         USING *,R6
* PF5  : RELEASE
* WORKING STORAGE DISPLAY
         USING EDF0E0AS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E0ATSO   MOVE TRANSID
         MVC   EWKSPGO,E0E0APGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E0ATNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0E0AL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E0A   DS    0H
         USING *,R6
* PF7  : RELEASE
* REDISPLAY BACK 1
         USING EDF0E0AS,R4
         CLI   E0E0AP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E0ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E0ADP,=P'1'     BACK 1
         CVB   R8,K70E0ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E0ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0AP7A,DFHBMASD  HIDE PF7
         MVI   E0E0AP8A,DFHBMASB  SHOW PF8
         MVI   E0E0APAA,DFHBMASD  HIDE PF10
         MVI   E0E0APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E0A7P           EXIT IF NOT
         MVI   E0E0AP7A,DFHBMASB  SHOW PF7
K70E0A7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E0AAP           EXIT IF NOT
         MVI   E0E0APAA,DFHBMASB  SHOW PF10
K70E0AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E0ABP           EXIT IF NOT
         MVI   E0E0APBA,DFHBMASB  SHOW PF11
K70E0ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E0AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E0AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E0ADP DC    PL8'0'
K70E0AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E0A   DS    0H
         USING *,R6
* PF8  : RELEASE
* REDISPLAY FORWARD 1
         USING EDF0E0AS,R4
         CLI   E0E0AP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E0ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E0ADP,=P'1'     FORWARD 1
         CVB   R8,K80E0ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E0ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0AP7A,DFHBMASB  SHOW PF7
         MVI   E0E0AP8A,DFHBMASD  HIDE PF8
         MVI   E0E0APAA,DFHBMASD  HIDE PF10
         MVI   E0E0APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E0A8P           EXIT IF NOT
         MVI   E0E0AP8A,DFHBMASB  SHOW PF8
K80E0A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E0AAP           EXIT IF NOT
         MVI   E0E0APAA,DFHBMASB  SHOW PF10
K80E0AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E0ABP           EXIT IF NOT
         MVI   E0E0APBA,DFHBMASB  SHOW PF11
K80E0ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E0AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E0AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E0ADP DC    PL8'0'
K80E0AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E0A   DS    0H
         USING *,R6
* PF10 : RELEASE
* REDISPLAY BACK 5
         USING EDF0E0AS,R4
         CLI   E0E0APAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E0ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E0ADP,=P'5'     BACK 5
         CVB   R8,KA0E0ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E0ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0AP7A,DFHBMASD  HIDE PF7
         MVI   E0E0AP8A,DFHBMASD  HIDE PF8
         MVI   E0E0APAA,DFHBMASD  HIDE PF10
         MVI   E0E0APBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E0A7P           EXIT IF NOT
         MVI   E0E0AP7A,DFHBMASB  SHOW PF7
KA0E0A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E0A8P           EXIT IF NOT
         MVI   E0E0AP8A,DFHBMASB  SHOW PF8
KA0E0A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E0AAP           EXIT IF NOT
         MVI   E0E0APAA,DFHBMASB  SHOW PF10
KA0E0AAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E0AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E0AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E0ADP DC    PL8'0'
KA0E0AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E0A   DS    0H
         USING *,R6
* PF11 : RELEASE
* REDISPLAY FORWARD 5
         USING EDF0E0AS,R4
         CLI   E0E0APBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E0ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E0ADP,=P'5'     FORWARD 5
         CVB   R8,KB0E0ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E0ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0AP7A,DFHBMASD  HIDE PF7
         MVI   E0E0AP8A,DFHBMASD  HIDE PF8
         MVI   E0E0APAA,DFHBMASB  SHOW PF10
         MVI   E0E0APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E0A7P           EXIT IF NOT
         MVI   E0E0AP7A,DFHBMASB  SHOW PF7
KB0E0A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E0A8P           EXIT IF NOT
         MVI   E0E0AP8A,DFHBMASB  SHOW PF8
KB0E0A8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E0ABP           EXIT IF NOT
         MVI   E0E0APBA,DFHBMASB  SHOW PF11
KB0E0ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E0AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E0AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E0ADP DC    PL8'0'
KB0E0AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E0A   DS    0H
         USING *,R6
* PF12 : RELEASE
         USING EDF0E0AS,R4
         XC    KC0E0ARP,KC0E0ARP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E0ARP) LENGTH(KC0E0ALP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E0ARP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0E0AL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0E0A') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E0ABS           EXIT IF IT IS
         TM    E0E0ADIF,DFHBMEOF  ANY DATA ?
         BO    KC0E0ABS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0E0ADII  SAVE INPUT REDISPLAY NUMBER
KC0E0ABS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E0ARP DS    CL50               RECEIVE AREA
KC0E0ALP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E0C   DS    0H
* ABEND
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ABEND - NO PROCESSING
* PF12 : ABEND - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0E0CS,R4
         MVC   E0E0CENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0E0CP7A,DFHBMASD  HIDE PF7
         MVI   E0E0CP8A,DFHBMASD  HIDE PF8
         MVI   E0E0CPAA,DFHBMASD  HIDE PF10
         MVI   E0E0CPBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E0CS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E0CS4 EQU   *
         XC    E0E0CDIL,E0E0CDIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E0CS5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0E0CPCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E0CS6           EXIT
*
K20E0CS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E0CNP           EXIT IF NOT
* REDISPLAY MODE
K20E0CS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0E0CPCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0E0CDYA,DFHBMASB  SET DISPLAY ON
         MVI   E0E0CDIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0E0CDIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0E0CDIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E0CDC        CONVERT TO DECIMAL
         UNPK  E0E0CDTO+1(3),K20E0CDC+6(2) UNPACK NUMITEMS
         OI    E0E0CDTO+3,X'F0'   SET SIGN
         MVI   E0E0CDTO,C'/'      SET /
         MVC   E0E0CENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E0CDC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E0CDC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E0C7P           EXIT IF NOT
         MVI   E0E0CP7A,DFHBMASB  SHOW PF7
K20E0C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E0C8P           EXIT IF NOT
         MVI   E0E0CP8A,DFHBMASB  SHOW PF8
K20E0C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E0CAP           EXIT IF NOT
         MVI   E0E0CPAA,DFHBMASB  SHOW PF10
K20E0CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E0CNP           EXIT IF NOT
         MVI   E0E0CPBA,DFHBMASB  SHOW PF11
K20E0CNP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E0C') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E0C          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E0CDC DC    PL8'0'
*
K50E0C   DS    0H
         USING *,R6
* PF5  : ABEND
* WORKING STORAGE DISPLAY
         USING EDF0E0CS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E0CTSO   MOVE TRANSID
         MVC   EWKSPGO,E0E0CPGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E0CTNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0E0CL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E0C   DS    0H
         USING *,R6
* PF7  : ABEND
* REDISPLAY BACK 1
         USING EDF0E0CS,R4
         CLI   E0E0CP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E0CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E0CDP,=P'1'     BACK 1
         CVB   R8,K70E0CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E0CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0CP7A,DFHBMASD  HIDE PF7
         MVI   E0E0CP8A,DFHBMASB  SHOW PF8
         MVI   E0E0CPAA,DFHBMASD  HIDE PF10
         MVI   E0E0CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E0C7P           EXIT IF NOT
         MVI   E0E0CP7A,DFHBMASB  SHOW PF7
K70E0C7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E0CAP           EXIT IF NOT
         MVI   E0E0CPAA,DFHBMASB  SHOW PF10
K70E0CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E0CBP           EXIT IF NOT
         MVI   E0E0CPBA,DFHBMASB  SHOW PF11
K70E0CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E0CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E0CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E0CDP DC    PL8'0'
K70E0CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E0C   DS    0H
         USING *,R6
* PF8  : ABEND
* REDISPLAY FORWARD 1
         USING EDF0E0CS,R4
         CLI   E0E0CP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E0CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E0CDP,=P'1'     FORWARD 1
         CVB   R8,K80E0CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E0CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0CP7A,DFHBMASB  SHOW PF7
         MVI   E0E0CP8A,DFHBMASD  HIDE PF8
         MVI   E0E0CPAA,DFHBMASD  HIDE PF10
         MVI   E0E0CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E0C8P           EXIT IF NOT
         MVI   E0E0CP8A,DFHBMASB  SHOW PF8
K80E0C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E0CAP           EXIT IF NOT
         MVI   E0E0CPAA,DFHBMASB  SHOW PF10
K80E0CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E0CBP           EXIT IF NOT
         MVI   E0E0CPBA,DFHBMASB  SHOW PF11
K80E0CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E0CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E0CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E0CDP DC    PL8'0'
K80E0CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E0C   DS    0H
         USING *,R6
* PF10 : ABEND
* REDISPLAY BACK 5
         USING EDF0E0CS,R4
         CLI   E0E0CPAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E0CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E0CDP,=P'5'     BACK 5
         CVB   R8,KA0E0CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E0CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0CP7A,DFHBMASD  HIDE PF7
         MVI   E0E0CP8A,DFHBMASD  HIDE PF8
         MVI   E0E0CPAA,DFHBMASD  HIDE PF10
         MVI   E0E0CPBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E0C7P           EXIT IF NOT
         MVI   E0E0CP7A,DFHBMASB  SHOW PF7
KA0E0C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E0C8P           EXIT IF NOT
         MVI   E0E0CP8A,DFHBMASB  SHOW PF8
KA0E0C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E0CAP           EXIT IF NOT
         MVI   E0E0CPAA,DFHBMASB  SHOW PF10
KA0E0CAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E0CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E0CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E0CDP DC    PL8'0'
KA0E0CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E0C   DS    0H
         USING *,R6
* PF11 : ABEND
* REDISPLAY FORWARD 5
         USING EDF0E0CS,R4
         CLI   E0E0CPBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E0CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E0CDP,=P'5'     FORWARD 5
         CVB   R8,KB0E0CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E0CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0CP7A,DFHBMASD  HIDE PF7
         MVI   E0E0CP8A,DFHBMASD  HIDE PF8
         MVI   E0E0CPAA,DFHBMASB  SHOW PF10
         MVI   E0E0CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E0C7P           EXIT IF NOT
         MVI   E0E0CP7A,DFHBMASB  SHOW PF7
KB0E0C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E0C8P           EXIT IF NOT
         MVI   E0E0CP8A,DFHBMASB  SHOW PF8
KB0E0C8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E0CBP           EXIT IF NOT
         MVI   E0E0CPBA,DFHBMASB  SHOW PF11
KB0E0CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E0CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E0CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E0CDP DC    PL8'0'
KB0E0CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E0C   DS    0H
         USING *,R6
* PF12 : ABEND
         USING EDF0E0CS,R4
         XC    KC0E0CRP,KC0E0CRP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E0CRP) LENGTH(KC0E0CLP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E0CRP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0E0CL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0E0C') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E0CBS           EXIT IF IT IS
         TM    E0E0CDIF,DFHBMEOF  ANY DATA ?
         BO    KC0E0CBS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0E0CDII  SAVE INPUT REDISPLAY NUMBER
KC0E0CBS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E0CRP DS    CL50               RECEIVE AREA
KC0E0CLP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K20E0E   DS    0H
* HANDLE ABEND
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : HANDLE ABEND - NO PROCESSING
* PF12 : HANDLE ABEND - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF0E0ES,R4
         MVC   E0E0EENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E0E0EP7A,DFHBMASD  HIDE PF7
         MVI   E0E0EP8A,DFHBMASD  HIDE PF8
         MVI   E0E0EPAA,DFHBMASD  HIDE PF10
         MVI   E0E0EPBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K20E0ES4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K20E0ES4 EQU   *
         XC    E0E0EDIL,E0E0EDIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K20E0ES5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E0E0EPCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K20E0ES6           EXIT
*
K20E0ES5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K20E0ENP           EXIT IF NOT
* REDISPLAY MODE
K20E0ES6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E0E0EPCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E0E0EDYA,DFHBMASB  SET DISPLAY ON
         MVI   E0E0EDIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E0E0EDIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E0E0EDIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K20E0EDC        CONVERT TO DECIMAL
         UNPK  E0E0EDTO+1(3),K20E0EDC+6(2) UNPACK NUMITEMS
         OI    E0E0EDTO+3,X'F0'   SET SIGN
         MVI   E0E0EDTO,C'/'      SET /
         MVC   E0E0EENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K20E0EDC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K20E0EDC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K20E0E7P           EXIT IF NOT
         MVI   E0E0EP7A,DFHBMASB  SHOW PF7
K20E0E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K20E0E8P           EXIT IF NOT
         MVI   E0E0EP8A,DFHBMASB  SHOW PF8
K20E0E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K20E0EAP           EXIT IF NOT
         MVI   E0E0EPAA,DFHBMASB  SHOW PF10
K20E0EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K20E0ENP           EXIT IF NOT
         MVI   E0E0EPBA,DFHBMASB  SHOW PF11
K20E0ENP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E0E') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC0E0E          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K20E0EDC DC    PL8'0'
*
K50E0E   DS    0H
         USING *,R6
* PF5  : HANDLE ABEND
* WORKING STORAGE DISPLAY
         USING EDF0E0ES,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E0E0ETSO   MOVE TRANSID
         MVC   EWKSPGO,E0E0EPGO   MOVE PROGRAM
         MVC   EWKSTNO,E0E0ETNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF0E0EL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K70E0E   DS    0H
         USING *,R6
* PF7  : HANDLE ABEND
* REDISPLAY BACK 1
         USING EDF0E0ES,R4
         CLI   E0E0EP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K70E0EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K70E0EDP,=P'1'     BACK 1
         CVB   R8,K70E0EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K70E0EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0EP7A,DFHBMASD  HIDE PF7
         MVI   E0E0EP8A,DFHBMASB  SHOW PF8
         MVI   E0E0EPAA,DFHBMASD  HIDE PF10
         MVI   E0E0EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K70E0E7P           EXIT IF NOT
         MVI   E0E0EP7A,DFHBMASB  SHOW PF7
K70E0E7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K70E0EAP           EXIT IF NOT
         MVI   E0E0EPAA,DFHBMASB  SHOW PF10
K70E0EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K70E0EBP           EXIT IF NOT
         MVI   E0E0EPBA,DFHBMASB  SHOW PF11
K70E0EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K70E0EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K70E0EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K70E0EDP DC    PL8'0'
K70E0EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K80E0E   DS    0H
         USING *,R6
* PF8  : HANDLE ABEND
* REDISPLAY FORWARD 1
         USING EDF0E0ES,R4
         CLI   E0E0EP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K80E0EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K80E0EDP,=P'1'     FORWARD 1
         CVB   R8,K80E0EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K80E0EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0EP7A,DFHBMASB  SHOW PF7
         MVI   E0E0EP8A,DFHBMASD  HIDE PF8
         MVI   E0E0EPAA,DFHBMASD  HIDE PF10
         MVI   E0E0EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K80E0E8P           EXIT IF NOT
         MVI   E0E0EP8A,DFHBMASB  SHOW PF8
K80E0E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K80E0EAP           EXIT IF NOT
         MVI   E0E0EPAA,DFHBMASB  SHOW PF10
K80E0EAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K80E0EBP           EXIT IF NOT
         MVI   E0E0EPBA,DFHBMASB  SHOW PF11
K80E0EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K80E0EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K80E0EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K80E0EDP DC    PL8'0'
K80E0EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA0E0E   DS    0H
         USING *,R6
* PF10 : HANDLE ABEND
* REDISPLAY BACK 5
         USING EDF0E0ES,R4
         CLI   E0E0EPAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA0E0EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA0E0EDP,=P'5'     BACK 5
         CVB   R8,KA0E0EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA0E0EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0EP7A,DFHBMASD  HIDE PF7
         MVI   E0E0EP8A,DFHBMASD  HIDE PF8
         MVI   E0E0EPAA,DFHBMASD  HIDE PF10
         MVI   E0E0EPBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA0E0E7P           EXIT IF NOT
         MVI   E0E0EP7A,DFHBMASB  SHOW PF7
KA0E0E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA0E0E8P           EXIT IF NOT
         MVI   E0E0EP8A,DFHBMASB  SHOW PF8
KA0E0E8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA0E0EAP           EXIT IF NOT
         MVI   E0E0EPAA,DFHBMASB  SHOW PF10
KA0E0EAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA0E0EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA0E0EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA0E0EDP DC    PL8'0'
KA0E0EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB0E0E   DS    0H
         USING *,R6
* PF11 : HANDLE ABEND
* REDISPLAY FORWARD 5
         USING EDF0E0ES,R4
         CLI   E0E0EPBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB0E0EDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB0E0EDP,=P'5'     FORWARD 5
         CVB   R8,KB0E0EDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB0E0EDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E0E0EP7A,DFHBMASD  HIDE PF7
         MVI   E0E0EP8A,DFHBMASD  HIDE PF8
         MVI   E0E0EPAA,DFHBMASB  SHOW PF10
         MVI   E0E0EPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB0E0E7P           EXIT IF NOT
         MVI   E0E0EP7A,DFHBMASB  SHOW PF7
KB0E0E7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB0E0E8P           EXIT IF NOT
         MVI   E0E0EP8A,DFHBMASB  SHOW PF8
KB0E0E8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB0E0EBP           EXIT IF NOT
         MVI   E0E0EPBA,DFHBMASB  SHOW PF11
KB0E0EBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB0E0EIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB0E0EIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB0E0EDP DC    PL8'0'
KB0E0EIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC0E0E   DS    0H
         USING *,R6
* PF12 : HANDLE ABEND
         USING EDF0E0ES,R4
         XC    KC0E0ERP,KC0E0ERP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC0E0ERP) LENGTH(KC0E0ELP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC0E0ERP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF0E0EL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF0E0E') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC0E0EBS           EXIT IF IT IS
         TM    E0E0EDIF,DFHBMEOF  ANY DATA ?
         BO    KC0E0EBS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E0E0EDII  SAVE INPUT REDISPLAY NUMBER
KC0E0EBS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC0E0ERP DS    CL50               RECEIVE AREA
KC0E0ELP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21002   DS    0H
* ASKTIME
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ASKTIME - NO PROCESSING
* PF12 : ASKTIME - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1002S,R4
         MVC   E1002ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1002P7A,DFHBMASD  HIDE PF7
         MVI   E1002P8A,DFHBMASD  HIDE PF8
         MVI   E1002PAA,DFHBMASD  HIDE PF10
         MVI   E1002PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21002S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21002S4 EQU   *
         XC    E1002DIL,E1002DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21002S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1002PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21002S6           EXIT
*
K21002S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21002NP           EXIT IF NOT
* REDISPLAY MODE
K21002S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1002PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1002DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1002DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1002DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1002DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21002DC        CONVERT TO DECIMAL
         UNPK  E1002DTO+1(3),K21002DC+6(2) UNPACK NUMITEMS
         OI    E1002DTO+3,X'F0'   SET SIGN
         MVI   E1002DTO,C'/'      SET /
         MVC   E1002ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21002DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21002DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K210027P           EXIT IF NOT
         MVI   E1002P7A,DFHBMASB  SHOW PF7
K210027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K210028P           EXIT IF NOT
         MVI   E1002P8A,DFHBMASB  SHOW PF8
K210028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21002AP           EXIT IF NOT
         MVI   E1002PAA,DFHBMASB  SHOW PF10
K21002AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21002NP           EXIT IF NOT
         MVI   E1002PBA,DFHBMASB  SHOW PF11
K21002NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1002') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1002          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21002DC DC    PL8'0'
*
K51002   DS    0H
         USING *,R6
* PF5  : ASKTIME
* WORKING STORAGE DISPLAY
         USING EDF1002S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1002TSO   MOVE TRANSID
         MVC   EWKSPGO,E1002PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1002TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1002L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71002   DS    0H
         USING *,R6
* PF7  : ASKTIME
* REDISPLAY BACK 1
         USING EDF1002S,R4
         CLI   E1002P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71002DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71002DP,=P'1'     BACK 1
         CVB   R8,K71002DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71002DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1002P7A,DFHBMASD  HIDE PF7
         MVI   E1002P8A,DFHBMASB  SHOW PF8
         MVI   E1002PAA,DFHBMASD  HIDE PF10
         MVI   E1002PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K710027P           EXIT IF NOT
         MVI   E1002P7A,DFHBMASB  SHOW PF7
K710027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71002AP           EXIT IF NOT
         MVI   E1002PAA,DFHBMASB  SHOW PF10
K71002AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71002BP           EXIT IF NOT
         MVI   E1002PBA,DFHBMASB  SHOW PF11
K71002BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71002IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71002IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71002DP DC    PL8'0'
K71002IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81002   DS    0H
         USING *,R6
* PF8  : ASKTIME
* REDISPLAY FORWARD 1
         USING EDF1002S,R4
         CLI   E1002P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81002DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81002DP,=P'1'     FORWARD 1
         CVB   R8,K81002DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81002DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1002P7A,DFHBMASB  SHOW PF7
         MVI   E1002P8A,DFHBMASD  HIDE PF8
         MVI   E1002PAA,DFHBMASD  HIDE PF10
         MVI   E1002PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K810028P           EXIT IF NOT
         MVI   E1002P8A,DFHBMASB  SHOW PF8
K810028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81002AP           EXIT IF NOT
         MVI   E1002PAA,DFHBMASB  SHOW PF10
K81002AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81002BP           EXIT IF NOT
         MVI   E1002PBA,DFHBMASB  SHOW PF11
K81002BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81002IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81002IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81002DP DC    PL8'0'
K81002IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1002   DS    0H
         USING *,R6
* PF10 : ASKTIME
* REDISPLAY BACK 5
         USING EDF1002S,R4
         CLI   E1002PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1002DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1002DP,=P'5'     BACK 5
         CVB   R8,KA1002DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1002DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1002P7A,DFHBMASD  HIDE PF7
         MVI   E1002P8A,DFHBMASD  HIDE PF8
         MVI   E1002PAA,DFHBMASD  HIDE PF10
         MVI   E1002PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA10027P           EXIT IF NOT
         MVI   E1002P7A,DFHBMASB  SHOW PF7
KA10027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA10028P           EXIT IF NOT
         MVI   E1002P8A,DFHBMASB  SHOW PF8
KA10028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1002AP           EXIT IF NOT
         MVI   E1002PAA,DFHBMASB  SHOW PF10
KA1002AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1002IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1002IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1002DP DC    PL8'0'
KA1002IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1002   DS    0H
         USING *,R6
* PF11 : ASKTIME
* REDISPLAY FORWARD 5
         USING EDF1002S,R4
         CLI   E1002PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1002DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1002DP,=P'5'     FORWARD 5
         CVB   R8,KB1002DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1002DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1002P7A,DFHBMASD  HIDE PF7
         MVI   E1002P8A,DFHBMASD  HIDE PF8
         MVI   E1002PAA,DFHBMASB  SHOW PF10
         MVI   E1002PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB10027P           EXIT IF NOT
         MVI   E1002P7A,DFHBMASB  SHOW PF7
KB10027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB10028P           EXIT IF NOT
         MVI   E1002P8A,DFHBMASB  SHOW PF8
KB10028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1002BP           EXIT IF NOT
         MVI   E1002PBA,DFHBMASB  SHOW PF11
KB1002BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1002IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1002IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1002DP DC    PL8'0'
KB1002IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1002   DS    0H
         USING *,R6
* PF12 : ASKTIME
         USING EDF1002S,R4
         XC    KC1002RP,KC1002RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1002RP) LENGTH(KC1002LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1002RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1002L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1002') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1002BS           EXIT IF IT IS
         TM    E1002DIF,DFHBMEOF  ANY DATA ?
         BO    KC1002BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1002DII  SAVE INPUT REDISPLAY NUMBER
KC1002BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1002RP DS    CL50               RECEIVE AREA
KC1002LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21004   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : DELAY
* PF12 : DELAY - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1004S,R4
         MVC   E1004ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1004P7A,DFHBMASD  HIDE PF7
         MVI   E1004P8A,DFHBMASD  HIDE PF8
         MVI   E1004PAA,DFHBMASD  HIDE PF10
         MVI   E1004PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21004S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21004S4 EQU   *
         XC    E1004DIL,E1004DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21004S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1004PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21004S6           EXIT
*
K21004S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21004NP           EXIT IF NOT
* REDISPLAY MODE
K21004S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1004PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1004DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1004DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1004DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1004DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21004DC        CONVERT TO DECIMAL
         UNPK  E1004DTO+1(3),K21004DC+6(2) UNPACK NUMITEMS
         OI    E1004DTO+3,X'F0'   SET SIGN
         MVI   E1004DTO,C'/'      SET /
         MVC   E1004ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21004DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21004DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K210047P           EXIT IF NOT
         MVI   E1004P7A,DFHBMASB  SHOW PF7
K210047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K210048P           EXIT IF NOT
         MVI   E1004P8A,DFHBMASB  SHOW PF8
K210048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21004AP           EXIT IF NOT
         MVI   E1004PAA,DFHBMASB  SHOW PF10
K21004AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21004NP           EXIT IF NOT
         MVI   E1004PBA,DFHBMASB  SHOW PF11
K21004NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21004SN           EXIT IF IT IS
         MVI   E1004P2A,DFHBMASD  HIDE PF2
         CLI   E1004RQO,X'00'     ANY REQID ?
         BE    K21004SN           EXIT IF NONE
         MVI   E1004P2A,DFHBMASB  SHOW PF2
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21004M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K21004NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21004M2           EXIT
*
K21004M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K21004NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21004M2 EQU   *
         MVC   K21004RQ,E1004RQO+7 SAVE REQID
         TR    E1004RQO+7(8),K21004TE REQID TO EBCDIC
         MVC   E1004MDO,=CL6'EBCDIC' SET MODE
         B     K21004SN           EXIT
*
K21004NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21004M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K21004NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K21004M4           EXIT
*
K21004M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K21004NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K21004M4 EQU   *
         MVC   E1004RQO+7(8),K21004RQ MOVE REQID BACK
         TR    E1004RQO+7(8),K21004TA REQID TO ASCII
         MVC   E1004MDO,=CL6'ASCII' SET MODE
         B     K21004SN           EXIT
*
K21004NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21004M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K21004NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K21004M6           EXIT
*
K21004M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K21004NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K21004M6 EQU   *
         LA    R1,K21004TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21004RQ        SOURCE ADDRESS
         XC    E1004RQO+7(20),E1004RQO+7 CLEAR REQID DISPLAY
         MVHHI E1004RQO+7,C'X'''  MOVE X'
         LA    R14,E1004RQO+9     DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1004RQO+25,C''')' MOVE END ')
         MVC   E1004MDO,=CL6'HEX' SET MODE
         B     K21004SN           EXIT
*
K21004NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21004M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21004M8           EXIT
*
K21004M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21004M8 EQU   *
         XC    E1004RQO+7(20),E1004RQO+7 CLEAR REQID DISPLAY
         MVC   E1004RQO+7(8),K21004RQ MOVE REQID BACK
         TR    E1004RQO+7(8),K21004TE REQID TO EBCDIC
         MVI   E1004RQO+15,C')'   SET REQID CLOSE BRACKET
         MVC   E1004MDO,=CL6'EBCDIC' SET MODE
K21004SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1004') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1004          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21004DC DC    PL8'0'
K21004RQ DS    CL8                REQID
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21004TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21004TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21004TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K51004   DS    0H
         USING *,R6
* PF5  : DELAY
* WORKING STORAGE DISPLAY
         USING EDF1004S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1004TSO   MOVE TRANSID
         MVC   EWKSPGO,E1004PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1004TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1004L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71004   DS    0H
         USING *,R6
* PF7  : DELAY
* REDISPLAY BACK 1
         USING EDF1004S,R4
         CLI   E1004P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71004DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71004DP,=P'1'     BACK 1
         CVB   R8,K71004DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71004DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1004P7A,DFHBMASD  HIDE PF7
         MVI   E1004P8A,DFHBMASB  SHOW PF8
         MVI   E1004PAA,DFHBMASD  HIDE PF10
         MVI   E1004PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K710047P           EXIT IF NOT
         MVI   E1004P7A,DFHBMASB  SHOW PF7
K710047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71004AP           EXIT IF NOT
         MVI   E1004PAA,DFHBMASB  SHOW PF10
K71004AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71004BP           EXIT IF NOT
         MVI   E1004PBA,DFHBMASB  SHOW PF11
K71004BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71004IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71004IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71004DP DC    PL8'0'
K71004IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81004   DS    0H
         USING *,R6
* PF8  : DELAY
* REDISPLAY FORWARD 1
         USING EDF1004S,R4
         CLI   E1004P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81004DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81004DP,=P'1'     FORWARD 1
         CVB   R8,K81004DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81004DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1004P7A,DFHBMASB  SHOW PF7
         MVI   E1004P8A,DFHBMASD  HIDE PF8
         MVI   E1004PAA,DFHBMASD  HIDE PF10
         MVI   E1004PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K810048P           EXIT IF NOT
         MVI   E1004P8A,DFHBMASB  SHOW PF8
K810048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81004AP           EXIT IF NOT
         MVI   E1004PAA,DFHBMASB  SHOW PF10
K81004AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81004BP           EXIT IF NOT
         MVI   E1004PBA,DFHBMASB  SHOW PF11
K81004BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81004IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81004IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81004DP DC    PL8'0'
K81004IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1004   DS    0H
         USING *,R6
* PF10 : DELAY
* REDISPLAY BACK 5
         USING EDF1004S,R4
         CLI   E1004PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1004DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1004DP,=P'5'     BACK 5
         CVB   R8,KA1004DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1004DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1004P7A,DFHBMASD  HIDE PF7
         MVI   E1004P8A,DFHBMASD  HIDE PF8
         MVI   E1004PAA,DFHBMASD  HIDE PF10
         MVI   E1004PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA10047P           EXIT IF NOT
         MVI   E1004P7A,DFHBMASB  SHOW PF7
KA10047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA10048P           EXIT IF NOT
         MVI   E1004P8A,DFHBMASB  SHOW PF8
KA10048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1004AP           EXIT IF NOT
         MVI   E1004PAA,DFHBMASB  SHOW PF10
KA1004AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1004IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1004IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1004DP DC    PL8'0'
KA1004IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1004   DS    0H
         USING *,R6
* PF11 : DELAY
* REDISPLAY FORWARD 5
         USING EDF1004S,R4
         CLI   E1004PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1004DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1004DP,=P'5'     FORWARD 5
         CVB   R8,KB1004DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1004DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1004P7A,DFHBMASD  HIDE PF7
         MVI   E1004P8A,DFHBMASD  HIDE PF8
         MVI   E1004PAA,DFHBMASB  SHOW PF10
         MVI   E1004PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB10047P           EXIT IF NOT
         MVI   E1004P7A,DFHBMASB  SHOW PF7
KB10047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB10048P           EXIT IF NOT
         MVI   E1004P8A,DFHBMASB  SHOW PF8
KB10048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1004BP           EXIT IF NOT
         MVI   E1004PBA,DFHBMASB  SHOW PF11
KB1004BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1004IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1004IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1004DP DC    PL8'0'
KB1004IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1004   DS    0H
         USING *,R6
* PF12 : DELAY
         USING EDF1004S,R4
         XC    KC1004RP,KC1004RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1004RP) LENGTH(KC1004LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1004RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1004L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1004') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1004BS           EXIT IF IT IS
         TM    E1004DIF,DFHBMEOF  ANY DATA ?
         BO    KC1004BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1004DII  SAVE INPUT REDISPLAY NUMBER
KC1004BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1004RP DS    CL50               RECEIVE AREA
KC1004LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21008   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : START
* PF12 : START - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1008S,R4
         MVC   E1008ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1008P7A,DFHBMASD  HIDE PF7
         MVI   E1008P8A,DFHBMASD  HIDE PF8
         MVI   E1008PAA,DFHBMASD  HIDE PF10
         MVI   E1008PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21008S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21008S4 EQU   *
         XC    E1008DIL,E1008DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21008S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1008PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21008S6           EXIT
*
K21008S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008NP           EXIT IF NOT
* REDISPLAY MODE
K21008S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1008PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1008DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1008DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1008DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1008DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21008DC        CONVERT TO DECIMAL
         UNPK  E1008DTO+1(3),K21008DC+6(2) UNPACK NUMITEMS
         OI    E1008DTO+3,X'F0'   SET SIGN
         MVI   E1008DTO,C'/'      SET /
         MVC   E1008ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21008DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21008DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K210087P           EXIT IF NOT
         MVI   E1008P7A,DFHBMASB  SHOW PF7
K210087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K210088P           EXIT IF NOT
         MVI   E1008P8A,DFHBMASB  SHOW PF8
K210088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21008AP           EXIT IF NOT
         MVI   E1008PAA,DFHBMASB  SHOW PF10
K21008AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21008NP           EXIT IF NOT
         MVI   E1008PBA,DFHBMASB  SHOW PF11
K21008NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21008SM           EXIT IF IT IS
         CLI   E1008P2A,DFHBMASD  PF2 OFF ?
         BE    K21008SM           EXIT IF IT IS
* REQID
         CLI   E1008RQO,X'00'     ANY REQID ?
         BE    K21008FM           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K21008M2           EXIT IF IT IS
         B     K210081R           EXIT
*
K21008M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K210081R           EXIT IF NOT
K21008M2 EQU   *
         MVC   K21008RQ,E1008RQO+11 SAVE REQID
         TR    E1008RQO+11(8),K21008TE REQID TO EBCDIC
         B     K21008FM           EXIT
*
K210081R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K21008M4           EXIT IF IT IS
         B     K210081E           EXIT
*
K21008M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K210081E           EXIT IF NOT
K21008M4 EQU   *
         MVC   E1008RQO+11(8),K21008RQ MOVE REQID BACK
         TR    E1008RQO+11(8),K21008TA REQID TO ASCII
         B     K21008FM           EXIT
*
K210081E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K21008M6           EXIT IF IT IS
         B     K210081A           EXIT
*
K21008M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K210081A           EXIT IF NOT
K21008M6 EQU   *
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008RQ        SOURCE ADDRESS
         XC    E1008RQO+11(20),E1008RQO+11 CLEAR REQID DISPLAY
         MVHHI E1008RQO+11,C'X'''  MOVE X'
         LA    R14,E1008RQO+13    DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008RQO+29,C''')' MOVE END ')
         B     K21008FM           EXIT
*
K210081A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008RQO+11(20),E1008RQO+11 CLEAR REQID DISPLAY
         MVC   E1008RQO+11(8),K21008RQ MOVE REQID BACK
         TR    E1008RQO+11(8),K21008TE REQID TO EBCDIC
         MVI   E1008RQO+19,C')'   SET REQID CLOSE BRACKET
K21008FM EQU   *
* FROM
         CLI   E1008FMO,X'00'     ANY FROM ?
         BE    K21008RT           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K21008M8           EXIT IF IT IS
         B     K210082R           EXIT
*
K21008M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K210082R           EXIT IF NOT
K21008M8 EQU   *
         PACK  K21008SC,E1008LNO+11(5) PACK FROM LENGTH
         CVB   R8,K21008SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K21008LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K21008EX           EXIT
*
K21008LK EQU   *
         CHI   R8,66              >66 ?
         BNH   K21008EX           EXIT IF NOT
         LA    R8,66              SET MAXIMUM LENGTH
K21008EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K21008SC        SAVE DISPLAY LENGTH-1
         EX    R8,K21008SF        SAVE FROM
         EX    R8,K21008RE        FROM TO EBCDIC
         B     K21008RT           EXIT
*
K210082R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K21008MA           EXIT IF IT IS
         B     K210082E           EXIT
*
K21008M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K210082E           EXIT IF NOT
K21008MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21008SC        RESTORE LENGTH FOR EX
         EX    R8,K21008FB        MOVE FROM BACK
         EX    R8,K21008FA        FROM TO ASCII
         B     K21008RT           EXIT
*
K210082E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K21008MC           EXIT IF IT IS
         B     K210082A           EXIT
*
K21008MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K210082A           EXIT IF NOT
K21008MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21008SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 66 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 66-3=63/2=31
         LA    R15,1(R8)          R15=FROM LENGTH
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008FR        SOURCE ADDRESS
         XC    E1008FMO+11(70),E1008FMO+11 CLEAR FROM DISPLAY
         MVHHI E1008FMO+11,C'X'''  MOVE X'
         LA    R14,E1008FMO+13    DESTINATION ADDRESS
         CHI   R15,31             >31 ?
         BNH   K21008HX           EXIT IF NOT
         LA    R15,31             SET MAXIMUM
K21008HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E1008FMO+13(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K21008RT           EXIT
*
K210082A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008FMO+11(70),E1008FMO+11 CLEAR FROM DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21008SC        RESTORE LENGTH-1 FOR EX
         EX    R8,K21008FB        MOVE FROM BACK
         EX    R8,K21008RE        FROM TO EBCDIC
         LA    R5,E1008FMO+12(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
K21008RT EQU   *
* RTRANSID
         CLI   E1008RTO,X'00'     ANY RTRANSID ?
         BE    K21008RM           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MD           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K21008ME           EXIT IF IT IS
         B     K210083R           EXIT
*
K21008MD EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K210083R           EXIT IF NOT
K21008ME EQU   *
         MVC   K21008RD,E1008RTO+11 SAVE RTRANSID
         TR    E1008RTO+11(4),K21008TE RTRANSID TO EBCDIC
         B     K21008RM           EXIT
*
K210083R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MF           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K21008MG           EXIT IF IT IS
         B     K210083E           EXIT
*
K21008MF EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K210083E           EXIT IF NOT
K21008MG EQU   *
         MVC   E1008RTO+11(4),K21008RD MOVE RTRANSID BACK
         TR    E1008RTO+11(4),K21008TA RTRANSID TO ASCII
         B     K21008RM           EXIT
*
K210083E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MH           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K21008MI           EXIT IF IT IS
         B     K210083A           EXIT
*
K21008MH EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K210083A           EXIT IF NOT
K21008MI EQU   *
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008RD        SOURCE ADDRESS
         XC    E1008RTO+11(12),E1008RTO+11 CLEAR RTRANSID DISPLAY
         MVHHI E1008RTO+11,C'X'''  MOVE X'
         LA    R14,E1008RTO+13    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008RTO+21,C''')' MOVE END ')
         B     K21008RM           EXIT
*
K210083A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008RTO+11(12),E1008RTO+11 CLEAR RTRANSID DISPLAY
         MVC   E1008RTO+11(4),K21008RD MOVE RTRANSID BACK
         TR    E1008RTO+11(4),K21008TE RTRANSID TO EBCDIC
         MVI   E1008RTO+15,C')'   SET RTRANSID CLOSE BRACKET
K21008RM EQU   *
* RTERMID
         CLI   E1008RMO,X'00'     ANY RTERMID ?
         BE    K21008QU           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K21008MK           EXIT IF IT IS
         B     K210084R           EXIT
*
K21008MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K210084R           EXIT IF NOT
K21008MK EQU   *
         MVC   K21008TI,E1008RMO+11 SAVE RTERMID
         TR    E1008RMO+11(4),K21008TE RTERMID TO EBCDIC
         B     K21008QU           EXIT
*
K210084R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K21008MM           EXIT IF IT IS
         B     K210084E           EXIT
*
K21008ML EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K210084E           EXIT IF NOT
K21008MM EQU   *
         MVC   E1008RMO+11(4),K21008TI MOVE RTERMID BACK
         TR    E1008RMO+11(4),K21008TA RTERMID TO ASCII
         B     K21008QU           EXIT
*
K210084E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K21008MO           EXIT IF IT IS
         B     K210084A           EXIT
*
K21008MN EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K210084A           EXIT IF NOT
K21008MO EQU   *
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008TI        SOURCE ADDRESS
         XC    E1008RMO+11(12),E1008RMO+11 CLEAR RTERMID DISPLAY
         MVHHI E1008RMO+11,C'X'''  MOVE X'
         LA    R14,E1008RMO+13    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008RMO+21,C''')' MOVE END ')
         B     K21008QU           EXIT
*
K210084A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008RMO+11(12),E1008RMO+11 CLEAR RTERMID DISPLAY
         MVC   E1008RMO+11(4),K21008TI MOVE RTERMID BACK
         TR    E1008RMO+11(4),K21008TE RTERMID TO EBCDIC
         MVI   E1008RMO+15,C')'   SET RTERMID CLOSE BRACKET
K21008QU EQU   *
* QUEUE
         CLI   E1008QUO,X'00'     ANY QUEUE ?
         BE    K21008SM           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MP           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K21008MQ           EXIT IF IT IS
         B     K210085R           EXIT
*
K21008MP EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K210085R           EXIT IF NOT
K21008MQ EQU   *
         MVC   K21008QE,E1008QUO+11 SAVE QUEUE
         TR    E1008QUO+11(8),K21008TE QUEUE TO EBCDIC
         B     K21008SM           EXIT
*
K210085R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MR           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K21008MS           EXIT IF IT IS
         B     K210085E           EXIT
*
K21008MR EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K210085E           EXIT IF NOT
K21008MS EQU   *
         MVC   E1008QUO+11(8),K21008QE MOVE QUEUE BACK
         TR    E1008QUO+11(8),K21008TA QUEUE TO ASCII
         B     K21008SM           EXIT
*
K210085E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MT           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K21008MU           EXIT IF IT IS
         B     K210085A           EXIT
*
K21008MT EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K210085A           EXIT IF NOT
K21008MU EQU   *
         LA    R1,K21008TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21008QE        SOURCE ADDRESS
         XC    E1008QUO+11(20),E1008QUO+11 CLEAR QUEUE DISPLAY
         MVHHI E1008QUO+11,C'X'''  MOVE X'
         LA    R14,E1008QUO+13    DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E1008QUO+29,C''')' MOVE END ')
         B     K21008SM           EXIT
*
K210085A EQU   *
* HAS TO BE IN HEX MODE
         XC    E1008QUO+11(20),E1008QUO+11 CLEAR QUEUE DISPLAY
         MVC   E1008QUO+11(8),K21008QE MOVE QUEUE BACK
         TR    E1008QUO+11(8),K21008TE QUEUE TO EBCDIC
         MVI   E1008QUO+19,C')'   SET QUEUE CLOSE BRACKET
K21008SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MV           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K21008NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21008MW           EXIT
*
K21008MV EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K21008NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21008MW EQU   *
         MVC   E1008MDO,=CL6'EBCDIC' SET MODE
         B     K21008SN           EXIT
*
K21008NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MX           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K21008NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K21008MY           EXIT
*
K21008MX EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K21008NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K21008MY EQU   *
         MVC   E1008MDO,=CL6'ASCII' SET MODE
         B     K21008SN           EXIT
*
K21008NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008MZ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K21008NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K21008X0           EXIT
*
K21008MZ EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K21008NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K21008X0 EQU   *
         MVC   E1008MDO,=CL6'HEX' SET MODE
         B     K21008SN           EXIT
*
K21008NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21008X1           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21008X2           EXIT
*
K21008X1 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21008X2 EQU   *
         MVC   E1008MDO,=CL6'EBCDIC' SET MODE
K21008SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1008') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1008          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21008DC DC    PL8'0'
K21008SC DC    PL8'0'
K21008RQ DS    XL8                REQID
K21008FR DS    XL66               FROM
K21008RD DS    XL4                RTRANSID
K21008TI DS    XL4                RTERMID
K21008QE DS    XL8                QUEUE
K21008SF MVC   K21008FR(0),E1008FMO+11 SAVE FROM
K21008RE TR    E1008FMO+11(0),K21008TE FROM TO EBCDIC
K21008FB MVC   E1008FMO+11(0),K21008FR MOVE FROM BACK
K21008FA TR    E1008FMO+11(0),K21008TA FROM TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21008TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21008TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21008TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K51008   DS    0H
         USING *,R6
* PF5  : START
* WORKING STORAGE DISPLAY
         USING EDF1008S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1008TSO   MOVE TRANSID
         MVC   EWKSPGO,E1008PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1008TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1008L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71008   DS    0H
         USING *,R6
* PF7  : START
* REDISPLAY BACK 1
         USING EDF1008S,R4
         CLI   E1008P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71008DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71008DP,=P'1'     BACK 1
         CVB   R8,K71008DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71008DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1008P7A,DFHBMASD  HIDE PF7
         MVI   E1008P8A,DFHBMASB  SHOW PF8
         MVI   E1008PAA,DFHBMASD  HIDE PF10
         MVI   E1008PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K710087P           EXIT IF NOT
         MVI   E1008P7A,DFHBMASB  SHOW PF7
K710087P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71008AP           EXIT IF NOT
         MVI   E1008PAA,DFHBMASB  SHOW PF10
K71008AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71008BP           EXIT IF NOT
         MVI   E1008PBA,DFHBMASB  SHOW PF11
K71008BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71008IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71008IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71008DP DC    PL8'0'
K71008IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81008   DS    0H
         USING *,R6
* PF8  : START
* REDISPLAY FORWARD 1
         USING EDF1008S,R4
         CLI   E1008P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81008DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81008DP,=P'1'     FORWARD 1
         CVB   R8,K81008DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81008DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1008P7A,DFHBMASB  SHOW PF7
         MVI   E1008P8A,DFHBMASD  HIDE PF8
         MVI   E1008PAA,DFHBMASD  HIDE PF10
         MVI   E1008PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K810088P           EXIT IF NOT
         MVI   E1008P8A,DFHBMASB  SHOW PF8
K810088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81008AP           EXIT IF NOT
         MVI   E1008PAA,DFHBMASB  SHOW PF10
K81008AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81008BP           EXIT IF NOT
         MVI   E1008PBA,DFHBMASB  SHOW PF11
K81008BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81008IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81008IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81008DP DC    PL8'0'
K81008IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1008   DS    0H
         USING *,R6
* PF10 : START
* REDISPLAY BACK 5
         USING EDF1008S,R4
         CLI   E1008PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1008DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1008DP,=P'5'     BACK 5
         CVB   R8,KA1008DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1008DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1008P7A,DFHBMASD  HIDE PF7
         MVI   E1008P8A,DFHBMASD  HIDE PF8
         MVI   E1008PAA,DFHBMASD  HIDE PF10
         MVI   E1008PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA10087P           EXIT IF NOT
         MVI   E1008P7A,DFHBMASB  SHOW PF7
KA10087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA10088P           EXIT IF NOT
         MVI   E1008P8A,DFHBMASB  SHOW PF8
KA10088P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1008AP           EXIT IF NOT
         MVI   E1008PAA,DFHBMASB  SHOW PF10
KA1008AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1008IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1008IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1008DP DC    PL8'0'
KA1008IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1008   DS    0H
         USING *,R6
* PF11 : START
* REDISPLAY FORWARD 5
         USING EDF1008S,R4
         CLI   E1008PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1008DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1008DP,=P'5'     FORWARD 5
         CVB   R8,KB1008DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1008DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1008P7A,DFHBMASD  HIDE PF7
         MVI   E1008P8A,DFHBMASD  HIDE PF8
         MVI   E1008PAA,DFHBMASB  SHOW PF10
         MVI   E1008PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB10087P           EXIT IF NOT
         MVI   E1008P7A,DFHBMASB  SHOW PF7
KB10087P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB10088P           EXIT IF NOT
         MVI   E1008P8A,DFHBMASB  SHOW PF8
KB10088P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1008BP           EXIT IF NOT
         MVI   E1008PBA,DFHBMASB  SHOW PF11
KB1008BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1008IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1008IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1008DP DC    PL8'0'
KB1008IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1008   DS    0H
         USING *,R6
* PF12 : START
         USING EDF1008S,R4
         XC    KC1008RP,KC1008RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1008RP) LENGTH(KC1008LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1008RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1008L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1008') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1008BS           EXIT IF IT IS
         TM    E1008DIF,DFHBMEOF  ANY DATA ?
         BO    KC1008BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1008DII  SAVE INPUT REDISPLAY NUMBER
KC1008BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1008RP DS    CL50               RECEIVE AREA
KC1008LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K2100A   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : RETRIEVE
* PF12 : RETRIEVE - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF100AS,R4
         MVC   E100AENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E100AP7A,DFHBMASD  HIDE PF7
         MVI   E100AP8A,DFHBMASD  HIDE PF8
         MVI   E100APAA,DFHBMASD  HIDE PF10
         MVI   E100APBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2100AS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2100AS4 EQU   *
         XC    E100ADIL,E100ADIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2100AS5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E100APCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2100AS6           EXIT
*
K2100AS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100ANP           EXIT IF NOT
* REDISPLAY MODE
K2100AS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E100APCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E100ADYA,DFHBMASB  SET DISPLAY ON
         MVI   E100ADIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E100ADIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E100ADIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2100ADC        CONVERT TO DECIMAL
         UNPK  E100ADTO+1(3),K2100ADC+6(2) UNPACK NUMITEMS
         OI    E100ADTO+3,X'F0'   SET SIGN
         MVI   E100ADTO,C'/'      SET /
         MVC   E100AENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2100ADC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2100ADC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2100A7P           EXIT IF NOT
         MVI   E100AP7A,DFHBMASB  SHOW PF7
K2100A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2100A8P           EXIT IF NOT
         MVI   E100AP8A,DFHBMASB  SHOW PF8
K2100A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2100AAP           EXIT IF NOT
         MVI   E100APAA,DFHBMASB  SHOW PF10
K2100AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2100ANP           EXIT IF NOT
         MVI   E100APBA,DFHBMASB  SHOW PF11
K2100ANP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2100ASM           EXIT IF IT IS
         CLI   E100AP2A,DFHBMASD  PF2 OFF ?
         BE    K2100ASM           EXIT IF IT IS
* INTO (...//...)
         CLI   E100AISO,C'S'      SET ?
         BE    K2100ART           EXIT IF IT IS
         CLI   E100AISO+15,C'('   ANY INTO ?
         BNE   K2100ART           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AM1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K2100AM2           EXIT IF IT IS
         B     K2100A2R           EXIT
*
K2100AM1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2100A2R           EXIT IF NOT
K2100AM2 EQU   *
         PACK  K2100ASC,E100ALDO+16(5) PACK INTO DATA LENGTH
         CLI   E100ALNO,C'L'      ANY LENGTH ?
         BNE   K2100AND           EXIT IF NONE
         PACK  K2100ASC,E100ALNO+16(5) PACK INTO LENGTH
K2100AND EQU   *
         CVB   R8,K2100ASC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K2100ALK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K2100AEX           EXIT
*
K2100ALK EQU   *
         CHI   R8,61              >61 ?
         BNH   K2100AEX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K2100AEX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K2100ASC        SAVE DISPLAY LENGTH-1
         EX    R8,K2100ASI        SAVE INTO
         EX    R8,K2100ARE        INTO TO EBCDIC
         B     K2100ART           EXIT
*
K2100A2R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AM3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K2100AM4           EXIT IF IT IS
         B     K2100A2E           EXIT
*
K2100AM3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2100A2E           EXIT IF NOT
K2100AM4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2100ASC        RESTORE LENGTH FOR EX
         EX    R8,K2100AIB        MOVE INTO BACK
         EX    R8,K2100AIA        INTO TO ASCII
         B     K2100ART           EXIT
*
K2100A2E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AM5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K2100AM6           EXIT IF IT IS
         B     K2100A2A           EXIT
*
K2100AM5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2100A2A           EXIT IF NOT
K2100AM6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2100ASC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100AIN        SOURCE ADDRESS
         XC    E100AISO+16(63),E100AISO+16 CLEAR INTO DISPLAY
         MVHHI E100AISO+16,C'X'''  MOVE X'
         LA    R14,E100AISO+16    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K2100AHX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K2100AHX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E100AISO+16(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K2100ART           EXIT
*
K2100A2A EQU   *
* HAS TO BE IN HEX MODE
         XC    E100AISO+16(63),E100AISO+16 CLEAR INTO DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K2100ASC        RESTORE LENGTH-1 FOR EX
         EX    R8,K2100AIB        MOVE INTO BACK
         EX    R8,K2100ARE        INTO TO EBCDIC
         LA    R5,E100AISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K2100ART EQU   *
* RTRANSID
         CLI   E100ARTO+15,C'('   ANY RTRANSID ?
         BNE   K2100ARM           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AM7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K2100AM8           EXIT IF IT IS
         B     K2100A3R           EXIT
*
K2100AM7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2100A3R           EXIT IF NOT
K2100AM8 EQU   *
         MVC   K2100ARD,E100ARTO+16 SAVE RTRANSID
         TR    E100ARTO+16(4),K2100ATE RTRANSID TO EBCDIC
         B     K2100ARM           EXIT
*
K2100A3R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AM9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K2100AMA           EXIT IF IT IS
         B     K2100A3E           EXIT
*
K2100AM9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2100A3E           EXIT IF NOT
K2100AMA EQU   *
         MVC   E100ARTO+16(4),K2100ARD MOVE RTRANSID BACK
         TR    E100ARTO+16(4),K2100ATA RTRANSID TO ASCII
         B     K2100ARM           EXIT
*
K2100A3E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K2100AMC           EXIT IF IT IS
         B     K2100A3A           EXIT
*
K2100AMB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2100A3A           EXIT IF NOT
K2100AMC EQU   *
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100ARD        SOURCE ADDRESS
         XC    E100ARTO+16(12),E100ARTO+16 CLEAR RTRANSID DISPLAY
         MVHHI E100ARTO+16,C'X'''  MOVE X'
         LA    R14,E100ARTO+18    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100ARTO+26,C''')' MOVE END ')
         B     K2100ARM           EXIT
*
K2100A3A EQU   *
* HAS TO BE IN HEX MODE
         XC    E100ARTO+16(12),E100ARTO+16 CLEAR RTRANSID DISPLAY
         MVC   E100ARTO+16(4),K2100ARD MOVE RTRANSID BACK
         TR    E100ARTO+16(4),K2100ATE RTRANSID TO EBCDIC
         MVI   E100ARTO+20,C')'   SET RTRANSID CLOSE BRACKET
K2100ARM EQU   *
* RTERMID
         CLI   E100ARMO+15,C'('   ANY RTERMID ?
         BNE   K2100AQU           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMD           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K2100AME           EXIT IF IT IS
         B     K2100A4R           EXIT
*
K2100AMD EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2100A4R           EXIT IF NOT
K2100AME EQU   *
         MVC   K2100ATI,E100ARMO+16 SAVE RTERMID
         TR    E100ARMO+16(4),K2100ATE RTERMID TO EBCDIC
         B     K2100AQU           EXIT
*
K2100A4R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMF           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K2100AMG           EXIT IF IT IS
         B     K2100A4E           EXIT
*
K2100AMF EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2100A4E           EXIT IF NOT
K2100AMG EQU   *
         MVC   E100ARMO+16(4),K2100ATI MOVE RTERMID BACK
         TR    E100ARMO+16(4),K2100ATA RTERMID TO ASCII
         B     K2100AQU           EXIT
*
K2100A4E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMH           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K2100AMI           EXIT IF IT IS
         B     K2100A4A           EXIT
*
K2100AMH EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2100A4A           EXIT IF NOT
K2100AMI EQU   *
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100ATI        SOURCE ADDRESS
         XC    E100ARMO+16(12),E100ARMO+16 CLEAR RTERMID DISPLAY
         MVHHI E100ARMO+16,C'X'''  MOVE X'
         LA    R14,E100ARMO+18    DESTINATION ADDRESS
         LA    R15,4              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100ARMO+26,C''')' MOVE END ')
         B     K2100AQU           EXIT
*
K2100A4A EQU   *
* HAS TO BE IN HEX MODE
         XC    E100ARMO+16(12),E100ARMO+16 CLEAR RTERMID DISPLAY
         MVC   E100ARMO+16(4),K2100ATI MOVE RTERMID BACK
         TR    E100ARMO+16(4),K2100ATE RTERMID TO EBCDIC
         MVI   E100ARMO+20,C')'   SET RTERMID CLOSE BRACKET
K2100AQU EQU   *
* QUEUE
         CLI   E100AQUO+15,C'('   ANY QUEUE ?
         BNE   K2100ASM           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K2100AMK           EXIT IF IT IS
         B     K2100A5R           EXIT
*
K2100AMJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2100A5R           EXIT IF NOT
K2100AMK EQU   *
         MVC   K2100AQE,E100AQUO+16 SAVE QUEUE
         TR    E100AQUO+16(8),K2100ATE QUEUE TO EBCDIC
         B     K2100ASM           EXIT
*
K2100A5R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K2100AMM           EXIT IF IT IS
         B     K2100A5E           EXIT
*
K2100AML EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2100A5E           EXIT IF NOT
K2100AMM EQU   *
         MVC   E100AQUO+16(8),K2100AQE MOVE QUEUE BACK
         TR    E100AQUO+16(8),K2100ATA QUEUE TO ASCII
         B     K2100ASM           EXIT
*
K2100A5E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K2100AMO           EXIT IF IT IS
         B     K2100A5A           EXIT
*
K2100AMN EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2100A5A           EXIT IF NOT
K2100AMO EQU   *
         LA    R1,K2100ATH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100AQE        SOURCE ADDRESS
         XC    E100AQUO+16(20),E100AQUO+16 CLEAR QUEUE DISPLAY
         MVHHI E100AQUO+16,C'X'''  MOVE X'
         LA    R14,E100AQUO+18    DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100AQUO+34,C''')' MOVE END ')
         B     K2100ASM           EXIT
*
K2100A5A EQU   *
* HAS TO BE IN HEX MODE
         XC    E100AQUO+16(20),E100AQUO+16 CLEAR QUEUE DISPLAY
         MVC   E100AQUO+16(8),K2100AQE MOVE QUEUE BACK
         TR    E100AQUO+16(8),K2100ATE QUEUE TO EBCDIC
         MVI   E100AQUO+24,C')'   SET QUEUE CLOSE BRACKET
K2100ASM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMP           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K2100ANR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2100AMQ           EXIT
*
K2100AMP EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2100ANR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2100AMQ EQU   *
         MVC   E100AMDO,=CL6'EBCDIC' SET MODE
         B     K2100ASN           EXIT
*
K2100ANR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMR           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K2100ANE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K2100AMS           EXIT
*
K2100AMR EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K2100ANE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K2100AMS EQU   *
         MVC   E100AMDO,=CL6'ASCII' SET MODE
         B     K2100ASN           EXIT
*
K2100ANE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMT           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K2100ANA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K2100AMU           EXIT
*
K2100AMT EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K2100ANA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K2100AMU EQU   *
         MVC   E100AMDO,=CL6'HEX' SET MODE
         B     K2100ASN           EXIT
*
K2100ANA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100AMV           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2100AMW           EXIT
*
K2100AMV EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2100AMW EQU   *
         MVC   E100AMDO,=CL6'EBCDIC' SET MODE
K2100ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF100A') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC100A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2100ADC DC    PL8'0'
K2100ASC DC    PL8'0'
K2100AIN DS    XL61               INTO
K2100ARD DS    XL4                RTRANSID
K2100ATI DS    XL4                RTERMID
K2100AQE DS    XL8                QUEUE
K2100ASI MVC   K2100AIN(0),E100AISO+16 SAVE INTO
K2100ARE TR    E100AISO+16(0),K2100ATE INTO TO EBCDIC
K2100AIB MVC   E100AISO+16(0),K2100AIN MOVE INTO BACK
K2100AIA TR    E100AISO+16(0),K2100ATA INTO TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2100ATE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2100ATA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2100ATH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K5100A   DS    0H
         USING *,R6
* PF5  : RETRIEVE
* WORKING STORAGE DISPLAY
         USING EDF100AS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E100ATSO   MOVE TRANSID
         MVC   EWKSPGO,E100APGO   MOVE PROGRAM
         MVC   EWKSTNO,E100ATNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF100AL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7100A   DS    0H
         USING *,R6
* PF7  : RETRIEVE
* REDISPLAY BACK 1
         USING EDF100AS,R4
         CLI   E100AP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7100ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7100ADP,=P'1'     BACK 1
         CVB   R8,K7100ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7100ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100AP7A,DFHBMASD  HIDE PF7
         MVI   E100AP8A,DFHBMASB  SHOW PF8
         MVI   E100APAA,DFHBMASD  HIDE PF10
         MVI   E100APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7100A7P           EXIT IF NOT
         MVI   E100AP7A,DFHBMASB  SHOW PF7
K7100A7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7100AAP           EXIT IF NOT
         MVI   E100APAA,DFHBMASB  SHOW PF10
K7100AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7100ABP           EXIT IF NOT
         MVI   E100APBA,DFHBMASB  SHOW PF11
K7100ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7100AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7100AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7100ADP DC    PL8'0'
K7100AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8100A   DS    0H
         USING *,R6
* PF8  : RETRIEVE
* REDISPLAY FORWARD 1
         USING EDF100AS,R4
         CLI   E100AP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8100ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8100ADP,=P'1'     FORWARD 1
         CVB   R8,K8100ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8100ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100AP7A,DFHBMASB  SHOW PF7
         MVI   E100AP8A,DFHBMASD  HIDE PF8
         MVI   E100APAA,DFHBMASD  HIDE PF10
         MVI   E100APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8100A8P           EXIT IF NOT
         MVI   E100AP8A,DFHBMASB  SHOW PF8
K8100A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8100AAP           EXIT IF NOT
         MVI   E100APAA,DFHBMASB  SHOW PF10
K8100AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8100ABP           EXIT IF NOT
         MVI   E100APBA,DFHBMASB  SHOW PF11
K8100ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8100AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8100AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8100ADP DC    PL8'0'
K8100AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA100A   DS    0H
         USING *,R6
* PF10 : RETRIEVE
* REDISPLAY BACK 5
         USING EDF100AS,R4
         CLI   E100APAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA100ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA100ADP,=P'5'     BACK 5
         CVB   R8,KA100ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA100ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100AP7A,DFHBMASD  HIDE PF7
         MVI   E100AP8A,DFHBMASD  HIDE PF8
         MVI   E100APAA,DFHBMASD  HIDE PF10
         MVI   E100APBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA100A7P           EXIT IF NOT
         MVI   E100AP7A,DFHBMASB  SHOW PF7
KA100A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA100A8P           EXIT IF NOT
         MVI   E100AP8A,DFHBMASB  SHOW PF8
KA100A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA100AAP           EXIT IF NOT
         MVI   E100APAA,DFHBMASB  SHOW PF10
KA100AAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA100AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA100AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA100ADP DC    PL8'0'
KA100AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB100A   DS    0H
         USING *,R6
* PF11 : RETRIEVE
* REDISPLAY FORWARD 5
         USING EDF100AS,R4
         CLI   E100APBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB100ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB100ADP,=P'5'     FORWARD 5
         CVB   R8,KB100ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB100ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100AP7A,DFHBMASD  HIDE PF7
         MVI   E100AP8A,DFHBMASD  HIDE PF8
         MVI   E100APAA,DFHBMASB  SHOW PF10
         MVI   E100APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB100A7P           EXIT IF NOT
         MVI   E100AP7A,DFHBMASB  SHOW PF7
KB100A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB100A8P           EXIT IF NOT
         MVI   E100AP8A,DFHBMASB  SHOW PF8
KB100A8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB100ABP           EXIT IF NOT
         MVI   E100APBA,DFHBMASB  SHOW PF11
KB100ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB100AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB100AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB100ADP DC    PL8'0'
KB100AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC100A   DS    0H
         USING *,R6
* PF12 : RETRIEVE
         USING EDF100AS,R4
         XC    KC100ARP,KC100ARP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC100ARP) LENGTH(KC100ALP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC100ARP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF100AL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF100A') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC100ABS           EXIT IF IT IS
         TM    E100ADIF,DFHBMEOF  ANY DATA ?
         BO    KC100ABS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E100ADII  SAVE INPUT REDISPLAY NUMBER
KC100ABS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC100ARP DS    CL50               RECEIVE AREA
KC100ALP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K2100C   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : CANCEL
* PF12 : CANCEL - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF100CS,R4
         MVC   E100CENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E100CP7A,DFHBMASD  HIDE PF7
         MVI   E100CP8A,DFHBMASD  HIDE PF8
         MVI   E100CPAA,DFHBMASD  HIDE PF10
         MVI   E100CPBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2100CS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2100CS4 EQU   *
         XC    E100CDIL,E100CDIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2100CS5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E100CPCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2100CS6           EXIT
*
K2100CS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100CNP           EXIT IF NOT
* REDISPLAY MODE
K2100CS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E100CPCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E100CDYA,DFHBMASB  SET DISPLAY ON
         MVI   E100CDIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E100CDIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E100CDIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2100CDC        CONVERT TO DECIMAL
         UNPK  E100CDTO+1(3),K2100CDC+6(2) UNPACK NUMITEMS
         OI    E100CDTO+3,X'F0'   SET SIGN
         MVI   E100CDTO,C'/'      SET /
         MVC   E100CENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2100CDC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2100CDC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2100C7P           EXIT IF NOT
         MVI   E100CP7A,DFHBMASB  SHOW PF7
K2100C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2100C8P           EXIT IF NOT
         MVI   E100CP8A,DFHBMASB  SHOW PF8
K2100C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2100CAP           EXIT IF NOT
         MVI   E100CPAA,DFHBMASB  SHOW PF10
K2100CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2100CNP           EXIT IF NOT
         MVI   E100CPBA,DFHBMASB  SHOW PF11
K2100CNP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K2100CSN           EXIT IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100CM1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K2100CNR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2100CM2           EXIT
*
K2100CM1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K2100CNR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2100CM2 EQU   *
         MVC   K2100CRQ,E100CRQO+7 SAVE REQID
         TR    E100CRQO+7(8),K2100CTE REQID TO EBCDIC
         MVC   E100CMDO,=CL6'EBCDIC' SET MODE
         B     K2100CSN           EXIT
*
K2100CNR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100CM3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K2100CNE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K2100CM4           EXIT
*
K2100CM3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K2100CNE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K2100CM4 EQU   *
         MVC   E100CRQO+7(8),K2100CRQ MOVE REQID BACK
         TR    E100CRQO+7(8),K2100CTA REQID TO ASCII
         MVC   E100CMDO,=CL6'ASCII' SET MODE
         B     K2100CSN           EXIT
*
K2100CNE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100CM5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K2100CNA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K2100CM6           EXIT
*
K2100CM5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K2100CNA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K2100CM6 EQU   *
         LA    R1,K2100CTH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K2100CRQ        SOURCE ADDRESS
         XC    E100CRQO+7(20),E100CRQO+7 CLEAR REQID DISPLAY
         MVHHI E100CRQO+7,C'X'''  MOVE X'
         LA    R14,E100CRQO+9     DESTINATION ADDRESS
         LA    R15,8              R15=LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVHHI E100CRQO+25,C''')' MOVE END ')
         MVC   E100CMDO,=CL6'HEX' SET MODE
         B     K2100CSN           EXIT
*
K2100CNA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2100CM7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K2100CM8           EXIT
*
K2100CM7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K2100CM8 EQU   *
         XC    E100CRQO+7(20),E100CRQO+7 CLEAR REQID DISPLAY
         MVC   E100CRQO+7(8),K2100CRQ MOVE REQID BACK
         TR    E100CRQO+7(8),K2100CTE REQID TO EBCDIC
         MVI   E100CRQO+15,C')'   SET REQID CLOSE BRACKET
         MVC   E100CMDO,=CL6'EBCDIC' SET MODE
K2100CSN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF100C') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC100C          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2100CDC DC    PL8'0'
K2100CRQ DS    CL8                REQID
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K2100CTE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K2100CTA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K2100CTH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K5100C   DS    0H
         USING *,R6
* PF5  : CANCEL
* WORKING STORAGE DISPLAY
         USING EDF100CS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E100CTSO   MOVE TRANSID
         MVC   EWKSPGO,E100CPGO   MOVE PROGRAM
         MVC   EWKSTNO,E100CTNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF100CL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7100C   DS    0H
         USING *,R6
* PF7  : CANCEL
* REDISPLAY BACK 1
         USING EDF100CS,R4
         CLI   E100CP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7100CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7100CDP,=P'1'     BACK 1
         CVB   R8,K7100CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7100CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100CP7A,DFHBMASD  HIDE PF7
         MVI   E100CP8A,DFHBMASB  SHOW PF8
         MVI   E100CPAA,DFHBMASD  HIDE PF10
         MVI   E100CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7100C7P           EXIT IF NOT
         MVI   E100CP7A,DFHBMASB  SHOW PF7
K7100C7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7100CAP           EXIT IF NOT
         MVI   E100CPAA,DFHBMASB  SHOW PF10
K7100CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7100CBP           EXIT IF NOT
         MVI   E100CPBA,DFHBMASB  SHOW PF11
K7100CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7100CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7100CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7100CDP DC    PL8'0'
K7100CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8100C   DS    0H
         USING *,R6
* PF8  : CANCEL
* REDISPLAY FORWARD 1
         USING EDF100CS,R4
         CLI   E100CP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8100CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8100CDP,=P'1'     FORWARD 1
         CVB   R8,K8100CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8100CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100CP7A,DFHBMASB  SHOW PF7
         MVI   E100CP8A,DFHBMASD  HIDE PF8
         MVI   E100CPAA,DFHBMASD  HIDE PF10
         MVI   E100CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8100C8P           EXIT IF NOT
         MVI   E100CP8A,DFHBMASB  SHOW PF8
K8100C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8100CAP           EXIT IF NOT
         MVI   E100CPAA,DFHBMASB  SHOW PF10
K8100CAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8100CBP           EXIT IF NOT
         MVI   E100CPBA,DFHBMASB  SHOW PF11
K8100CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8100CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8100CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8100CDP DC    PL8'0'
K8100CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA100C   DS    0H
         USING *,R6
* PF10 : CANCEL
* REDISPLAY BACK 5
         USING EDF100CS,R4
         CLI   E100CPAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA100CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA100CDP,=P'5'     BACK 5
         CVB   R8,KA100CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA100CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100CP7A,DFHBMASD  HIDE PF7
         MVI   E100CP8A,DFHBMASD  HIDE PF8
         MVI   E100CPAA,DFHBMASD  HIDE PF10
         MVI   E100CPBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA100C7P           EXIT IF NOT
         MVI   E100CP7A,DFHBMASB  SHOW PF7
KA100C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA100C8P           EXIT IF NOT
         MVI   E100CP8A,DFHBMASB  SHOW PF8
KA100C8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA100CAP           EXIT IF NOT
         MVI   E100CPAA,DFHBMASB  SHOW PF10
KA100CAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA100CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA100CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA100CDP DC    PL8'0'
KA100CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB100C   DS    0H
         USING *,R6
* PF11 : CANCEL
* REDISPLAY FORWARD 5
         USING EDF100CS,R4
         CLI   E100CPBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB100CDP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB100CDP,=P'5'     FORWARD 5
         CVB   R8,KB100CDP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB100CDP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E100CP7A,DFHBMASD  HIDE PF7
         MVI   E100CP8A,DFHBMASD  HIDE PF8
         MVI   E100CPAA,DFHBMASB  SHOW PF10
         MVI   E100CPBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB100C7P           EXIT IF NOT
         MVI   E100CP7A,DFHBMASB  SHOW PF7
KB100C7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB100C8P           EXIT IF NOT
         MVI   E100CP8A,DFHBMASB  SHOW PF8
KB100C8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB100CBP           EXIT IF NOT
         MVI   E100CPBA,DFHBMASB  SHOW PF11
KB100CBP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB100CIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB100CIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB100CDP DC    PL8'0'
KB100CIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC100C   DS    0H
         USING *,R6
* PF12 : CANCEL
         USING EDF100CS,R4
         XC    KC100CRP,KC100CRP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC100CRP) LENGTH(KC100CLP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC100CRP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF100CL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF100C') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC100CBS           EXIT IF IT IS
         TM    E100CDIF,DFHBMEOF  ANY DATA ?
         BO    KC100CBS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E100CDII  SAVE INPUT REDISPLAY NUMBER
KC100CBS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC100CRP DS    CL50               RECEIVE AREA
KC100CLP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21204   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ENQ
* PF12 : ENQ - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1204S,R4
         MVC   E1204ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1204P7A,DFHBMASD  HIDE PF7
         MVI   E1204P8A,DFHBMASD  HIDE PF8
         MVI   E1204PAA,DFHBMASD  HIDE PF10
         MVI   E1204PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21204S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21204S4 EQU   *
         XC    E1204DIL,E1204DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21204S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1204PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21204S6           EXIT
*
K21204S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21204NP           EXIT IF NOT
* REDISPLAY MODE
K21204S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1204PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1204DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1204DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1204DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1204DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21204DC        CONVERT TO DECIMAL
         UNPK  E1204DTO+1(3),K21204DC+6(2) UNPACK NUMITEMS
         OI    E1204DTO+3,X'F0'   SET SIGN
         MVI   E1204DTO,C'/'      SET /
         MVC   E1204ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21204DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21204DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K212047P           EXIT IF NOT
         MVI   E1204P7A,DFHBMASB  SHOW PF7
K212047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K212048P           EXIT IF NOT
         MVI   E1204P8A,DFHBMASB  SHOW PF8
K212048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21204AP           EXIT IF NOT
         MVI   E1204PAA,DFHBMASB  SHOW PF10
K21204AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21204NP           EXIT IF NOT
         MVI   E1204PBA,DFHBMASB  SHOW PF11
K21204NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21204SN           EXIT IF IT IS
         CLI   E1204LHA,DFHBMASD  IS LENGTH DARK ?
         BNE   K21204RL           EXIT IF NOT
* NO LENGTH
         MVI   E1204P2A,DFHBMASD  HIDE PF2
         B     K21204SN           EXIT
*
K21204RL EQU   *
         PACK  K21204SC,E1204LNO+1(5) PACK RESOURCE LENGTH
         CVB   R8,K21204SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K21204LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K21204EX           EXIT
*
K21204LK EQU   *
         CHI   R8,67              >67 ?
         BNH   K21204EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K21204EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K21204SC        SAVE DISPLAY LENGTH-1
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21204M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K21204NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21204M2           EXIT
*
K21204M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K21204NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21204M2 EQU   *
         EX    R8,K21204MR        SAVE RESOURCE
         EX    R8,K21204RE        RESOURCE TO EBCDIC
         MVC   E1204MDO,=CL6'EBCDIC' SET MODE
         B     K21204SN           EXIT
*
K21204NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21204M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K21204NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K21204M4           EXIT
*
K21204M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K21204NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K21204M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21204SC        RESTORE LENGTH FOR EX
         EX    R8,K21204MB        MOVE RESOURCE BACK
         EX    R8,K21204RA        RESOURCE TO ASCII
         MVC   E1204MDO,=CL6'ASCII' SET MODE
         B     K21204SN           EXIT
*
K21204NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21204M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K21204NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K21204M6           EXIT
*
K21204M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K21204NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K21204M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21204SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=RESOURCE LENGTH
         LA    R1,K21204TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21204RS        SOURCE ADDRESS
         XC    E1204RSO+1(69),E1204RSO+1 CLEAR RESOURCE DISPLAY
         MVHHI E1204RSO+1,C'X'''  MOVE X'
         LA    R14,E1204RSO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K21204HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K21204HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E1204RSO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E1204MDO,=CL6'HEX' SET MODE
         B     K21204SN           EXIT
*
K21204NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21204M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21204M8           EXIT
*
K21204M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21204M8 EQU   *
         XC    E1204RSO+1(69),E1204RSO+1 CLEAR RESOURCE DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21204SC        RESTORE LENGTH FOR EX
         EX    R8,K21204MB        MOVE RESOURCE BACK
         EX    R8,K21204RE        RESOURCE TO EBCDIC
         LA    R5,E1204RSO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RESOURCE CLOSE BRACKET
         MVC   E1204MDO,=CL6'EBCDIC' SET MODE
K21204SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1204') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1204          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21204DC DC    PL8'0'
K21204SC DC    PL8'0'
K21204RS DS    XL67               RESOURCE
K21204MR MVC   K21204RS(0),E1204RSO+1 SAVE RESOURCE
K21204RE TR    E1204RSO+1(0),K21204TE RESOURCE TO EBCDIC
K21204MB MVC   E1204RSO+1(0),K21204RS MOVE RESOURCE BACK
K21204RA TR    E1204RSO+1(0),K21204TA RESOURCE TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21204TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21204TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21204TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K51204   DS    0H
         USING *,R6
* PF5  : ENQ
* WORKING STORAGE DISPLAY
         USING EDF1204S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1204TSO   MOVE TRANSID
         MVC   EWKSPGO,E1204PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1204TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1204L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71204   DS    0H
         USING *,R6
* PF7  : ENQ
* REDISPLAY BACK 1
         USING EDF1204S,R4
         CLI   E1204P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71204DP,=P'1'     BACK 1
         CVB   R8,K71204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1204P7A,DFHBMASD  HIDE PF7
         MVI   E1204P8A,DFHBMASB  SHOW PF8
         MVI   E1204PAA,DFHBMASD  HIDE PF10
         MVI   E1204PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K712047P           EXIT IF NOT
         MVI   E1204P7A,DFHBMASB  SHOW PF7
K712047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71204AP           EXIT IF NOT
         MVI   E1204PAA,DFHBMASB  SHOW PF10
K71204AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71204BP           EXIT IF NOT
         MVI   E1204PBA,DFHBMASB  SHOW PF11
K71204BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71204DP DC    PL8'0'
K71204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81204   DS    0H
         USING *,R6
* PF8  : ENQ
* REDISPLAY FORWARD 1
         USING EDF1204S,R4
         CLI   E1204P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81204DP,=P'1'     FORWARD 1
         CVB   R8,K81204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1204P7A,DFHBMASB  SHOW PF7
         MVI   E1204P8A,DFHBMASD  HIDE PF8
         MVI   E1204PAA,DFHBMASD  HIDE PF10
         MVI   E1204PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K812048P           EXIT IF NOT
         MVI   E1204P8A,DFHBMASB  SHOW PF8
K812048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81204AP           EXIT IF NOT
         MVI   E1204PAA,DFHBMASB  SHOW PF10
K81204AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81204BP           EXIT IF NOT
         MVI   E1204PBA,DFHBMASB  SHOW PF11
K81204BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81204DP DC    PL8'0'
K81204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1204   DS    0H
         USING *,R6
* PF10 : ENQ
* REDISPLAY BACK 5
         USING EDF1204S,R4
         CLI   E1204PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1204DP,=P'5'     BACK 5
         CVB   R8,KA1204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1204P7A,DFHBMASD  HIDE PF7
         MVI   E1204P8A,DFHBMASD  HIDE PF8
         MVI   E1204PAA,DFHBMASD  HIDE PF10
         MVI   E1204PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA12047P           EXIT IF NOT
         MVI   E1204P7A,DFHBMASB  SHOW PF7
KA12047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA12048P           EXIT IF NOT
         MVI   E1204P8A,DFHBMASB  SHOW PF8
KA12048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1204AP           EXIT IF NOT
         MVI   E1204PAA,DFHBMASB  SHOW PF10
KA1204AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1204DP DC    PL8'0'
KA1204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1204   DS    0H
         USING *,R6
* PF11 : ENQ
* REDISPLAY FORWARD 5
         USING EDF1204S,R4
         CLI   E1204PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1204DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1204DP,=P'5'     FORWARD 5
         CVB   R8,KB1204DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1204DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1204P7A,DFHBMASD  HIDE PF7
         MVI   E1204P8A,DFHBMASD  HIDE PF8
         MVI   E1204PAA,DFHBMASB  SHOW PF10
         MVI   E1204PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB12047P           EXIT IF NOT
         MVI   E1204P7A,DFHBMASB  SHOW PF7
KB12047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB12048P           EXIT IF NOT
         MVI   E1204P8A,DFHBMASB  SHOW PF8
KB12048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1204BP           EXIT IF NOT
         MVI   E1204PBA,DFHBMASB  SHOW PF11
KB1204BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1204IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1204IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1204DP DC    PL8'0'
KB1204IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1204   DS    0H
         USING *,R6
* PF12 : ENQ
         USING EDF1204S,R4
         XC    KC1204RP,KC1204RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1204RP) LENGTH(KC1204LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1204RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1204L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1204') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1204BS           EXIT IF IT IS
         TM    E1204DIF,DFHBMEOF  ANY DATA ?
         BO    KC1204BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1204DII  SAVE INPUT REDISPLAY NUMBER
KC1204BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1204RP DS    CL50               RECEIVE AREA
KC1204LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21206   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : DEQ
* PF12 : DEQ - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1206S,R4
         MVC   E1206ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1206P7A,DFHBMASD  HIDE PF7
         MVI   E1206P8A,DFHBMASD  HIDE PF8
         MVI   E1206PAA,DFHBMASD  HIDE PF10
         MVI   E1206PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21206S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21206S4 EQU   *
         XC    E1206DIL,E1206DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21206S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1206PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21206S6           EXIT
*
K21206S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21206NP           EXIT IF NOT
* REDISPLAY MODE
K21206S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1206PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1206DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1206DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1206DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1206DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21206DC        CONVERT TO DECIMAL
         UNPK  E1206DTO+1(3),K21206DC+6(2) UNPACK NUMITEMS
         OI    E1206DTO+3,X'F0'   SET SIGN
         MVI   E1206DTO,C'/'      SET /
         MVC   E1206ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21206DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21206DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K212067P           EXIT IF NOT
         MVI   E1206P7A,DFHBMASB  SHOW PF7
K212067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K212068P           EXIT IF NOT
         MVI   E1206P8A,DFHBMASB  SHOW PF8
K212068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21206AP           EXIT IF NOT
         MVI   E1206PAA,DFHBMASB  SHOW PF10
K21206AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21206NP           EXIT IF NOT
         MVI   E1206PBA,DFHBMASB  SHOW PF11
K21206NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K21206SN           EXIT IF IT IS
         CLI   E1206LHA,DFHBMASD  IS LENGTH DARK ?
         BNE   K21206RL           EXIT IF NOT
* NO LENGTH
         MVI   E1206P2A,DFHBMASD  HIDE PF2
         B     K21206SN           EXIT
*
K21206RL EQU   *
         PACK  K21206SC,E1206LNO+1(5) PACK RESOURCE LENGTH
         CVB   R8,K21206SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K21206LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K21206EX           EXIT
*
K21206LK EQU   *
         CHI   R8,67              >67 ?
         BNH   K21206EX           EXIT IF NOT
         LA    R8,67              SET MAXIMUM LENGTH
K21206EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K21206SC        SAVE DISPLAY LENGTH-1
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21206M1           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K21206NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21206M2           EXIT
*
K21206M1 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K21206NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21206M2 EQU   *
         EX    R8,K21206MR        SAVE RESOURCE
         EX    R8,K21206RE        RESOURCE TO EBCDIC
         MVC   E1206MDO,=CL6'EBCDIC' SET MODE
         B     K21206SN           EXIT
*
K21206NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21206M3           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BNE   K21206NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K21206M4           EXIT
*
K21206M3 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K21206NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K21206M4 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21206SC        RESTORE LENGTH FOR EX
         EX    R8,K21206MB        MOVE RESOURCE BACK
         EX    R8,K21206RA        RESOURCE TO ASCII
         MVC   E1206MDO,=CL6'ASCII' SET MODE
         B     K21206SN           EXIT
*
K21206NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21206M5           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BNE   K21206NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K21206M6           EXIT
*
K21206M5 EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K21206NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K21206M6 EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21206SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 67 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 67-3=64/2=32
         LA    R15,1(R8)          R15=RESOURCE LENGTH
         LA    R1,K21206TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K21206RS        SOURCE ADDRESS
         XC    E1206RSO+1(69),E1206RSO+1 CLEAR RESOURCE DISPLAY
         MVHHI E1206RSO+1,C'X'''  MOVE X'
         LA    R14,E1206RSO+3     DESTINATION ADDRESS
         CHI   R15,32             >32 ?
         BNH   K21206HX           EXIT IF NOT
         LA    R15,32             SET MAXIMUM
K21206HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E1206RSO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         MVC   E1206MDO,=CL6'HEX' SET MODE
         B     K21206SN           EXIT
*
K21206NA EQU   *
* HAS TO BE IN HEX MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21206M7           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K21206M8           EXIT
*
K21206M7 EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K21206M8 EQU   *
         XC    E1206RSO+1(69),E1206RSO+1 CLEAR RESOURCE DISPLAY
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K21206SC        RESTORE LENGTH FOR EX
         EX    R8,K21206MB        MOVE RESOURCE BACK
         EX    R8,K21206RE        RESOURCE TO EBCDIC
         LA    R5,E1206RSO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET RESOURCE CLOSE BRACKET
         MVC   E1206MDO,=CL6'EBCDIC' SET MODE
K21206SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1206') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1206          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21206DC DC    PL8'0'
K21206SC DC    PL8'0'
K21206RS DS    XL67               RESOURCE
K21206MR MVC   K21206RS(0),E1206RSO+1 SAVE RESOURCE
K21206RE TR    E1206RSO+1(0),K21206TE RESOURCE TO EBCDIC
K21206MB MVC   E1206RSO+1(0),K21206RS MOVE RESOURCE BACK
K21206RA TR    E1206RSO+1(0),K21206TA RESOURCE TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K21206TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K21206TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K21206TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K51206   DS    0H
         USING *,R6
* PF5  : DEQ
* WORKING STORAGE DISPLAY
         USING EDF1206S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1206TSO   MOVE TRANSID
         MVC   EWKSPGO,E1206PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1206TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1206L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71206   DS    0H
         USING *,R6
* PF7  : DEQ
* REDISPLAY BACK 1
         USING EDF1206S,R4
         CLI   E1206P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71206DP,=P'1'     BACK 1
         CVB   R8,K71206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1206P7A,DFHBMASD  HIDE PF7
         MVI   E1206P8A,DFHBMASB  SHOW PF8
         MVI   E1206PAA,DFHBMASD  HIDE PF10
         MVI   E1206PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K712067P           EXIT IF NOT
         MVI   E1206P7A,DFHBMASB  SHOW PF7
K712067P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71206AP           EXIT IF NOT
         MVI   E1206PAA,DFHBMASB  SHOW PF10
K71206AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71206BP           EXIT IF NOT
         MVI   E1206PBA,DFHBMASB  SHOW PF11
K71206BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71206DP DC    PL8'0'
K71206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81206   DS    0H
         USING *,R6
* PF8  : DEQ
* REDISPLAY FORWARD 1
         USING EDF1206S,R4
         CLI   E1206P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81206DP,=P'1'     FORWARD 1
         CVB   R8,K81206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1206P7A,DFHBMASB  SHOW PF7
         MVI   E1206P8A,DFHBMASD  HIDE PF8
         MVI   E1206PAA,DFHBMASD  HIDE PF10
         MVI   E1206PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K812068P           EXIT IF NOT
         MVI   E1206P8A,DFHBMASB  SHOW PF8
K812068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81206AP           EXIT IF NOT
         MVI   E1206PAA,DFHBMASB  SHOW PF10
K81206AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81206BP           EXIT IF NOT
         MVI   E1206PBA,DFHBMASB  SHOW PF11
K81206BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81206DP DC    PL8'0'
K81206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1206   DS    0H
         USING *,R6
* PF10 : DEQ
* REDISPLAY BACK 5
         USING EDF1206S,R4
         CLI   E1206PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1206DP,=P'5'     BACK 5
         CVB   R8,KA1206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1206P7A,DFHBMASD  HIDE PF7
         MVI   E1206P8A,DFHBMASD  HIDE PF8
         MVI   E1206PAA,DFHBMASD  HIDE PF10
         MVI   E1206PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA12067P           EXIT IF NOT
         MVI   E1206P7A,DFHBMASB  SHOW PF7
KA12067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA12068P           EXIT IF NOT
         MVI   E1206P8A,DFHBMASB  SHOW PF8
KA12068P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1206AP           EXIT IF NOT
         MVI   E1206PAA,DFHBMASB  SHOW PF10
KA1206AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1206DP DC    PL8'0'
KA1206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1206   DS    0H
         USING *,R6
* PF11 : DEQ
* REDISPLAY FORWARD 5
         USING EDF1206S,R4
         CLI   E1206PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1206DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1206DP,=P'5'     FORWARD 5
         CVB   R8,KB1206DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1206DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1206P7A,DFHBMASD  HIDE PF7
         MVI   E1206P8A,DFHBMASD  HIDE PF8
         MVI   E1206PAA,DFHBMASB  SHOW PF10
         MVI   E1206PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB12067P           EXIT IF NOT
         MVI   E1206P7A,DFHBMASB  SHOW PF7
KB12067P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB12068P           EXIT IF NOT
         MVI   E1206P8A,DFHBMASB  SHOW PF8
KB12068P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1206BP           EXIT IF NOT
         MVI   E1206PBA,DFHBMASB  SHOW PF11
KB1206BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1206IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1206IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1206DP DC    PL8'0'
KB1206IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1206   DS    0H
         USING *,R6
* PF12 : DEQ
         USING EDF1206S,R4
         XC    KC1206RP,KC1206RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1206RP) LENGTH(KC1206LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1206RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1206L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1206') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1206BS           EXIT IF IT IS
         TM    E1206DIF,DFHBMEOF  ANY DATA ?
         BO    KC1206BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1206DII  SAVE INPUT REDISPLAY NUMBER
KC1206BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1206RP DS    CL50               RECEIVE AREA
KC1206LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21802   DS    0H
* RECEIVE MAP
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : RECEIVE MAP - NO PROCESSING
* PF12 : RECEIVE MAP - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1802S,R4
         MVC   E1802ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1802P7A,DFHBMASD  HIDE PF7
         MVI   E1802P8A,DFHBMASD  HIDE PF8
         MVI   E1802PAA,DFHBMASD  HIDE PF10
         MVI   E1802PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21802S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21802S4 EQU   *
         XC    E1802DIL,E1802DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21802S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1802PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21802S6           EXIT
*
K21802S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21802NP           EXIT IF NOT
* REDISPLAY MODE
K21802S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1802PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1802DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1802DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1802DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1802DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21802DC        CONVERT TO DECIMAL
         UNPK  E1802DTO+1(3),K21802DC+6(2) UNPACK NUMITEMS
         OI    E1802DTO+3,X'F0'   SET SIGN
         MVI   E1802DTO,C'/'      SET /
         MVC   E1802ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21802DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21802DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K218027P           EXIT IF NOT
         MVI   E1802P7A,DFHBMASB  SHOW PF7
K218027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K218028P           EXIT IF NOT
         MVI   E1802P8A,DFHBMASB  SHOW PF8
K218028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21802AP           EXIT IF NOT
         MVI   E1802PAA,DFHBMASB  SHOW PF10
K21802AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21802NP           EXIT IF NOT
         MVI   E1802PBA,DFHBMASB  SHOW PF11
K21802NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1802') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1802          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21802DC DC    PL8'0'
*
K51802   DS    0H
         USING *,R6
* PF5  : RECEIVE MAP
* WORKING STORAGE DISPLAY
         USING EDF1802S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1802TSO   MOVE TRANSID
         MVC   EWKSPGO,E1802PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1802TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1802L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71802   DS    0H
         USING *,R6
* PF7  : RECEIVE MAP
* REDISPLAY BACK 1
         USING EDF1802S,R4
         CLI   E1802P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71802DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71802DP,=P'1'     BACK 1
         CVB   R8,K71802DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71802DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1802P7A,DFHBMASD  HIDE PF7
         MVI   E1802P8A,DFHBMASB  SHOW PF8
         MVI   E1802PAA,DFHBMASD  HIDE PF10
         MVI   E1802PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K718027P           EXIT IF NOT
         MVI   E1802P7A,DFHBMASB  SHOW PF7
K718027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71802AP           EXIT IF NOT
         MVI   E1802PAA,DFHBMASB  SHOW PF10
K71802AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71802BP           EXIT IF NOT
         MVI   E1802PBA,DFHBMASB  SHOW PF11
K71802BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71802IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71802IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71802DP DC    PL8'0'
K71802IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81802   DS    0H
         USING *,R6
* PF8  : RECEIVE MAP
* REDISPLAY FORWARD 1
         USING EDF1802S,R4
         CLI   E1802P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81802DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81802DP,=P'1'     FORWARD 1
         CVB   R8,K81802DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81802DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1802P7A,DFHBMASB  SHOW PF7
         MVI   E1802P8A,DFHBMASD  HIDE PF8
         MVI   E1802PAA,DFHBMASD  HIDE PF10
         MVI   E1802PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K818028P           EXIT IF NOT
         MVI   E1802P8A,DFHBMASB  SHOW PF8
K818028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81802AP           EXIT IF NOT
         MVI   E1802PAA,DFHBMASB  SHOW PF10
K81802AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81802BP           EXIT IF NOT
         MVI   E1802PBA,DFHBMASB  SHOW PF11
K81802BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81802IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81802IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81802DP DC    PL8'0'
K81802IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1802   DS    0H
         USING *,R6
* PF10 : RECEIVE MAP
* REDISPLAY BACK 5
         USING EDF1802S,R4
         CLI   E1802PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1802DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1802DP,=P'5'     BACK 5
         CVB   R8,KA1802DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1802DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1802P7A,DFHBMASD  HIDE PF7
         MVI   E1802P8A,DFHBMASD  HIDE PF8
         MVI   E1802PAA,DFHBMASD  HIDE PF10
         MVI   E1802PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA18027P           EXIT IF NOT
         MVI   E1802P7A,DFHBMASB  SHOW PF7
KA18027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA18028P           EXIT IF NOT
         MVI   E1802P8A,DFHBMASB  SHOW PF8
KA18028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1802AP           EXIT IF NOT
         MVI   E1802PAA,DFHBMASB  SHOW PF10
KA1802AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1802IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1802IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1802DP DC    PL8'0'
KA1802IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1802   DS    0H
         USING *,R6
* PF11 : RECEIVE MAP
* REDISPLAY FORWARD 5
         USING EDF1802S,R4
         CLI   E1802PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1802DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1802DP,=P'5'     FORWARD 5
         CVB   R8,KB1802DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1802DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1802P7A,DFHBMASD  HIDE PF7
         MVI   E1802P8A,DFHBMASD  HIDE PF8
         MVI   E1802PAA,DFHBMASB  SHOW PF10
         MVI   E1802PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB18027P           EXIT IF NOT
         MVI   E1802P7A,DFHBMASB  SHOW PF7
KB18027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB18028P           EXIT IF NOT
         MVI   E1802P8A,DFHBMASB  SHOW PF8
KB18028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1802BP           EXIT IF NOT
         MVI   E1802PBA,DFHBMASB  SHOW PF11
KB1802BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1802IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1802IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1802DP DC    PL8'0'
KB1802IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1802   DS    0H
         USING *,R6
* PF12 : RECEIVE MAP
         USING EDF1802S,R4
         XC    KC1802RP,KC1802RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1802RP) LENGTH(KC1802LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1802RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1802L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1802') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1802BS           EXIT IF IT IS
         TM    E1802DIF,DFHBMEOF  ANY DATA ?
         BO    KC1802BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1802DII  SAVE INPUT REDISPLAY NUMBER
KC1802BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1802RP DS    CL50               RECEIVE AREA
KC1802LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21804   DS    0H
* SEND MAP
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : SEND MAP - NO PROCESSING
* PF12 : SEND MAP - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1804S,R4
         MVC   E1804ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1804P7A,DFHBMASD  HIDE PF7
         MVI   E1804P8A,DFHBMASD  HIDE PF8
         MVI   E1804PAA,DFHBMASD  HIDE PF10
         MVI   E1804PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21804S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21804S4 EQU   *
         XC    E1804DIL,E1804DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21804S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1804PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21804S6           EXIT
*
K21804S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21804NP           EXIT IF NOT
* REDISPLAY MODE
K21804S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1804PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1804DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1804DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1804DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1804DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21804DC        CONVERT TO DECIMAL
         UNPK  E1804DTO+1(3),K21804DC+6(2) UNPACK NUMITEMS
         OI    E1804DTO+3,X'F0'   SET SIGN
         MVI   E1804DTO,C'/'      SET /
         MVC   E1804ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21804DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21804DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K218047P           EXIT IF NOT
         MVI   E1804P7A,DFHBMASB  SHOW PF7
K218047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K218048P           EXIT IF NOT
         MVI   E1804P8A,DFHBMASB  SHOW PF8
K218048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21804AP           EXIT IF NOT
         MVI   E1804PAA,DFHBMASB  SHOW PF10
K21804AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21804NP           EXIT IF NOT
         MVI   E1804PBA,DFHBMASB  SHOW PF11
K21804NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1804') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1804          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21804DC DC    PL8'0'
*
K51804   DS    0H
         USING *,R6
* PF5  : SEND MAP
* WORKING STORAGE DISPLAY
         USING EDF1804S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1804TSO   MOVE TRANSID
         MVC   EWKSPGO,E1804PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1804TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1804L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71804   DS    0H
         USING *,R6
* PF7  : SEND MAP
* REDISPLAY BACK 1
         USING EDF1804S,R4
         CLI   E1804P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71804DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71804DP,=P'1'     BACK 1
         CVB   R8,K71804DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71804DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1804P7A,DFHBMASD  HIDE PF7
         MVI   E1804P8A,DFHBMASB  SHOW PF8
         MVI   E1804PAA,DFHBMASD  HIDE PF10
         MVI   E1804PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K718047P           EXIT IF NOT
         MVI   E1804P7A,DFHBMASB  SHOW PF7
K718047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71804AP           EXIT IF NOT
         MVI   E1804PAA,DFHBMASB  SHOW PF10
K71804AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71804BP           EXIT IF NOT
         MVI   E1804PBA,DFHBMASB  SHOW PF11
K71804BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71804IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71804IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71804DP DC    PL8'0'
K71804IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81804   DS    0H
         USING *,R6
* PF8  : SEND MAP
* REDISPLAY FORWARD 1
         USING EDF1804S,R4
         CLI   E1804P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81804DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81804DP,=P'1'     FORWARD 1
         CVB   R8,K81804DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81804DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1804P7A,DFHBMASB  SHOW PF7
         MVI   E1804P8A,DFHBMASD  HIDE PF8
         MVI   E1804PAA,DFHBMASD  HIDE PF10
         MVI   E1804PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K818048P           EXIT IF NOT
         MVI   E1804P8A,DFHBMASB  SHOW PF8
K818048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81804AP           EXIT IF NOT
         MVI   E1804PAA,DFHBMASB  SHOW PF10
K81804AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81804BP           EXIT IF NOT
         MVI   E1804PBA,DFHBMASB  SHOW PF11
K81804BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81804IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81804IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81804DP DC    PL8'0'
K81804IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1804   DS    0H
         USING *,R6
* PF10 : SEND MAP
* REDISPLAY BACK 5
         USING EDF1804S,R4
         CLI   E1804PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1804DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1804DP,=P'5'     BACK 5
         CVB   R8,KA1804DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1804DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1804P7A,DFHBMASD  HIDE PF7
         MVI   E1804P8A,DFHBMASD  HIDE PF8
         MVI   E1804PAA,DFHBMASD  HIDE PF10
         MVI   E1804PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA18047P           EXIT IF NOT
         MVI   E1804P7A,DFHBMASB  SHOW PF7
KA18047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA18048P           EXIT IF NOT
         MVI   E1804P8A,DFHBMASB  SHOW PF8
KA18048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1804AP           EXIT IF NOT
         MVI   E1804PAA,DFHBMASB  SHOW PF10
KA1804AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1804IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1804IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1804DP DC    PL8'0'
KA1804IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1804   DS    0H
         USING *,R6
* PF11 : SEND MAP
* REDISPLAY FORWARD 5
         USING EDF1804S,R4
         CLI   E1804PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1804DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1804DP,=P'5'     FORWARD 5
         CVB   R8,KB1804DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1804DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1804P7A,DFHBMASD  HIDE PF7
         MVI   E1804P8A,DFHBMASD  HIDE PF8
         MVI   E1804PAA,DFHBMASB  SHOW PF10
         MVI   E1804PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB18047P           EXIT IF NOT
         MVI   E1804P7A,DFHBMASB  SHOW PF7
KB18047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB18048P           EXIT IF NOT
         MVI   E1804P8A,DFHBMASB  SHOW PF8
KB18048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1804BP           EXIT IF NOT
         MVI   E1804PBA,DFHBMASB  SHOW PF11
KB1804BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1804IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1804IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1804DP DC    PL8'0'
KB1804IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1804   DS    0H
         USING *,R6
* PF12 : SEND MAP
         USING EDF1804S,R4
         XC    KC1804RP,KC1804RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1804RP) LENGTH(KC1804LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1804RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1804L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1804') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1804BS           EXIT IF IT IS
         TM    E1804DIF,DFHBMEOF  ANY DATA ?
         BO    KC1804BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1804DII  SAVE INPUT REDISPLAY NUMBER
KC1804BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1804RP DS    CL50               RECEIVE AREA
KC1804LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21812   DS    0H
* SEND CONTROL
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : SEND CONTROL - NO PROCESSING
* PF12 : SEND CONTROL - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1812S,R4
         MVC   E1812ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1812P7A,DFHBMASD  HIDE PF7
         MVI   E1812P8A,DFHBMASD  HIDE PF8
         MVI   E1812PAA,DFHBMASD  HIDE PF10
         MVI   E1812PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21812S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21812S4 EQU   *
         XC    E1812DIL,E1812DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21812S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1812PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21812S6           EXIT
*
K21812S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21812NP           EXIT IF NOT
* REDISPLAY MODE
K21812S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1812PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1812DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1812DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1812DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1812DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21812DC        CONVERT TO DECIMAL
         UNPK  E1812DTO+1(3),K21812DC+6(2) UNPACK NUMITEMS
         OI    E1812DTO+3,X'F0'   SET SIGN
         MVI   E1812DTO,C'/'      SET /
         MVC   E1812ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21812DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21812DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K218127P           EXIT IF NOT
         MVI   E1812P7A,DFHBMASB  SHOW PF7
K218127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K218128P           EXIT IF NOT
         MVI   E1812P8A,DFHBMASB  SHOW PF8
K218128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21812AP           EXIT IF NOT
         MVI   E1812PAA,DFHBMASB  SHOW PF10
K21812AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21812NP           EXIT IF NOT
         MVI   E1812PBA,DFHBMASB  SHOW PF11
K21812NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1812') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1812          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21812DC DC    PL8'0'
*
K51812   DS    0H
         USING *,R6
* PF5  : SEND CONTROL
* WORKING STORAGE DISPLAY
         USING EDF1812S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1812TSO   MOVE TRANSID
         MVC   EWKSPGO,E1812PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1812TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1812L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71812   DS    0H
         USING *,R6
* PF7  : SEND CONTROL
* REDISPLAY BACK 1
         USING EDF1812S,R4
         CLI   E1812P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71812DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71812DP,=P'1'     BACK 1
         CVB   R8,K71812DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71812DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1812P7A,DFHBMASD  HIDE PF7
         MVI   E1812P8A,DFHBMASB  SHOW PF8
         MVI   E1812PAA,DFHBMASD  HIDE PF10
         MVI   E1812PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K718127P           EXIT IF NOT
         MVI   E1812P7A,DFHBMASB  SHOW PF7
K718127P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71812AP           EXIT IF NOT
         MVI   E1812PAA,DFHBMASB  SHOW PF10
K71812AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71812BP           EXIT IF NOT
         MVI   E1812PBA,DFHBMASB  SHOW PF11
K71812BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71812IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71812IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71812DP DC    PL8'0'
K71812IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81812   DS    0H
         USING *,R6
* PF8  : SEND CONTROL
* REDISPLAY FORWARD 1
         USING EDF1812S,R4
         CLI   E1812P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81812DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81812DP,=P'1'     FORWARD 1
         CVB   R8,K81812DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81812DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1812P7A,DFHBMASB  SHOW PF7
         MVI   E1812P8A,DFHBMASD  HIDE PF8
         MVI   E1812PAA,DFHBMASD  HIDE PF10
         MVI   E1812PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K818128P           EXIT IF NOT
         MVI   E1812P8A,DFHBMASB  SHOW PF8
K818128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81812AP           EXIT IF NOT
         MVI   E1812PAA,DFHBMASB  SHOW PF10
K81812AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81812BP           EXIT IF NOT
         MVI   E1812PBA,DFHBMASB  SHOW PF11
K81812BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81812IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81812IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81812DP DC    PL8'0'
K81812IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1812   DS    0H
         USING *,R6
* PF10 : SEND CONTROL
* REDISPLAY BACK 5
         USING EDF1812S,R4
         CLI   E1812PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1812DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1812DP,=P'5'     BACK 5
         CVB   R8,KA1812DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1812DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1812P7A,DFHBMASD  HIDE PF7
         MVI   E1812P8A,DFHBMASD  HIDE PF8
         MVI   E1812PAA,DFHBMASD  HIDE PF10
         MVI   E1812PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA18127P           EXIT IF NOT
         MVI   E1812P7A,DFHBMASB  SHOW PF7
KA18127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA18128P           EXIT IF NOT
         MVI   E1812P8A,DFHBMASB  SHOW PF8
KA18128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1812AP           EXIT IF NOT
         MVI   E1812PAA,DFHBMASB  SHOW PF10
KA1812AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1812IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1812IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1812DP DC    PL8'0'
KA1812IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1812   DS    0H
         USING *,R6
* PF11 : SEND CONTROL
* REDISPLAY FORWARD 5
         USING EDF1812S,R4
         CLI   E1812PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1812DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1812DP,=P'5'     FORWARD 5
         CVB   R8,KB1812DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1812DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1812P7A,DFHBMASD  HIDE PF7
         MVI   E1812P8A,DFHBMASD  HIDE PF8
         MVI   E1812PAA,DFHBMASB  SHOW PF10
         MVI   E1812PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB18127P           EXIT IF NOT
         MVI   E1812P7A,DFHBMASB  SHOW PF7
KB18127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB18128P           EXIT IF NOT
         MVI   E1812P8A,DFHBMASB  SHOW PF8
KB18128P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1812BP           EXIT IF NOT
         MVI   E1812PBA,DFHBMASB  SHOW PF11
KB1812BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1812IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1812IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1812DP DC    PL8'0'
KB1812IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1812   DS    0H
         USING *,R6
* PF12 : SEND CONTROL
         USING EDF1812S,R4
         XC    KC1812RP,KC1812RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1812RP) LENGTH(KC1812LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1812RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1812L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1812') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1812BS           EXIT IF IT IS
         TM    E1812DIF,DFHBMEOF  ANY DATA ?
         BO    KC1812BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1812DII  SAVE INPUT REDISPLAY NUMBER
KC1812BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1812RP DS    CL50               RECEIVE AREA
KC1812LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K21C02   DS    0H
* DUMP TRANSACTION
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : DUMP TRANSACTION - NO PROCESSING
* PF12 : DUMP TRANSACTION - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF1C02S,R4
         MVC   E1C02ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E1C02P7A,DFHBMASD  HIDE PF7
         MVI   E1C02P8A,DFHBMASD  HIDE PF8
         MVI   E1C02PAA,DFHBMASD  HIDE PF10
         MVI   E1C02PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K21C02S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K21C02S4 EQU   *
         XC    E1C02DIL,E1C02DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K21C02S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E1C02PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K21C02S6           EXIT
*
K21C02S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K21C02NP           EXIT IF NOT
* REDISPLAY MODE
K21C02S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E1C02PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E1C02DYA,DFHBMASB  SET DISPLAY ON
         MVI   E1C02DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E1C02DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E1C02DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K21C02DC        CONVERT TO DECIMAL
         UNPK  E1C02DTO+1(3),K21C02DC+6(2) UNPACK NUMITEMS
         OI    E1C02DTO+3,X'F0'   SET SIGN
         MVI   E1C02DTO,C'/'      SET /
         MVC   E1C02ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K21C02DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K21C02DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K21C027P           EXIT IF NOT
         MVI   E1C02P7A,DFHBMASB  SHOW PF7
K21C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K21C028P           EXIT IF NOT
         MVI   E1C02P8A,DFHBMASB  SHOW PF8
K21C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K21C02AP           EXIT IF NOT
         MVI   E1C02PAA,DFHBMASB  SHOW PF10
K21C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K21C02NP           EXIT IF NOT
         MVI   E1C02PBA,DFHBMASB  SHOW PF11
K21C02NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF1C02') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC1C02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K21C02DC DC    PL8'0'
*
K51C02   DS    0H
         USING *,R6
* PF5  : DUMP TRANSACTION
* WORKING STORAGE DISPLAY
         USING EDF1C02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E1C02TSO   MOVE TRANSID
         MVC   EWKSPGO,E1C02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E1C02TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF1C02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K71C02   DS    0H
         USING *,R6
* PF7  : DUMP TRANSACTION
* REDISPLAY BACK 1
         USING EDF1C02S,R4
         CLI   E1C02P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K71C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K71C02DP,=P'1'     BACK 1
         CVB   R8,K71C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K71C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1C02P7A,DFHBMASD  HIDE PF7
         MVI   E1C02P8A,DFHBMASB  SHOW PF8
         MVI   E1C02PAA,DFHBMASD  HIDE PF10
         MVI   E1C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K71C027P           EXIT IF NOT
         MVI   E1C02P7A,DFHBMASB  SHOW PF7
K71C027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K71C02AP           EXIT IF NOT
         MVI   E1C02PAA,DFHBMASB  SHOW PF10
K71C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K71C02BP           EXIT IF NOT
         MVI   E1C02PBA,DFHBMASB  SHOW PF11
K71C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K71C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K71C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K71C02DP DC    PL8'0'
K71C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K81C02   DS    0H
         USING *,R6
* PF8  : DUMP TRANSACTION
* REDISPLAY FORWARD 1
         USING EDF1C02S,R4
         CLI   E1C02P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K81C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K81C02DP,=P'1'     FORWARD 1
         CVB   R8,K81C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K81C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1C02P7A,DFHBMASB  SHOW PF7
         MVI   E1C02P8A,DFHBMASD  HIDE PF8
         MVI   E1C02PAA,DFHBMASD  HIDE PF10
         MVI   E1C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K81C028P           EXIT IF NOT
         MVI   E1C02P8A,DFHBMASB  SHOW PF8
K81C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K81C02AP           EXIT IF NOT
         MVI   E1C02PAA,DFHBMASB  SHOW PF10
K81C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K81C02BP           EXIT IF NOT
         MVI   E1C02PBA,DFHBMASB  SHOW PF11
K81C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K81C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K81C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K81C02DP DC    PL8'0'
K81C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA1C02   DS    0H
         USING *,R6
* PF10 : DUMP TRANSACTION
* REDISPLAY BACK 5
         USING EDF1C02S,R4
         CLI   E1C02PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA1C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA1C02DP,=P'5'     BACK 5
         CVB   R8,KA1C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA1C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1C02P7A,DFHBMASD  HIDE PF7
         MVI   E1C02P8A,DFHBMASD  HIDE PF8
         MVI   E1C02PAA,DFHBMASD  HIDE PF10
         MVI   E1C02PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA1C027P           EXIT IF NOT
         MVI   E1C02P7A,DFHBMASB  SHOW PF7
KA1C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA1C028P           EXIT IF NOT
         MVI   E1C02P8A,DFHBMASB  SHOW PF8
KA1C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA1C02AP           EXIT IF NOT
         MVI   E1C02PAA,DFHBMASB  SHOW PF10
KA1C02AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA1C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA1C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA1C02DP DC    PL8'0'
KA1C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB1C02   DS    0H
         USING *,R6
* PF11 : DUMP TRANSACTION
* REDISPLAY FORWARD 5
         USING EDF1C02S,R4
         CLI   E1C02PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB1C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB1C02DP,=P'5'     FORWARD 5
         CVB   R8,KB1C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB1C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E1C02P7A,DFHBMASD  HIDE PF7
         MVI   E1C02P8A,DFHBMASD  HIDE PF8
         MVI   E1C02PAA,DFHBMASB  SHOW PF10
         MVI   E1C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB1C027P           EXIT IF NOT
         MVI   E1C02P7A,DFHBMASB  SHOW PF7
KB1C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB1C028P           EXIT IF NOT
         MVI   E1C02P8A,DFHBMASB  SHOW PF8
KB1C028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB1C02BP           EXIT IF NOT
         MVI   E1C02PBA,DFHBMASB  SHOW PF11
KB1C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB1C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB1C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB1C02DP DC    PL8'0'
KB1C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC1C02   DS    0H
         USING *,R6
* PF12 : DUMP TRANSACTION
         USING EDF1C02S,R4
         XC    KC1C02RP,KC1C02RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC1C02RP) LENGTH(KC1C02LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC1C02RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF1C02L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF1C02') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC1C02BS           EXIT IF IT IS
         TM    E1C02DIF,DFHBMEOF  ANY DATA ?
         BO    KC1C02BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E1C02DII  SAVE INPUT REDISPLAY NUMBER
KC1C02BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC1C02RP DS    CL50               RECEIVE AREA
KC1C02LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K23412   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : DELETE CONTAINER
* PF12 : DELETE CONTAINER - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF3412S,R4
         MVC   E3412ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E3412P7A,DFHBMASD  HIDE PF7
         MVI   E3412P8A,DFHBMASD  HIDE PF8
         MVI   E3412PAA,DFHBMASD  HIDE PF10
         MVI   E3412PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K23412S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K23412S4 EQU   *
         XC    E3412DIL,E3412DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K23412S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E3412PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K23412S6           EXIT
*
K23412S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23412SN           EXIT IF NOT
* REDISPLAY MODE
K23412S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E3412PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E3412DYA,DFHBMASB  SET DISPLAY ON
         MVI   E3412DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E3412DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E3412DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K23412DC        CONVERT TO DECIMAL
         UNPK  E3412DTO+1(3),K23412DC+6(2) UNPACK NUMITEMS
         OI    E3412DTO+3,X'F0'   SET SIGN
         MVI   E3412DTO,C'/'      SET /
         MVC   E3412ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K23412DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K23412DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K234127P           EXIT IF NOT
         MVI   E3412P7A,DFHBMASB  SHOW PF7
K234127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K234128P           EXIT IF NOT
         MVI   E3412P8A,DFHBMASB  SHOW PF8
K234128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K23412AP           EXIT IF NOT
         MVI   E3412PAA,DFHBMASB  SHOW PF10
K23412AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K23412SN           EXIT IF NOT
         MVI   E3412PBA,DFHBMASB  SHOW PF11
K23412SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF3412') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC3412          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K23412DC DC    PL8'0'
*
         LTORG
*
K53412   DS    0H
         USING *,R6
* PF5  : DELETE CONTAINER
* WORKING STORAGE DISPLAY
         USING EDF3412S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E3412TSO   MOVE TRANSID
         MVC   EWKSPGO,E3412PGO   MOVE PROGRAM
         MVC   EWKSTNO,E3412TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF3412L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K73412   DS    0H
         USING *,R6
* PF7  : DELETE CONTAINER
* REDISPLAY BACK 1
         USING EDF3412S,R4
         CLI   E3412P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K73412DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K73412DP,=P'1'     BACK 1
         CVB   R8,K73412DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K73412DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3412P7A,DFHBMASD  HIDE PF7
         MVI   E3412P8A,DFHBMASB  SHOW PF8
         MVI   E3412PAA,DFHBMASD  HIDE PF10
         MVI   E3412PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K734127P           EXIT IF NOT
         MVI   E3412P7A,DFHBMASB  SHOW PF7
K734127P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K73412AP           EXIT IF NOT
         MVI   E3412PAA,DFHBMASB  SHOW PF10
K73412AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K73412BP           EXIT IF NOT
         MVI   E3412PBA,DFHBMASB  SHOW PF11
K73412BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K73412IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K73412IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K73412DP DC    PL8'0'
K73412IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K83412   DS    0H
         USING *,R6
* PF8  : DELETE CONTAINER
* REDISPLAY FORWARD 1
         USING EDF3412S,R4
         CLI   E3412P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K83412DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K83412DP,=P'1'     FORWARD 1
         CVB   R8,K83412DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K83412DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3412P7A,DFHBMASB  SHOW PF7
         MVI   E3412P8A,DFHBMASD  HIDE PF8
         MVI   E3412PAA,DFHBMASD  HIDE PF10
         MVI   E3412PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K834128P           EXIT IF NOT
         MVI   E3412P8A,DFHBMASB  SHOW PF8
K834128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K83412AP           EXIT IF NOT
         MVI   E3412PAA,DFHBMASB  SHOW PF10
K83412AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K83412BP           EXIT IF NOT
         MVI   E3412PBA,DFHBMASB  SHOW PF11
K83412BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K83412IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K83412IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K83412DP DC    PL8'0'
K83412IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA3412   DS    0H
         USING *,R6
* PF10 : DELETE CONTAINER
* REDISPLAY BACK 5
         USING EDF3412S,R4
         CLI   E3412PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA3412DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA3412DP,=P'5'     BACK 5
         CVB   R8,KA3412DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA3412DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3412P7A,DFHBMASD  HIDE PF7
         MVI   E3412P8A,DFHBMASD  HIDE PF8
         MVI   E3412PAA,DFHBMASD  HIDE PF10
         MVI   E3412PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA34127P           EXIT IF NOT
         MVI   E3412P7A,DFHBMASB  SHOW PF7
KA34127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA34128P           EXIT IF NOT
         MVI   E3412P8A,DFHBMASB  SHOW PF8
KA34128P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA3412AP           EXIT IF NOT
         MVI   E3412PAA,DFHBMASB  SHOW PF10
KA3412AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA3412IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA3412IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA3412DP DC    PL8'0'
KA3412IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB3412   DS    0H
         USING *,R6
* PF11 : DELETE CONTAINER
* REDISPLAY FORWARD 5
         USING EDF3412S,R4
         CLI   E3412PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB3412DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB3412DP,=P'5'     FORWARD 5
         CVB   R8,KB3412DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB3412DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3412P7A,DFHBMASD  HIDE PF7
         MVI   E3412P8A,DFHBMASD  HIDE PF8
         MVI   E3412PAA,DFHBMASB  SHOW PF10
         MVI   E3412PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB34127P           EXIT IF NOT
         MVI   E3412P7A,DFHBMASB  SHOW PF7
KB34127P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB34128P           EXIT IF NOT
         MVI   E3412P8A,DFHBMASB  SHOW PF8
KB34128P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB3412BP           EXIT IF NOT
         MVI   E3412PBA,DFHBMASB  SHOW PF11
KB3412BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB3412IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB3412IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB3412DP DC    PL8'0'
KB3412IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC3412   DS    0H
         USING *,R6
* PF12 : DELETE CONTAINER
         USING EDF3412S,R4
         XC    KC3412RP,KC3412RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC3412RP) LENGTH(KC3412LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC3412RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF3412L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF3412') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC3412BS           EXIT IF IT IS
         TM    E3412DIF,DFHBMEOF  ANY DATA ?
         BO    KC3412BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E3412DII  SAVE INPUT REDISPLAY NUMBER
KC3412BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC3412RP DS    CL50               RECEIVE AREA
KC3412LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K23414   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : GET CONTAINER
* PF12 : GET CONTAINER - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF3414S,R4
         MVC   E3414ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E3414P7A,DFHBMASD  HIDE PF7
         MVI   E3414P8A,DFHBMASD  HIDE PF8
         MVI   E3414PAA,DFHBMASD  HIDE PF10
         MVI   E3414PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K23414S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K23414S4 EQU   *
         XC    E3414DIL,E3414DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K23414S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E3414PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K23414S6           EXIT
*
K23414S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414NP           EXIT IF NOT
* REDISPLAY MODE
K23414S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E3414PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E3414DYA,DFHBMASB  SET DISPLAY ON
         MVI   E3414DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E3414DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E3414DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K23414DC        CONVERT TO DECIMAL
         UNPK  E3414DTO+1(3),K23414DC+6(2) UNPACK NUMITEMS
         OI    E3414DTO+3,X'F0'   SET SIGN
         MVI   E3414DTO,C'/'      SET /
         MVC   E3414ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K23414DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K23414DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K234147P           EXIT IF NOT
         MVI   E3414P7A,DFHBMASB  SHOW PF7
K234147P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K234148P           EXIT IF NOT
         MVI   E3414P8A,DFHBMASB  SHOW PF8
K234148P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K23414AP           EXIT IF NOT
         MVI   E3414PAA,DFHBMASB  SHOW PF10
K23414AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K23414NP           EXIT IF NOT
         MVI   E3414PBA,DFHBMASB  SHOW PF11
K23414NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K23414SN           EXIT IF IT IS
* INTO (...//...)
         CLI   E3414NDA,DFHBMASD  IS NODATA HIDDEN ?
         BNE   K23414SM           EXIT IF NOT
         CLI   E3414ISO,C'S'      SET ?
         BE    K23414SM           EXIT IF IT IS
         CLI   E3414ISO+15,C'('   ANY INTO ?
         BNE   K23414SM           EXIT IF NONE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K23414M8           EXIT IF IT IS
         B     K234142R           EXIT
*
K23414M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K234142R           EXIT IF NOT
K23414M8 EQU   *
         PACK  K23414SC,E3414LIO+1(11) PACK INTO LENGTH
         CVB   R8,K23414SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K23414LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K23414EX           EXIT
*
K23414LK EQU   *
         CHI   R8,61              >61 ?
         BNH   K23414EX           EXIT IF NOT
         LA    R8,61              SET MAXIMUM LENGTH
K23414EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K23414SC        SAVE DISPLAY LENGTH-1
         EX    R8,K23414MI        SAVE INTO
         EX    R8,K23414RE        INTO TO EBCDIC
         B     K23414SM           EXIT
*
K234142R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K23414MA           EXIT IF IT IS
         B     K234142E           EXIT
*
K23414M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K234142E           EXIT IF NOT
K23414MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K23414SC        RESTORE LENGTH FOR EX
         EX    R8,K23414IB        MOVE INTO BACK
         EX    R8,K23414IA        INTO TO ASCII
         B     K23414SM           EXIT
*
K234142E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K23414MC           EXIT IF IT IS
         B     K234142A           EXIT
*
K23414MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K234142A           EXIT IF NOT
K23414MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K23414SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 61 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 61-3=58/2=29
         LA    R15,1(R8)          R15=INTO LENGTH
         LA    R1,K23414TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K23414IN        SOURCE ADDRESS
         XC    E3414ISO+16(63),E3414ISO+16 CLEAR INTO DISPLAY
         MVHHI E3414ISO+16,C'X'''  MOVE X'
         LA    R14,E3414ISO+18    DESTINATION ADDRESS
         CHI   R15,29             >29 ?
         BNH   K23414HX           EXIT IF NOT
         LA    R15,29             SET MAXIMUM
K23414HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E3414ISO+18(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K23414SM           EXIT
*
K234142A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K23414SC        RESTORE LENGTH-1 FOR EX
         XC    E3414ISO+16(63),E3414ISO+16 CLEAR INTO DISPLAY
         EX    R8,K23414IB        MOVE INTO BACK
         EX    R8,K23414RE        INTO TO EBCDIC
         LA    R5,E3414ISO+17(R8) ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET INTO CLOSE BRACKET
K23414SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K23414NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K23414MK           EXIT
*
K23414MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K23414NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K23414MK EQU   *
         MVC   E3414MDO,=CL6'EBCDIC' SET MODE
         B     K23414SN           EXIT
*
K23414NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K23414NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K23414MM           EXIT
*
K23414ML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K23414NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K23414MM EQU   *
         MVC   E3414MDO,=CL6'ASCII' SET MODE
         B     K23414SN           EXIT
*
K23414NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K23414NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K23414MO           EXIT
*
K23414MN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K23414NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K23414MO EQU   *
         MVC   E3414MDO,=CL6'HEX' SET MODE
         B     K23414SN           EXIT
*
K23414NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23414MP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K23414MQ           EXIT
*
K23414MP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K23414MQ EQU   *
         MVC   E3414MDO,=CL6'EBCDIC' SET MODE
K23414SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF3414') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC3414          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K23414DC DC    PL8'0'
K23414SC DC    PL8'0'
K23414IN DS    XL61               INTO
K23414MI MVC   K23414IN(0),E3414ISO+16 SAVE INTO
K23414RE TR    E3414ISO+16(0),K23414TE INTO TO EBCDIC
K23414IB MVC   E3414ISO+16(0),K23414IN MOVE INTO BACK
K23414IA TR    E3414ISO+16(0),K23414TA INTO TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K23414TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K23414TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K23414TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K53414   DS    0H
         USING *,R6
* PF5  : GET CONTAINER
* WORKING STORAGE DISPLAY
         USING EDF3414S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E3414TSO   MOVE TRANSID
         MVC   EWKSPGO,E3414PGO   MOVE PROGRAM
         MVC   EWKSTNO,E3414TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF3414L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K73414   DS    0H
         USING *,R6
* PF7  : GET CONTAINER
* REDISPLAY BACK 1
         USING EDF3414S,R4
         CLI   E3414P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K73414DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K73414DP,=P'1'     BACK 1
         CVB   R8,K73414DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K73414DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3414P7A,DFHBMASD  HIDE PF7
         MVI   E3414P8A,DFHBMASB  SHOW PF8
         MVI   E3414PAA,DFHBMASD  HIDE PF10
         MVI   E3414PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K734147P           EXIT IF NOT
         MVI   E3414P7A,DFHBMASB  SHOW PF7
K734147P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K73414AP           EXIT IF NOT
         MVI   E3414PAA,DFHBMASB  SHOW PF10
K73414AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K73414BP           EXIT IF NOT
         MVI   E3414PBA,DFHBMASB  SHOW PF11
K73414BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K73414IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K73414IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K73414DP DC    PL8'0'
K73414IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K83414   DS    0H
         USING *,R6
* PF8  : GET CONTAINER
* REDISPLAY FORWARD 1
         USING EDF3414S,R4
         CLI   E3414P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K83414DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K83414DP,=P'1'     FORWARD 1
         CVB   R8,K83414DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K83414DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3414P7A,DFHBMASB  SHOW PF7
         MVI   E3414P8A,DFHBMASD  HIDE PF8
         MVI   E3414PAA,DFHBMASD  HIDE PF10
         MVI   E3414PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K834148P           EXIT IF NOT
         MVI   E3414P8A,DFHBMASB  SHOW PF8
K834148P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K83414AP           EXIT IF NOT
         MVI   E3414PAA,DFHBMASB  SHOW PF10
K83414AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K83414BP           EXIT IF NOT
         MVI   E3414PBA,DFHBMASB  SHOW PF11
K83414BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K83414IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K83414IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K83414DP DC    PL8'0'
K83414IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA3414   DS    0H
         USING *,R6
* PF10 : GET CONTAINER
* REDISPLAY BACK 5
         USING EDF3414S,R4
         CLI   E3414PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA3414DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA3414DP,=P'5'     BACK 5
         CVB   R8,KA3414DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA3414DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3414P7A,DFHBMASD  HIDE PF7
         MVI   E3414P8A,DFHBMASD  HIDE PF8
         MVI   E3414PAA,DFHBMASD  HIDE PF10
         MVI   E3414PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA34147P           EXIT IF NOT
         MVI   E3414P7A,DFHBMASB  SHOW PF7
KA34147P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA34148P           EXIT IF NOT
         MVI   E3414P8A,DFHBMASB  SHOW PF8
KA34148P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA3414AP           EXIT IF NOT
         MVI   E3414PAA,DFHBMASB  SHOW PF10
KA3414AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA3414IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA3414IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA3414DP DC    PL8'0'
KA3414IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB3414   DS    0H
         USING *,R6
* PF11 : GET CONTAINER
* REDISPLAY FORWARD 5
         USING EDF3414S,R4
         CLI   E3414PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB3414DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB3414DP,=P'5'     FORWARD 5
         CVB   R8,KB3414DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB3414DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3414P7A,DFHBMASD  HIDE PF7
         MVI   E3414P8A,DFHBMASD  HIDE PF8
         MVI   E3414PAA,DFHBMASB  SHOW PF10
         MVI   E3414PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB34147P           EXIT IF NOT
         MVI   E3414P7A,DFHBMASB  SHOW PF7
KB34147P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB34148P           EXIT IF NOT
         MVI   E3414P8A,DFHBMASB  SHOW PF8
KB34148P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB3414BP           EXIT IF NOT
         MVI   E3414PBA,DFHBMASB  SHOW PF11
KB3414BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB3414IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB3414IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB3414DP DC    PL8'0'
KB3414IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC3414   DS    0H
         USING *,R6
* PF12 : GET CONTAINER
         USING EDF3414S,R4
         XC    KC3414RP,KC3414RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC3414RP) LENGTH(KC3414LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC3414RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF3414L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF3414') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC3414BS           EXIT IF IT IS
         TM    E3414DIF,DFHBMEOF  ANY DATA ?
         BO    KC3414BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E3414DII  SAVE INPUT REDISPLAY NUMBER
KC3414BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC3414RP DS    CL50               RECEIVE AREA
KC3414LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K23416   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : PUT CONTAINER
* PF12 : PUT CONTAINER - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF3416S,R4
         MVC   E3416ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E3416P7A,DFHBMASD  HIDE PF7
         MVI   E3416P8A,DFHBMASD  HIDE PF8
         MVI   E3416PAA,DFHBMASD  HIDE PF10
         MVI   E3416PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K23416S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K23416S4 EQU   *
         XC    E3416DIL,E3416DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K23416S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E3416PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K23416S6           EXIT
*
K23416S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416NP           EXIT IF NOT
* REDISPLAY MODE
K23416S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E3416PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E3416DYA,DFHBMASB  SET DISPLAY ON
         MVI   E3416DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E3416DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E3416DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K23416DC        CONVERT TO DECIMAL
         UNPK  E3416DTO+1(3),K23416DC+6(2) UNPACK NUMITEMS
         OI    E3416DTO+3,X'F0'   SET SIGN
         MVI   E3416DTO,C'/'      SET /
         MVC   E3416ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K23416DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K23416DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K234167P           EXIT IF NOT
         MVI   E3416P7A,DFHBMASB  SHOW PF7
K234167P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K234168P           EXIT IF NOT
         MVI   E3416P8A,DFHBMASB  SHOW PF8
K234168P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K23416AP           EXIT IF NOT
         MVI   E3416PAA,DFHBMASB  SHOW PF10
K23416AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K23416NP           EXIT IF NOT
         MVI   E3416PBA,DFHBMASB  SHOW PF11
K23416NP EQU   *
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BE    K23416SN           EXIT IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416M7           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BE    K23416M8           EXIT IF IT IS
         B     K234162R           EXIT
*
K23416M7 EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K234162R           EXIT IF NOT
K23416M8 EQU   *
         PACK  K23416SC,E3416LNO+1(11) PACK FROM LENGTH
         CVB   R8,K23416SC        CONVERT TO BINARY
* PROTECT AGAINST BAD LENGTHS
         LTR   R8,R8              VALID LENGTH ?
         BP    K23416LK           EXIT IF LENGTH OK
         LA    R8,1               SET VALID LENGTH
         B     K23416EX           EXIT
*
K23416LK EQU   *
         CHI   R8,65              >65 ?
         BNH   K23416EX           EXIT IF NOT
         LA    R8,65              SET MAXIMUM LENGTH
K23416EX EQU   *
         BCTR  R8,0               -1 FOR EX
         CVD   R8,K23416SC        SAVE DISPLAY LENGTH-1
         EX    R8,K23416MF        SAVE FROM
         EX    R8,K23416RE        FROM TO EBCDIC
         B     K23416SM           EXIT
*
K234162R EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416M9           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      CURRENTLY IN EBCDIC MODE-REDISPLAY ?
         BE    K23416MA           EXIT IF IT IS
         B     K234162E           EXIT
*
K23416M9 EQU   *
         CLI   CURRMODE,C'E'      CURRENTLY IN EBCDIC MODE-INTERCEPT ?
         BNE   K234162E           EXIT IF NOT
K23416MA EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K23416SC        RESTORE LENGTH FOR EX
         EX    R8,K23416FB        MOVE FROM BACK
         EX    R8,K23416FA        FROM TO ASCII
         B     K23416SM           EXIT
*
K234162E EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416MB           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      CURRENTLY IN ASCII MODE-REDISPLAY ?
         BE    K23416MC           EXIT IF IT IS
         B     K234162A           EXIT
*
K23416MB EQU   *
         CLI   CURRMODE,C'A'      CURRENTLY IN ASCII MODE-INTERCEPT ?
         BNE   K234162A           EXIT IF NOT
K23416MC EQU   *
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K23416SC        RESTORE LENGTH FOR EX
* MAX DATA LENGTH IS 65 AS (..//..)
* HEX DATA FORMAT WILL BE  (X'..//..')
* SO IN HEX, MAX DISPLAY WILL BE 65-3=62/2=31
         LA    R15,1(R8)          R15=FROM LENGTH
         LA    R1,K23416TH        R1=TRANSLATE TABLE ADDRESS
         LA    R8,K23416FM        SOURCE ADDRESS
         XC    E3416FMO+1(68),E3416FMO+1 CLEAR FROM DISPLAY
         MVHHI E3416FMO+1,C'X'''  MOVE X'
         LA    R14,E3416FMO+3     DESTINATION ADDRESS
         CHI   R15,31             >31 ?
         BNH   K23416HX           EXIT IF NOT
         LA    R15,31             SET MAXIMUM
K23416HX EQU   *
         LR    R0,R15             SAVE LENGTH
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         LR    R15,R0             RESTORE LENGTH
         AR    R15,R15            DESTINATION SIZE
         LA    R8,E3416FMO+3(R15) POINT TO END
         MVHHI 0(R8),C''')'       MOVE END ')
         B     K23416SM           EXIT
*
K234162A EQU   *
* HAS TO BE IN HEX MODE
* SWITCH INTO WORKING STORAGE WILL DESTROY R8
         CVB   R8,K23416SC        RESTORE LENGTH-1 FOR EX
         XC    E3416FMO+1(68),E3416FMO+1 CLEAR FROM DISPLAY
         EX    R8,K23416FB        MOVE FROM BACK
         EX    R8,K23416RE        FROM TO EBCDIC
         LA    R5,E3416FMO+2(R8)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
K23416SM EQU   *
* SET CORRECT MODE
* METHOD FOR MULTIPLE CONVERSIONS, OTHERWISE INTEGRATE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416MJ           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'R'      SAVE/CONVERT TO EBCDIC-REDISPLAY ?
         BNE   K23416NR           EXIT IF NOT
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K23416MK           EXIT
*
K23416MJ EQU   *
         CLI   CURRMODE,C'R'      SAVE/CONVERT TO EBCDIC-INTERCEPT ?
         BNE   K23416NR           EXIT IF NOT
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K23416MK EQU   *
         MVC   E3416MDO,=CL6'EBCDIC' SET MODE
         B     K23416SN           EXIT
*
K23416NR EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416ML           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'E'      NOW EBCDIC-REDISPLAY ?
         BNE   K23416NE           EXIT IF NOT
         MVI   REDPMODE,C'A'      SET ASCII MODE-REDISPLAY
         B     K23416MM           EXIT
*
K23416ML EQU   *
         CLI   CURRMODE,C'E'      NOW EBCDIC-INTERCEPT ?
         BNE   K23416NE           EXIT IF NOT
         MVI   CURRMODE,C'A'      SET ASCII MODE-INTERCEPT
K23416MM EQU   *
         MVC   E3416MDO,=CL6'ASCII' SET MODE
         B     K23416SN           EXIT
*
K23416NE EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416MN           EXIT IF NOT
* REDISPLAY MODE
         CLI   REDPMODE,C'A'      NOW ASCII-REDISPLAY ?
         BNE   K23416NA           EXIT IF NOT
         MVI   REDPMODE,C'H'      SET HEX MODE-REDISPLAY
         B     K23416MO           EXIT
*
K23416MN EQU   *
         CLI   CURRMODE,C'A'      NOW ASCII-INTERCEPT ?
         BNE   K23416NA           EXIT IF NOT
         MVI   CURRMODE,C'H'      SET HEX MODE-INTERCEPT
K23416MO EQU   *
         MVC   E3416MDO,=CL6'HEX' SET MODE
         B     K23416SN           EXIT
*
K23416NA EQU   *
* MUST BE HEX
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23416MP           EXIT IF NOT
* REDISPLAY MODE
         MVI   REDPMODE,C'E'      SET EBCDIC MODE-REDISPLAY
         B     K23416MQ           EXIT
*
K23416MP EQU   *
         MVI   CURRMODE,C'E'      SET EBCDIC MODE-INTERCEPT
K23416MQ EQU   *
         MVC   E3416MDO,=CL6'EBCDIC' SET MODE
K23416SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF3416') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC3416          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K23416DC DC    PL8'0'
K23416SC DC    PL8'0'
K23416FM DS    XL65               FROM
K23416MF MVC   K23416FM(0),E3416FMO+1 SAVE FROM
K23416RE TR    E3416FMO+1(0),K23416TE FROM TO EBCDIC
K23416FB MVC   E3416FMO+1(0),K23416FM MOVE FROM BACK
K23416FA TR    E3416FMO+1(0),K23416TA FROM TO ASCII
*
         LTORG
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
K23416TE EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
K23416TA EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
K23416TH DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
K53416   DS    0H
         USING *,R6
* PF5  : PUT CONTAINER
* WORKING STORAGE DISPLAY
         USING EDF3416S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E3416TSO   MOVE TRANSID
         MVC   EWKSPGO,E3416PGO   MOVE PROGRAM
         MVC   EWKSTNO,E3416TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF3416L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K73416   DS    0H
         USING *,R6
* PF7  : PUT CONTAINER
* REDISPLAY BACK 1
         USING EDF3416S,R4
         CLI   E3416P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K73416DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K73416DP,=P'1'     BACK 1
         CVB   R8,K73416DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K73416DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3416P7A,DFHBMASD  HIDE PF7
         MVI   E3416P8A,DFHBMASB  SHOW PF8
         MVI   E3416PAA,DFHBMASD  HIDE PF10
         MVI   E3416PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K734167P           EXIT IF NOT
         MVI   E3416P7A,DFHBMASB  SHOW PF7
K734167P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K73416AP           EXIT IF NOT
         MVI   E3416PAA,DFHBMASB  SHOW PF10
K73416AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K73416BP           EXIT IF NOT
         MVI   E3416PBA,DFHBMASB  SHOW PF11
K73416BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K73416IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K73416IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K73416DP DC    PL8'0'
K73416IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K83416   DS    0H
         USING *,R6
* PF8  : PUT CONTAINER
* REDISPLAY FORWARD 1
         USING EDF3416S,R4
         CLI   E3416P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K83416DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K83416DP,=P'1'     FORWARD 1
         CVB   R8,K83416DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K83416DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3416P7A,DFHBMASB  SHOW PF7
         MVI   E3416P8A,DFHBMASD  HIDE PF8
         MVI   E3416PAA,DFHBMASD  HIDE PF10
         MVI   E3416PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K834168P           EXIT IF NOT
         MVI   E3416P8A,DFHBMASB  SHOW PF8
K834168P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K83416AP           EXIT IF NOT
         MVI   E3416PAA,DFHBMASB  SHOW PF10
K83416AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K83416BP           EXIT IF NOT
         MVI   E3416PBA,DFHBMASB  SHOW PF11
K83416BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K83416IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K83416IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K83416DP DC    PL8'0'
K83416IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA3416   DS    0H
         USING *,R6
* PF10 : PUT CONTAINER
* REDISPLAY BACK 5
         USING EDF3416S,R4
         CLI   E3416PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA3416DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA3416DP,=P'5'     BACK 5
         CVB   R8,KA3416DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA3416DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3416P7A,DFHBMASD  HIDE PF7
         MVI   E3416P8A,DFHBMASD  HIDE PF8
         MVI   E3416PAA,DFHBMASD  HIDE PF10
         MVI   E3416PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA34167P           EXIT IF NOT
         MVI   E3416P7A,DFHBMASB  SHOW PF7
KA34167P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA34168P           EXIT IF NOT
         MVI   E3416P8A,DFHBMASB  SHOW PF8
KA34168P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA3416AP           EXIT IF NOT
         MVI   E3416PAA,DFHBMASB  SHOW PF10
KA3416AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA3416IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA3416IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA3416DP DC    PL8'0'
KA3416IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB3416   DS    0H
         USING *,R6
* PF11 : PUT CONTAINER
* REDISPLAY FORWARD 5
         USING EDF3416S,R4
         CLI   E3416PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB3416DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB3416DP,=P'5'     FORWARD 5
         CVB   R8,KB3416DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB3416DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3416P7A,DFHBMASD  HIDE PF7
         MVI   E3416P8A,DFHBMASD  HIDE PF8
         MVI   E3416PAA,DFHBMASB  SHOW PF10
         MVI   E3416PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB34167P           EXIT IF NOT
         MVI   E3416P7A,DFHBMASB  SHOW PF7
KB34167P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB34168P           EXIT IF NOT
         MVI   E3416P8A,DFHBMASB  SHOW PF8
KB34168P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB3416BP           EXIT IF NOT
         MVI   E3416PBA,DFHBMASB  SHOW PF11
KB3416BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB3416IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB3416IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB3416DP DC    PL8'0'
KB3416IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC3416   DS    0H
         USING *,R6
* PF12 : PUT CONTAINER
         USING EDF3416S,R4
         XC    KC3416RP,KC3416RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC3416RP) LENGTH(KC3416LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC3416RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF3416L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF3416') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC3416BS           EXIT IF IT IS
         TM    E3416DIF,DFHBMEOF  ANY DATA ?
         BO    KC3416BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E3416DII  SAVE INPUT REDISPLAY NUMBER
KC3416BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC3416RP DS    CL50               RECEIVE AREA
KC3416LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K23440   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : MOVE CONTAINER
* PF12 : MOVE CONTAINER - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF3440S,R4
         MVC   E3440ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E3440P7A,DFHBMASD  HIDE PF7
         MVI   E3440P8A,DFHBMASD  HIDE PF8
         MVI   E3440PAA,DFHBMASD  HIDE PF10
         MVI   E3440PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K23440S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K23440S4 EQU   *
         XC    E3440DIL,E3440DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K23440S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E3440PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K23440S6           EXIT
*
K23440S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K23440SN           EXIT IF NOT
* REDISPLAY MODE
K23440S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E3440PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E3440DYA,DFHBMASB  SET DISPLAY ON
         MVI   E3440DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E3440DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E3440DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K23440DC        CONVERT TO DECIMAL
         UNPK  E3440DTO+1(3),K23440DC+6(2) UNPACK NUMITEMS
         OI    E3440DTO+3,X'F0'   SET SIGN
         MVI   E3440DTO,C'/'      SET /
         MVC   E3440ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K23440DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K23440DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K234407P           EXIT IF NOT
         MVI   E3440P7A,DFHBMASB  SHOW PF7
K234407P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K234408P           EXIT IF NOT
         MVI   E3440P8A,DFHBMASB  SHOW PF8
K234408P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K23440AP           EXIT IF NOT
         MVI   E3440PAA,DFHBMASB  SHOW PF10
K23440AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K23440SN           EXIT IF NOT
         MVI   E3440PBA,DFHBMASB  SHOW PF11
K23440SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF3440') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC3440          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K23440DC DC    PL8'0'
*
         LTORG
*
K53440   DS    0H
         USING *,R6
* PF5  : MOVE CONTAINER
* WORKING STORAGE DISPLAY
         USING EDF3440S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E3440TSO   MOVE TRANSID
         MVC   EWKSPGO,E3440PGO   MOVE PROGRAM
         MVC   EWKSTNO,E3440TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF3440L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K73440   DS    0H
         USING *,R6
* PF7  : MOVE CONTAINER
* REDISPLAY BACK 1
         USING EDF3440S,R4
         CLI   E3440P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K73440DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K73440DP,=P'1'     BACK 1
         CVB   R8,K73440DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K73440DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3440P7A,DFHBMASD  HIDE PF7
         MVI   E3440P8A,DFHBMASB  SHOW PF8
         MVI   E3440PAA,DFHBMASD  HIDE PF10
         MVI   E3440PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K734407P           EXIT IF NOT
         MVI   E3440P7A,DFHBMASB  SHOW PF7
K734407P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K73440AP           EXIT IF NOT
         MVI   E3440PAA,DFHBMASB  SHOW PF10
K73440AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K73440BP           EXIT IF NOT
         MVI   E3440PBA,DFHBMASB  SHOW PF11
K73440BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K73440IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K73440IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K73440DP DC    PL8'0'
K73440IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K83440   DS    0H
         USING *,R6
* PF8  : MOVE CONTAINER
* REDISPLAY FORWARD 1
         USING EDF3440S,R4
         CLI   E3440P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K83440DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K83440DP,=P'1'     FORWARD 1
         CVB   R8,K83440DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K83440DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3440P7A,DFHBMASB  SHOW PF7
         MVI   E3440P8A,DFHBMASD  HIDE PF8
         MVI   E3440PAA,DFHBMASD  HIDE PF10
         MVI   E3440PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K834408P           EXIT IF NOT
         MVI   E3440P8A,DFHBMASB  SHOW PF8
K834408P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K83440AP           EXIT IF NOT
         MVI   E3440PAA,DFHBMASB  SHOW PF10
K83440AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K83440BP           EXIT IF NOT
         MVI   E3440PBA,DFHBMASB  SHOW PF11
K83440BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K83440IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K83440IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K83440DP DC    PL8'0'
K83440IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA3440   DS    0H
         USING *,R6
* PF10 : MOVE CONTAINER
* REDISPLAY BACK 5
         USING EDF3440S,R4
         CLI   E3440PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA3440DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA3440DP,=P'5'     BACK 5
         CVB   R8,KA3440DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA3440DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3440P7A,DFHBMASD  HIDE PF7
         MVI   E3440P8A,DFHBMASD  HIDE PF8
         MVI   E3440PAA,DFHBMASD  HIDE PF10
         MVI   E3440PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA34407P           EXIT IF NOT
         MVI   E3440P7A,DFHBMASB  SHOW PF7
KA34407P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA34408P           EXIT IF NOT
         MVI   E3440P8A,DFHBMASB  SHOW PF8
KA34408P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA3440AP           EXIT IF NOT
         MVI   E3440PAA,DFHBMASB  SHOW PF10
KA3440AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA3440IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA3440IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA3440DP DC    PL8'0'
KA3440IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB3440   DS    0H
         USING *,R6
* PF11 : MOVE CONTAINER
* REDISPLAY FORWARD 5
         USING EDF3440S,R4
         CLI   E3440PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB3440DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB3440DP,=P'5'     FORWARD 5
         CVB   R8,KB3440DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB3440DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E3440P7A,DFHBMASD  HIDE PF7
         MVI   E3440P8A,DFHBMASD  HIDE PF8
         MVI   E3440PAA,DFHBMASB  SHOW PF10
         MVI   E3440PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB34407P           EXIT IF NOT
         MVI   E3440P7A,DFHBMASB  SHOW PF7
KB34407P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB34408P           EXIT IF NOT
         MVI   E3440P8A,DFHBMASB  SHOW PF8
KB34408P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB3440BP           EXIT IF NOT
         MVI   E3440PBA,DFHBMASB  SHOW PF11
KB3440BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB3440IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB3440IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB3440DP DC    PL8'0'
KB3440IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC3440   DS    0H
         USING *,R6
* PF12 : MOVE CONTAINER
         USING EDF3440S,R4
         XC    KC3440RP,KC3440RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC3440RP) LENGTH(KC3440LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC3440RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF3440L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF3440') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC3440BS           EXIT IF IT IS
         TM    E3440DIF,DFHBMEOF  ANY DATA ?
         BO    KC3440BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E3440DII  SAVE INPUT REDISPLAY NUMBER
KC3440BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC3440RP DS    CL50               RECEIVE AREA
KC3440LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K24A04   DS    0H
* FORMATTIME
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : FORMATTIME - NO PROCESSING
* PF12 : FORMATTIME - ACTIVATE REDISPLAY MODE--WITH PAGING
*        FORMATTIME - WITHIN REDISPLAY MODE, SWITCH KEY SETS
         USING EDF4A04S,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* HANDLE CLEAR IN REDISPLAY MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24A04OK           EXIT IF NOT
* REDISPLAY MODE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BNE   K24A04OK           EXIT IF NOT
* CLEAR IN REDISPLAY MODE
         L     R4,EDFRDYAD        R4=REDISPLAY MAP STRUCTURE
         AHI   R4,8               POINT TO REDISPLAY MAP
K24A04OK EQU   *
         MVC   E4A04ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVC   E4A04P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVC   E4A04P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVC   E4A04PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         MVC   E4A04PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E4A04PCO,=C'PF12:REDISPLAY MODE' SET PF12 TEXT
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K24A04S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K24A04S4 EQU   *
         XC    E4A04DIL,E4A04DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K24A04S5           EXIT IF NOT
* PF12 PRESSED
         CLI   E4A04PCA,DFHBMASD  PF12 HIDDEN ?
         BE    K24A04S5           EXIT IF IT IS
* PF12 PRESSED AND SHOWN
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24A04AR           EXIT IF NOT
* PF12 WHILE IN REDISPLAY MODE, SWITCH KEY SETS
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K24A04S6           EXIT IF THEY ARE
         L     R14,K24A04LU       R14=NO. OF POTENTIAL LINES
         S     R14,K24A04LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K24A04NP           EXIT IF NOT
* REDISPLAY KEYS ACTIVE, SWITCH TO PAGING KEYS
         MVC   E4A04ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E4A04P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVC   E4A04P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVC   E4A04PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVC   E4A04PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E4A04PCO,=C'PF12:REDISPLAY KEYS' SET PF12 TEXT
         MVHHI E4A04DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVI   EDFRDYPG,X'FF'     SET PAGING KEYS ACTIVE
         B     K24A04NP           EXIT
*
K24A04AR EQU   *
* PF12 AND NOT IN REDISPLAY MODE, ACTIVATE IT
         CLI   E4A04PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K24A04S6           EXIT
*
K24A04S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24A04NP           EXIT IF NOT
* REDISPLAY MODE
K24A04S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
         MVC   E4A04ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E4A04P7O,=C'PF7 :REDISPLAY BACK 1' SET PF7 TEXT
         MVC   E4A04P8O,=C'PF8 :REDISPLAY FORWARD 1' SET PF8 TEXT
         MVC   E4A04PAO,=C'PF10:REDISPLAY BACK 5' SET PF10 TEXT
         MVC   E4A04PBO,=C'PF11:REDISPLAY FORWARD 5' SET PF11 TEXT
         MVC   E4A04PCO,=C'PF12:PAGING KEYS   ' SET PF12 TEXT
         MVI   EDFRDYPG,X'FE'     SET REDISPLAY KEYS ACTIVE
         MVI   E4A04PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E4A04DYA,DFHBMASB  SET DISPLAY ON
         MVI   E4A04DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E4A04DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E4A04DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K24A04DP        CONVERT TO DECIMAL
         UNPK  E4A04DTO+1(3),K24A04DP+6(2) UNPACK NUMITEMS
         OI    E4A04DTO+3,X'F0'   SET SIGN
         MVI   E4A04DTO,C'/'      SET /
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K24A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K24A04DP        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K24A047P           EXIT IF NOT
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
K24A047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K24A048P           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
K24A048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K24A04AP           EXIT IF NOT
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
K24A04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K24A04NP           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
K24A04NP EQU   *
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF4A04L        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO P4A04 STRUCTURE, DATA AREA
         STRL  R9,KN4A04P4        SAVE IT
         USING (P4A04,P4A04END),R9
         XC    K24A04LT,K24A04LT  CLEAR OFFSET OF TOP LINE
         XC    K24A04LU,K24A04LU  CLEAR NO. OF POTENTIAL LINES
* COUNT NO. OF POTENTIAL LINES
         ASI   K24A04LU,1         ABSTIME ALWAYS APPEARS
         OC    P4A04DAT,P4A04DAT  ANY DATE ?
         BZ    K24A04C1           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C1 EQU   *
         OC    P4A04DFM,P4A04DFM  ANY DATEFORM ?
         BZ    K24A04C2           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C2 EQU   *
         CLI   P4A04DSP,X'00'     ANY DATESEP ?
         BE    K24A04C3           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C3 EQU   *
         OC    P4A04DST,P4A04DST  ANY DATESTRING ?
         BZ    K24A04C4           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C4 EQU   *
         OC    P4A04DYC,P4A04DYC  ANY DAYCOUNT ?
         BZ    K24A04C5           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C5 EQU   *
         OC    P4A04DOM,P4A04DOM  ANY DAYOFMONTH ?
         BZ    K24A04C6           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C6 EQU   *
         OC    P4A04DOW,P4A04DOW  ANY DAYOFWEEK ?
         BZ    K24A04C7           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C7 EQU   *
         OC    P4A04DM2,P4A04DM2  ANY DDMMYY ?
         BZ    K24A04C8           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C8 EQU   *
         OC    P4A04DM4,P4A04DM4  ANY DDMMYYYY ?
         BZ    K24A04C9           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04C9 EQU   *
         OC    P4A04FDT,P4A04FDT  ANY FULLDATE ?
         BZ    K24A04CA           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CA EQU   *
         OC    P4A04MD2,P4A04MD2  ANY MMDDYY ?
         BZ    K24A04CB           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CB EQU   *
         OC    P4A04MD4,P4A04MD4  ANY MMDDYYYY ?
         BZ    K24A04CC           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CC EQU   *
         OC    P4A04MOY,P4A04MOY  ANY MONTHOFYEAR ?
         BZ    K24A04CD           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CD EQU   *
         OC    P4A04TIM,P4A04TIM  ANY TIME ?
         BZ    K24A04CE           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CE EQU   *
         CLI   P4A04TSP,X'00'     ANY TIMESEP ?
         BE    K24A04CF           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CF EQU   *
         OC    P4A04YR,P4A04YR    ANY YEAR ?
         BZ    K24A04CG           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CG EQU   *
         OC    P4A04Y2D,P4A04Y2D  ANY YYDDD ?
         BZ    K24A04CH           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CH EQU   *
         OC    P4A04YD2,P4A04YD2  ANY YYDDMM ?
         BZ    K24A04CI           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CI EQU   *
         OC    P4A04YM2,P4A04YM2  ANY YYMMDD ?
         BZ    K24A04CJ           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CJ EQU   *
         OC    P4A04Y4D,P4A04Y4D  ANY YYYYDD ?
         BZ    K24A04CK           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CK EQU   *
         OC    P4A04YD4,P4A04YD4  ANY YYYYDDMM ?
         BZ    K24A04CL           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CL EQU   *
         OC    P4A04YM4,P4A04YM4  ANY YYYYMMDD ?
         BZ    K24A04CM           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CM EQU   *
         CLI   P4A04NOH,X'FF'     ANY NOHANDLE ?
         BNE   K24A04CN           EXIT IF NONE
         ASI   K24A04LU,1         COUNT NO. OF POTENTIAL LINES
K24A04CN EQU   *
         SR    R5,R5              R5=OFFSET OF 1ST LINE
         JASL  R14,KN4A04MP       SETUP MAP
*
* SET PAGING KEYS:
*    IF REDISPLAY NOT ACTIVE
*    IF REDISPLAY IS ACTIVE AND PAGING KEYS ARE DISPLAYED
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24A04PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K24A04PK           EXIT IF THEY ARE
* REDISPLAY KEYS ACTIVE, SHOW PF12 IF WE CAN PAGE
         L     R14,K24A04LU       R14=NO. OF POTENTIAL LINES
         S     R14,K24A04LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K24A04SN           EXIT IF NOT
         MVI   E4A04PCA,DFHBMASB  SHOW PF12
         B     K24A04SN           EXIT
*
* PAGING KEYS ACTIVE
* WE CAN ONLY GO FORWARD FROM HERE
K24A04PK EQU   *
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         L     R14,K24A04LU       R14=NO. OF POTENTIAL LINES
         S     R14,K24A04LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K24A04SN           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K24A04SN           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
K24A04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4A04') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4A04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K24A04DP DC    PL8'0'
K24A04LT DS    XL4                OFFSET OF TOP LINE
K24A04LU DS    XL4                NO. OF POTENTIAL LINES
*
         LTORG
*
K54A04   DS    0H
         USING *,R6
* PF5  : FORMATTIME
* WORKING STORAGE DISPLAY
         USING EDF4A04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E4A04TSO   MOVE TRANSID
         MVC   EWKSPGO,E4A04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E4A04TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF4A04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K74A04   DS    0H
         USING *,R6
* PF7  : FORMATTIME
* REDISPLAY KEYS: REDISPLAY BACK 1
* PAGING KEYS   : PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4A04S,R4
         CLI   E4A04P7A,DFHBMASD  IS PF7 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K74A04PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K74A04PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K74A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K74A04DP,=P'1'     BACK 1
         CVB   R8,K74A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K74A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K74A047P           EXIT IF NOT
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
K74A047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K74A04AP           EXIT IF NOT
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
K74A04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K74A04BP           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
K74A04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K74A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K74A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K74A04PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         LRL   R5,K24A04LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4A04MP       SETUP MAP
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K74A04KB           EXIT IF NOT
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K74A04KB           EXIT IF NOT
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
K74A04KB EQU   *
         LRL   R14,K24A04LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K74A04SN           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
K74A04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4A04') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4A04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K74A04DP DC    PL8'0'
K74A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K84A04   DS    0H
         USING *,R6
* PF8  : FORMATTIME
* REDISPLAY KEYS: REDISPLAY FORWARD 1
* PAGING KEYS   : PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4A04S,R4
         CLI   E4A04P8A,DFHBMASD  IS PAGE FORWARD HALF POSSIBLE ?
         BER   R2                 RETURN IF NOT
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K84A04PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K84A04PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K84A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K84A04DP,=P'1'     FORWARD 1
         CVB   R8,K84A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K84A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K84A048P           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
K84A048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K84A04AP           EXIT IF NOT
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
K84A04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K84A04BP           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
K84A04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K84A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K84A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K84A04PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R5,K24A04LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4A04MP       SETUP MAP
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         LRL   R14,K24A04LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K84A04KA           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
K84A04KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K84A04KB           EXIT IF NOT
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
K84A04KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K84A04SN           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
K84A04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4A04') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4A04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K84A04DP DC    PL8'0'
K84A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA4A04   DS    0H
         USING *,R6
* PF10 : FORMATTIME
* REDISPLAY KEYS: REDISPLAY BACK 5
* PAGING KEYS   : PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4A04S,R4
         CLI   E4A04PAA,DFHBMASD  IS PF10 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KA4A04PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KA4A04PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA4A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA4A04DP,=P'5'     BACK 5
         CVB   R8,KA4A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA4A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA4A047P           EXIT IF NOT
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
KA4A047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA4A048P           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
KA4A048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA4A04AP           EXIT IF NOT
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
KA4A04AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA4A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA4A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA4A04PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         LRL   R5,K24A04LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4A04MP       SETUP MAP
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVI   E4A04PAA,DFHBMASD  HIDE PF10
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA4A04K8           EXIT IF NOT
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
KA4A04K8 EQU   *
         LRL   R14,K24A04LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA4A04KA           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
KA4A04KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA4A04SN           EXIT IF NOT
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
KA4A04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4A04') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4A04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KA4A04DP DC    PL8'0'
KA4A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB4A04   DS    0H
         USING *,R6
* PF11 : FORMATTIME
* REDISPLAY KEYS: REDISPLAY FORWARD 5
* PAGING KEYS   : PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4A04S,R4
         CLI   E4A04PBA,DFHBMASD  IS PF11 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KB4A04PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KB4A04PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB4A04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB4A04DP,=P'5'     FORWARD 5
         CVB   R8,KB4A04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB4A04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB4A047P           EXIT IF NOT
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
KB4A047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB4A048P           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
KB4A048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB4A04BP           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
KB4A04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB4A04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB4A04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB4A04PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         LRL   R5,K24A04LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4A04MP       SETUP MAP
         MVI   E4A04P7A,DFHBMASD  HIDE PF7
         MVI   E4A04P8A,DFHBMASD  HIDE PF8
         MVI   E4A04PAA,DFHBMASB  SHOW PF10
         MVI   E4A04PBA,DFHBMASD  HIDE PF11
         LARL  R9,K24A04LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB4A04K8           EXIT IF NOT
         MVI   E4A04P7A,DFHBMASB  SHOW PF7
KB4A04K8 EQU   *
         LRL   R14,K24A04LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB4A04SN           EXIT IF NOT
         MVI   E4A04P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB4A04SN           EXIT IF NOT
         MVI   E4A04PBA,DFHBMASB  SHOW PF11
KB4A04SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4A04') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4A04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KB4A04DP DC    PL8'0'
KB4A04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC4A04   DS    0H
         USING *,R6
* PF12 : FORMATTIME
         USING EDF4A04S,R4
         XC    KC4A04RP,KC4A04RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC4A04RP) LENGTH(KC4A04LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC4A04RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF4A04L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF4A04') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC4A04BS           EXIT IF IT IS
         TM    E4A04DIF,DFHBMEOF  ANY DATA ?
         BO    KC4A04BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E4A04DII  SAVE INPUT REDISPLAY NUMBER
KC4A04BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC4A04RP DS    CL50               RECEIVE AREA
KC4A04LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
KN4A04MP DS    0H
* BASE FREE SUBROUTINE
* SET UP LINES TO SCREEN LIMIT
* R5 HAS EXPECTED LINE OFFSET OF TOP LINE
* LINE BUILD IS ONLY VALID IF R5 IS -VE
*
* CLEAR SCREEN
         USING EDF4A04S,R4
         STRL  R14,KN4A0414       SAVE RETURN ADDRESS
         LA    R7,E4A04C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
KN4A04CS EQU   *
         XC    0(39,R7),0(R7)     CLEAR LINE
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         JCT   R8,KN4A04CS        LOOP
*
         LA    R7,E4A04C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
         LRL   R9,KN4A04P4        R9=ADDRESS OF P4A04, DATA
         USING (P4A04,P4A04END),R9
         LA    R14,(P4A04END-P4A04)(R9) ADDRESS DATA
         USING E4A04DCT,R14
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S0           EXIT IF NOT WANTED
         GEN_MVC 0(R7),29,=C'ABSTIME     (000000000000000) ' SET ABSTME
         UNPK  13(15,R7),P4A04ABS UNPACK ABSTIME
         OI    27(R7),X'F0'       SET SIGN
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S0 EQU   *
         OC    P4A04DAT,P4A04DAT  ANY DATE ?
         JZ    KN4A04S1           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S1           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DATE        ' SET DATE
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A0           EXIT IF IT IS
         GEN_MVC 12(R7),10,=C'(........)' SET TEMPLATE
         MVC   13(8,R7),E4A04DAT  MOVE DATE
KN4A04A0 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S1 EQU   *
         OC    P4A04DFM,P4A04DFM  ANY DATEFORM ?
         JZ    KN4A04S2           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S2           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DATEFORM    ' SET DATEFORM
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A1           EXIT IF IT IS
         GEN_MVC 12(R7),8,=C'(......)' SET TEMPLATE
         MVC   13(6,R7),E4A04DFM  MOVE DATEFORM
KN4A04A1 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S2 EQU   *
         CLI   P4A04DSP,X'00'     ANY DATESEP ?
         JE    KN4A04S3           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S3           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DATESEP     ' SET DATESEP
         GEN_MVC 12(R7),3,=C'(.) ' SET TEMPLATE
         MVC   13(1,R7),E4A04DSP  MOVE DATESEP
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S3 EQU   *
         OC    P4A04DST,P4A04DST  ANY DATESTRING ?
         JZ    KN4A04S4           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S4           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DATESTRING  ' SET DATESTRING
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A3           EXIT IF IT IS
         MVI   12(R7),C'('        SET OPEN BRACKET
         MVC   13(25,R7),E4A04DST MOVE DATESTRING
         MVI   38(R7),C')'        SET CLOSE BRACKET
KN4A04A3 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S4 EQU   *
         OC    P4A04DYC,P4A04DYC  ANY DAYCOUNT ?
         JZ    KN4A04S5           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S5           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DAYCOUNT    ' SET DAYCOUNT
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A4           EXIT IF IT IS
         L     R0,E4A04DYC        R0=DAYCOUNT
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 12(R7),7,=C'(.....) ' SET TEMPLATE
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         UNPK  13(5,R7),5(3,R1)   UNPACK DAYCOUNT (5 DIGITS UNTIL 2173)
         OI    17(R7),X'F0'       SET SIGN
KN4A04A4 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S5 EQU   *
         OC    P4A04DOM,P4A04DOM  ANY DAYOFMONTH ?
         JZ    KN4A04S6           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S6           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DAYOFMONTH  ' SET DAYOFMONTH
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A5           EXIT IF IT IS
         L     R0,E4A04DOM        R0=DAYOFMONTH
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 12(R7),5,=C'(..)  ' SET TEMPLATE
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         UNPK  12(3,R7),6(2,R1)   UNPACK DAYOFMONTH
         OI    14(R7),X'F0'       SET SIGN
         MVI   12(R7),C'('        RESET OPEN BRACKET
KN4A04A5 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S6 EQU   *
         OC    P4A04DOW,P4A04DOW  ANY DAYOFWEEK ?
         JZ    KN4A04S7           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S7           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DAYOFWEEK   ' SET DAYOFWEEK
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A6           EXIT IF IT IS
         L     R0,E4A04DOW        R0=DAYOFWEEK
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 12(R7),4,=C'(.) ' SET TEMPLATE
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         UNPK  13(1,R7),7(1,R1)   UNPACK DAYOFWEEK
         OI    13(R7),X'F0'       SET SIGN
         LARL  R1,KN4A04IX        ADDRESS INDEXER
         MS    R0,0(R1)           INDEX TO DAYOFWEEK
         LARL  R1,KN4A04DY        ADDRESS DAY TABLE
         AR    R1,R0              POINT TO DAY
         MVC   16(9,R7),0(R1)     MOVE DAY
KN4A04A6 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S7 EQU   *
         OC    P4A04DM2,P4A04DM2  ANY DDMMYY ?
         JZ    KN4A04S8           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S8           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DDMMYY      ' SET DDMMYY
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A7           EXIT IF IT IS
         GEN_MVC 12(R7),10,=C'(........)' SET TEMPLATE
         MVC   13(8,R7),E4A04DM2  MOVE DDMMYY
KN4A04A7 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S8 EQU   *
         OC    P4A04DM4,P4A04DM4  ANY DDMMYYYY ?
         JZ    KN4A04S9           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04S9           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'DDMMYYYY    ' SET DDMMYYYY
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A8           EXIT IF IT IS
         GEN_MVC 12(R7),12,=C'(..........)' SET TEMPLATE
         MVC   13(10,R7),E4A04DM4 MOVE DDMMYYYY
KN4A04A8 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04S9 EQU   *
         OC    P4A04FDT,P4A04FDT  ANY FULLDATE ?
         JZ    KN4A04SA           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SA           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'FULLDATE    ' SET FULLDATE
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04A9           EXIT IF IT IS
         GEN_MVC 12(R7),12,=C'(..........)' SET TEMPLATE
         MVC   13(10,R7),E4A04FDT MOVE FULLDATE
KN4A04A9 EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4A04SA EQU   *
         OC    P4A04MD2,P4A04MD2  ANY MMDDYY ?
         JZ    KN4A04SB           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SB           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'MMDDYY      ' SET MMDDYY
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AA           EXIT IF IT IS
         GEN_MVC 12(R7),10,=C'(........)' SET TEMPLATE
         MVC   13(8,R7),E4A04MD2  MOVE MMDDYY
KN4A04AA EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SB           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SB EQU   *
         OC    P4A04MD4,P4A04MD4  ANY MMDDYYYY ?
         JZ    KN4A04SC           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SC           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'MMDDYYYY    ' SET MMDDYYYY
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AB           EXIT IF IT IS
         GEN_MVC 12(R7),12,=C'(..........)' SET TEMPLATE
         MVC   13(10,R7),E4A04MD4 MOVE MMDDYYYY
KN4A04AB EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SC           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SC EQU   *
         OC    P4A04MOY,P4A04MOY  ANY MONTHOFYEAR ?
         JZ    KN4A04SD           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SD           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'MONTHOFYEAR ' SET MONTHOFYEAR
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AC           EXIT IF IT IS
         L     R0,E4A04MOY        R0=MONTHOFYEAR
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 12(R7),5,=C'(..)  ' SET TEMPLATE
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         UNPK  12(3,R7),6(2,R1)   UNPACK MONTHOFYEAR
         OI    14(R7),X'F0'       SET SIGN
         MVI   12(R7),C'('        RESET OPEN BRACKET
         AHI   R0,-1              -1 OFFSET
         LARL  R1,KN4A04IX        ADDRESS INDEXER
         MS    R0,0(R1)           INDEX TO MONTHOFYEAR
         LARL  R1,KN4A04MN        ADDRESS MONTH TABLE
         AR    R1,R0              POINT TO MONTH
         MVC   17(9,R7),0(R1)     MOVE MONTH
KN4A04AC EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SD           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SD EQU   *
         OC    P4A04TIM,P4A04TIM  ANY TIME ?
         JZ    KN4A04SE           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SE           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'TIME        ' SET TIME
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AD           EXIT IF IT IS
         GEN_MVC 12(R7),10,=C'(........)' SET TEMPLATE
         MVC   13(8,R7),E4A04TIM  MOVE TIME
KN4A04AD EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SE           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SE EQU   *
         CLI   P4A04TSP,X'00'     ANY TIMESEP ?
         JE    KN4A04SF           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SF           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'TIMESEP     ' SET TIMESEP
         GEN_MVC 12(R7),3,=C'(.) ' SET TEMPLATE
         MVC   13(1,R7),E4A04TSP  MOVE TIMESEP
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SF           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SF EQU   *
         OC    P4A04YR,P4A04YR    ANY YEAR ?
         JZ    KN4A04SG           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SG           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'YEAR        ' SET YEAR
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AF           EXIT IF IT IS
         L     R0,E4A04YR         R0=YEAR
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         CVD   R0,0(R1)           CONVERT TO DECIMAL
         GEN_MVC 12(R7),6,=C'(....)' SET TEMPLATE
         LARL  R1,KN4A04DC        ADDRESS DECIMAL FIELD
         UNPK  12(5,R7),5(3,R1)   UNPACK YEAR
         OI    16(R7),X'F0'       SET SIGN
         MVI   12(R7),C'('        RESTORE OPEN BRACKET
KN4A04AF EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SG           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SG EQU   *
         OC    P4A04Y2D,P4A04Y2D  ANY YYDDD ?
         JZ    KN4A04SH           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SH           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'YYDDD       ' SET YYDDD
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AG           EXIT IF IT IS
         GEN_MVC 12(R7),8,=C'(......)' SET TEMPLATE
         MVC   13(6,R7),E4A04Y2D  MOVE YYDDD
KN4A04AG EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SH           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SH EQU   *
         OC    P4A04YD2,P4A04YD2  ANY YYDDMM ?
         JZ    KN4A04SI           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SI           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'YYDDMM      ' SET YYDDMM
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AH           EXIT IF IT IS
         GEN_MVC 12(R7),10,=C'(........)' SET TEMPLATE
         MVC   13(8,R7),E4A04YD2  MOVE YYDDMM
KN4A04AH EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SI           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SI EQU   *
         OC    P4A04YM2,P4A04YM2  ANY YYMMDD ?
         JZ    KN4A04SJ           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SJ           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'YYMMDD      ' SET YYMMDD
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AI           EXIT IF IT IS
         GEN_MVC 12(R7),10,=C'(........)' SET TEMPLATE
         MVC   13(8,R7),E4A04YM2  MOVE YYMMDD
KN4A04AI EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SJ           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SJ EQU   *
         OC    P4A04Y4D,P4A04Y4D  ANY YYYYDDD ?
         JZ    KN4A04SK           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SK           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'YYYYDDD     ' SET YYYYDDD
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AJ           EXIT IF IT IS
         GEN_MVC 12(R7),10,=C'(........)' SET TEMPLATE
         MVC   13(8,R7),E4A04Y4D  MOVE YYYYDDD
KN4A04AJ EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SK           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SK EQU   *
         OC    P4A04YD4,P4A04YD4  ANY YYYYDDMM ?
         JZ    KN4A04SL           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SL           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'YYYYDDMM    ' SET YYYYDDMM
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AK           EXIT IF IT IS
         GEN_MVC 12(R7),12,=C'(..........)' SET TEMPLATE
         MVC   13(10,R7),E4A04YD4 MOVE YYYYDDMM
KN4A04AK EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SL           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SL EQU   *
         OC    P4A04YM4,P4A04YM4  ANY YYYYMMDD ?
         JZ    KN4A04SM           EXIT IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4A04SM           EXIT IF NOT WANTED
         GEN_MVC 0(R7),12,=C'YYYYMMDD    ' SET YYYYMMDD
         CLI   E4A04STO,C'A'      'BEFORE' ?
         JE    KN4A04AL           EXIT IF IT IS
         GEN_MVC 12(R7),12,=C'(..........)' SET TEMPLATE
         MVC   13(10,R7),E4A04YM4 MOVE YYYYDDMM
         DROP  R14
KN4A04AL EQU   *
         AHI   R7,(E4A04C2O-E4A04C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         JNZ   KN4A04SM           EXIT IF SCREEN NOT FULL
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         BR    R14                RETURN IF SCREEN FULL
*
KN4A04SM EQU   *
         LRL   R14,KN4A0414       LOAD RETURN ADDRESS
         CLI   P4A04NOH,X'FF'     ANY NOHANDLE ?
         BNER  R14                RETURN IF NONE
         GEN_MVC 0(R7),8,=C'NOHANDLE' SET NOHANDLE
         BR    R14                RETURN
*
KN4A04DC DC    PL8'0'
KN4A04P4 DS    A                  ADDRESS OF P4A04, DATA
KN4A0414 DS    A                  SAVE RETURN ADDRESS
KN4A04IX DC    F'9'               INDEXER
KN4A04DY DS    0H
         DC    CL9'Sunday'
         DC    CL9'Monday'
         DC    CL9'Tuesday'
         DC    CL9'Wednesday'
         DC    CL9'Thursday'
         DC    CL9'Friday'
         DC    CL9'Saturday'
*
KN4A04MN DS    0H
         DC    CL9'January'
         DC    CL9'February'
         DC    CL9'March'
         DC    CL9'April'
         DC    CL9'May'
         DC    CL9'June'
         DC    CL9'July'
         DC    CL9'August'
         DC    CL9'September'
         DC    CL9'October'
         DC    CL9'November'
         DC    CL9'December'
*
         LTORG
*
         DROP  R9
*
K24C02   DS    0H
* INQUIRE FILE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : INQUIRE FILE - NO PROCESSING
* PF12 : INQUIRE FILE - ACTIVATE REDISPLAY MODE--WITH PAGING
*        INQUIRE FILE - WITHIN REDISPLAY MODE, SWITCH KEY SETS
         USING EDF4C02S,R4
         LR    R2,R7              SAVE RETURN ADDRESS
* HANDLE CLEAR IN REDISPLAY MODE
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24C02OK           EXIT IF NOT
* REDISPLAY MODE
         CLI   INPUT,DFHCLEAR     IS IT CLEAR ?
         BNE   K24C02OK           EXIT IF NOT
* CLEAR IN REDISPLAY MODE
         L     R4,EDFRDYAD        R4=REDISPLAY MAP STRUCTURE
         AHI   R4,8               POINT TO REDISPLAY MAP
K24C02OK EQU   *
         MVC   E4C02ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVC   E4C02P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVC   E4C02P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVC   E4C02PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         MVC   E4C02PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E4C02PCO,=C'PF12:REDISPLAY MODE' SET PF12 TEXT
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K24C02S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K24C02S4 EQU   *
         XC    E4C02DIL,E4C02DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K24C02S5           EXIT IF NOT
* PF12 PRESSED
         CLI   E4C02PCA,DFHBMASD  PF12 HIDDEN ?
         BE    K24C02S5           EXIT IF IT IS
* PF12 PRESSED AND SHOWN
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24C02AR           EXIT IF NOT
* PF12 WHILE IN REDISPLAY MODE, SWITCH KEY SETS
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K24C02S6           EXIT IF THEY ARE
         L     R14,K24C02LU       R14=NO. OF POTENTIAL LINES
         S     R14,K24C02LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K24C02NP           EXIT IF NOT
* REDISPLAY KEYS ACTIVE, SWITCH TO PAGING KEYS
         MVC   E4C02ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E4C02P7O,=C'PF7 :SCROLL BACK HALF' SET PF7 TEXT
         MVC   E4C02P8O,=C'PF8 :SCROLL FORWARD HALF' SET PF8 TEXT
         MVC   E4C02PAO,=C'PF10:SCROLL BACK FULL' SET PF10 TEXT
         MVC   E4C02PBO,=C'PF11:SCROLL FORWARD FULL' SET PF11 TEXT
         MVC   E4C02PCO,=C'PF12:REDISPLAY KEYS' SET PF12 TEXT
         MVHHI E4C02DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVI   EDFRDYPG,X'FF'     SET PAGING KEYS ACTIVE
         B     K24C02NP           EXIT
*
K24C02AR EQU   *
* PF12 AND NOT IN REDISPLAY MODE, ACTIVATE IT
         CLI   E4C02PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K24C02S6           EXIT
*
K24C02S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24C02NP           EXIT IF NOT
* REDISPLAY MODE
K24C02S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
         MVC   E4C02ENO,=C'END REDISPLAY MODE' SET ENTER KEY
         MVC   E4C02P7O,=C'PF7 :REDISPLAY BACK 1' SET PF7 TEXT
         MVC   E4C02P8O,=C'PF8 :REDISPLAY FORWARD 1' SET PF8 TEXT
         MVC   E4C02PAO,=C'PF10:REDISPLAY BACK 5' SET PF10 TEXT
         MVC   E4C02PBO,=C'PF11:REDISPLAY FORWARD 5' SET PF11 TEXT
         MVC   E4C02PCO,=C'PF12:PAGING KEYS   ' SET PF12 TEXT
         MVI   EDFRDYPG,X'FE'     SET REDISPLAY KEYS ACTIVE
         MVI   E4C02PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E4C02DYA,DFHBMASB  SET DISPLAY ON
         MVI   E4C02DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E4C02DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E4C02DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K24C02DP        CONVERT TO DECIMAL
         UNPK  E4C02DTO+1(3),K24C02DP+6(2) UNPACK NUMITEMS
         OI    E4C02DTO+3,X'F0'   SET SIGN
         MVI   E4C02DTO,C'/'      SET /
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K24C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K24C02DP        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K24C027P           EXIT IF NOT
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
K24C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K24C028P           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
K24C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K24C02AP           EXIT IF NOT
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
K24C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K24C02NP           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
K24C02NP EQU   *
* BUILD THE MAP BODY
         LR    R9,R4              R9=MAP START
         AHI   R9,EDF4C02L        + MAP LENGTH
         AH    R9,6(R9)           + DSA LENGTH
         AHI   R9,8               + DSA ADDRESS AND LENGTHS
* R9 NOW POINTS TO P4C02 STRUCTURE, 2CL128 FOR THE DSNAMES
         STRL  R9,KN4C02P4        SAVE IT
         USING (P4C02,P4C02END),R9
         XC    K24C02LT,K24C02LT  CLEAR OFFSET OF TOP LINE
         XC    K24C02LU,K24C02LU  CLEAR NO. OF POTENTIAL LINES
         CLI   P4C02STR,X'FF'     START ?
         BNE   K24C02NS           EXIT IF NOT
* START
         MVC   E4C02C1O(5),=C'START' SET START
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
         CLI   P4C02AT,X'00'      ANY AT() ?
         BE    K24C02H1           EXIT IF NONE
* START AT()
         MVC   E4C02C2O(13),=C'AT (........)' SET TEMPLATE
         MVC   E4C02C2O+4(8),P4C02AT SET AT FILENAME
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02H1 EQU   *
         CLI   P4C02NOH,X'FF'     ANY NOHANDLE ?
         BNE   K24C02SK           EXIT IF NONE
         MVC   E4C02C3O(8),=C'NOHANDLE' SET NOHANDLE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
         B     K24C02SK           EXIT
*
K24C02NS EQU   *
         CLI   P4C02ND,X'FF'      END ?
         BNE   K24C02NE           EXIT IF NOT
* END
         MVC   E4C02C1O(3),=C'END' SET END
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
         CLI   P4C02NOH,X'FF'     ANY NOHANDLE ?
         BNE   K24C02SK           EXIT IF NONE
         MVC   E4C02C2O(8),=C'NOHANDLE' SET NOHANDLE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
         B     K24C02SK           EXIT
*
K24C02NE EQU   *
* COUNT NO. OF POTENTIAL LINES
         ASI   K24C02LU,1         FILE ALWAYS APPEARS
         CLI   P4C02NXT,X'FF'     IS IT NEXT ?
         BNE   K24C02C1           EXIT IF NOT
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C1 EQU   *
         OC    P4C02ACC,P4C02ACC  ANY ACCESSMETHOD ?
         BZ    K24C02C2           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C2 EQU   *
         OC    P4C02DSN,P4C02DSN  ANY DSNAME ?
         BZ    K24C02C3           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C3 EQU   *
         OC    P4C02BSN,P4C02BSN  ANY BASEDSNAME ?
         BZ    K24C02C4           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C4 EQU   *
         OC    P4C02OPE,P4C02OPE  ANY OPENSTATUS ?
         BZ    K24C02C5           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C5 EQU   *
         OC    P4C02ENA,P4C02ENA  ANY ENABLESTATUS ?
         BZ    K24C02C6           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C6 EQU   *
         OC    P4C02RD,P4C02RD    ANY READSTATUS ?
         BZ    K24C02C7           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C7 EQU   *
         OC    P4C02UPD,P4C02UPD  ANY UPDATESTATUS ?
         BZ    K24C02C8           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C8 EQU   *
         OC    P4C02ADD,P4C02ADD  ANY ADDSTATUS ?
         BZ    K24C02C9           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02C9 EQU   *
         OC    P4C02BRW,P4C02BRW  ANY BROWSESTATUS ?
         BZ    K24C02CA           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CA EQU   *
         OC    P4C02DEL,P4C02DEL  ANY DELETESTATUS ?
         BZ    K24C02CB           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CB EQU   *
         OC    P4C02KL,P4C02KL    ANY KEYLENGTH ?
         BZ    K24C02CC           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CC EQU   *
         OC    P4C02KP,P4C02KP    ANY KEYPOSITION ?
         BZ    K24C02CD           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CD EQU   *
         OC    P4C02OBJ,P4C02OBJ  ANY OBJECT ?
         BZ    K24C02CE           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CE EQU   *
         OC    P4C02RCF,P4C02RCF  ANY RECORDFORMAT ?
         BZ    K24C02CF           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CF EQU   *
         OC    P4C02RCS,P4C02RCS  ANY RECORDSIZE ?
         BZ    K24C02CG           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CG EQU   *
         OC    P4C02TYP,P4C02TYP  ANY TYPE ?
         BZ    K24C02CH           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CH EQU   *
         CLI   P4C02NOH,X'FF'     ANY NOHANDLE ?
         BNE   K24C02CI           EXIT IF NONE
         ASI   K24C02LU,1         COUNT NO. OF POTENTIAL LINES
K24C02CI EQU   *
         SR    R5,R5              R5=OFFSET OF 1ST LINE
         JASL  R14,KN4C02SU       SETUP MAP
*
K24C02SK EQU   *
* SET PAGING KEYS:
*    IF REDISPLAY NOT ACTIVE
*    IF REDISPLAY IS ACTIVE AND PAGING KEYS ARE DISPLAYED
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24C02PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BE    K24C02PK           EXIT IF THEY ARE
* REDISPLAY KEYS ACTIVE, SHOW PF12 IF WE CAN PAGE
         L     R14,K24C02LU       R14=NO. OF POTENTIAL LINES
         S     R14,K24C02LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K24C02SN           EXIT IF NOT
         MVI   E4C02PCA,DFHBMASB  SHOW PF12
         B     K24C02SN           EXIT
*
* PAGING KEYS ACTIVE
* WE CAN ONLY GO FORWARD FROM HERE
K24C02PK EQU   *
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         L     R14,K24C02LU       R14=NO. OF POTENTIAL LINES
         S     R14,K24C02LT       - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K24C02SN           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K24C02SN           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
K24C02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4C02') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4C02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K24C02DP DC    PL8'0'
K24C02LT DS    XL4                OFFSET OF TOP LINE
K24C02LU DS    XL4                NO. OF POTENTIAL LINES
*
         LTORG
*
K54C02   DS    0H
         USING *,R6
* PF5  : INQUIRE FILE
* WORKING STORAGE DISPLAY
         USING EDF4C02S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E4C02TSO   MOVE TRANSID
         MVC   EWKSPGO,E4C02PGO   MOVE PROGRAM
         MVC   EWKSTNO,E4C02TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF4C02L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K74C02   DS    0H
         USING *,R6
* PF7  : INQUIRE FILE
* REDISPLAY KEYS: REDISPLAY BACK 1
* PAGING KEYS   : PAGE BACKWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4C02S,R4
         CLI   E4C02P7A,DFHBMASD  IS PF7 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K74C02PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K74C02PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K74C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K74C02DP,=P'1'     BACK 1
         CVB   R8,K74C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K74C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K74C027P           EXIT IF NOT
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
K74C027P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K74C02AP           EXIT IF NOT
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
K74C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K74C02BP           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
K74C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K74C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K74C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K74C02PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-6           OFFSET-HALF PAGE
         LRL   R5,K24C02LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4C02SU       SETUP MAP
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   K74C02KB           EXIT IF NOT
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K74C02KB           EXIT IF NOT
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
K74C02KB EQU   *
         LRL   R14,K24C02LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K74C02SN           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
K74C02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4C02') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4C02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K74C02DP DC    PL8'0'
K74C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K84C02   DS    0H
         USING *,R6
* PF8  : INQUIRE FILE
* REDISPLAY KEYS: REDISPLAY FORWARD 1
* PAGING KEYS   : PAGE FORWARD HALF
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4C02S,R4
         CLI   E4C02P8A,DFHBMASD  IS PF8 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K84C02PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   K84C02PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K84C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K84C02DP,=P'1'     FORWARD 1
         CVB   R8,K84C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K84C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K84C028P           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
K84C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K84C02AP           EXIT IF NOT
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
K84C02AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K84C02BP           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
K84C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K84C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K84C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K84C02PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),6            OFFSET+HALF PAGE
         LRL   R5,K24C02LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4C02SU       SETUP MAP
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         LRL   R14,K24C02LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   K84C02KA           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
K84C02KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   K84C02KB           EXIT IF NOT
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
K84C02KB EQU   *
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   K84C02SN           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
K84C02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4C02') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4C02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K84C02DP DC    PL8'0'
K84C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA4C02   DS    0H
         USING *,R6
* PF10 : INQUIRE FILE
* REDISPLAY KEYS: REDISPLAY BACK 5
* PAGING KEYS   : PAGE BACKWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4C02S,R4
         CLI   E4C02PAA,DFHBMASD  IS PF10 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KA4C02PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KA4C02PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA4C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA4C02DP,=P'5'     BACK 5
         CVB   R8,KA4C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA4C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA4C027P           EXIT IF NOT
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
KA4C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA4C028P           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
KA4C028P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA4C02AP           EXIT IF NOT
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
KA4C02AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA4C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA4C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA4C02PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),-12          OFFSET-FULL PAGE
         LRL   R5,K24C02LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4C02SU       SETUP MAP
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVI   E4C02PAA,DFHBMASD  HIDE PF10
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KA4C02K8           EXIT IF NOT
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
KA4C02K8 EQU   *
         LRL   R14,K24C02LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KA4C02KA           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
KA4C02KA EQU   *
         CHSI  0(R9),11           PAGE BACK FULL POSSIBLE ?
         BNH   KA4C02SN           EXIT IF NOT
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
KA4C02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4C02') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4C02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KA4C02DP DC    PL8'0'
KA4C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB4C02   DS    0H
         USING *,R6
* PF11 : INQUIRE FILE
* REDISPLAY KEYS: REDISPLAY FORWARD 5
* PAGING KEYS   : PAGE FORWARD FULL
         LR    R2,R7              SAVE RETURN ADDRESS
         USING EDF4C02S,R4
         CLI   E4C02PBA,DFHBMASD  IS PF11 HIDDEN ?
         BER   R2                 RETURN IF IT IS
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   KB4C02PK           EXIT IF NOT
* REDISPLAY MODE
         CLI   EDFRDYPG,X'FE'     REDISPLAY KEYS ACTIVE ?
         BNE   KB4C02PK           EXIT IF NOT
* REDISPLAY KEYS ACTIVE
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB4C02DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB4C02DP,=P'5'     FORWARD 5
         CVB   R8,KB4C02DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB4C02DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB4C027P           EXIT IF NOT
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
KB4C027P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB4C028P           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
KB4C028P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB4C02BP           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
KB4C02BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB4C02IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB4C02IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB4C02PK EQU   *
* PAGING KEYS ACTIVE
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         ASI   0(R9),12           OFFSET+FULL PAGE
         LRL   R5,K24C02LT        R5=NEW OFFSET OF 1ST LINE
         JASL  R14,KN4C02SU       SETUP MAP
         MVI   E4C02P7A,DFHBMASD  HIDE PF7
         MVI   E4C02P8A,DFHBMASD  HIDE PF8
         MVI   E4C02PAA,DFHBMASB  SHOW PF10
         MVI   E4C02PBA,DFHBMASD  HIDE PF11
         LARL  R9,K24C02LT        R9=ADDRESS OFFSET OF TOP LINE
         CHSI  0(R9),5            PAGE BACK HALF POSSIBLE ?
         BNH   KB4C02K8           EXIT IF NOT
         MVI   E4C02P7A,DFHBMASB  SHOW PF7
KB4C02K8 EQU   *
         LRL   R14,K24C02LU       R14=NO. OF LINES USED
         S     R14,0(R9)          - OFFSET OF TOP LINE
         CHI   R14,6              PAGE FORWARD HALF POSSIBLE ?
         BNH   KB4C02SN           EXIT IF NOT
         MVI   E4C02P8A,DFHBMASB  SHOW PF8
         CHI   R14,12             PAGE FORWARD FULL POSSIBLE ?
         BNH   KB4C02SN           EXIT IF NOT
         MVI   E4C02PBA,DFHBMASB  SHOW PF11
KB4C02SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4C02') ERASE CURSOR
* IF PAGING KEYS ACTIVE IN REDISPLAY MODE, RETURN TO REDISPLAY CONTROL
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R2                 RETURN IF NOT
         CLI   EDFRDYPG,X'FF'     PAGING KEYS ACTIVE ?
         BNER  R2                 RETURN IF NOT
         LARL  R6,KC4C02          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
KB4C02DP DC    PL8'0'
KB4C02IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC4C02   DS    0H
         USING *,R6
* PF12 : INQUIRE FILE
         USING EDF4C02S,R4
         XC    KC4C02RP,KC4C02RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC4C02RP) LENGTH(KC4C02LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC4C02RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF4C02L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF4C02') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC4C02BS           EXIT IF IT IS
         TM    E4C02DIF,DFHBMEOF  ANY DATA ?
         BO    KC4C02BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E4C02DII  SAVE INPUT REDISPLAY NUMBER
KC4C02BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC4C02RP DS    CL50               RECEIVE AREA
KC4C02LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
KN4C02SU DS    0H
* BASE FREE SUBROUTINE
* SET UP LINES TO SCREEN LIMIT
* R5 HAS EXPECTED LINE OFFSET OF TOP LINE
* LINE BUILD IS ONLY VALID IF R5 IS -VE
*
* CLEAR SCREEN
         USING EDF4C02S,R4
         LA    R7,E4C02C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
KN4C02CS EQU   *
         XC    0(78,R7),0(R7)     CLEAR LINE
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         JCT   R8,KN4C02CS        LOOP
*
         LA    R7,E4C02C1O        R7=MAP STRUCTURE
         LA    R8,12              R8=MAP DISPLAY LIMIT
         LRL   R9,KN4C02P4        R9=ADDRESS OF P4C02, DSNAMES
         USING (P4C02,P4C02END),R9
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S0           EXIT IF NOT WANTED
         GEN_MVC 0(R7),23,=C'FILE         (........) ' SET TEMPLATE
         MVC   14(8,R7),P4C02FIL  SET FILENAME
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S0 EQU   *
         CLI   P4C02NXT,X'FF'     IS IT NEXT ?
         JNE   KN4C02S1           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S1           EXIT IF NOT WANTED
         GEN_MVC 0(R7),4,=C'NEXT' SET NEXT
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S1 EQU   *
         OC    P4C02ACC,P4C02ACC  ANY ACCESSMETHOD ?
         JZ    KN4C02S2           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S2           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'ACCESSMETHOD  ' SET ACCESSMETHOD
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A1           EXIT IF IT IS
         GEN_MVC 13(R7),6,=C'(VSAM)' SET ACCESSMETHOD
KN4C02A1 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S2 EQU   *
         OC    P4C02DSN,P4C02DSN  ANY DSNAME ?
         JZ    KN4C02S3           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S3           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'DSNAME        ' SET DSNAME
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A2           EXIT IF IT IS
         MVI   13(R7),C'('        SET OPEN BRACKET
         LH    R15,P4C02DLN       R15=DSNAME LENGTH
         CHI   R15,63             MAX DISPLAY LENGTH EXCEEDED ?
         JNH   KN4C02DK           EXIT IF NOT
         LA    R15,63             SET MAXIMUM
KN4C02DK EQU   *
         BCTR  R15,0              -1 FOR EXECUTE
         LR    R1,R9              R1=POINTER TO P4C02
         AHI   R1,(P4C02END-P4C02) POINT TO DSNAME
         EXRL  R15,KN4C02XD       MOVE THE DSNAME
         LA    R1,14(R7)          POINT TO DSNAME
KN4C02L1 EQU   *
         CLI   0(R1),C' '         END OF DSNAME ?
         JE    KN4C02B1           EXIT IF IT IS
         AHI   R1,1               BUMP POINTER
         J     KN4C02L1           LOOP
*
KN4C02B1 EQU   *
         MVI   0(R1),C')'         SET CLOSE BRACKET
KN4C02A2 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S3 EQU   *
         OC    P4C02BSN,P4C02BSN  ANY BASEDSNAME ?
         JZ    KN4C02S4           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S4           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'BASEDSNAME    ' SET BASEDSNAME
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A3           EXIT IF IT IS
         MVI   13(R7),C'('        SET OPEN BRACKET
         LH    R15,P4C02BLN       R15=BASEDSNAME LENGTH
         CHI   R15,63             MAX DISPLAY LENGTH EXCEEDED ?
         JNH   KN4C02BK           EXIT IF NOT
         LA    R15,63             SET MAXIMUM
KN4C02BK EQU   *
         BCTR  R15,0              -1 FOR EXECUTE
         LR    R1,R9              R1=POINTER TO P4C02
         AHI   R1,(P4C02END-P4C02)+128 POINT TO BASEDSNAME
         EXRL  R15,KN4C02XD       MOVE THE BASEDSNAME
         LA    R1,14(R7)          POINT TO BASEDSNAME
KN4C02L2 EQU   *
         CLI   0(R1),C' '         END OF BASEDSNAME ?
         JE    KN4C02B2           EXIT IF IT IS
         AHI   R1,1               BUMP POINTER
         J     KN4C02L2           LOOP
*
KN4C02B2 EQU   *
         MVI   0(R1),C')'         SET CLOSE BRACKET
KN4C02A3 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S4 EQU   *
         OC    P4C02OPE,P4C02OPE  ANY OPENSTATUS ?
         JZ    KN4C02S5           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S5           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'OPENSTATUS    ' SET OPENSTATUS
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A4           EXIT IF IT IS
         GEN_MVC 13(R7),8,=C'(CLOSED)' SET OPENSTATUS DEFAULT
         LARL  R1,DFHVALUE(CLOSED) ADDRESS LITERAL
         CLC   P4C02OPE,0(R1)     IS IT CLOSED ?
         JE    KN4C02A4           EXIT IF IT IS
         GEN_MVC 13(R7),8,=C'(OPEN)  ' SET OPEN
KN4C02A4 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S5 EQU   *
         OC    P4C02ENA,P4C02ENA  ANY ENABLESTATUS ?
         JZ    KN4C02S6           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S6           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'ENABLESTATUS  ' SET ENABLESTATUS
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A6           EXIT IF IT IS
         GEN_MVC 13(R7),11,=C'(UNENABLED) ' SET UNENABLED
         LARL  R1,DFHVALUE(UNENABLED) ADDRESS LITERAL
         CLC   P4C02ENA,0(R1)     IS IT UNENABLED ?
         JE    KN4C02A6           EXIT IF IT IS
         GEN_MVC 13(R7),11,=C'(ENABLED)   ' SET ENABLED
         LARL  R1,DFHVALUE(ENABLED) ADDRESS LITERAL
         CLC   P4C02ENA,0(R1)     IS IT ENABLED ?
         JE    KN4C02A6           EXIT IF IT IS
         GEN_MVC 13(R7),11,=C'(DISABLED)  ' SET DISABLED
KN4C02A6 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S6 EQU   *
         OC    P4C02RD,P4C02RD    ANY READ ?
         JZ    KN4C02S7           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S7           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'READ          ' SET READ
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A7           EXIT IF IT IS
         GEN_MVC 13(R7),13,=C'(NOTREADABLE) ' SET READ DEFAULT
         LARL  R1,DFHVALUE(NOTREADABLE) ADDRESS LITERAL
         CLC   P4C02RD,0(R1)      IS IT NOTREADABLE ?
         JE    KN4C02A7           EXIT IF IT IS
         GEN_MVC 13(R7),13,=C'(READABLE)    ' SET READABLE
KN4C02A7 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S7 EQU   *
         OC    P4C02UPD,P4C02UPD  ANY UPDATE ?
         JZ    KN4C02S8           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S8           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'UPDATE        ' SET UPDATE
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A8           EXIT IF IT IS
         GEN_MVC 13(R7),14,=C'(NOTUPDATABLE)' SET UPDATE DEFAULT
         LARL  R1,DFHVALUE(NOTUPDATABLE) ADDRESS LITERAL
         CLC   P4C02UPD,0(R1)     IS IT NOTUPDATABLE ?
         JE    KN4C02A8           EXIT IF IT IS
         GEN_MVC 13(R7),14,=C'(UPDATABLE)   ' SET UPDATABLE
KN4C02A8 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S8 EQU   *
         OC    P4C02ADD,P4C02ADD  ANY ADD ?
         JZ    KN4C02S9           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02S9           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'ADD           ' SET ADD
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02A9           EXIT IF IT IS
         GEN_MVC 13(R7),12,=C'(NOTADDABLE)' SET ADD DEFAULT
         LARL  R1,DFHVALUE(NOTADDABLE) ADDRESS LITERAL
         CLC   P4C02ADD,0(R1)     IS IT NOTADDABLE ?
         JE    KN4C02A9           EXIT IF IT IS
         GEN_MVC 13(R7),12,=C'(ADDABLE)   ' SET ADDABLE
KN4C02A9 EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02S9 EQU   *
         OC    P4C02BRW,P4C02BRW  ANY BROWSE ?
         JZ    KN4C02SA           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SA           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'BROWSE        ' SET BROWSE
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AA           EXIT IF IT IS
         GEN_MVC 13(R7),14,=C'(NOTBROWSABLE)' SET BROWSE DEFAULT
         LARL  R1,DFHVALUE(NOTBROWSABLE) ADDRESS LITERAL
         CLC   P4C02BRW,0(R1)     IS IT NOTBROWSABLE ?
         JE    KN4C02AA           EXIT IF IT IS
         GEN_MVC 13(R7),14,=C'(BROWSABLE)   ' SET BROWSABLE
KN4C02AA EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
KN4C02SA EQU   *
         OC    P4C02DEL,P4C02DEL  ANY DELETE ?
         JZ    KN4C02SB           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SB           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'DELETE        ' SET DELETE
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AB           EXIT IF IT IS
         GEN_MVC 13(R7),14,=C'(NOTDELETABLE)' SET DELETE DEFAULT
         LARL  R1,DFHVALUE(NOTDELETABLE) ADDRESS LITERAL
         CLC   P4C02DEL,0(R1)     IS IT NOTDELETABLE ?
         JE    KN4C02AB           EXIT IF IT IS
         GEN_MVC 13(R7),14,=C'(DELETABLE)   ' SET DELETABLE
KN4C02AB EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BZR   R14                RETURN IF SCREEN FULL
KN4C02SB EQU   *
         OC    P4C02KL,P4C02KL    ANY KEYLENGTH ?
         JZ    KN4C02SC           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SC           EXIT IF NOT WANTED
* KEYLENGTH IS WANTED
         GEN_MVC 0(R7),13,=C'KEYLENGTH     ' SET KEYLENGTH
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AC           EXIT IF IT IS
         GEN_MVC 13(R7),13,=C'(    n/a    ) ' SET KEYLENGTH DEFAULT
         NI    P4C02KL,X'7F'      RESET INDICATOR BIT
         OC    P4C02KL,P4C02KL    ANY KEYLENGTH ?
         JZ    KN4C02AC           EXIT IF NONE
         L     R15,P4C02KL        R15=KEYLENGTH
         LARL  R1,KN4C02DC        ADDRESS DECIMAL FIELD
         CVD   R15,0(R1)          CONVERT TO DECIMAL
         UNPK  14(11,R7),2(6,R1)  UNPACK KEYLENGTH
         OI    24(R7),X'F0'       SET SIGN
KN4C02AC EQU   *
         OI    P4C02KL,X'80'      SET INDICATOR BIT
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BZR   R14                RETURN IF SCREEN FULL
KN4C02SC EQU   *
         OC    P4C02KP,P4C02KP    ANY KEYPOSITION ?
         JZ    KN4C02SD           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SD           EXIT IF NOT WANTED
* KEYPOSITION IS WANTED
         GEN_MVC 0(R7),13,=C'KEYPOSITION   ' SET KEYPOSITION
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AD           EXIT IF IT IS
         GEN_MVC 13(R7),13,=C'(    n/a    ) ' SET KEYPOSITION DEFAULT
         NI    P4C02KP,X'7F'      RESET INDICATOR BIT
         OC    P4C02KP,P4C02KP    ANY KEYPOSITION ?
         JZ    KN4C02AD           EXIT IF NONE
         L     R15,P4C02KP        R15=KEYPOSITION
         LARL  R1,KN4C02DC        ADDRESS DECIMAL FIELD
         CVD   R15,0(R1)          CONVERT TO DECIMAL
         UNPK  14(11,R7),2(6,R1)  UNPACK KEYPOSITION
         OI    24(R7),X'F0'       SET SIGN
KN4C02AD EQU   *
         OI    P4C02KP,X'80'      SET INDICATOR BIT
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BZR   R14                RETURN IF SCREEN FULL
KN4C02SD EQU   *
         OC    P4C02OBJ,P4C02OBJ  ANY OBJECT ?
         JZ    KN4C02SE           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SE           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'OBJECT        ' SET OBJECT
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AE           EXIT IF IT IS
         GEN_MVC 13(R7),6,=C'(BASE)' SET OBJECT DEFAULT
         LARL  R1,DFHVALUE(BASE)  ADDRESS LITERAL
         CLC   P4C02OBJ,0(R1)     IS IT BASE ?
         JE    KN4C02AE           EXIT IF IT IS
         GEN_MVC 13(R7),6,=C'(PATH)' SET PATH
         LARL  R1,DFHVALUE(PATH)  ADDRESS LITERAL
         CLC   P4C02OBJ,0(R1)     IS IT PATH ?
         JE    KN4C02AE           EXIT IF IT IS
         GEN_MVC 13(R7),6,=C'(n/a )' SET n/a
KN4C02AE EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BZR   R14                RETURN IF SCREEN FULL
KN4C02SE EQU   *
         OC    P4C02RCF,P4C02RCF  ANY RECORDFORMAT ?
         JZ    KN4C02SF           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SF           EXIT IF NOT WANTED
         GEN_MVC 0(R7),13,=C'RECORDFORMAT  ' SET RECORDFORMAT
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AF           EXIT IF IT IS
         GEN_MVC 13(R7),10,=C'(VARIABLE)' SET RECORDFORMAT DEFAULT
         LARL  R1,DFHVALUE(VARIABLE) ADDRESS LITERAL
         CLC   P4C02RCF,0(R1)     IS IT VARIABLE ?
         JE    KN4C02AF           EXIT IF IT IS
         GEN_MVC 13(R7),10,=C'(FIXED)   ' SET FIXED
KN4C02AF EQU   *
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BZR   R14                RETURN IF SCREEN FULL
KN4C02SF EQU   *
         OC    P4C02RCS,P4C02RCS  ANY RECORDSIZE ?
         JZ    KN4C02SG           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SG           EXIT IF NOT WANTED
* RECORDSIZE IS WANTED
         GEN_MVC 0(R7),13,=C'RECORDSIZE    ' SET RECORDSIZE
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AG           EXIT IF IT IS
         GEN_MVC 13(R7),13,=C'(    n/a    ) ' SET RECORDSIZE DEFAULT
         NI    P4C02RCS,X'7F'     RESET INDICATOR BIT
         OC    P4C02RCS,P4C02RCS  ANY RECORDSIZE ?
         JZ    KN4C02AG           EXIT IF NONE
         L     R15,P4C02RCS       R15=RECORDSIZE
         LARL  R1,KN4C02DC        ADDRESS DECIMAL FIELD
         CVD   R15,0(R1)          CONVERT TO DECIMAL
         UNPK  14(11,R7),2(6,R1)  UNPACK RECORDSIZE
         OI    24(R7),X'F0'       SET SIGN
KN4C02AG EQU   *
         OI    P4C02RCS,X'80'     SET INDICATOR BIT
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BZR   R14                RETURN IF SCREEN FULL
KN4C02SG EQU   *
         OC    P4C02TYP,P4C02TYP  ANY TYPE ?
         JZ    KN4C02SH           EXIT IF NOT
         AHI   R5,-1              DECREMENT OFFSET COUNT
         JNM   KN4C02SH           EXIT IF NOT WANTED
* TYPE IS WANTED
         NI    P4C02TYP,X'7F'     RESET INDICATOR BIT
         GEN_MVC 0(R7),13,=C'TYPE          ' SET TYPE
         CLI   E4C02STO,C'A'      'BEFORE' ?
         JE    KN4C02AH           EXIT IF IT IS
         GEN_MVC 13(R7),7,=C'(VRRDS) ' SET TYPE DEFAULT
         LARL  R1,DFHVALUE(VRRDS) ADDRESS LITERAL
         CLC   P4C02TYP,0(R1)     IS IT VRRDS ?
         JE    KN4C02AH           EXIT IF IT IS
         GEN_MVC 13(R7),7,=C'(ESDS)  ' SET ESDS
         LARL  R1,DFHVALUE(ESDS)  ADDRESS LITERAL
         CLC   P4C02TYP,0(R1)     IS IT ESDS ?
         JE    KN4C02AH           EXIT IF IT IS
         GEN_MVC 13(R7),7,=C'(KSDS)  ' SET KSDS
         LARL  R1,DFHVALUE(KSDS)  ADDRESS LITERAL
         CLC   P4C02TYP,0(R1)     IS IT KSDS ?
         JE    KN4C02AH           EXIT IF IT IS
         GEN_MVC 13(R7),7,=C'(RRDS)  ' SET RRDS
         LARL  R1,DFHVALUE(RRDS)  ADDRESS LITERAL
         CLC   P4C02TYP,0(R1)     IS IT RRDS ?
         JE    KN4C02AH           EXIT IF IT IS
         GEN_MVC 13(R7),7,=C'(n/a )  ' SET n/a
KN4C02AH EQU   *
         OI    P4C02TYP,X'80'     SET INDICATOR BIT
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BZR   R14                RETURN IF SCREEN FULL
KN4C02SH EQU   *
         CLI   P4C02NOH,X'FF'     ANY NOHANDLE ?
         BNER  R14                RETURN IF NONE
         AHI   R5,-1              DECREMENT OFFSET COUNT
         BPR   R14                RETURN IF NOT WANTED
         GEN_MVC 0(R7),8,=C'NOHANDLE' SET NOHANDLE
         AHI   R7,(E4C02C2O-E4C02C1O) BUMP MAP POINTER
         AHI   R8,-1              -1 LINE
         BR    R14                RETURN
*
KN4C02XD MVC   14(0,R7),0(R1)     MOVE DSNAME/BASEDSNAME
*
KN4C02DC DC    PL8'0'
KN4C02P4 DS    A                  ADDRESS OF P4C02, DSNAMES
*
         LTORG
*
         DROP  R9
*
K24C04   DS    0H
* SET FILE
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : SET FILE - NO PROCESSING
* PF12 : SET FILE - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF4C04S,R4
         MVC   E4C04ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E4C04P7A,DFHBMASD  HIDE PF7
         MVI   E4C04P8A,DFHBMASD  HIDE PF8
         MVI   E4C04PAA,DFHBMASD  HIDE PF10
         MVI   E4C04PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K24C04S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K24C04S4 EQU   *
         XC    E4C04DIL,E4C04DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K24C04S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E4C04PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K24C04S6           EXIT
*
K24C04S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K24C04NP           EXIT IF NOT
* REDISPLAY MODE
K24C04S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E4C04PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E4C04DYA,DFHBMASB  SET DISPLAY ON
         MVI   E4C04DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E4C04DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E4C04DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K24C04DC        CONVERT TO DECIMAL
         UNPK  E4C04DTO+1(3),K24C04DC+6(2) UNPACK NUMITEMS
         OI    E4C04DTO+3,X'F0'   SET SIGN
         MVI   E4C04DTO,C'/'      SET /
         MVC   E4C04ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K24C04DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K24C04DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K24C047P           EXIT IF NOT
         MVI   E4C04P7A,DFHBMASB  SHOW PF7
K24C047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K24C048P           EXIT IF NOT
         MVI   E4C04P8A,DFHBMASB  SHOW PF8
K24C048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K24C04AP           EXIT IF NOT
         MVI   E4C04PAA,DFHBMASB  SHOW PF10
K24C04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K24C04NP           EXIT IF NOT
         MVI   E4C04PBA,DFHBMASB  SHOW PF11
K24C04NP EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF4C04') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC4C04          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K24C04DC DC    PL8'0'
*
K54C04   DS    0H
         USING *,R6
* PF5  : SET FILE
* WORKING STORAGE DISPLAY
         USING EDF4C04S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E4C04TSO   MOVE TRANSID
         MVC   EWKSPGO,E4C04PGO   MOVE PROGRAM
         MVC   EWKSTNO,E4C04TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF4C04L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K74C04   DS    0H
         USING *,R6
* PF7  : SET FILE
* REDISPLAY BACK 1
         USING EDF4C04S,R4
         CLI   E4C04P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K74C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K74C04DP,=P'1'     BACK 1
         CVB   R8,K74C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K74C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C04P7A,DFHBMASD  HIDE PF7
         MVI   E4C04P8A,DFHBMASB  SHOW PF8
         MVI   E4C04PAA,DFHBMASD  HIDE PF10
         MVI   E4C04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K74C047P           EXIT IF NOT
         MVI   E4C04P7A,DFHBMASB  SHOW PF7
K74C047P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K74C04AP           EXIT IF NOT
         MVI   E4C04PAA,DFHBMASB  SHOW PF10
K74C04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K74C04BP           EXIT IF NOT
         MVI   E4C04PBA,DFHBMASB  SHOW PF11
K74C04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K74C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K74C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K74C04DP DC    PL8'0'
K74C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K84C04   DS    0H
         USING *,R6
* PF8  : SET FILE
* REDISPLAY FORWARD 1
         USING EDF4C04S,R4
         CLI   E4C04P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K84C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K84C04DP,=P'1'     FORWARD 1
         CVB   R8,K84C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K84C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C04P7A,DFHBMASB  SHOW PF7
         MVI   E4C04P8A,DFHBMASD  HIDE PF8
         MVI   E4C04PAA,DFHBMASD  HIDE PF10
         MVI   E4C04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K84C048P           EXIT IF NOT
         MVI   E4C04P8A,DFHBMASB  SHOW PF8
K84C048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K84C04AP           EXIT IF NOT
         MVI   E4C04PAA,DFHBMASB  SHOW PF10
K84C04AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K84C04BP           EXIT IF NOT
         MVI   E4C04PBA,DFHBMASB  SHOW PF11
K84C04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K84C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K84C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K84C04DP DC    PL8'0'
K84C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA4C04   DS    0H
         USING *,R6
* PF10 : SET FILE
* REDISPLAY BACK 5
         USING EDF4C04S,R4
         CLI   E4C04PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA4C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA4C04DP,=P'5'     BACK 5
         CVB   R8,KA4C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA4C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C04P7A,DFHBMASD  HIDE PF7
         MVI   E4C04P8A,DFHBMASD  HIDE PF8
         MVI   E4C04PAA,DFHBMASD  HIDE PF10
         MVI   E4C04PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA4C047P           EXIT IF NOT
         MVI   E4C04P7A,DFHBMASB  SHOW PF7
KA4C047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA4C048P           EXIT IF NOT
         MVI   E4C04P8A,DFHBMASB  SHOW PF8
KA4C048P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA4C04AP           EXIT IF NOT
         MVI   E4C04PAA,DFHBMASB  SHOW PF10
KA4C04AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA4C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA4C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA4C04DP DC    PL8'0'
KA4C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB4C04   DS    0H
         USING *,R6
* PF11 : SET FILE
* REDISPLAY FORWARD 5
         USING EDF4C04S,R4
         CLI   E4C04PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB4C04DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB4C04DP,=P'5'     FORWARD 5
         CVB   R8,KB4C04DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB4C04DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E4C04P7A,DFHBMASD  HIDE PF7
         MVI   E4C04P8A,DFHBMASD  HIDE PF8
         MVI   E4C04PAA,DFHBMASB  SHOW PF10
         MVI   E4C04PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB4C047P           EXIT IF NOT
         MVI   E4C04P7A,DFHBMASB  SHOW PF7
KB4C047P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB4C048P           EXIT IF NOT
         MVI   E4C04P8A,DFHBMASB  SHOW PF8
KB4C048P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB4C04BP           EXIT IF NOT
         MVI   E4C04PBA,DFHBMASB  SHOW PF11
KB4C04BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB4C04IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB4C04IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB4C04DP DC    PL8'0'
KB4C04IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC4C04   DS    0H
         USING *,R6
* PF12 : SET FILE
         USING EDF4C04S,R4
         XC    KC4C04RP,KC4C04RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC4C04RP) LENGTH(KC4C04LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC4C04RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF4C04L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF4C04') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC4C04BS           EXIT IF IT IS
         TM    E4C04DIF,DFHBMEOF  ANY DATA ?
         BO    KC4C04BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E4C04DII  SAVE INPUT REDISPLAY NUMBER
KC4C04BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC4C04RP DS    CL50               RECEIVE AREA
KC4C04LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K29626   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : STARTBROWSE CONTAINER
* PF12 : STARTBROWSE CONTAINER - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF9626S,R4
         MVC   E9626ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E9626P7A,DFHBMASD  HIDE PF7
         MVI   E9626P8A,DFHBMASD  HIDE PF8
         MVI   E9626PAA,DFHBMASD  HIDE PF10
         MVI   E9626PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K29626S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K29626S4 EQU   *
         XC    E9626DIL,E9626DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K29626S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E9626PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K29626S6           EXIT
*
K29626S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K29626SN           EXIT IF NOT
* REDISPLAY MODE
K29626S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E9626PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E9626DYA,DFHBMASB  SET DISPLAY ON
         MVI   E9626DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E9626DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E9626DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K29626DC        CONVERT TO DECIMAL
         UNPK  E9626DTO+1(3),K29626DC+6(2) UNPACK NUMITEMS
         OI    E9626DTO+3,X'F0'   SET SIGN
         MVI   E9626DTO,C'/'      SET /
         MVC   E9626ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K29626DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K29626DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K296267P           EXIT IF NOT
         MVI   E9626P7A,DFHBMASB  SHOW PF7
K296267P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K296268P           EXIT IF NOT
         MVI   E9626P8A,DFHBMASB  SHOW PF8
K296268P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K29626AP           EXIT IF NOT
         MVI   E9626PAA,DFHBMASB  SHOW PF10
K29626AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K29626SN           EXIT IF NOT
         MVI   E9626PBA,DFHBMASB  SHOW PF11
K29626SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF9626') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC9626          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K29626DC DC    PL8'0'
*
         LTORG
*
K59626   DS    0H
         USING *,R6
* PF5  : STARTBROWSE CONTAINER
* WORKING STORAGE DISPLAY
         USING EDF9626S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E9626TSO   MOVE TRANSID
         MVC   EWKSPGO,E9626PGO   MOVE PROGRAM
         MVC   EWKSTNO,E9626TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF9626L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K79626   DS    0H
         USING *,R6
* PF7  : STARTBROWSE CONTAINER
* REDISPLAY BACK 1
         USING EDF9626S,R4
         CLI   E9626P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K79626DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K79626DP,=P'1'     BACK 1
         CVB   R8,K79626DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K79626DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9626P7A,DFHBMASD  HIDE PF7
         MVI   E9626P8A,DFHBMASB  SHOW PF8
         MVI   E9626PAA,DFHBMASD  HIDE PF10
         MVI   E9626PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K796267P           EXIT IF NOT
         MVI   E9626P7A,DFHBMASB  SHOW PF7
K796267P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K79626AP           EXIT IF NOT
         MVI   E9626PAA,DFHBMASB  SHOW PF10
K79626AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K79626BP           EXIT IF NOT
         MVI   E9626PBA,DFHBMASB  SHOW PF11
K79626BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K79626IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K79626IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K79626DP DC    PL8'0'
K79626IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K89626   DS    0H
         USING *,R6
* PF8  : STARTBROWSE CONTAINER
* REDISPLAY FORWARD 1
         USING EDF9626S,R4
         CLI   E9626P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K89626DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K89626DP,=P'1'     FORWARD 1
         CVB   R8,K89626DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K89626DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9626P7A,DFHBMASB  SHOW PF7
         MVI   E9626P8A,DFHBMASD  HIDE PF8
         MVI   E9626PAA,DFHBMASD  HIDE PF10
         MVI   E9626PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K896268P           EXIT IF NOT
         MVI   E9626P8A,DFHBMASB  SHOW PF8
K896268P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K89626AP           EXIT IF NOT
         MVI   E9626PAA,DFHBMASB  SHOW PF10
K89626AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K89626BP           EXIT IF NOT
         MVI   E9626PBA,DFHBMASB  SHOW PF11
K89626BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K89626IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K89626IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K89626DP DC    PL8'0'
K89626IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA9626   DS    0H
         USING *,R6
* PF10 : STARTBROWSE CONTAINER
* REDISPLAY BACK 5
         USING EDF9626S,R4
         CLI   E9626PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA9626DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA9626DP,=P'5'     BACK 5
         CVB   R8,KA9626DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA9626DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9626P7A,DFHBMASD  HIDE PF7
         MVI   E9626P8A,DFHBMASD  HIDE PF8
         MVI   E9626PAA,DFHBMASD  HIDE PF10
         MVI   E9626PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA96267P           EXIT IF NOT
         MVI   E9626P7A,DFHBMASB  SHOW PF7
KA96267P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA96268P           EXIT IF NOT
         MVI   E9626P8A,DFHBMASB  SHOW PF8
KA96268P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA9626AP           EXIT IF NOT
         MVI   E9626PAA,DFHBMASB  SHOW PF10
KA9626AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA9626IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA9626IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA9626DP DC    PL8'0'
KA9626IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB9626   DS    0H
         USING *,R6
* PF11 : STARTBROWSE CONTAINER
* REDISPLAY FORWARD 5
         USING EDF9626S,R4
         CLI   E9626PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB9626DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB9626DP,=P'5'     FORWARD 5
         CVB   R8,KB9626DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB9626DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9626P7A,DFHBMASD  HIDE PF7
         MVI   E9626P8A,DFHBMASD  HIDE PF8
         MVI   E9626PAA,DFHBMASB  SHOW PF10
         MVI   E9626PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB96267P           EXIT IF NOT
         MVI   E9626P7A,DFHBMASB  SHOW PF7
KB96267P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB96268P           EXIT IF NOT
         MVI   E9626P8A,DFHBMASB  SHOW PF8
KB96268P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB9626BP           EXIT IF NOT
         MVI   E9626PBA,DFHBMASB  SHOW PF11
KB9626BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB9626IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB9626IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB9626DP DC    PL8'0'
KB9626IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC9626   DS    0H
         USING *,R6
* PF12 : STARTBROWSE CONTAINER
         USING EDF9626S,R4
         XC    KC9626RP,KC9626RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC9626RP) LENGTH(KC9626LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC9626RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF9626L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF9626') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC9626BS           EXIT IF IT IS
         TM    E9626DIF,DFHBMEOF  ANY DATA ?
         BO    KC9626BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E9626DII  SAVE INPUT REDISPLAY NUMBER
KC9626BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC9626RP DS    CL50               RECEIVE AREA
KC9626LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K29628   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : GETNEXT CONTAINER
* PF12 : GETNEXT CONTAINER - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF9628S,R4
         MVC   E9628ENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E9628P7A,DFHBMASD  HIDE PF7
         MVI   E9628P8A,DFHBMASD  HIDE PF8
         MVI   E9628PAA,DFHBMASD  HIDE PF10
         MVI   E9628PBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K29628S4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K29628S4 EQU   *
         XC    E9628DIL,E9628DIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K29628S5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E9628PCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K29628S6           EXIT
*
K29628S5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K29628SN           EXIT IF NOT
* REDISPLAY MODE
K29628S6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E9628PCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E9628DYA,DFHBMASB  SET DISPLAY ON
         MVI   E9628DIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E9628DIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E9628DIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K29628DC        CONVERT TO DECIMAL
         UNPK  E9628DTO+1(3),K29628DC+6(2) UNPACK NUMITEMS
         OI    E9628DTO+3,X'F0'   SET SIGN
         MVI   E9628DTO,C'/'      SET /
         MVC   E9628ENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K29628DC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K29628DC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K296287P           EXIT IF NOT
         MVI   E9628P7A,DFHBMASB  SHOW PF7
K296287P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K296288P           EXIT IF NOT
         MVI   E9628P8A,DFHBMASB  SHOW PF8
K296288P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K29628AP           EXIT IF NOT
         MVI   E9628PAA,DFHBMASB  SHOW PF10
K29628AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K29628SN           EXIT IF NOT
         MVI   E9628PBA,DFHBMASB  SHOW PF11
K29628SN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF9628') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC9628          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K29628DC DC    PL8'0'
*
         LTORG
*
K59628   DS    0H
         USING *,R6
* PF5  : GETNEXT CONTAINER
* WORKING STORAGE DISPLAY
         USING EDF9628S,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E9628TSO   MOVE TRANSID
         MVC   EWKSPGO,E9628PGO   MOVE PROGRAM
         MVC   EWKSTNO,E9628TNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF9628L        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K79628   DS    0H
         USING *,R6
* PF7  : GETNEXT CONTAINER
* REDISPLAY BACK 1
         USING EDF9628S,R4
         CLI   E9628P7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K79628DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K79628DP,=P'1'     BACK 1
         CVB   R8,K79628DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K79628DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9628P7A,DFHBMASD  HIDE PF7
         MVI   E9628P8A,DFHBMASB  SHOW PF8
         MVI   E9628PAA,DFHBMASD  HIDE PF10
         MVI   E9628PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K796287P           EXIT IF NOT
         MVI   E9628P7A,DFHBMASB  SHOW PF7
K796287P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K79628AP           EXIT IF NOT
         MVI   E9628PAA,DFHBMASB  SHOW PF10
K79628AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K79628BP           EXIT IF NOT
         MVI   E9628PBA,DFHBMASB  SHOW PF11
K79628BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K79628IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K79628IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K79628DP DC    PL8'0'
K79628IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K89628   DS    0H
         USING *,R6
* PF8  : GETNEXT CONTAINER
* REDISPLAY FORWARD 1
         USING EDF9628S,R4
         CLI   E9628P8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K89628DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K89628DP,=P'1'     FORWARD 1
         CVB   R8,K89628DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K89628DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9628P7A,DFHBMASB  SHOW PF7
         MVI   E9628P8A,DFHBMASD  HIDE PF8
         MVI   E9628PAA,DFHBMASD  HIDE PF10
         MVI   E9628PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K896288P           EXIT IF NOT
         MVI   E9628P8A,DFHBMASB  SHOW PF8
K896288P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K89628AP           EXIT IF NOT
         MVI   E9628PAA,DFHBMASB  SHOW PF10
K89628AP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K89628BP           EXIT IF NOT
         MVI   E9628PBA,DFHBMASB  SHOW PF11
K89628BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K89628IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K89628IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K89628DP DC    PL8'0'
K89628IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA9628   DS    0H
         USING *,R6
* PF10 : GETNEXT CONTAINER
* REDISPLAY BACK 5
         USING EDF9628S,R4
         CLI   E9628PAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA9628DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA9628DP,=P'5'     BACK 5
         CVB   R8,KA9628DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA9628DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9628P7A,DFHBMASD  HIDE PF7
         MVI   E9628P8A,DFHBMASD  HIDE PF8
         MVI   E9628PAA,DFHBMASD  HIDE PF10
         MVI   E9628PBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA96287P           EXIT IF NOT
         MVI   E9628P7A,DFHBMASB  SHOW PF7
KA96287P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA96288P           EXIT IF NOT
         MVI   E9628P8A,DFHBMASB  SHOW PF8
KA96288P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA9628AP           EXIT IF NOT
         MVI   E9628PAA,DFHBMASB  SHOW PF10
KA9628AP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA9628IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA9628IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA9628DP DC    PL8'0'
KA9628IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB9628   DS    0H
         USING *,R6
* PF11 : GETNEXT CONTAINER
* REDISPLAY FORWARD 5
         USING EDF9628S,R4
         CLI   E9628PBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB9628DP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB9628DP,=P'5'     FORWARD 5
         CVB   R8,KB9628DP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB9628DP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E9628P7A,DFHBMASD  HIDE PF7
         MVI   E9628P8A,DFHBMASD  HIDE PF8
         MVI   E9628PAA,DFHBMASB  SHOW PF10
         MVI   E9628PBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB96287P           EXIT IF NOT
         MVI   E9628P7A,DFHBMASB  SHOW PF7
KB96287P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB96288P           EXIT IF NOT
         MVI   E9628P8A,DFHBMASB  SHOW PF8
KB96288P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB9628BP           EXIT IF NOT
         MVI   E9628PBA,DFHBMASB  SHOW PF11
KB9628BP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB9628IP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB9628IP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB9628DP DC    PL8'0'
KB9628IP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC9628   DS    0H
         USING *,R6
* PF12 : GETNEXT CONTAINER
         USING EDF9628S,R4
         XC    KC9628RP,KC9628RP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC9628RP) LENGTH(KC9628LP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC9628RP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF9628L))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF9628') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC9628BS           EXIT IF IT IS
         TM    E9628DIF,DFHBMEOF  ANY DATA ?
         BO    KC9628BS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E9628DII  SAVE INPUT REDISPLAY NUMBER
KC9628BS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC9628RP DS    CL50               RECEIVE AREA
KC9628LP DS    H                  RECEIVE LENGTH
*
         LTORG
*
K2962A   DS    0H
         USING *,R6
* CLEAR: RESEND MAP
* PF2  : ENDBROWSE CONTAINER
* PF12 : ENDBROWSE CONTAINER - ACTIVATE REDISPLAY MODE--NO PAGING
         USING EDF962AS,R4
         MVC   E962AENO,=CL18'CONTINUE' SET ENTER KEY
         MVI   E962AP7A,DFHBMASD  HIDE PF7
         MVI   E962AP8A,DFHBMASD  HIDE PF8
         MVI   E962APAA,DFHBMASD  HIDE PF10
         MVI   E962APBA,DFHBMASD  HIDE PF11
* WRITE THE TS QUEUE FOR REDISPLAY MODE
* QNAME PREFIXES THE RETRIEVED DATA AREA
         CLI   EDFRDYWQ,X'00'     REDISPLAY WRITEQ ALLOWED ?
         BNE   K2962AS4           EXIT IF NOT
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,8              +8 FOR QNAME
         STH   R14,EDFRCLEN       SAVE IT
         EXEC  CICS WRITEQ TS QUEUE('--CEDF--') FROM(EDFQUEUE)         X
               LENGTH(EDFRCLEN) NUMITEMS(EDFRDYNI)
         LH    R14,EDFRCLEN       R14=RETRIEVED LENGTH
         AHI   R14,-8             -8 RESET
         STH   R14,EDFRCLEN       SAVE IT
         MVI   EDFRDYWQ,X'FF'     DISALLOW FURTHER WRITEQ UNTIL RESUME
K2962AS4 EQU   *
         XC    E962ADIL,E962ADIL  SET NO CURSOR POSITION
         CLI   INPUT,DFHPF12      ACTIVATE REDISPLAY MODE ?
         BNE   K2962AS5           EXIT IF NOT
* PF12-ACTIVATE REDISPLAY MODE
         CLI   E962APCA,DFHBMASD  REDISPLAY MODE POSSIBLE ?
         BER   R7                 RETURN IF NOT
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(EDFRDYNI)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVC   EDFRDYNO,=C'000'   SET CURRENT REDISPLAY NUMBER
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   EDFRDYMD,X'FF'     TURN ON REDISPLAY MODE
         B     K2962AS6           EXIT
*
K2962AS5 EQU   *
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNE   K2962ASN           EXIT IF NOT
* REDISPLAY MODE
K2962AS6 EQU   *
* ADD REDISPLAY FIELDS AND KEYS TO SAVED DISPLAY
* DEACTIVATE PF12 -- NO PAGING
         MVI   E962APCA,DFHBMASD  HIDE PF12
* SET UP DISPLAY FIELDS
         MVI   E962ADYA,DFHBMASB  SET DISPLAY ON
         MVI   E962ADIA,DFHBMUNN  SET CURRENT DISPLAY NO. UNPROT/NUM
         MVHHI E962ADIL,X'FFFF'   SET SYMBOLIC CURSOR POSITION
         MVC   E962ADIO,EDFRDYNO  SET CURRENT DISPLAY NUMBER
         LH    R5,EDFRDYNI        R5=NUMITEMS
         CVD   R5,K2962ADC        CONVERT TO DECIMAL
         UNPK  E962ADTO+1(3),K2962ADC+6(2) UNPACK NUMITEMS
         OI    E962ADTO+3,X'F0'   SET SIGN
         MVI   E962ADTO,C'/'      SET /
         MVC   E962AENO,=C'END REDISPLAY MODE' SET ENTER KEY
* ACTIVATE REDISPLAY PAGING KEYS
         PACK  K2962ADC,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         CVB   R8,K2962ADC        R8=CURRENT DISPLAY NUMBER
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K2962A7P           EXIT IF NOT
         MVI   E962AP7A,DFHBMASB  SHOW PF7
K2962A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K2962A8P           EXIT IF NOT
         MVI   E962AP8A,DFHBMASB  SHOW PF8
K2962A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K2962AAP           EXIT IF NOT
         MVI   E962APAA,DFHBMASB  SHOW PF10
K2962AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K2962ASN           EXIT IF NOT
         MVI   E962APBA,DFHBMASB  SHOW PF11
K2962ASN EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF962A') ERASE CURSOR
         CLI   EDFRDYMD,X'FF'     REDISPLAY MODE ?
         BNER  R7                 RETURN IF NOT
         LARL  R6,KC962A          ADDRESS PF12 ROUTINE
         BR    R6                 EXIT
*
K2962ADC DC    PL8'0'
*
         LTORG
*
K5962A   DS    0H
         USING *,R6
* PF5  : ENDBROWSE CONTAINER
* WORKING STORAGE DISPLAY
         USING EDF962AS,R4
         LA    R9,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R9
         LA    R0,EDFWKS          AREA TO CLEAR
         LA    R1,EDFWKSL         LENGTH TO CLEAR
         LR    R14,R0             AREA TO CLEAR
         SR    R15,R15            CLEAR SECOND LENGTH
         MVCLE R0,R14,X'00'       CLEAR MAP
* MOVE MAP HEADER FIELDS TO EDFWKS
         MVC   EWKSTSO,E962ATSO   MOVE TRANSID
         MVC   EWKSPGO,E962APGO   MOVE PROGRAM
         MVC   EWKSTNO,E962ATNO   MOVE TASK NUMBER
         DROP  R4,R9
         AHI   R4,EDF962AL        BUMP TO PREFIX
         JLU   WORKSTG            EXIT TO WORKING STORAGE DISPLAY
*
K7962A   DS    0H
         USING *,R6
* PF7  : ENDBROWSE CONTAINER
* REDISPLAY BACK 1
         USING EDF962AS,R4
         CLI   E962AP7A,DFHBMASD  IS REDISPLAY BACK 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K7962ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    K7962ADP,=P'1'     BACK 1
         CVB   R8,K7962ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K7962ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E962AP7A,DFHBMASD  HIDE PF7
         MVI   E962AP8A,DFHBMASB  SHOW PF8
         MVI   E962APAA,DFHBMASD  HIDE PF10
         MVI   E962APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   K7962A7P           EXIT IF NOT
         MVI   E962AP7A,DFHBMASB  SHOW PF7
K7962A7P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K7962AAP           EXIT IF NOT
         MVI   E962APAA,DFHBMASB  SHOW PF10
K7962AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K7962ABP           EXIT IF NOT
         MVI   E962APBA,DFHBMASB  SHOW PF11
K7962ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K7962AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K7962AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K7962ADP DC    PL8'0'
K7962AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
K8962A   DS    0H
         USING *,R6
* PF8  : ENDBROWSE CONTAINER
* REDISPLAY FORWARD 1
         USING EDF962AS,R4
         CLI   E962AP8A,DFHBMASD  IS REDISPLAY FORWARD 1 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  K8962ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    K8962ADP,=P'1'     FORWARD 1
         CVB   R8,K8962ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,K8962ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E962AP7A,DFHBMASB  SHOW PF7
         MVI   E962AP8A,DFHBMASD  HIDE PF8
         MVI   E962APAA,DFHBMASD  HIDE PF10
         MVI   E962APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    K8962A8P           EXIT IF NOT
         MVI   E962AP8A,DFHBMASB  SHOW PF8
K8962A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   K8962AAP           EXIT IF NOT
         MVI   E962APAA,DFHBMASB  SHOW PF10
K8962AAP EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    K8962ABP           EXIT IF NOT
         MVI   E962APBA,DFHBMASB  SHOW PF11
K8962ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,K8962AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(K8962AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
K8962ADP DC    PL8'0'
K8962AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KA962A   DS    0H
         USING *,R6
* PF10 : ENDBROWSE CONTAINER
* REDISPLAY BACK 5
         USING EDF962AS,R4
         CLI   E962APAA,DFHBMASD  IS REDISPLAY BACK 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KA962ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         AP    KA962ADP,=P'5'     BACK 5
         CVB   R8,KA962ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KA962ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E962AP7A,DFHBMASD  HIDE PF7
         MVI   E962AP8A,DFHBMASD  HIDE PF8
         MVI   E962APAA,DFHBMASD  HIDE PF10
         MVI   E962APBA,DFHBMASB  SHOW PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KA962A7P           EXIT IF NOT
         MVI   E962AP7A,DFHBMASB  SHOW PF7
KA962A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KA962A8P           EXIT IF NOT
         MVI   E962AP8A,DFHBMASB  SHOW PF8
KA962A8P EQU   *
         CHI   R5,5               BACK 5 POSSIBLE ?
         BNH   KA962AAP           EXIT IF NOT
         MVI   E962APAA,DFHBMASB  SHOW PF10
KA962AAP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KA962AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KA962AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KA962ADP DC    PL8'0'
KA962AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KB962A   DS    0H
         USING *,R6
* PF11 : ENDBROWSE CONTAINER
* REDISPLAY FORWARD 5
         USING EDF962AS,R4
         CLI   E962APBA,DFHBMASD  IS REDISPLAY FORWARD 5 POSSIBLE ?
         BER   R7                 RETURN IF NOT
         LH    R5,EDFRDYNI        R5=NUMITEMS
         PACK  KB962ADP,EDFRDYNO  PACK CURRENT DISPLAY NUMBER
         SP    KB962ADP,=P'5'     FORWARD 5
         CVB   R8,KB962ADP        R8=NEW DISPLAY NUMBER
         UNPK  EDFRDYNO,KB962ADP+6(2) UNPACK NEW DISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
         MVI   E962AP7A,DFHBMASD  HIDE PF7
         MVI   E962AP8A,DFHBMASD  HIDE PF8
         MVI   E962APAA,DFHBMASB  SHOW PF10
         MVI   E962APBA,DFHBMASD  HIDE PF11
         SR    R5,R8              R5=REMAINING SAVED DISPLAYS
         CHI   R5,1               BACK 1 POSSIBLE ?
         BNH   KB962A7P           EXIT IF NOT
         MVI   E962AP7A,DFHBMASB  SHOW PF7
KB962A7P EQU   *
         LTR   R8,R8              FORWARD 1 POSSIBLE ?
         BZ    KB962A8P           EXIT IF NOT
         MVI   E962AP8A,DFHBMASB  SHOW PF8
KB962A8P EQU   *
         CHI   R8,5               FORWARD 5 POSSIBLE ?
         BL    KB962ABP           EXIT IF NOT
         MVI   E962APBA,DFHBMASB  SHOW PF11
KB962ABP EQU   *
         LH    R9,EDFRDYNI        R9=NUMITEMS
* CALC ITEM NUMBER
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KB962AIP        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KB962AIP)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KB962ADP DC    PL8'0'
KB962AIP DS    AL2                NEW ITEM NUMBER
*
         LTORG
*
KC962A   DS    0H
         USING *,R6
* PF12 : ENDBROWSE CONTAINER
         USING EDF962AS,R4
         XC    KC962ARP,KC962ARP  CLEAR RECEIVE AREA
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KC962ARP) LENGTH(KC962ALP)
         MVC   EDFRDYDA,TCTTEDA   SAVE TCTTEDA
         LA    R8,KC962ARP        R8=RECEIVE AREA FOR MAPPING
         ST    R8,TCTTEDA         SAVE IT
* TEMPORARY RECEIVE MAP AREA
         EXEC  CICS GETMAIN SET(R4) LENGTH(=Y(EDF962AL))
         EXEC  CICS RECEIVE MAPSET('MAPEDF') MAP('EDF962A') NOHANDLE
         MVC   TCTTEDA,EDFRDYDA   RESTORE ORIGINAL TCTTEDA
         MVI   EDFRDYIN,X'FF'     DEFAULT TO NO REDISPLAY INPUT NUMBER
         CHSI  EIBRESP2,2         MAPFAIL 2 (SHORT READ) ?
         BE    KC962ABS           EXIT IF IT IS
         TM    E962ADIF,DFHBMEOF  ANY DATA ?
         BO    KC962ABS           EXIT IF NONE
         MVI   EDFRDYIN,X'00'     RESET REDISPLAY INPUT NUMBER
         MVC   EDFRDYNO,E962ADII  SAVE INPUT REDISPLAY NUMBER
KC962ABS EQU   *
         EXEC  CICS FREEMAIN DATAPOINTER(R4)
         L     R4,EDFRDYAD        RESTORE OUTPUT MAP POINTER
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   REDISPLY           EXIT
*
KC962ARP DS    CL50               RECEIVE AREA
KC962ALP DS    H                  RECEIVE LENGTH
*
         LTORG
*
WORKSTG  DS    0H
* WORKING STORAGE HANDLER: PAGING AND MODE CHANGE
*
* R6 : ORIGINAL KEY ROUTINE BASE
* R7 : RETURN FROM KEY ROUTINE
         STRL  R12,KPWSR12        SAVE ORIGINAL BASE 1
         BALR  R12,0              SET BASE
         USING *,R12
* R4 POINTS TO AL4(DSA),AL2(CICSDSALEN),AL2(DSALEN)
         L     R5,0(R4)           R5=REAL DSA ADDRESS
         ST    R5,KPWSREAL        SAVE REAL DSA ADDRESS
         ST    R5,KPWSRDSA        SAVE REAL DSA ADDRESS OF TOP LINE
         LR    R0,R5              R0=REAL DSA ADDRESS
         AH    R0,4(R4)           + CICS DSA LENGTH
         ST    R0,KPWSUSER        SAVE REAL USER DSA ADDRESS
         LH    R8,6(R4)           R8=DSA LENGTH
         AHI   R4,8               R4 POINTS TO COPY DSA
         ST    R4,KPWSCOPY        SAVE COPY DSA ADDRESS
         ST    R4,KPWSCDSA        SAVE COPY DSA ADDRESS OF TOP LINE
         AR    R4,R8              POINT TO BYTE AFTER END OF DSA
         ST    R4,KPWSCEND        SAVE IT
         XC    KPWSOFST,KPWSOFST  SET OFFSET TO ZERO
         LA    R4,EDFWKS          ADDRESS MAP
         USING EDFWKSS,R4
*@CICS DSA @ 00000000/X'0000'...
* USER DSA @ 00000000/X'0000'...DSA LENGTH=X'0000'
* CONVERT REAL CICS DSA ADDRESS
         LA    R1,KPHEXWS         R1=TRANSLATE TABLE ADDRESS
         LA    R15,4              R15=ADDRESS LENGTH
         LA    R8,KPWSREAL        SOURCE ADDRESS
         LA    R14,KPWSHED1+11    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT CICS DSA LENGTH
         L     R14,KPWSUSER       R14=REAL USER DSA ADDRESS
         S     R14,KPWSREAL       - REAL DSA ADDRESS=CICS DSA LENGTH
         STH   R14,KPWSRTRK       SAVE IT
         LA    R15,2              R15=LENGTH SIZE
         LA    R8,KPWSRTRK        SOURCE ADDRESS
         LA    R14,KPWSHED1+22    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT REAL USER DSA ADDRESS
         LA    R15,4              R15=ADDRESS LENGTH
         LA    R8,KPWSUSER        SOURCE ADDRESS
         LA    R14,KPWSHED2+11    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT USER DSA LENGTH
         L     R14,KPWSCEND       R14=END OF COPY DSA ADDRESS
         S     R14,KPWSCOPY       - COPY DSA ADDRESS=DSA LENGTH
         STH   R14,KPWSCTRK       SAVE IT
         SH    R14,KPWSRTRK       - CICS DSA ADDRESS=USER DSA LENGTH
         STH   R14,KPWSRTRK       SAVE IT
         LA    R15,2              R15=LENGTH SIZE
         LA    R8,KPWSRTRK        SOURCE ADDRESS
         LA    R14,KPWSHED2+22    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT DSA LENGTH
         LA    R15,2              R15=ADDRESS LENGTH
         LA    R8,KPWSCTRK        SOURCE ADDRESS
         LA    R14,KPWSHED3+13    DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVC   EWKSHEDO,KPWSHED1  MOVE SUB-HEADING TO MAP
KPWSRFSH EQU   *
         LA    R4,EDFWKS          ADDRESS MAP
         MVC   KPWSRTRK,KPWSRDSA  SET REAL ADDRESS TRACKER
         MVC   KPWSCTRK,KPWSCDSA  SET COPY ADDRESS TRACKER
         MVC   KPWSOTRK,KPWSOFST  SET OFFSET TRACKER
         LA    R9,EWKSL01O        R9=1ST DISPLAY LINE
         USING KPWSMAP,R9
         XC    KPWSLINE,KPWSLINE  CLEAR LINE COUNT
         MVI   EWKSP7A,DFHBMASD   HIDE PF7
         MVI   EWKSP8A,DFHBMASD   HIDE PF8
         MVI   EWKSPAA,DFHBMASD   HIDE PF10
         MVI   EWKSPBA,DFHBMASD   HIDE PF11
KPWSLOOP EQU   *
         MVC   0(L'EWKSL01O,R9),=CL79' ' BLANK MAP LINE
* CONVERT CURRENT REAL DSA ADDRESS
         LA    R1,KPHEXWS         R1=TRANSLATE TABLE ADDRESS
         LA    R15,4              R15=ADDRESS LENGTH
         LA    R8,KPWSRTRK        SOURCE ADDRESS
         LA    R14,KPWSADD        DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT OFFSET
         LA    R15,3              R15=OFFSET LENGTH
         LA    R8,KPWSOTRK+1      SOURCE ADDRESS
         LA    R14,KPWSOFF        DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
* CONVERT DATA TO HEX
         LA    R15,16             R15=DATA LENGTH
         L     R8,KPWSCTRK        SOURCE ADDRESS
         LA    R14,KPWSDATA       DESTINATION ADDRESS
         TROT  R14,R8,1           TRANSLATE TO PRINTABLE HEX
         MVC   KPWSHEX1,KPWSDATA  MOVE
         MVC   KPWSHEX2,KPWSDATA+8     DATA
         MVC   KPWSHEX3,KPWSDATA+16         IN
         MVC   KPWSHEX4,KPWSDATA+24            SECTIONS
* TRANSLATE CHAR TO EBCDIC
         L     R8,KPWSCTRK        R8=COPY DSA
         MVC   KPWSCHAR,0(R8)     MOVE DATA
         CLI   KPWSMODE,C'E'      EBCDIC MODE ?
         BNE   KPWSASCI           EXIT IF NOT
         TR    KPWSCHAR,KPEBCWS   TRANSLATE TO EBCDIC
         MVC   EWKSMDEO,=CL6'EBCDIC' SET MODE
         B     KPWSBUMP           EXIT
*
KPWSASCI EQU   *
         TR    KPWSCHAR,KPASCWS   TRANSLATE TO EBCDIC
         MVC   EWKSMDEO,=CL6'ASCII' SET MODE
KPWSBUMP EQU   *
         AHI   R9,L'EWKSL01O+3    BUMP MAP POINTER
         ASI   KPWSLINE,1         COUNT LINES DONE
         CHSI  KPWSLINE,16        DONE 16 ?
         BE    KPWSSETK           EXIT IF WE HAVE
         ASI   KPWSCTRK,16        BUMP COPY TRACKER
         CLC   KPWSCTRK,KPWSCEND  DONE ALL DSA ?
         BE    KPWSDONE           EXIT IF WE HAVE
         ASI   KPWSRTRK,16        BUMP REAL TRACKER
         ASI   KPWSOTRK,16        BUMP OFFSET TRACKER
         B     KPWSLOOP           LOOP
*
KPWSDONE EQU   *
* CLEAR REMAINING LINES
         L     R14,KPWSLINE       R14=CURRENT LINE COUNT
KPWSCLLP EQU   *
         MVC   0(L'EWKSL01O,R9),=CL79' ' BLANK MAP LINE
         AHI   R14,1              COUNT LINES DONE
         CHI   R14,16             DONE 16 ?
         BE    KPWSSETK           EXIT IF WE HAVE
         AHI   R9,L'EWKSL01O+3    BUMP MAP POINTER
         B     KPWSCLLP           LOOP
*
KPWSSETK EQU   *
         CHSI  KPWSOFST,X'70'     CAN WE PAGE BACK HALF ?
         BNH   KPWSNTP7           EXIT IF NOT
         MVI   EWKSP7A,DFHBMASB   SHOW PF7
KPWSNTP7 EQU   *
         CHSI  KPWSLINE,9         CAN WE PAGE FORWARD HALF ?
         BNH   KPWSNTP8           EXIT IF NOT
         MVI   EWKSP8A,DFHBMASB   SHOW PF8
KPWSNTP8 EQU   *
         CHSI  KPWSOFST,X'F0'     CAN WE PAGE BACK FULL ?
         BNH   KPWSNTPA           EXIT IF NOT
         MVI   EWKSPAA,DFHBMASB   SHOW PF10
KPWSNTPA EQU   *
         CLC   KPWSCTRK,KPWSCEND  END OF DSA ENCOUNTERED ?
         BE    KPWSSEND           EXIT IF WE HAVE (NO PGE FORWARD FULL)
         L     R14,KPWSCDSA       R14=COPY ADDRESS OF TOP LINE
         AHI   R14,X'100'         + X'100'
         C     R14,KPWSCEND       IS LAST LINE END OF DSA ?
         BE    KPWSSEND           EXIT IF IT IS (NO PAGE FORWARD FULL)
         MVI   EWKSPBA,DFHBMASB   SHOW PF11
KPWSSEND EQU   *
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDFWKS') ERASE
* CONVERSATIONAL MODE UNTIL ENTER
         EXEC  CICS RECEIVE INTO(KPWSDATA) LENGTH(KPWSLINE)
         CLI   KPWSDATA,DFHENTER  RETURN TO CURRENT DISPLAY ?
         BNE   KPWSNT7D           EXIT IF NOT
* ENTER PRESSED...REFRESH ORIGINAL DISPLAY
         L     R12,KPWSR12        RESTORE ORIGINAL BASE 1
         MVI   INPUT,DFHCLEAR     SET FOR REFRESH
         LA    R4,EDFRCVE         ADDRESS ORIGINAL MAP STRUCTURE
         CLI   EDFRDYMD,X'00'     REDISPLAY MODE ?
         JLE   OTHERPFK           EXIT IF NOT
         L     R4,EDFRDYAD        R4=REDISPLAY ADDRESS
         AHI   R4,8               POINT TO REDISPLAY MAP
         JLU   OTHERPFK           EXIT TO RE-DISPLAY CURRENT SCREEN
*
KPWSNT7D EQU   *
         CLI   KPWSDATA,DFHPF2    SWITCH EBCDIC/ASCII ?
         BNE   KPWSNTF2           EXIT IF NOT
* PF2 PRESSED...SWITCH EBCDIC/ASCII
         CLI   KPWSMODE,C'E'      EBCDIC ?
         BNE   KPWSNTEC           EXIT IF NOT
         MVI   KPWSMODE,C'A'      SET ASCII
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTEC EQU   *
         MVI   KPWSMODE,C'E'      SET EBCDIC
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTF2 EQU   *
         CLI   KPWSDATA,DFHPF7    PAGE BACK HALF ?
         BNE   KPWSNTF7           EXIT IF NOT
* PF7 PRESSED...PAGE BACK HALF
         CLI   EWKSP7A,DFHBMASD   IS PF7 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,-X'80'          BACK OFF HALF
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,-X'80'          BACK OFF HALF
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,-X'80'          BACK OFF HALF
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTF7 EQU   *
         CLI   KPWSDATA,DFHPF8    PAGE FORWARD HALF ?
         BNE   KPWSNTF8           EXIT IF NOT
* PF8 PRESSED...PAGE FORWARD HALF
         CLI   EWKSP8A,DFHBMASD   IS PF8 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,X'80'           FORWARD HALF
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,X'80'           FORWARD HALF
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,X'80'           FORWARD HALF
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTF8 EQU   *
         CLI   KPWSDATA,DFHPF10   PAGE BACK FULL ?
         BNE   KPWSNTFA           EXIT IF NOT
* PF10 PRESSED...PAGE BACK FULL
         CLI   EWKSPAA,DFHBMASD   IS PF10 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,-X'100'         BACK FULL
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,-X'100'         BACK FULL
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,-X'100'         BACK FULL
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSNTFA EQU   *
         CLI   KPWSDATA,DFHPF11   PAGE FORWARD FULL ?
         BNE   KPWSRFSH           EXIT IF NOT
* PF11 PRESSED...PAGE FORWARD FULL
         CLI   EWKSPBA,DFHBMASD   IS PF11 PERMITTED ?
         BE    KPWSRFSH           EXIT IF NOT
         L     R0,KPWSRDSA        R0=REAL ADDRESS OF TOP LINE
         AHI   R0,X'100'          FORWARD FULL
         ST    R0,KPWSRDSA        STORE BACK
         L     R0,KPWSCDSA        R0=COPY ADDRESS OF TOP LINE
         AHI   R0,X'100'          FORWARD FULL
         ST    R0,KPWSCDSA        STORE BACK
         L     R0,KPWSOFST        R0=OFFSET OF TOP LINE
         AHI   R0,X'100'          FORWARD FULL
         ST    R0,KPWSOFST        STORE BACK
         B     KPWSRFSH           EXIT TO REBUILD DISPLAY
*
KPWSR12  DS    AL4                SAVE ORIGINAL BASE 1
KPWSREAL DS    AL4                REAL DSA ADDRESS
KPWSCOPY DS    AL4                COPY DSA ADDRESS
KPWSUSER DS    AL4                REAL USER DSA ADDRESS
KPWSRDSA DS    AL4                REAL DSA ADDRESS OF TOP LINE
KPWSCDSA DS    AL4                COPY DSA ADDRESS OF TOP LINE
KPWSOFST DS    AL4                CURRENT DISPLAY OFFSET OF TOP LINE
KPWSCEND DS    AL4                BYTE AFTER END OF COPY DSA
KPWSRTRK DS    AL4                REAL TRACKER
KPWSCTRK DS    AL4                COPY TRACKER
KPWSOTRK DS    XL4                OFFSET TRACKER
KPWSLINE DS    XL4                LINE COUNTER
KPWSDATA DS    CL32               DSA SECTION
KPWSHED1 DC    C'CICS DSA @ 00000000/X''0000'''
         DC    CL3' '
KPWSHED2 DC    C'USER DSA @ 00000000/X''0000'''
         DC    CL3' '
KPWSHED3 DC    C'DSA LENGTH=X''0000'' '
KPWSMODE DC    C'E'               EBCDIC/ASCII
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
KPEBCWS  EQU   *
         DC    64X'0F'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'400F0F0F0F0F0F0F0F0F0F4B4C4D4E4F'  40-4F
         DC    X'500F0F0F0F0F0F0F0F0F5A5B5C5D5E5F'  50-5F
         DC    X'60610F0F0F0F0F0F0F0F0F6B6C6D6E6F'  60-6F
         DC    X'0F0F0F0F0F0F0F0F0F797A7B7C7D7E7F'  70-7F
         DC    X'0F8182838485868788890F8B0F0F0F0F'  80-8F
         DC    X'0F9192939495969798990F9B0F0F0F0F'  90-9F
         DC    X'0FA1A2A3A4A5A6A7A8A90F0F0FAD0F0F'  A0-AF
         DC    X'0F0F0F0F0F0F0F0F0F0F0F0F0FBD0F0F'  B0-BF
         DC    X'0FC1C2C3C4C5C6C7C8C90F0F0F0F0F0F'  C0-CF
         DC    X'0FD1D2D3D4D5D6D7D8D90F0F0F0F0F0F'  D0-DF
         DC    X'E00FE2E3E4E5E6E7E8E90F0F0F0F0F0F'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F90F0F0F0F0F0F'  F0-FF
*
* TRANSLATE TABLE FOR ASCII MODE
*
         DS    0D
KPASCWS  EQU   *
         DC    32X'0F'                              00-1F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'405A7F7B5B6C507D4D5D5C4E6B604B61'  20-2F
         DC    X'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'  30-3F
         DC    X'7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'  40-4F
         DC    X'D7D8D9E2E3E4E5E6E7E8E9ADE0BD5F6D'  50-5F
         DC    X'79818283848586878889919293949596'  60-6F
         DC    X'979899A2A3A4A5A6A7A8A98B4F9BA10F'  70-7F
         DC    128X'0F'                             80-FF
*
* TRANSLATE TABLE FOR HEX MODE
*
         DS    0D
KPHEXWS  DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
         LTORG
*
         DROP  R12
*
REDISPLY DS    0H
* REDISPLAY HANDLER
*
* REDISPLAY MODE IS ACTIVE AND THE SCREEN IS DISPLAYED
* A KEY HAS BEEN PRESSED AND THE DISPLAY NUMBER (IF ANY) IS IN EDFRDYNO
*
* R6 : ORIGINAL KEY ROUTINE BASE
* R7 : RETURN FROM KEY ROUTINE
         STRL  R12,KPRDYR12       SAVE ORIGINAL BASE 1
         BALR  R12,0              SET BASE
         USING *,R12
         CLI   EDFRDYIN,X'FF'     NO DISPLAY INPUT ?
         BNE   KPRDYINP           EXIT IF SOME
* NO INPUT
         CLI   EIBAID,DFHENTER    ENTER PRESSED ?
         BNE   KPRDYPFK           EXIT IF NOT
* ENTER PRESSED...NO INPUT, REFRESH ORIGINAL DISPLAY
         LA    R4,EDFRCVE         ADDRESS ORIGINAL MAP STRUCTURE
         MVI   EDFRDYMD,X'00'     TURN OFF REDISPLAY MODE
         MVC   EDFQUEUE,EDFRDYQU  RESTORE ORIGINAL QUEUE
         L     R12,KPRDYR12       RESTORE ORIGINAL BASE 1
         MVI   INPUT,DFHCLEAR     SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO RE-DISPLAY CURRENT SCREEN
*
KPRDYINP EQU   *
* ACT ON DISPLAY INPUT...PF KEY/ENTER IS DISCARDED
* EDFRDYNI IS THE EQUIVALENT OF DISPLAY NUMBER 0
* IF EDFRDYNI=50 THEN MAX DISPLAY NUMBER IS -049 (ITEM 1)
         PACK  KPRDYDEC,EDFRDYNO  PACK INPUT DISPLAY NUMBER
         CVB   R8,KPRDYDEC        CONVERT TO BINARY
         LH    R9,EDFRDYNI        R9=NUMITEMS
         BCTR  R9,0               R9=MAX DISPLAY NUMBER
         CR    R8,R9              TOO HIGH ?
         BNH   KPRDYNTH           EXIT IF NOT
         LR    R8,R9              SET MAXIMUM
         CVD   R8,KPRDYDEC        CONVERT TO DECIMAL
         UNPK  EDFRDYNO,KPRDYDEC+6(2) SET MAXIMUM REDISPLAY NUMBER
         OI    EDFRDYNO+2,X'F0'   SET SIGN
KPRDYNTH EQU   *
* CALC ITEM NUMBER
         AHI   R9,1               R9=NUMITEMS
         SR    R9,R8              R9=NEW ITEM NUMBER
         STH   R9,KPRDYDNO        SAVE IT
* FREE PREVIOUS READQ AREA
         L     R9,EDFRDYAD        R9=ADDRESS TO FREE
         EXEC  CICS FREEMAIN DATAPOINTER(R9)
* GET NEW ONE
         EXEC  CICS READQ TS QUEUE('--CEDF--') SET(R4) ITEM(KPRDYDNO)  X
               LENGTH(EDFRDYAD)
         ST    R4,EDFRDYAD        SAVE ADDRESS FOR FREEMAIN
         MVC   EDFQUEUE,0(R4)     SET NEW QUEUE
         AHI   R4,8               POINT TO REDISPLAY MAP
         L     R12,KPRDYR12       RESTORE ORIGINAL BASE 1
         MVI   REDPMODE,C'R'      SET SAVE/CONVERT TO EBCDIC-REDISPLAY
         MVI   INPUT,DFHPF2       SET FOR REFRESH
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KPRDYPFK EQU   *
* NO DISPLAY INPUT, ACT ON PF KEY
         L     R12,KPRDYR12       RESTORE ORIGINAL BASE 1
         CLI   EIBAID,DFHPF3      END CEDF FROM REDISPLAY MODE ?
         JLE   ENDCEDF            EXIT IF IT IS
         MVC   INPUT,EIBAID       SET PFK
         JLU   OTHERPFK           EXIT TO DISPLAY SAVED SCREEN
*
KPRDYDEC DC    PL8'0'
KPRDYR12 DS    AL4                SAVE R12
KPRDYDNO DS    XL2                NEW ITEM NUMBER
*
         LTORG
*
         DROP  R12
*
DOCOND   DS    0F
* BASE FREE SUBROUTINE
* R5 POINTS TO CONDITION BYTE
* R7 POINTS TO MAP FIELD
         LARL  R15,CONDTAB        R15=CONDITION TABLE
DOCNDLP  EQU   *
         CLC   0(1,R5),0(R15)     GOT ONE ?
         JE    GOTCOND            EXIT IF WE HAVE
         AHI   R15,13             BUMP POINTER
         CLI   0(R15),X'FF'       END OF TABLE ?
         JNE   DOCNDLP            LOOP IF NOT
         DC    H'0'               ABEND, UNKNOWN CONDITION
GOTCOND  EQU   *
         MVC   0(12,R7),1(R15)    MOVE INTERPRETED CONDITION
         BR    R14                RETURN
*
CONDTAB  DS    0H
         DC    AL1(01),CL12'ERROR'
         DC    AL1(11),CL12'TERMIDERR'
         DC    AL1(12),CL12'FILENOTFOUND'
         DC    AL1(13),CL12'NOTFND'
         DC    AL1(14),CL12'DUPREC'
         DC    AL1(15),CL12'DUPKEY'
         DC    AL1(16),CL12'INVREQ'
         DC    AL1(17),CL12'IOERR'
         DC    AL1(18),CL12'NOSPACE'
         DC    AL1(19),CL12'NOTOPEN'
         DC    AL1(20),CL12'ENDFILE'
         DC    AL1(21),CL12'ILLOGIC'
         DC    AL1(22),CL12'LENGERR'
         DC    AL1(26),CL12'ITEMERR'
         DC    AL1(27),CL12'PGMIDERR'
         DC    AL1(28),CL12'TRANSIDERR'
         DC    AL1(29),CL12'ENDDATA'
         DC    AL1(31),CL12'EXPIRED'
         DC    AL1(36),CL12'MAPFAIL'
         DC    AL1(38),CL12'INVMPSZ'
         DC    AL1(40),CL12'OVERFLOW'
         DC    AL1(44),CL12'QIDERR'
         DC    AL1(55),CL12'ENQBUSY'
         DC    AL1(56),CL12'ENVDEFERR'
         DC    AL1(61),CL12'NOTALLOC'
         DC    AL1(83),CL12'END'
         DC    AL1(84),CL12'DISABLED'
         DC    X'FF'              STOPPER
*
DOAID    DS    0F
* R5 POINTS TO AID BYTE
* R7 POINTS TO MAP FIELD
         LARL  R15,AIDTAB         R15=AID TABLE
DOAIDLP  EQU   *
         CLC   0(1,R5),0(R15)     GOT ONE ?
         JE    GOTAID             EXIT IF WE HAVE
         AHI   R15,7              BUMP POINTER
         CLI   0(R15),X'FF'       END OF TABLE ?
         JNE   DOAIDLP            LOOP IF NOT
         DC    H'0'               ABEND, UNKNOWN AID
GOTAID   EQU   *
         MVC   0(6,R7),1(R15)     MOVE INTERPRETED AID
         BR    R14                RETURN
*
AIDTAB   DS    0H
         DC    AL1(01),C'ANYKEY'
         DC    AL1(02),C'ENTER '
         DC    AL1(03),C'CLEAR '
         DC    AL1(04),C'PA1   '
         DC    AL1(05),C'PA2   '
         DC    AL1(06),C'PA3   '
         DC    AL1(07),C'PF1   '
         DC    AL1(08),C'PF2   '
         DC    AL1(09),C'PF3   '
         DC    AL1(10),C'PF4   '
         DC    AL1(11),C'PF5   '
         DC    AL1(12),C'PF6   '
         DC    AL1(13),C'PF7   '
         DC    AL1(14),C'PF8   '
         DC    AL1(15),C'PF9   '
         DC    AL1(16),C'PF10  '
         DC    AL1(17),C'PF11  '
         DC    AL1(18),C'PF12  '
         DC    AL1(19),C'PF13  '
         DC    AL1(20),C'PF14  '
         DC    AL1(21),C'PF15  '
         DC    AL1(22),C'PF16  '
         DC    AL1(23),C'PF17  '
         DC    AL1(24),C'PF18  '
         DC    AL1(25),C'PF19  '
         DC    AL1(26),C'PF20  '
         DC    AL1(27),C'PF21  '
         DC    AL1(28),C'PF22  '
         DC    AL1(29),C'PF23  '
         DC    AL1(30),C'PF24  '
         DC    X'FF'              STOPPER
*
         COPY  DFHAID
         COPY  DFHBMSCA
         TN3270 SYMBOLS
*
EDFMAPS  DSECT
         COPY  MAPEDF
*
KPWSMAP  DSECT
*@--ADDR-- OFFSET 00000000 00000000 00000000 00000000  XXXXXXXXXXXXXXXX
KPWSADD  DS    CL8
         DS    X
KPWSOFF  DS    CL6
         DS    X
KPWSHEX1 DS    CL8
         DS    X
KPWSHEX2 DS    CL8
         DS    X
KPWSHEX3 DS    CL8
         DS    X
KPWSHEX4 DS    CL8
         DS    XL2
KPWSCHAR DS    CL16
*
         P0208 DSECT
         P4C02 DSECT
         P4A04 DSECT
*
E4A04DCT DSECT
E4A04DAT DC    CL8' '             DATE
E4A04DFM DC    CL6' '             DATEFORM
E4A04DSP DC    C' '               DATESEP
E4A04DST DC    CL25' '            DATESTRING
E4A04DYC DC    AL4(0)             DAYCOUNT
E4A04DOM DC    AL4(0)             DAYOFMONTH
E4A04DOW DC    AL4(0)             DAYOFWEEK
E4A04DM2 DC    CL8' '             DDMMYY
E4A04DM4 DC    CL10' '            DDMMYYYY
E4A04FDT DC    CL10' '            FULLDATE
E4A04MD2 DC    CL8' '             MMDDYY
E4A04MD4 DC    CL10' '            MMDDYYYY
E4A04MOY DC    AL4(0)             MONTHOFYEAR
E4A04TIM DC    CL8' '             TIME
E4A04TSP DC    C' '               TIMESEP
E4A04YR  DC    AL4(0)             YEAR
E4A04Y2D DC    CL6' '             YYDDD
E4A04YD2 DC    CL8' '             YYDDMM
E4A04YM2 DC    CL8' '             YYMMDD
E4A04Y4D DC    CL8' '             YYYYDDD
E4A04YD4 DC    CL10' '            YYYYDDMM
E4A04YM4 DC    CL10' '            YYYYMMDD
*
E0208DCT DSECT
E0208ABC DC    CL4' '             ABCODE
E0208ABP DC    X'00'              ABDUMP
E0208ABG DC    CL8' '             ABPROGRAM
E0208APK DC    X'00'              APLKYBD
E0208APT DC    X'00'              APLTEXT
E0208ASP DC    XL8'00'            ASRAPSW
E0208ASR DC    XL64'00'           ASRAREGS
E0208BTR DC    X'00'              BTRANS
E0208CHN DC    CL16' '            CHANNEL
E0208CMD DC    C' '               CMDSEC
E0208COL DC    X'00'              COLOR
E0208CWA DC    AL2(0)             CWALENG
E0208DSH DC    AL2(0)             DEFSCRNHT
E0208DSW DC    AL2(0)             DEFSCRNWD
E0208DSC DC    X'00'              DSSCS
E0208D32 DC    X'00'              DS3270
E0208EWA DC    X'00'              EWASUPP
E0208EXT DC    X'00'              EXTDS
E0208FAC DC    CL4' '             FACILITY
E0208FCI DC    X'00'              FCI
E0208GMM DC    X'00'              GMMI
E0208HIL DC    X'00'              HILIGHT
E0208INV DC    CL8' '             INVOKINGPROG
E0208KAT DC    X'00'              KATAKANA
E0208LIU DC    CL3' '             LANGINUSE
E0208MCL DC    AL2(0)             MAPCOLUMN
E0208MHT DC    AL2(0)             MAPHEIGHT
E0208MLN DC    AL2(0)             MAPLINE
E0208MWH DC    AL2(0)             MAPWIDTH
E0208MSR DC    X'00'              MSRCONTROL
E0208NIU DC    C' '               NATLANGINUSE
E0208NXT DC    CL4' '             NEXTTRANSID
E0208OUT DC    X'00'              OUTLINE
E0208PRT DC    X'00'              PARTNS
E0208PGM DC    CL8' '             PROGRAM
E0208PS  DC    X'00'              PS
E0208RSC DC    C' '               RESSEC
E0208RES DC    X'00'              RESTART
E0208RET DC    CL8' '             RETURNPROG
E0208SCH DC    AL2(0)             SCRNHT
E0208SCW DC    AL2(0)             SCRNWD
E0208SOS DC    X'00'              SOSI
E0208STC DC    CL2' '             STARTCODE
E0208TKP DC    AL2(0)             TASKPRIORITY
E0208TUL DC    AL2(0)             TCTUALEN
E0208TMC DC    X'0000'            TERMCODE
E0208TMP DC    AL2(0)             TERMPRIORITY
E0208TXK DC    X'00'              TEXTKYBD
E0208TXP DC    X'00'              TEXTPRINT
E0208TNP DC    AL2(0)             TRANPRIORITY
E0208TWA DC    AL2(0)             TWASIZE
E0208UNA DC    X'00'              UNATTEND
E0208USP DC    AL2(0)             USERPRIORITY
E0208VAL DC    X'00'              VALIDATION
*
* REGISTER USAGE:
*    R3  : INITIAL PROGRAM BASE 2
*    R4  : BASE FOR MAP STRUCTURES
*    R6  : BASE FOR KEY PROCESSING ROUTINES
*    R12 : INITIAL PROGRAM BASE 1
*          BASE FOR WORKING STORAGE SUBROUTINE
         END
