***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
         DFHEISTG
MYCOMM   DS    CL5
*
TESTCHN2 DFHEIENT CODEREG=(R12,R3,R4,R5)
*
* TEST LINK/XCTL/RETURN WITH CHANNEL
* RECEIVES COMMAREA AND VARIOUS CHANNELS
*
* NUMBERS IN BRACKETS ON WQTS ARE CEBR LINE NUMBERS
*
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TSQ(50/81)
*                                 --- TEST1 (50)
*                                 --- TEST2 (81)
*                                 --- TEST3 (98)
*                                 --- TEST4 (103)
         L     R6,DFHEICAP        R6=COMMAREA ADDRESS
         CLC   0(5,R6),=C'TEST1'  TEST 1 ?
         BE    TEST1              EXIT IF IT IS
         CLC   0(5,R6),=C'TEST2'  TEST 2 ?
         BE    TEST2              EXIT IF IT IS
         CLC   0(5,R6),=C'TEST3'  TEST 3 ?
         BE    TEST3              EXIT IF IT IS
         CLC   0(5,R6),=C'TEST4'  TEST 4 ?
         BE    TEST4              EXIT IF IT IS
         CLC   0(5,R6),=C'TEST5'  TEST 5 ?
         BE    TEST5              EXIT IF IT IS
         DC    H'3'               CODING ERROR
TEST1    EQU   *
* CHAN01 PASSED
* CREATE CONTAINER CONT01 USING PASSED CHANNEL
         EXEC  CICS PUT CONTAINER('CHAN01CONT01')                      X
               FROM(CN01DATA) FLENGTH(50)
* CREATE CHAN04 AND SEE IF IT'S DELETED AFTER RETURN
         EXEC  CICS PUT CONTAINER('CHAN04CONT04') CHANNEL('CHAN04')    X
               FROM(CN04DATA) FLENGTH(15)
* GET CONT04 WITH SET
         EXEC  CICS GET CONTAINER('CHAN04CONT04') CHANNEL('CHAN04')    X
               SET(R7) FLENGTH(MYFLEN)
* GET CONTAINER CONT01 WITH SET USING PASSED CHANNEL
         EXEC  CICS GET CONTAINER('CHAN01CONT01')                      X
               SET(R7) FLENGTH(MYFLEN)
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (56)
* MOVE CONT01 TO CHAN02
         EXEC  CICS MOVE CONTAINER('CHAN01CONT01')                     X
               AS('CHAN02CONT02') TOCHANNEL('CHAN02')
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (65)
         B     RETURN             EXIT
*
TEST2    EQU   *
* XCTL FROM TESTCHN1
* CHAN02 PASSED
* CREATE CONTAINER CONT05 USING PASSED CHANNEL
         EXEC  CICS PUT CONTAINER('CHAN02CONT05')                      X
               FROM(CN05DATA) FLENGTH(30)
* CREATE CHAN04
         EXEC  CICS PUT CONTAINER('CHAN04CONT04') CHANNEL('CHAN04')    X
               FROM(CN04DATA) FLENGTH(15)
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (88)
         MVC   MYCOMM,=C'TEST3'   SET COMMAREA
         EXEC  CICS RETURN TRANSID('CHN2') COMMAREA(MYCOMM)            X
               CHANNEL(CHAN4) IMMEDIATE
*
TEST3    EQU   *
* CHAN04 PASSED, SHOULD BE THE ONLY ONE
         EXEC  CICS DELETE CONTAINER('CHAN04CONT04') CHANNEL('CHAN04')
* SHOULD BE NO CONTAINERS LEFT
         BAL   R9,WQTS            WRITE CHANNEL STRUCTURE TO TS Q (101)
         EXEC  CICS SEND FROM(RETNMSG) LENGTH(RETNMSGL)
         MVC   MYCOMM,=C'TEST4'   SET COMMAREA
         EXEC  CICS RETURN TRANSID('CHN2') COMMAREA(MYCOMM)            X
               CHANNEL(CHAN5) IMMEDIATE
*
TEST4    EQU   *
* EMPTY CHAN05 PASSED, SHOULD BE THE ONLY ONE
         EXEC  CICS SEND FROM(CHNMSG5) LENGTH(CHNMSG5L)
         MVC   MYCOMM,=C'TEST5'   SET COMMAREA
         EXEC  CICS RETURN TRANSID('CHN2') COMMAREA(MYCOMM)            X
               CHANNEL(CHAN5) IMMEDIATE
*
TEST5    EQU   *
* BUILD TWO CHANNELS AND CONTAINERS FOR BROWSING
* DO TWO STARTBROWSES AND GET 1 CONTAINER FROM EACH
         EXEC  CICS PUT CONTAINER('CHAN06CONT01') CHANNEL('CHAN06')    X
               FROM(CN06DAT1) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN06CONT02') CHANNEL('CHAN06')    X
               FROM(CN06DAT2) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN06CONT03') CHANNEL('CHAN06')    X
               FROM(CN06DAT3) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN06CONT04') CHANNEL('CHAN06')    X
               FROM(CN06DAT4) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN06CONT05') CHANNEL('CHAN06')    X
               FROM(CN06DAT5) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN06CONT06') CHANNEL('CHAN06')    X
               FROM(CN06DAT6) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN07CONT01') CHANNEL('CHAN07')    X
               FROM(CN07DAT1) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN07CONT02') CHANNEL('CHAN07')    X
               FROM(CN07DAT2) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN07CONT03') CHANNEL('CHAN07')    X
               FROM(CN07DAT3) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN07CONT04') CHANNEL('CHAN07')    X
               FROM(CN07DAT4) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN07CONT05') CHANNEL('CHAN07')    X
               FROM(CN07DAT5) FLENGTH(20)
         EXEC  CICS PUT CONTAINER('CHAN07CONT06') CHANNEL('CHAN07')    X
               FROM(CN07DAT6) FLENGTH(20)
* BROWSES
         EXEC  CICS HANDLE CONDITION END(BREND1)
         EXEC  CICS STARTBROWSE CONTAINER CHANNEL('CHAN06')            X
               BROWSETOKEN(TOK1)
         EXEC  CICS STARTBROWSE CONTAINER CHANNEL('CHAN07')            X
               BROWSETOKEN(TOK2)
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         CLC   MYCONT1,=CL16'CHAN06CONT01' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT2) BROWSETOKEN(TOK2)
         CLC   MYCONT2,=CL16'CHAN07CONT01' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         CLC   MYCONT1,=CL16'CHAN06CONT02' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT2) BROWSETOKEN(TOK2)
         CLC   MYCONT2,=CL16'CHAN07CONT02' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         CLC   MYCONT1,=CL16'CHAN06CONT03' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT2) BROWSETOKEN(TOK2)
         CLC   MYCONT2,=CL16'CHAN07CONT03' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         CLC   MYCONT1,=CL16'CHAN06CONT04' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT2) BROWSETOKEN(TOK2)
         CLC   MYCONT2,=CL16'CHAN07CONT04' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         CLC   MYCONT1,=CL16'CHAN06CONT05' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT2) BROWSETOKEN(TOK2)
         CLC   MYCONT2,=CL16'CHAN07CONT05' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         CLC   MYCONT1,=CL16'CHAN06CONT06' OK ?
         BNE   ABEND              ERROR IF NOT
         EXEC  CICS GETNEXT CONTAINER(MYCONT2) BROWSETOKEN(TOK2)
         CLC   MYCONT2,=CL16'CHAN07CONT06' OK ?
         BNE   ABEND              ERROR IF NOT
* SHOULD RAISE 'END'
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         DC    H'4'               END CONDITION NOT RAISED
*
BREND1   EQU   *
         EXEC  CICS ENDBROWSE CONTAINER BROWSETOKEN(TOK1)
         EXEC  CICS HANDLE CONDITION END(BREND2)
* SHOULD RAISE 'END'
         EXEC  CICS GETNEXT CONTAINER(MYCONT2) BROWSETOKEN(TOK2)
         DC    H'5'               END CONDITION NOT RAISED
*
BREND2   EQU   *
         EXEC  CICS ENDBROWSE CONTAINER BROWSETOKEN(TOK2)
         OC    TCTTECHW,TCTTECHW  ALL CHWA'S CLEARED ?
         BZ    CHWAOK             EXIT IF THEY ARE
         DC    H'6'               CHWA CHAIN SHOULD NOT EXIST
*
CHWAOK   EQU   *
* NOW BROWSE AND DELETE CONTAINER JUST READ TO FORCE EARLY END
         EXEC  CICS HANDLE CONDITION END(BREND3)
         EXEC  CICS STARTBROWSE CONTAINER CHANNEL('CHAN06')            X
               BROWSETOKEN(TOK1)
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         EXEC  CICS DELETE CONTAINER('CHAN06CONT02')                   X
               CHANNEL('CHAN06')
         EXEC  CICS GETNEXT CONTAINER(MYCONT1) BROWSETOKEN(TOK1)
         DC    H'7'               END CONDITION NOT RAISED
*
BREND3   EQU   *
         EXEC  CICS ENDBROWSE CONTAINER BROWSETOKEN(TOK1)
         EXEC  CICS SEND FROM(ENDMSG) LENGTH(ENDMSGL)
RETURN   EQU   *
         EXEC  CICS RETURN
*
ABEND    DC    H'3'               ERROR DURING BROWSE
*
* SUBROUTINE
*
WQTS     EQU   *
* WRITE PASSED CHANNEL AND CHANNEL/CONTAINER CHAIN TO TS
         EXEC  CICS ASSIGN CHANNEL(PASSCHAN)
         CLI   PASSCHAN,C' '      ANY PASSED CHANNEL ?
         BNE   WQTSNOPS           EXIT IF THERE IS
         MVC   PASSCHAN,NONE      SET NO CHANNEL NAME
WQTSNOPS EQU   *
         EXEC  CICS WRITEQ TS QUEUE('CHN1') FROM(PASSMSG)              X
               LENGTH(PASSMSGL)
* SCAN CHANNEL CHAIN
         MVC   CHNAME,NONE        SET DEFAULT CHANNEL NAME
         ICM   R7,15,TCTTECAQ     ANY CHANNEL CHAIN ?
         BZR   R9                 RETURN IF NONE
         USING DFHCHAN,R7
WQTSCHLP EQU   *
         LH    R8,CHANLINK        R8=LINK LEVEL
         CVD   R8,DEC             CONVERT TO DECIMAL
         UNPK  CHLINK-1(5),DEC+5(3) UNPACK LINK-LEVEL
         OI    CHLINK+3,X'F0'     SET SIGN
         MVI   CHLINK-1,C'@'      RESTORE @
         MVC   CHNAME,CHANNAME    SET CHANNEL NAME
         EXEC  CICS WRITEQ TS QUEUE('CHN1') FROM(CHAN) LENGTH(CHANL)
* SCAN CONTAINER CHAIN
         ICM   R6,15,CHANCONT     ANY CONTAINER CHAIN ?
         BZ    WQTSNXCH           EXIT IF NONE
         USING DFHCONT,R6
WQTSCNLP EQU   *
         MVC   CNNAME,CONTNAME    SET CONTAINER NAME
         L     R8,CONTLENG        R8=LENGTH
         CVD   R8,DEC             CONVERT TO DECIMAL
         UNPK  CNLENG-1(11),DEC+2(6) UNPACK LENGTH
         OI    CNLENG+9,X'F0'     SET SIGN
         MVI   CNLENG-1,C' '      RESTORE SPACE
         MVC   CNSET,=C'00'       DEFAULT SET INDICATOR
         OC    CONTSET,CONTSET    ANY SET ADDRESS ?
         BZ    WQTSNOST           EXIT IF NONE
         MVC   CNSET,=C'FF'       SET SET INDICATOR
WQTSNOST EQU   *
         XC    CNDATA,CNDATA      CLEAR DATA
         CHI   R8,50              TOO LONG ?
         BNH   WQTSLNOK           EXIT IF NOT
         LA    R8,50              SET TO MAXIMUM
WQTSLNOK EQU   *
         BCTR  R8,0               -1 FOR EXECUTE
         EX    R8,WQTSMVC         SET CONTAINER DATA
         EXEC  CICS WRITEQ TS QUEUE('CHN1') FROM(CONT) LENGTH(CONTL)
         ICM   R6,15,CONTADDR     ANY MORE CONTAINERS ?
         BNZ   WQTSCNLP           LOOP IF THERE ARE
WQTSNXCH EQU   *
         ICM   R7,15,CHANADDR     ANY MORE CHANNELS ?
         BNZ   WQTSCHLP           LOOP IF THERE ARE
         BR    R9                 RETURN
*
WQTSMVC  MVC   CNDATA(0),CONTDATA SET CONTAINER DATA
*
CN01DATA DC    50C'A'
CN04DATA DC    15C'E'
CN05DATA DC    30C'F'
CN06DAT1 DC    20C'1'
CN06DAT2 DC    20C'2'
CN06DAT3 DC    20C'3'
CN06DAT4 DC    20C'4'
CN06DAT5 DC    20C'5'
CN06DAT6 DC    20C'6'
CN07DAT1 DC    20C'U'
CN07DAT2 DC    20C'V'
CN07DAT3 DC    20C'W'
CN07DAT4 DC    20C'X'
CN07DAT5 DC    20C'Y'
CN07DAT6 DC    20C'Z'
NONE     DC    C'******NONE******'
DEC      DC    PL8'0'
MYFLEN   DS    XL4
CHAN4    DC    CL16'CHAN04'
CHAN5    DC    CL16'CHAN05'
TOK1     DS    XL4
TOK2     DS    XL4
MYCONT1  DS    CL16
MYCONT2  DS    CL16
*
PASSMSG  DC    C'PASSED CHANNEL '
PASSCHAN DS    CL16
PASSMSGL DC    AL2(*-PASSMSG)
*
CHAN     DC    C'CHANNEL@'
CHLINK   DS    CL4
         DC    C' '
CHNAME   DS    CL16
CHANL    DC    AL2(*-CHAN)
*
CONT     DC    C'   '
         DC    C'CONTAINER '
CNNAME   DS    CL16
         DC    C' '
CNLENG   DS    CL10
         DC    C' '
CNSET    DS    CL2
         DC    C' '
CNDATA   DS    CL50
CONTL    DC    AL2(*-CONT)
*
RETNMSG  TN3270 WCC_KD,(SBA,7,2)
         DC    C'RETURN TESTS'
RETNMSGL DC    AL2(*-RETNMSG)
*
CHNMSG5  TN3270 WCC_KD,(SBA,8,2)
         DC    CL16'BROWSE TESTS'
CHNMSG5L DC    AL2(*-CHNMSG5)
*
ENDMSG   TN3270 WCC_KD,(SBA,24,1)
         DC    C'TESTCHN2 COMPLETED, PRESS CLEAR'
ENDMSGL  DC    AL2(*-ENDMSG)
*
         DFHCHAN
*
         TN3270 SYMBOLS
         END
