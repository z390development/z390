name: Build z390
on:
  - push
  - pull_request

env:
  JAVA_DISTRIBUTION: temurin
  JAVA_VERSION: 21
jobs:

  build-distribution:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Get version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        id: version
        shell: bash
      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      - name: Build z390 distribution
        run: bash/blddist
      - name: Save the distribution
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist/z390_${{ steps.version.outputs.VERSION }}.zip

  run-tests:
    runs-on: ubuntu-latest
    needs: build-distribution
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      - name: get dist artefact
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Install dist and run tests
        run: |
          mkdir -p dist
          unzip z390_${VERSION}.zip -d dist
          ls -l dist/z390_${VERSION}
          cp dist/z390_${VERSION}/z390.jar .
          Z390_PROJECT_ROOT="../dist/z390_${VERSION}" z390test/gradlew -p z390test test 
        env:
          VERSION: ${{ needs.build-distribution.outputs.VERSION }}
  
  run-windows-demo:
    runs-on: windows-latest
    needs:
      - build-distribution 
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      - name: get dist artefact
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Install dist and run demos
        shell: cmd
        run: |
          tar -xf z390_%VERSION%.zip
          dir z390_%VERSION%
          z390_%VERSION%\bat\RUNASMDEMOS.BAT
          z390_%VERSION%\bat\RUNCBLDEMOS.BAT
        env:
          VERSION: ${{ needs.build-distribution.outputs.VERSION }}

  create-release:
    # Run on merged PRs to main that modified or added version.txt
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: 
      - build-distribution
      - run-tests
      - run-windows-demo
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for version changes
        id: check_version
        run: |
          # For merge commits, compare with both parents
          if git rev-parse -q --verify HEAD^2 >/dev/null; then
            # Merge commit - check both parents
            MAIN_PARENT=$(git rev-parse HEAD^1)
            PR_PARENT=$(git rev-parse HEAD^2)
            if git diff --name-only $MAIN_PARENT..$PR_PARENT | grep -q "version.txt"; then
              echo "version_changed=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # For squash/rebase, check previous commit
          PREVIOUS_COMMIT=$(git rev-parse HEAD^1)
          if git diff --name-only HEAD $PREVIOUS_COMMIT | grep -q "version.txt"; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Create git tag
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          VERSION=$(cat version.txt)
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v${VERSION}" -m "Release version ${VERSION}"
          git push origin "v${VERSION}"
      - name: get dist artefact
        if: steps.check_version.outputs.version_changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: release
        if: steps.check_version.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-distribution.outputs.VERSION }}
          files: |
            z390_${{ needs.build-distribution.outputs.VERSION }}.zip
          generate_release_notes: true
