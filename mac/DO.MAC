         MACRO                                                             
.********************************************************************
.* z390 - Mainframe assembler emulator and run-time engine
.* Copyright (C) 2021 z390 Assembler LLC
.*
.* This file is part of z390.
.*
.* z390 is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License, or
.* (at your option) any later version.
.* z390 is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.* GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License 
.* along with this program; if not, see https://www.gnu.org/licenses.
.********************************************************************
.* 03/27/74 INITIAL CODING BY DON HIGGINS
.* 05/14/06 DSH Z390 RPI 316 UPDATED FOR COMPAT.
.* 07/21/06 DSH Z390 RPI 379 USE IF TO SUPPORT COMPOUND WHILE/UNTIL
.* 04/11/07 DSH Z390 RPI 589 USE ZSTRGBL AND EXPAND LEVELS TO 100   
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 09/23/08 RPI 909 upgrade to use ZSTRMAC SPE's and extend compat.
.********************************************************************
.* MACRO TO ALLOW STRUCTURED PROGRAMMING USING       
.* IF, THEN, ELSE, AND DO UP TO TEN LEVELS DEEP      
.* AND NO BRANCH INSTRUCTIONS. SEE IF MACRO.         
.********************************************************************
         DO    &END,&WHILE=,&UNTIL=                                                            
         COPY  ZSTRGBL
         AIF   ('&END' NE '')
               AIF ('&END' EQ 'END')
                  ACALL DO_END
                  MEXIT
               AELSE
                  MNOTE 8,'DO - UNSUPPORTED OPTION'      
                  MEXIT                           
               AEND
         AEND
         AIF   (&ZSTR_LVL EQ &ZSTR_MAX_LVL)
               MNOTE 8,'DO - LEVEL OVERFLOW'                                     
               MEXIT
         AEND 
         :&ZSTR_LVL SETA &ZSTR_LVL+1
         :&ZSTR_LVL_TYPE(&ZSTR_LVL) SETC 'DO'
         :&ZSTR_DO_CNT SETA &ZSTR_DO_CNT+1
         :&ZSTR_LVL_TCNT(&ZSTR_LVL) SETA &ZSTR_DO_CNT
         AIF   ('&WHILE' NE '')
               ACALL DO_WHILE
         AELSEIF ('&UNTIL' NE '')
               ACALL DO_UNTIL
         AELSE
               MNOTE 8,'DO - MISSING WHILE=, UNTIL=, OR END'                                    
         AEND
         MEXIT
.*      
.* DO END     
.*      
         AENTRY DO_END
         :&PARM    SETC  '&SYSLIST(2)'
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'DO - END OUT OF SEQUENCE'                                
               MEXIT
         AEND                                          
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'DO')                                  
               MNOTE 8,'DO END - MISSING DO'  
               MEXIT
         AEND                              
         B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_T           
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E DS 0H                                    
         :&ZSTR_LVL SETA &ZSTR_LVL-1                                                    
         AEND
.*
.* DO WHILE=(CLC,A,EQ,B)
.*
         AENTRY DO_WHILE
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_T DS 0H                                                           
         :&IFPARM  SETC  '&WHILE'(2,K'&WHILE-2)                                                         
         IF &IFPARM
               B   #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL-1)_1
         ENDIF
         B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E                                                
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_1 DS 0H                                                             
         AEND
.*
.* DO UNTIL=(CLC,A,EQ,B)
.*
         AENTRY DO_UNTIL
         B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_1 
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_T DS 0H  
         :&IFPARM  SETC  '&UNTIL'(2,K'&UNTIL-2)                                                         
         IF    &IFPARM
               B     #@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL-1)_E                                               
         ENDIF
#@DO_&ZSTR_LVL_TCNT(&ZSTR_LVL)_1 DS 0H                                                             
         AEND
         MEND
