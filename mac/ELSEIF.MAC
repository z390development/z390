         MACRO                                                             
.********************************************************************
.* z390 - Mainframe assembler emulator and run-time engine
.* Copyright (C) 2021 z390 Assembler LLC
.*
.* This file is part of z390.
.*
.* z390 is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License, or
.* (at your option) any later version.
.* z390 is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.* GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License 
.* along with this program; if not, see https://www.gnu.org/licenses.
.********************************************************************
.* 05/23/76 INITIAL CODING BY DON HIGGINS
.* 05/12/06 Z390 RPI 316 UPDATE FOR COMPAT.
.* 04/11/07 Z390 RPI 589 USE ZSTRGBL AND EXPAND LEVELS TO 100
.* 11/02/07 Z390 RPI 734 CORRECT BAD CONDITION CODE FOR OR CONNECTOR 
.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility
.* 09/23/08 RPI 909 update using ZSTRMAC SPE's                    
.********************************************************************
.* CONTROL STRUCTURE FOR CONDITIONAL EXECUTION
.********************************************************************
         ELSEIF                                                            
         COPY  ZSTRGBL
         AIF   (&ZSTR_LVL EQ 0)
               MNOTE 8,'ELSEIF - MISSING IF'                                       
               MEXIT
         AEND                                          
         AIF   ('&ZSTR_LVL_TYPE(&ZSTR_LVL)' NE 'IF')
               MNOTE 8,'ELSEIF - MISSING IF'                                       
               MEXIT
         AEND                                          
         :&ZSTR_LVL_TEND(&ZSTR_LVL) SETB 1  REQUEST END LABEL       
         B     #@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_E                                                     
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H  
         :&BLK_CNT SETA &ZSTR_LVL_BCNT(&ZSTR_LVL)+1 THIS BLK LAB FOR OR
         :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTR_LVL)+2                                                   
         :&AND_CONN SETB 1             ASSUME AND CONNECTOR IF ANY                                             
         :&N   SETA N'&SYSLIST         TOTAL TEST AND CONNECTOR PARMS                                          
         :&S   SETA 1                  OPERAND INDEX
         AWHILE (&S LE &N)                                                              
               :&SN SETA  N'&SYSLIST(&S)        TEST OPERANDS                                          
               :&OP SETC  '&SYSLIST(&S,1)'      TEST OPCODE
               AIF (&SN EQ 1)  COMPARE NOT IN QUOTES 
                   :&BC SETC  '&SYSLIST(&S+2)'  TEST COMPARE MASK
                   AIF (&N LT &S+3)
                       MNOTE 8,'IF - TEST SUBLIST LENGTH INVALID - &SYSX
               LIST(&S)'                                
                       MEXIT
                   AEND
                   :&OPR SETC '&SYSLIST(&S+1),&SYSLIST(&S+3)'
                   :&S       SETA  &S+4-1     POS TO TEST END-1
               AELSEIF (&SN EQ 4)  OPERANDS IN QUOTES WITH CONNECTORS
                   :&BC      SETC  '&SYSLIST(&S,3)'
                   :&OPR     SETC  '&SYSLIST(&S,2),&SYSLIST(&S,4)'
               AEND
               AIF   (&AND_CONN)    IF AND EXIT IF COMPARE FAILS                                        
         &OP   &OPR
         BC    15-&BC,#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSX
               TR_LVL)                                  
               AELSE                IF OR  EXEC BLOCK IF TEST OK
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSTR_LVL) DS 0H                                                             
                    :&ZSTR_LVL_BCNT(&ZSTR_LVL) SETA &ZSTR_LVL_BCNT(&ZSTX
               R_LVL)+1                     
         &OP   &OPR
         BC    15-&BC,#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&ZSTR_LVL_BCNT(&ZSX
               TR_LVL)                                  
               AEND
               :&S SETA  &S+1       ADVANCE TO CONNECTOR OR END                                                 
               AIF (&S LE &N)                                             
                   :&SN SETA N'&SYSLIST(&S)                                              
                   AIF (&SN NE 1)
                       MNOTE 8,'IF - INVALID CONNECTOR'                                  
                       MEXIT
                   AEND
                   AIF   ('&SYSLIST(&S)' EQ 'OR')
         B     #@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&BLK_CNT                        
                       :&AND_CONN SETB 0                                                           
                   AELSEIF  ('&SYSLIST(&S)' EQ 'AND') 
                       :&AND_CONN SETB 1
                   AELSE               
                       MNOTE 8,'IF - INVALID CONNECTOR'                                  
                       MEXIT
                   AEND
                   :&S SETA &S+1
                   AIF (&S GT &N)
                       MNOTE 8,'IF - MISSING TEST AFTER CONNECTOR'                       
                       MEXIT
                   AEND
               AEND
         AEND
         AIF   (NOT &AND_CONN)
#@IF_&ZSTR_LVL_TCNT(&ZSTR_LVL)_&BLK_CNT DS 0H
         AEND
         MEND
