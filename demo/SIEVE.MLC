**********************************************************************
* z390 - Mainframe assembler emulator and run-time engine
* Copyright (C) 2021 z390 Assembler LLC
*
* This file is part of z390.
*
* z390 is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
* z390 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License 
* along with this program; if not, see https://www.gnu.org/licenses.

	TITLE 'SIEVE.ALC - FIND PRIME NUMBERS USING SIEVE'
*********************************************************************
* AUTHOR. DON HIGGINS.
* DATE.   12/19/86.
* REMARKS. LIST PRIMES ENDING IN 999 UP TO 100,000 (MAXPRIME VALUE)
*          USING 100,000 BYTE TABLE AND SIEVE ROUTINE
*
*********************************************************************
* 01/16/87 MODIFY TO USE BXLE AND CLCL SCAN FOR NEXT PRIME
* 03/01/87 MODIFY TO USE GMAIN INSTEAD OF DIRECT FQE ACCESS
* 05/20/87 UPDATE TIMINGS FOR PC/370 R2.0
* 03/21/08 DSH1 UPGRADE FROM PC/370 TO Z390 AFTER 20 YEARS
*   1. REPLACE STD LINKAGE SETUP AND EXIT WITH SUBENTRY/SUBEXIT MACRO
*   2. REPLACE SVC WTO WITH WTO MACRO
*   3. REPLACE L, BALR TO PET WITH CALL PET MACRO
*   4. REPLACE MVCP WITH Z390 MVCOS Z10 INSTRUCTION
*   5. REPLACE GMAIN SVC WITH GETMAIN MACRO
*   6. REPLACE CALLS TO PET.ALC WITH CALLS TO UPDATED LINLIB\DAT.MLC
*      WHICH DISPLAYS JDBC TIME-STAMP, TOTAL INSTRUCTIONS, AND MIPS
* 06/09/08 RPI 549 CHANGE MVCOS TO ELIMINATE OVERLAPPED STORAGE EXECT.
*********************************************************************
SIEVE    SUBENTRY
         WTO   ' '
         WTO   'SIEVE.MLC PROGRAM TO PRINT PRIMES ENDING'
         WTO   'IN 999 UP TO 100,000 USING 100,000 BYTE TABLE.'
         WTO   'CALL PET TO DISPLAY ELAPSED TIME AND MIP RATES'
         WTO   'PREVIOUS BENCHMARKS OF THIS SAME PROGRAM ARE:'
         WTO   'PC/370 TIME = 176 SECONDS ON  4.77 MHZ  8088 PC.'
         WTO   'PC/370 TIME =  63 SECONDS ON  6    MHZ 80286 PC/AT.'
         WTO   'PC/370 TIME =  37 SECONDS ON 10    MHZ 80286 PS/2-50.'
         WTO   'PC/370 TIME =  31 SECONDS ON 12    MHZ 80286 COMPAQ.'
         WTO   'PC/370 TIME =  20 SECONDS ON 16    MHZ 80386 COMPAQ.'
         WTO   'PC/370 RATE = 3.1 MIPS    ON 2 GHZ DELL DUO CORE'
         WTO   'Z390   RATE = 3.3 MIPS    ON 2 GHZ DELL DUO CORE'
         WTO   ' '
         CALL  DAT            DISPLAY JDBC TIME-STAMP, TOT INSTR, MIPS
         BAL   LINK,INIT
         LA    NUMBER,5
	LA    NEXT,999       NEXT TARGET NUMBER WITH 999'S
MAINLOOP EQU   *
	BAL   LINK,MARKDUP   MARK DUPLICATES OF NUMBER
	BAL   LINK,FINDNEXT  FIND NEXT PRIME
	BZ    MAINEOJ        EXIT IF NONE FOUND
         CLR   NUMBER,NEXT
         BL    MAINLOOP       LOOP IF NUMBER < NEXT TARGET
	LA    NEXT,1000(NEXT)
	BNE   CHKEOJ
         BAL   LINK,PRTNUM    PRINT NUMBER IF EQUAL TO TARGET
CHKEOJ   EQU   *
	CL    NUMBER,=A(MAXPRIME)
	BL    MAINLOOP       LOOP IF NUMBER < MAXPRIME
MAINEOJ  EQU   *
         CALL  DAT            DISPLAY JDBC TIME-STAMP, TOT INSTR, MIPS
         SUBEXIT
	TITLE 'INIT - INITIALIZE TABLE WITH PRIME INDICATORS'
INIT     EQU   *
         L     R2,=A(MAXPRIME)
         GETMAIN R,LV=(R2)           
         LR    TABS,R1
         LR    TABE,R1
	A     TABE,=A(MAXPRIME)
	MVC   0(6,TABS),INITDATA
         LA    R3,TABS          
         L     R2,=A(MAXPRIME-6)
         LR    R3,TABS
INITLOOP EQU   *
         AHI   R2,-256
         BM    LAST
         MVC   6(256,R3),0(R3)  INIT TABLE  RPI 859
         AHI   R3,256
         B     INITLOOP
LAST     EQU   *
         AHI   R2,255
         BMR   LINK
         EX    R2,LASTMVC
         BR    LINK
LASTMVC  MVC   6(0,R3),0(R3)
	TITLE 'PRTNUM - PRINT PRIME NUMBER'
PRTNUM   EQU   *
	CVD   NUMBER,PWORK
	MVC   DNUM,DMASK
	ED    DNUM,PWORK+4
	LA    R2,DNUM
         WTO   MF=(E,DNUM-4)
	BR    LINK
	TITLE 'MARKDUP - MARK DUPLICATES IN TABLE'
MARKDUP  EQU   *
	LA    DUP,0(NUMBER,TABS)
	BXH   DUP,NUMBER,MARKEXIT  EXIT IF DUP > TABE
MARKLOOP EQU   *
	MVI   0(DUP),NOTPRIME
	BXLE  DUP,NUMBER,MARKLOOP  LOOP IF DUP <= TABE
MARKEXIT EQU   *
	BR    LINK
	TITLE 'FINDNEXT - FIND NEXT PRIME IN TABLE'
FINDNEXT EQU   *
	LA    R0,1(NUMBER,TABS)
	LR    R1,TABE
	SR    R1,R0
	BNH   FINDEOF  EOF IF SCAN LENGTH NOT > 0
	LM    R2,R3,=A(0,NOTPRIME*X'1000000')
	CLCL  R0,R2    SCAN FOR NEXT PRIME
	BE    FINDEOF  EOF IF NO PRIME FOUND
	SR    R0,TABS
	LR    NUMBER,R0
	BR    LINK  EXIT WITH NZ FOR PRIME
FINDEOF  EQU   *
	SR    R0,R0 FORCE ZERO CC FOR END OF TABLE
	BR    LINK
	TITLE 'COMMON DATA'
	LTORG
*
*  REGISTERS
*
         EQUREGS
DUP      EQU   R4
TABS     EQU   R5
NUMBER   EQU   R6   R6/R7 USED IN BXLE/BXH
TABE     EQU   R7
TWO      EQU   R9
NEXT     EQU   R10
LINK     EQU   R11
*
* DATA
*
MAXPRIME EQU   100000 (100,000=200 SEC, 10,000=20 SEC FOR QUICK TEST)
PRIME    EQU   0
NOTPRIME EQU   1
PWORK    DC    D'0'
DMASK    DC    X'40206B2020206B202020'
         DC    AL2(WTOEND-*,0)
DNUM     DC    CL10' Z,ZZZ,ZZZ'
WTOEND   EQU   *
*
* INITDATA ELIMINATES 2'S AND 3'S FROM TABLE
*
INITDATA DC    AL1(NOTPRIME,PRIME,NOTPRIME,NOTPRIME,NOTPRIME,PRIME)
	END   SIEVE
