{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"z390 - Mainframe Assembler and Emulator toolkit","text":"<p>Develop, test, and deploy mainframe assembler and COBOL programs on your PC</p> <ul> <li>IBM\u00ae HLASM compatible macro assembler<ul> <li>Common z/OS\u00ae and z/VSE\u00ae compatible macros</li> <li>Structured programming macros compatible with IBM HLASM Toolkit</li> </ul> </li> <li>IBM Enterprise COBOL compatible compiler</li> <li>QSAM/VSAM compatible file processing</li> <li>TN3270 compatible data streams</li> <li>CICS\u00ae compatible transaction processor</li> <li>GPLv2 licensed</li> </ul> <p>Ideal for a number of use cases:</p> <ul> <li>Learning IBM mainframe assembler programming without access to a mainframe.</li> <li>Develop your mainframe application using modern tooling.</li> </ul> <p>Get started</p> <p>IBM, CICS, z/OS and z/VSE are trademarks of IBM Corp., registered in the U.S.  and other countries. The use of IBM Trademarks complies with the Fair use  guidelines for use and reference of IBM trademarks.</p>"},{"location":"contributing/contribute_code/","title":"Contributing to z390","text":"<p>The following document will provide details on how to contribute to the z390 project. For how to contribute to the documentation, see  contributing to documentation</p>"},{"location":"contributing/contribute_code/#setup-and-build","title":"Setup and build","text":""},{"location":"contributing/contribute_code/#install-java-sdk","title":"Install Java SDK","text":"<p>Make sure you have a Java SDK available to compile the application.</p> <p>The project has moved to the Eclipse Temurin Java SDK  (previously AdoptOpenJDK) for distribution builds.</p> <p>z390 is using java 21 to build the package but code must support Java 1.8.</p> <p>To ensure alignment with other developers, use of a Java SDK 21 or greater is recommended. At a minimum, you will require an SDK of 9 or greater  as the build jobs use parameters not available in earlier versions.</p> <p>You can check if this is available by running the following command:</p> <pre><code>shell&gt; javac -version\njavac 21.0.0   # you should receive a message like this\n</code></pre>"},{"location":"contributing/contribute_code/#install-git","title":"Install git","text":"<p>The z390 source code is maintained in a git repository.</p> <p>To install git on your system, go to https://git-scm.com/downloads to download the appropriate version for your system.</p> <p>You can find a quick reference for some frequently used git commands the bottom of this document.</p>"},{"location":"contributing/contribute_code/#clone-the-code","title":"Clone the code","text":"<p>Start with a clone of the main repository.</p> <pre><code>shell&gt; git clone https://github.com/z390development/z390.git\nshell&gt; cd z390\n</code></pre> <p>Once you are ready to submit changes, you will need a fork of the z390  repository. See https://docs.github.com/en/get-started/quickstart/fork-a-repo for more details.</p>"},{"location":"contributing/contribute_code/#build-the-code","title":"Build the code","text":"WindowsMacOS/Unix <p><code>bat&gt; BUILD.BAT</code></p> <p><code>bash&gt; ./build.sh</code></p> <p>If the job successfully runs, it means you are ready to start development.</p> <p>This build procedure invokes the full regression testing script. Build and regression testing both can take quite some time. Luckily, you do not need to do this very often.</p>"},{"location":"contributing/contribute_code/#rebuild-the-jar","title":"Rebuild the JAR","text":"<p>You can just recompile the JAR without running the full build job by running the bldjar script.</p> WindowsMacOS/Unix <p><code>bat&gt; bat\\BLDJAR.BAT</code></p> <p><code>bash&gt; bash/bldjar</code></p>"},{"location":"contributing/contribute_code/#test-the-jar","title":"Test the jar","text":"<p>gradle info: https://docs.gradle.org/current/userguide/userguide.html</p> <p>in z390, to access and use the gradle commands, you first have to make the z390test subdirectory your current or working directory.</p> <p>The test scripts are in subdirectory z390test\\src\\test\\groovy\\org\\z390\\test</p>"},{"location":"contributing/contribute_code/#quick-reference-with-some-gradle-commands","title":"Quick reference with some gradle commands","text":"Action Command get a list of gradlew command options <code>gradlew --help</code> force a test run <code>gradlew test --rerun</code> run a specific test/testset <code>gradlew test --tests 'pattern'</code> run all zCobol tests <code>gradlew test --tests '*cbl*'</code> stop test after failure <code>gradlew test --fail-fast</code>"},{"location":"contributing/contribute_code/#proposing-new-functionality","title":"Proposing new functionality","text":"<p>Enhancements are welcome, but be aware that you are stepping into  an existing and well established project. </p> <p>Before you spend time on an enhancement, we strongly suggest that you first discuss your proposal with the core team and get their  buy-in before progressing.</p> <p>The best place to have these discussions is on the  z390 developer Google group.</p> <p>Once you get approval from the group, you can work on your change via the  standard GitHub pull request model.</p>"},{"location":"contributing/contribute_code/#submitting-changes","title":"Submitting changes","text":"<p>Changes can be submitted to the project by creating a pull request on the  z390 project repository.</p>"},{"location":"contributing/contribute_code/#creating-a-new-release","title":"Creating a new release","text":"<p>The z390 project uses a file-based versioning system with git tags. Version numbers follow Semantic Versioning principles.</p>"},{"location":"contributing/contribute_code/#version-management","title":"Version management","text":"<p>To create a new release:</p> <ol> <li> <p>Create a release branch from main:    <pre><code>git checkout -b release/v1.2.3 main\n</code></pre></p> </li> <li> <p>Update the version using the <code>bash/bumpver</code> utility:    <pre><code># Bump patch version (1.0.0 -&gt; 1.0.1)\nbash/bumpver patch -m \"Fix bug in xyz\"\n\n# Bump minor version (1.0.1 -&gt; 1.1.0)\nbash/bumpver minor -m \"Add new feature xyz\"\n\n# Bump major version (1.1.0 -&gt; 2.0.0)\nbash/bumpver major -m \"Breaking change xyz\"\n</code></pre></p> </li> </ol> <p>The bumpver utility will:    1. Update the version in version.txt    2. Create a git commit with your message</p> <ol> <li>Push your branch and create a pull request:    <pre><code>git push -u origin release/v1.2.3\n</code></pre></li> </ol>"},{"location":"contributing/contribute_code/#automated-release-process","title":"Automated Release Process","text":"<p>When a pull request containing changes to version.txt is merged to main,  the GitHub Actions workflow will automatically:</p> <ol> <li>Build the z390 distribution</li> <li>Run all tests </li> <li>Create a git tag for the version</li> <li>Create a GitHub release using the version from version.txt</li> <li>Attach the distribution zip file to the release</li> </ol>"},{"location":"contributing/contribute_code/#useful-technical-details","title":"Useful technical details","text":"<p>The following section is to provide some technical background for new developers.</p>"},{"location":"contributing/contribute_code/#project-structure","title":"Project structure","text":"<p>The following directories are the core directories for the z390 project</p> Directory Description src Java source for z390 JAR bat Windows bat scripts for running z390 tools bash *nix bash shell scripts for running z390 tools demo Demo assembler programs tests Tests for z/Arch instructions zopcheck Comprehensive instruction check mac Primary maclib folder for z390 doc+doc_overrides z390 Markdown documentation .github Scripts and config for GitHub build actions <p>The following directories provide additional features using the z390 toolkit.</p> Directory Description zcobol zCOBOL support cics zCICS source, tests and demos structuredmacros Alternative Structured Programming Macros from Daniel H. Snyder sort Sort utility zpar Generate program execution traces <p>The following directories provide tests and demos for various features  available in z390.</p> Directory Description assist ASSIST instruction support barcode bsam BSAM sequential file support guam Graphic User Access method support linklib ??? mfacc Mainframe assembler coding contest mvs IBM MVS 3.8j sys1.maclib macros perl (Deprecated) Scipts to run Win BAT files on *nix. Use bash qsam QSAM sequential file support rt Various regression tests for z390 soa Service Orientated Architecture (SOA) and TCP/IP support vsam1 VSAM file support (version 1) vsam2 VSAM file support (version 2) vse VSE OS support"},{"location":"contributing/contribute_code/#compatibility-macros","title":"Compatibility macros","text":"<p>z390 includes a number of macros that are interface compatible with those  provided by mainframe operating systems. </p> <p>The internal operation of the macros is different from a real mainframe. For example, the SVC instructions used by z390 are not the same as SVC calls used by z/OS.</p> <p>This means, if you want to write programs that will work on a real mainframe then you need to use the supplied macros to perform the OS based actions.  You cannot write programs that use SVC commands as they are not the  same.</p>"},{"location":"contributing/contribute_code/#structured-macro-extensions","title":"Structured macro extensions","text":"<p>z390 extends the standard HLASM syntax with additional keywords that allow you  to write structured macro code.</p> <p>See Structured Macro Extensions for more details.</p> <p>This makes writing macros easier but structured macros are NOT compatible  with HLASM.</p> <p>Structured macro extensions are used extensively in the codebase which means moving between the mainframe and z390 has some challenges.</p> <p>The project is looking at how to make this transition easier as it understands z390 users come here because they want to write and run HLASM programs and  macros.</p>"},{"location":"contributing/contribute_code/#license","title":"License","text":"<p>By contributing to the z390 project, you agree to assign all copyright to z390 Assembler LLC. </p> <p>This allows the project to operate and change without the consultation  of all copyright holders. This has not presented itself as an issue to date but could be an issue in the future.</p> <p>If you don't agree to this condition, you are free to fork the project and create your own version under the GNU 2 license conditions.</p> <p>The following preamble should be applied to all programs</p> <pre><code>z390 - Mainframe assembler emulator and run-time engine\nCopyright (C) 2021 z390 Assembler LLC\n\nThis file is part of z390.\nz390 is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nz390 is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre>"},{"location":"contributing/contribute_code/#asm-macro-template","title":"ASM macro template","text":"<pre><code>         MACRO\n.**********************************************************************\n.* z390 - Mainframe assembler emulator and run-time engine\n.* Copyright (C) 2021 z390 Assembler LLC\n.*\n.* This file is part of z390.\n.*\n.* z390 is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License, or\n.* (at your option) any later version.\n.* z390 is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n.* GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License \n.* along with this program; if not, see https://www.gnu.org/licenses.\n.**********************************************************************\n.* dd/mm/yy change details\n.*          that go over a line\n.* 04/19/08 RPI 833 add SETC quotes for HLASM compatibility\n.**********************************************************************\n.* Macro documentation goes here\n.**********************************************************************\n</code></pre>"},{"location":"contributing/contribute_code/#quick-reference-with-some-git-commands","title":"Quick reference with some git commands","text":"<p>git info: https://git-scm.com git documentation:https://git-scm.com/doc</p> Action Command get list of available commands <code>git help</code> get syntax details for a git command <code>git help &lt;command&gt;</code> create local clone of git repo <code>git clone &lt;url\\&gt; &lt;subdir&gt;</code> review status of current branch <code>git status</code> get list of all defined branches <code>git branch -v --all</code> prepare commit <code>git add .</code> commit a set of changes <code>git commit -m\"descriptive comments\"</code> push changes to your own fork <code>git push</code> remove ignored and added files from repo <code>git clean -d -f -X</code> graphical display of branches <code>git log --graph --oneline --decorate --all</code> -- &gt; when viewing the branches displayed <code>&lt;Enter&gt; to scroll 1 line, &lt;PgDn&gt; to scroll a page, q to quit</code> go 'back in time' to a specific commit <code>git branch -f &lt;new_branch&gt; [&lt;start-point&gt;]</code> <code>git switch &lt;new_branch&gt;</code>"},{"location":"contributing/contribute_docs/","title":"Contributing to z390 Documentation","text":"<p>The following document will provide details on how to contribute to the z390 documentation.</p>"},{"location":"contributing/contribute_docs/#submitting-changes","title":"Submitting changes","text":"<p>Changes to documentation can be made by submitting a pull request to the z390 project repository.</p>"},{"location":"contributing/contribute_docs/#content","title":"Content","text":"<p>All documentation will be held in the <code>doc</code> folder and be in markdown format. Markdown files have a <code>.md</code> extension. Markdown uses simple text files with specific syntax for formatting. See the markdown guide for syntax.</p> <p>You can also use functions provided by the admonition extension in mkdocs. See the doco for admonition</p> <p>Note: As part of the normal build process the documentation library for the Java code is generated from the java source code using the standard java tool javadoc. Generated documents can be found in z390 subdirectory build\\javadoc or build/javadoc depending on your Operating System. These documents are not published to the web.</p>"},{"location":"contributing/contribute_docs/#structure","title":"Structure","text":"<p>All the documentation is contained in the <code>doc</code> folder.</p> <p>The following is the sections of the documentation and their purpose and content:</p> Section name Folder name Purpose and content Home index.md Landing page for the documentation and project. Designed for people unfamiliar with the project. Getting started getting_started.md Provides details for a new user of z390 to install and start using z390. User guide user_guide Provides details about how to use the z390 toolset Reference reference Provides details relating to the z390 supplied macros. Contributing contributing Provides details of the z390 project from a project contributor/developer perspective."},{"location":"contributing/contribute_docs/#conventions","title":"Conventions","text":""},{"location":"contributing/contribute_docs/#product-names","title":"Product names","text":"<p>Product names should always use a small z:</p> <ul> <li>z390</li> <li>zCOBOL  - Always capitalize COBOL</li> <li>zVSAM   - Always capitalize VSAM</li> <li>zCICS   - Always capitalize CICS</li> <li>zSORT   - Always capitalize SORT</li> </ul>"},{"location":"contributing/contribute_docs/#program-names-and-scripts","title":"Program names and scripts","text":"<p>When specifying tool and script names, always use lower case to be compatible with case sensitive environments like linux.</p> <ul> <li>mz390</li> <li>az390</li> <li>asmlg</li> </ul>"},{"location":"contributing/contribute_docs/#units-of-measurement","title":"Units of measurement","text":"<p>For bytes:</p> <ul> <li>When specifying a quantity of 1024 bytes, use {quantity}K. Bytes is assumed. Capital K is deliberate.</li> <li>the word bytes can be added if the context does not make it clear that bytes are implied. {quantity}K bytes.</li> </ul> <p>For seconds:</p> <ul> <li>ms = millisecond</li> <li>\u00b5s = microseconds (in markdown \u00b5 = <code>&amp;micro;</code>)</li> <li>ns = nanoseconds</li> </ul>"},{"location":"contributing/contribute_docs/#code","title":"Code","text":"<p>HLASM code should be enclosed in a code block as follows:</p> <pre><code>``` hlasm\nLABEL    MVC  X(10),Y\n```\n</code></pre>"},{"location":"contributing/contribute_docs/#terminology","title":"Terminology","text":"<p>The following provides guidelines on the use of specific terminology. If not here, you should use the general  principle of following conventions set in IBM mainframe manuals.</p> term usage word OK. Alternate is fullword with no space. halfword OK. No space should be used. save area In any text, ensure space is included. The only exception is in code <code>savearea</code> without space is preferred ASCII Always in capitals EBCDIC Always in capitals PSW Program status word - Always capitals"},{"location":"contributing/contribute_docs/#generate-the-web-site","title":"Generate the web site","text":"<p>The z390 docs use the Python utility mkdocs to convert the markdown to web pages that are published to GitHub pages.</p> <p>The following instructions will allow you to preview the published version on GitHub prior to committing your changes.</p>"},{"location":"contributing/contribute_docs/#installation","title":"Installation","text":"<p>You will need Python version 3.4 or above installed.</p> MacOS/UnixWindows <pre><code>python -m venv docenv\nsource docenv/bin/activate\npip install -r doc/requirements.txt\n</code></pre> <p>Note</p> <p>You will require the GTK runtime installed on your system.</p> <p>See https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases</p> <pre><code>python -m venv docenv\ndocenv\\Scripts\\activate\npip install -r doc\\requirements.txt\n</code></pre>"},{"location":"contributing/contribute_docs/#run-the-live-web-server","title":"Run the live web server","text":"<p>When updating the markdown content, you can run a live web server which checks for changes in the markdown files and updates the web content as you edit. You can view the web site preview using a web browser pointed at the following address:</p> <p>http://localhost:8000</p> MacOS/UnixWindows <pre><code>source docenv/bin/activate\nmkdocs serve\n</code></pre> <pre><code>docenv\\Scripts\\activate\nmkdocs serve\n</code></pre>"},{"location":"contributing/contribute_docs/#generate-the-pdf","title":"Generate the PDF","text":"<p>The distribution will include a PDF with the documentation. </p> <p>You can use the following commands to generate the PDF.</p> Ubuntu LinuxMacOSWindows <pre><code>apt update &amp;&amp; apt install -y libsdl-pango-dev\nsource docenv/bin/activate\nENABLE_PDF_EXPORT=1 mkdocs build\n</code></pre> <pre><code>brew install pango\nsource docenv/bin/activate\nENABLE_PDF_EXPORT=1 mkdocs build\n</code></pre> <pre><code>docenv\\Scripts\\activate\nset ENABLE_PDF_EXPORT=1 \nmkdocs build\n</code></pre> <p>The generated PDF document will be placed in the file <code>/site/pdf/z390.pdf</code></p>"},{"location":"contributing/contributing_zcobol/","title":"Contributing to zCOBOL","text":"<p>Have you been bored lately? If you know COBOL and assembler or Java, or C there is a job on the zCOBOL project waiting for you. The pay is poor ($0) but the self actualization rewards can be very satisfying. And there is always the possibility of future paying jobs helping companies use zCOBOL.</p> <p>If you are an assembler or COBOL developer who would like to contribute to the zCOBOL open source project, join the zCOBOL group and indicate your specific interests. All users are welcome and are encouraged to submit bug reports and requests for priority on future open source zCOBOL and z390 development.</p> <p>With the recent addition of z390 structured conditional macro assembler extensions, the development of zCOBOL became feasible and has evolved rapidly. As the article in the z/System Journal titled, \"Easy COBOL Modernization for SOA\" by L. H. Couch and Charles F. Townsend, November 2008 indicates there is a growing demand for tools such as zCOBOL to help seamlessly bridge legacy and modern IT solutions.</p> <p>Current jobs available include writing COBOL verb macros for currently unsupported verbs including SORT, MERGE. Optimizing the code generation macros to produce more efficient code and optional code based on zCOBOL options such as TRUNC, R64, etc. In addition, major effort is still required to covert the HLASM code generation macros to generated java, C, or MASM.</p> <p>For COBOL programmers there is the constant need to extend the zCOBOL regression tests (zCOBOL_Demos_and_Regression_Tests.htm) written in zCOBOL which verify that zCOBOL statements produce the expected results. And finally there is a need to develop documentation on the zCOBOL project as it evolves.</p>"},{"location":"contributing/contributing_zcobol/#nist-ansi-1985-test-suite-results","title":"NIST ANSI 1985 Test Suite Results","text":"<p>v1.5.00a came from RPI 1001 for conditional 88 support, RPI 1002 SET and index support, and RPI 1012 miscellaneous syntax error corrections. Once some of the remaining critical support items such as COMPUTE are completed, these numbers should continue to significantly improve. The plan is to achieve 100% within the next few releases of zCOBOL and then provide optional regression test download for the NIST test suite for zCOBOL.</p> <p>More details regarding NIST validation can be found in the zCOBOL user guide.</p> Description V1.5.00 V1.5.00a Notes NIST programs with parsing errors 140 43 RPI 1012 corrections to zc390 parser NIST Programs Compiled 319 416 RPI 1012 corrections to zc390 parser Total minutes 26 44 33% increase in number of programs compiled RC=0 No errors 11 12 most programs are still missing one or more items RC=8 MNOTE support warning 19 151 Warning for unsupported items pending implementation RC=16 At least 1 error message 249 160 Error messages from mz390 or az390 macro assembler"},{"location":"getting_started/install/","title":"Installation","text":"<p>Follow this guide to setup z390 on your system.</p>"},{"location":"getting_started/install/#install-the-prerequisites","title":"Install the prerequisites","text":"<p>You will need a Java\u2122 runtime environment version 8 or above installed on  your system.</p> <p> Get Eclipse Adoptium Java</p>"},{"location":"getting_started/install/#get-the-latest-z390-distribution","title":"Get the latest z390 distribution","text":"<p>Download the latest version of the z390 distribution.</p> <p> Download z390</p>"},{"location":"getting_started/install/#install-z390","title":"Install z390","text":"<p>Installation is as simple as unzipping the z390 distribution file to your local  file system.</p> <p>You can add the distribution script folder to your system path so that you can  use the z390 tools directly on the command line.</p> WindowsMacOS/Unix <p>If z390 is installed in <code>c:\\z390</code>, then add <code>c:\\z390\\bat</code> to your system path.</p> <p>If z390 is installed in <code>/usr/local/z390</code>, then add <code>/usr/local/z390/bash</code>  to your system path.</p> <p> Continue with Quick Starts</p>"},{"location":"getting_started/learning/","title":"Learning resources","text":"<ul> <li>https://bixoft.nl/english/selftest.htm</li> <li>https://idcp.marist.edu/assembler-resources</li> <li>https://www.ibm.com/docs/en/zos-basic-skills?topic=zos-assembler-language</li> <li>https://www.ibm.com/support/pages/high-level-assembler-hlasm-and-toolkit-feature-share-presentations</li> <li>http://www.billqualls.com/assembler/index.html</li> <li>https://punctiliousprogrammer.com/</li> <li>https://www.ibmmainframeforum.com/assembler/topic12399.html</li> <li>https://ibmmainframes.com/about2744.html</li> <li>http://planetmvs.com/hlasm/s390faq.html</li> <li>https://share.confex.com/share/115/webprogram/Handout/Session7445/hla2mtf.pdf</li> </ul>"},{"location":"getting_started/macro_index/","title":"Mainframe OS compatible macros","text":"<p>z390 provides some mainframe OS compatible macros (MVS, Z/OS, VSE) for use in your programs.</p> <p>SVC calls are not compatible. Z390 implements its own OS services which are different to the mainframe.</p> <p>If your program needs to access OS services, then your programs should use the provided OS based macros.</p> macro description ABEND abort program with specified code ACB VSAM access control block ACBD<sup>1</sup> VSAM ACB DSECT BLDL Search for one or more 390 load modules in memory or in SYS390 load library directories. CALL Call subroutine using standard linkage CHECK Check completion of READ/WRITE CLOSE Close DCB or ACB file CMDPROC Control command processing tasks CVTD DSECT of limited CVT fields supported DCB Data control block for file (supports 31 bit DCBLRECLF field as extension to DCBLRECL.   See SUPERZAP utility for example of how to read or write up to 2 GB file with 1 I/O operation.) DCBD DSECT of limited DCB fields DCBE Define EODAD and SYNAD for DCB DECBD<sup>1</sup> DSECT of limited DECB fields DEFINE<sup>1</sup> Define VSAM Cluster Definition Table DEQ<sup>1</sup> Release a resource lock set by ENQ DELETE Freemain 390 load module if use count 0 ENQ<sup>1</sup> request lock on a resource ERASE VSAM delete record ESPIE set program interruption handler ESTAE set program abend handler FREEMAIN release memory area GENCB generate VSAM ACB or RPL GET read record from QSAM or VSAM file GETENV get value of environment variable GETMAIN allocate memory area IHAEPIE<sup>1</sup> DSECT for ESPIE exits IHASDWA<sup>1</sup> DSECT for SDWA ESTAE exits                                                                                                                                          m LINK load and execute 390 load module LOAD load 390 load module MODCB modify ACB or RPL control block field OPEN open DCB or ACB file POINT position to relative record or RBA in file POST post ECB as completed PUT write record to QSAM or VSAM file READ read block from file at current position RETURN restore saved registers and return RPL VSAM request parameter list RPLD<sup>1</sup> VSAM RPL DSECT SAVE save specified registers SETRP<sup>1</sup> set register options for ESTAE exits SHOWCB move ACB or RPL field to user area SNAP dump selected area of memory and/or dump file information from TIOT/DCB\u2019s, general and floating point registers, program information from CDE, and memory allocation totals STIMER wait specified interval of time STORAGE obtain or release main storage TESTCB test current value of ACB or RPL field TGET read from GUI TN3270 interface TIME get time and date in requested format TTIMER test and/or cancel STIMER event TPUT write to GUI TN3270 display VCDTD<sup>1</sup> VSAM Catalog Definition Table DSECT WAIT wait for 1 or more ECB\u2019s to be posted WRITE write block to file at current position WTO write text message to operator console WTOR write to operator with reply XCTL transfer control and delete prior pgm XLATE translate area to/from EBCDIC/ASCII <ol> <li> <p>Requires documentation.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"getting_started/quickstart/","title":"Quick starts","text":""},{"location":"getting_started/quickstart/#hello-z390","title":"Hello z390","text":"<p>The following is a simple Hello world application written in mainframe  assembler language.</p> <pre><code>HELLO    CSECT\n         BASR  15,0\n         USING *,15\n         WTO   'Hello z390!'\n         BR    14\n         END\n</code></pre> <p>Add the contents of this to a file named 'HELLO.MLC'.</p> <p>Now run the following z390 command to assemble, link and run the program.</p> WindowsMacOS/Unix <p> Assumes z390 has been installed in <code>c:\\z390</code>.  Substitute for your local install location.</p> <pre><code>c:\\z390\\bat\\asmlg HELLO.MLC SYSMAC(c:\\z390\\mac+)\n</code></pre> <p> Assumes z390 has been installed in <code>/usr/local/z390</code>.  Substitute for your local install location. <pre><code>/usr/local/z390/bash/asmlg HELLO.MLC \"SYSMAC(/usr/local/z390/mac+)\"\n</code></pre></p> <p>If you have successfully run the sample program, the output to the console will  be similar to the following:</p> <pre><code>09:37:54 HELLO     MZ390 START USING z390 V1.7.03 ON J2SE 14.0.2 06/05/21\n09:37:54 HELLO     MZ390 ENDED   RC= 0 SEC= 0 MEM(MB)= 47 IO=200\n09:37:55 HELLO     LZ390 START USING z390 V1.7.03 ON J2SE 14.0.2 06/05/21\n09:37:55 HELLO     LZ390 ENDED   RC= 0 SEC= 0 MEM(MB)=  8 IO=30\n09:37:55 HELLO     EZ390 START USING z390 V1.7.03 ON J2SE 14.0.2 06/05/21\nHello z390!\n09:37:55 HELLO     EZ390 ENDED   RC= 0 SEC= 0 MEM(MB)= 16 IO=21 INS=5\n</code></pre>"},{"location":"getting_started/quickstart/#hello-zcobol","title":"Hello zCOBOL","text":"<p>The following is a simple Hello world application written in COBOL.</p> <pre><code>        IDENTIFICATION DIVISION.\n        PROGRAM-ID. HELLO.\n\n        PROCEDURE DIVISION.\n            DISPLAY \"HELLO ZCOBOL\".\n            STOP RUN.\n</code></pre> <p>Add the contents of this to a file named 'HELLO.CBL'.</p> <p>Now run the following z390 command to assemble, link and run the COBOL program.</p> WindowsMacOS/Unix <p> Assumes z390 has been installed in <code>c:\\z390</code>.  Substitute for your local install location.</p> <pre><code>c:\\z390\\bat\\cblclg HELLO\n</code></pre> <p> Assumes z390 has been installed in <code>/usr/local/z390</code>.  Substitute for your local install location. <pre><code>/usr/local/z390/bash/cblclg HELLO\n</code></pre></p> <p>If you have successfully run the sample COBOL program, the output to the console  will be similar to the following:</p> <pre><code>21:13:17 hello     ZC390 START USING z390 V1.7.07 ON J2SE 16.0.1 06/27/21\n21:13:17 hello     ZC390 ENDED   RC= 0 SEC= 0 MEM(MB)= 10 IO=2\n21:13:18 hello     MZ390 START USING z390 V1.7.07 ON J2SE 16.0.1 06/27/21\n21:13:19 hello     MZ390 ENDED   RC= 0 SEC= 1 MEM(MB)=109 IO=19951\n21:13:19 hello     LZ390 START USING z390 V1.7.07 ON J2SE 16.0.1 06/27/21\n21:13:19 hello     LZ390 ENDED   RC= 0 SEC= 0 MEM(MB)= 11 IO=72\n21:13:19 hello     EZ390 START USING z390 V1.7.07 ON J2SE 16.0.1 06/27/21\nHELLO ZCOBOL\n21:13:19 hello     EZ390 ENDED   RC= 0 SEC= 0 MEM(MB)= 17 IO=185 INS=41\n</code></pre> <p>Learn more in the zCOBOL user guide</p>"},{"location":"getting_started/quickstart/#hello-zcics","title":"Hello zCICS","text":"<p>TODO</p>"},{"location":"reference/assist/","title":"ASSIST support","text":"<p>ASSIST stands for Assembler System for Student Instruction and Systems Teaching.</p> <p>It is an IBM System/370-compatible assembler and interpreter developed in the  early 1970s at Penn State University by Graham Campbell and John Mashey.<sup>1</sup></p> <p>The ASSIST support in z390 allows you to use the I/O and debugging instructions  as described in the ASSIST User Manual.</p> <p>See ASSIST User Manual PART II. INPUT/OUTPUT AND DEBUGGING INSTRUCTIONS for more details.</p>"},{"location":"reference/assist/#using-assist-instructions-with-z390","title":"Using ASSIST instructions with z390","text":""},{"location":"reference/assist/#assist-option","title":"<code>ASSIST</code> option","text":"<p>The ASSIST option must be provided to use the ASSIST instructions.  See z390 Options for details.</p>"},{"location":"reference/assist/#assist-command-script","title":"<code>assist</code> command script","text":"<p>z390 <code>assist</code> command script can be used to assemble, link, and execute ASSIST  programs.</p> <pre><code>assist {programname}\n</code></pre> <p>The <code>assist</code> command script enables ASSIST option and defines the following  files for input and output:</p> <ul> <li>XREAD={programname}.XRD</li> <li>XPRNT={programname}.XPR</li> <li>XPNCH={programname}.XPH</li> <li>XGET={programname}.XGT</li> <li>XPUT={programname}.XPT</li> </ul>"},{"location":"reference/assist/#file-processing","title":"File processing","text":"<ul> <li>Files are optional and will be opened on first access and closed at end of    execution or end of file.</li> <li>All files are ASCII with automatic conversion from or to EBCDIC. </li> <li>ASCII file records have trailing spaces removed and end with carriage return    x'0d' and line feed x'0a'.</li> <li>Input fields are padded with EBCDIC spaces x'40'.</li> <li>Non ASCII output bytes are converted to periods.</li> </ul>"},{"location":"reference/assist/#default-assist-option-behavior","title":"Default ASSIST option behavior","text":"<p>Using the ASSIST option enables z390 options NOLOADHIGH and NOINIT for  compatibility with the original ASSIST assembler and simplifies relative address  calculations.</p> <p>This has the following impacts:</p> <ul> <li>Programs are loaded at X'8000' instead of high end of memory.</li> <li>Registers are initialized to X'F4'.</li> <li>Memory above the PSA is initialized to X'F5'.</li> <li>Uninitialized areas of 390 load modules are initialized to X'F6'.</li> </ul> <p>You can use the options LOADHIGH and INIT to override this behavior. </p> <p>See z390 Options for more information.</p>"},{"location":"reference/assist/#error-handling","title":"Error handling","text":"<p>A trace table is used to display the last 10 instructions prior to abnormal  termination of a program when the TRACE option is off.</p> <p>The PSW displayed at abnormal termination includes ILC, CC, MASK, and AMODE.</p>"},{"location":"reference/assist/#assist-instructions","title":"ASSIST instructions","text":""},{"location":"reference/assist/#xdeci-convert-decimal-to-binary","title":"XDECI - Convert decimal to binary","text":"<p>Format: <code>RX X'53rxbddd' r1.s2</code></p> <ul> <li>Start scan for next decimal number at s2 skipping leading blanks. </li> <li>Convert decimal number to binary in r1 until non decimal character found or    more than nine digits.</li> <li>When ten (or more) digits are found, the instruction does not do the    conversion and condition code 3 is set.</li> <li>Set register 1 to address of the last non decimal character found.</li> <li>Set condition code 0 if number converted successfully else set condition code 3.</li> </ul>"},{"location":"reference/assist/#xdeco-convert-binary-to-decimal","title":"XDECO - Convert binary to decimal","text":"<p>Format: <code>RX X'52rxbddd' r1,s2</code></p> <p>Convert binary 32 bit r1 value to right justified 12 character decimal field at s2.</p>"},{"location":"reference/assist/#xdump-dump-registers-andor-storage","title":"XDUMP - dump registers and/or storage","text":"<p>Format: <code>RXSS X'E06xbdddbddd' s1(x1),s2</code></p> <ul> <li>If no operands are specified, dump registers and the default storage area.</li> <li>If no XLIMD instruction has reset default storage dump area, dump all storage.</li> <li>if s1(x1) address of storage area and s2 length of area are specified just    dump that area.</li> </ul>"},{"location":"reference/assist/#xget-read-record-from-ascii-file","title":"XGET - read record from ASCII file","text":"<p>Format: <code>RXSS X'E0Axbdddbddd' s1(x1),s2</code></p> <ul> <li>Read record from ASCII file DDNAME=XGET into area s1(x1) with length of s2.</li> <li>Requires that the environment variable <code>XGET</code> be set and point to desired    input file.</li> <li>If a file operation is successful the condition code is set to 0.</li> <li>At end of file, condition code 1 is set.</li> <li>If a file open error occurs, program terminates with S013 abend with error    message showing the file specification which failed.</li> <li>If any other error occurs such as missing length, condition code 2 is set.</li> </ul>"},{"location":"reference/assist/#xhexi-convert-hex-to-binary","title":"XHEXI - convert hex to binary","text":"<p>Format: <code>RX X'61' r1,s2</code> </p> <p>Convert hex to binary (cc3 if no hex, update field addr).</p>"},{"location":"reference/assist/#xhexo-convert-binary-to-hex","title":"XHEXO - convert binary to hex","text":"<p>Format: <code>RX X'62' r1,s2</code> </p> <p>Convert value in r1 to printable hex (8 bytes), storing value at s2.</p>"},{"location":"reference/assist/#xlimd-set-default-dump-storage-area","title":"XLIMD - Set default dump storage area","text":"<p>Format: <code>RXSS X'E08xrbdddbddd' s1(x1),s2</code></p> <p>Set default XDUMP storage area address and length.</p>"},{"location":"reference/assist/#xpnch-write-to-punch","title":"XPNCH - Write to punch","text":"<p>Format: <code>RXSS X'E04xbdddbddd' s1(x1),s2</code></p> <ul> <li>Write to DDNAME=XPNCH with length s2.</li> <li>Requires that the environment variable <code>XPNCH</code> be set and point to desired    output file.</li> <li>Does not set condition code.</li> <li>If a file error occurs the program aborts with abend code S013.</li> <li>If a file open error occurs, program terminates with S013 abend with error    message showing the file specification which failed.</li> </ul>"},{"location":"reference/assist/#xprnt-write-to-print","title":"XPRNT - Write to print","text":"<p>Format: <code>RXSS X'E02xbdddbddd' s1(x1),s2</code></p> <ul> <li>Write to DDNAME=XPRNT with length s2.</li> <li>Requires that the environment variable <code>XPRNT</code> be set and point to desired    output file.</li> <li>Does not set condition code.</li> <li>If a file error occurs, the program aborts with abend code S013.</li> <li>If a file open error occurs, program terminates with S013 abend with error    message showing the file specification which failed.</li> </ul>"},{"location":"reference/assist/#xput-write-to-xput","title":"XPUT - Write to XPUT","text":"<p>Format: <code>RXSS X'E0Cxbdddbddd' s1(x1),s2</code></p> <ul> <li>Write to DDNAME=XPUT for length s2.</li> <li>Requires that the environment variable <code>XPUT</code> be set and point to desired    output file.</li> <li>If a file operation is successful the condition code is set to 0.</li> <li>If a file open error occurs, program terminates with S013 abend with error    message showing the file specification which failed.</li> <li>If any other error occurs such as missing length, condition code 2 is set.</li> </ul>"},{"location":"reference/assist/#xread-read-from-xread","title":"XREAD - Read from XREAD","text":"<p>Format: <code>RXSS X'E00xbdddbddd' s1(x1),s2</code> </p> <ul> <li>Read record from DDNAME=XREAD for length s2.</li> <li>Requires that the environment variable <code>XREAD</code> be set and point to desired    input file.</li> <li>If a file operation is successful the condition code is set to 0.</li> <li>At end of file, condition code 1 is set.</li> <li>If a file error occurs, the program aborts with abend code S013.</li> <li>If a file open error occurs, program terminates with S013 abend with error    message showing the file specification which failed.</li> </ul> <ol> <li> <p>See ASSIST (computing) at Wikipedia  for more details.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/file_services/","title":"Non-VSAM File Services","text":"<p>z390 supports sequential and random access to files through the provision of SVC  functions and assembler macros.</p> <p>The macros described here seek to emulate those provided by IBM\u00ae as part of  their operating system macro services where it makes sense in the context of  z390 runtime environments. </p> <ul> <li>z/OS: DFSMS Macro Instructions for Data Sets - Part 2 Non-VSAM macro instructions.</li> </ul> <p>VSAM support</p> <p>The macros GET, PUT and POINT can be used for VSAM access with the parameter RPL=rpladdress. VSAM usage is not documented here. Please refer to VSAM file services.</p>"},{"location":"reference/file_services/#quick-starts","title":"Quick starts","text":"<p>To access a file, a data control block (DCB) must be defined.</p> <p>Programs that use the File I/O macros must include a DSECT for the DCB. The  DSECT is generated by the DCBD macro, so a typical program structure would be:</p> <pre><code>         DCBD\n         EQUREGS\n         END\n</code></pre> <p>Include the DSECT for the DECB, which is generated by the DECBD macro, if you  are using READ or WRITE.</p>"},{"location":"reference/file_services/#read-a-file","title":"Read a file","text":"<p>The following code demonstrates the read of a file <code>TEACHERS</code> with a layout as described as <code>IREC</code>. The environment variable <code>TEACHER</code> should be set to point to the input file.</p> <pre><code>         OPEN  (TEACHERS,INPUT)    Opens the file\n         GET   TEACHERS            Reads record\n         CLOSE TEACHERS            Closes the file\n......\nTEACHERS DCB   LRECL=27,RECFM=FT,MACRF=R,EODAD=ATEND,                  X\n               DDNAME=TEACHER,RECORD=IREC\nIREC     DS    0CL27    Teacher record\n......\n</code></pre>"},{"location":"reference/file_services/#write-to-a-file","title":"Write to a file","text":"<p>The following code demonstrates the write to a file <code>REPORT</code> with a layout as described as <code>OREC</code>. The environment variable <code>REPORT</code> should be set to point to the output file.</p> <pre><code>         OPEN  (REPORT,OUTPUT)     Opens the file\n         PUT   REPORT,OREC         Write OREC to record\n         CLOSE REPORT              Closes the file\n......\nREPORT   DCB   LRECL=60,RECFM=FT,MACRF=W,                              X\n               DDNAME=REPORT\nOREC     DS    0CL60                Report output structure\n......\n</code></pre>"},{"location":"reference/file_services/#macro-reference","title":"Macro reference","text":""},{"location":"reference/file_services/#svc-functions","title":"SVC functions","text":"<p>The following is a list of the z390 SVC services that support the above macros.</p> DEC HEX Service 19 13 OPEN 19 13 OPEN (VSE) 20 14 CLOSE 20 14 CLOSE (VSE) 151 97 GET 152 98 PUT 153 99 READ 154 9A WRITE 155 9B CHECK 156 9C POINT"},{"location":"reference/file_services/#dcb","title":"DCB - Data Control Block","text":"<p>Used to create the Data Control Block</p> <p>Some of the parameters may be set before and/or after OPEN.</p> <p>The individual descriptions indicate this.</p> <pre><code>label    DCB   DSORG=PS,                                               X\n               EODAD=0,                                                X\n               RECFM=FB,                                               X\n               DDNAME=,                                                X\n               MACRF=GM,                                               X\n               SYNAD=0,                                                X\n               BLKSIZE=0,                                              X\n               LRECL=0,                                                X\n               DCBE=,                                                  X\n               RECORD=0,                                               X\n               DSNAME=0\n</code></pre> <p>EXLST is currently unsupported.</p> <p>'label' is the file identifier, the DCB name, which is used in all the file I/O macros.</p> Term Meaning Description BDW Block Descriptor Word Only used for RECFM=VB files. A 4-byte field of the form  'blocklength',H'0'The blocklength includes the length of the BDW. RDW Record Descriptor Word Used for all variable files. A 4-byte field of the form H'recordlength',H'0'The recordlength includes the length of the RDW. The program must set this field correctly for output, and expect it on input. CRLF Carriage Return, Line Feed A term for the hex string X'0D0A' (ASCII) or X'0D25' (EBCDIC).Now commonly used to terminate a text record."},{"location":"reference/file_services/#ddname-and-dsname-dd-statementdataset-name","title":"DDNAME and DSNAME - DD statement/Dataset name","text":"<p>DDNAME DSECT=DCBDDNAM Type=CL8 Default=CL8'label'</p> <p>DSNAME DSECT=DCBDSNAM Type=A No default</p> <ul> <li>Can these be set in the DCB prior to OPEN: Yes</li> <li>Can these be set in the DCB after OPEN : No</li> </ul> <p>Only one of these parameters may be set in the DCB.</p> <p>If both parameters are set in the program prior to open, the DSNAME will take  precedence.</p> <p>When DDNAME is specified, an environment variable will point to the path and  file that is to be opened.</p> <p>Within a program the GETENV macro can be used to extract the environment variable. See GETENV macro for full details.</p> <pre><code>MYDCB    DCB   DDNAME=MYDATA, ...\n</code></pre> <p>Run using the following commands:</p> WindowsMacOS/Unix <pre><code>SET MYDATA=c:\\path\\file\nCALL c:\\path_to_z390\\bat\\ez390 c:\\path\\program parms\n</code></pre> <pre><code>export MYDATA=/path/file \n/path_to_z390/bash/ez390 /path/program parms\n</code></pre> <p>Info</p> <p>For both Windows and *nix, the invocation of ez390 should be preceded by a  path to the z390 script folder.</p> <ul> <li>bat for Windows</li> <li>bash for *nix</li> </ul> <p>DSNAME is a label defined in the program which has the file spec.</p> <p>The file spec must terminate with X'00' or be defined as a double-quoted string  within a standard C-type constant.</p> <pre><code>MYDCB    DCB   DSNAME=MYDATA, ...\n......\nMYDATA   DC    C'drive:\\path\\file',X'00'\nMYDATA   DC    C'\"drive:\\path\\file\"'\n</code></pre>"},{"location":"reference/file_services/#macrf-macro-type","title":"MACRF - Macro type","text":"<p>DSECT=DCBMACRF, Coded Default=GM</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes, but not recommended</li> <li>Can this be set in the DCB after OPEN : No</li> </ul> Option Effect MACRF=GM Get Move, use the GET macro to read a recordUse for standard (QSAM) file read MACRF=PM Put Move, use the PUT macro to write a recordUse for standard (QSAM) file write MACRF=R Read Mode. Use READ/CHECK to read a record. Use POINT for positioning. MACRF=W Write Mode. Use WRITE/CHECK to write or update a record. Use POINT for positioning. MACRF=RW Update Mode. Use READ/WRITE/CHECK to read, write or update a record. Use POINT for positioning."},{"location":"reference/file_services/#dsorg-dataset-organization","title":"DSORG - Dataset organization","text":"<p>DSORG DSECT=DCBDSORG Coded Default=PS</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes, but not recommended</li> <li>Can this be set in the DCB after OPEN : No</li> </ul>"},{"location":"reference/file_services/#dsorgps-physical-sequential","title":"DSORG=PS Physical Sequential","text":"<p>The only option at present, can be omitted.</p>"},{"location":"reference/file_services/#recfm-record-format","title":"RECFM - Record format","text":"<p>RECFM DSECT=DCBRECFM Coded Default=FB</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes, but not recommended</li> <li>Can this be set in the DCB after OPEN : No</li> </ul>"},{"location":"reference/file_services/#recfmf-fixed","title":"RECFM=F Fixed","text":"<p>Translation: None</p> <p>Input: Records are read LRECL at a time.</p> <p>Output: Records are written LRECL at a time.</p>"},{"location":"reference/file_services/#recfmfb-fixed-blocked","title":"RECFM=FB Fixed Blocked","text":"<p>Translation: None</p> <p>Input:</p> <ul> <li>MACRF=GM<ul> <li>Records are read LRECL at a time out of BLKSIZE.</li> </ul> </li> <li>MACRF=R or RW<ul> <li>The whole block is read.</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>MACRF=PM<ul> <li>Records are written LRECL at a time into a block of size BLKSIZE. CLOSE may write a short block.</li> </ul> </li> <li>MACRF=W or RW<ul> <li>The whole block is written.</li> </ul> </li> </ul>"},{"location":"reference/file_services/#recfmv-variable","title":"RECFM=V Variable","text":"<p>Translation: None</p> <p>Input:</p> <ul> <li>Each record is prefixed by the RDW.</li> <li>The receiving area must be big enough for the largest RDW+record.</li> <li>If the RDW indicates a record size larger than LRECL, abend S013 will occur.</li> </ul> <p>Output:</p> <ul> <li>Each record must be prefixed by the RDW.</li> </ul>"},{"location":"reference/file_services/#recfmvb-variable-blocked","title":"RECFM=VB Variable Blocked","text":"<p>Translation: None</p> <p>Input:</p> <ul> <li>MACRF=GM<ul> <li>Each record is prefixed by the RDW.</li> <li>The receiving area must be big enough for the largest RDW+record.</li> <li>If the RDW indicates a record size larger than LRECL, abend S013 will occur.</li> </ul> </li> <li>MACRF=R or RW<ul> <li>The whole block is read, prefixed by the BDW.</li> <li>The receiving area must be big enough for the largest BDW+block.</li> <li>If the BDW indicates a block size larger than BLKSIZE, abend S013 will occur.</li> </ul> </li> </ul> <p>Output:</p> <ul> <li>MACRF=PM<ul> <li>Each record must be prefixed by the RDW.</li> <li>CLOSE will write the last block.</li> <li>Each block written will have the BDW automatically inserted at the start.</li> </ul> </li> <li>MACRF=W or RW<ul> <li>Each block must be prefixed by the BDW.</li> </ul> </li> </ul>"},{"location":"reference/file_services/#recfmft-fixed-ascii-text","title":"RECFM=FT Fixed ASCII text","text":"<p>Translation:</p> <ul> <li>ASCII mode:<ul> <li>None</li> </ul> </li> <li>Non-ASCII mode input<ul> <li>ASCII chars are translated to EBCDIC after being read.</li> </ul> </li> <li>Non-ASCII mode output<ul> <li>EBCDIC chars are translated to ASCII before being written, this is an    internal function and does not affect the record in storage. Non-EBCDIC    chars may be translated to X'00'.</li> </ul> </li> </ul> <p>Input:</p> <ul> <li>The file is assumed to be in conventional ASCII format, with each record    ending in the operating system specific end-of-line (EOL) character(s).</li> <li>EOL is never read as part of the record.</li> <li>If the record is shorter than LRECL, then trailing blanks are inserted.</li> <li>EODAD is invoked when all bytes have been read. </li> </ul> <p>Output:</p> <ul> <li>EOL is inserted at the end of each record after trailing blanks are stripped.</li> </ul>"},{"location":"reference/file_services/#recfmvt-variable-ascii-text","title":"RECFM=VT Variable ASCII text","text":"<p>Translation: </p> <ul> <li>ASCII mode<ul> <li>None</li> </ul> </li> <li>Non-ASCII mode input<ul> <li>ASCII chars are translated to EBCDIC after being read.</li> </ul> </li> <li>Non-ASCII mode output<ul> <li>EBCDIC chars are translated to ASCII before being written. This is an    internal function and does not affect the record in storage. Non-EBCDIC    chars may be translated to X'00'.</li> </ul> </li> </ul> <p>Input:</p> <ul> <li>The file is assumed to be in conventional ASCII format, with each record    ending in the operating system specific end-of-line (EOL) character(s).</li> <li>EOL is never read as part of the record.</li> <li>Each record is prefixed with the RDW.</li> <li>EODAD is invoked when all bytes have been read.</li> <li>The receiving area must be big enough for the largest RDW+record.</li> <li>If the RDW indicates a record size larger than LRECL, abend S013 will occur.</li> </ul> <p>Output:</p> <ul> <li>Each record must be prefixed with the RDW.</li> <li>EOL is inserted at the end of each record after trailing blanks are stripped.</li> </ul> <p>Warning</p> <p>The RDW is not written.</p>"},{"location":"reference/file_services/#record-record-address","title":"RECORD - Record address","text":"<p>RECORD DSECT=DCBREC Type=A Default=0 (undefined)</p> <p>Default I/O area which can be overridden on the GET/PUT/READ/WRITE macros.</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes</li> <li>Can this be set in the DCB after OPEN : Yes</li> </ul> <p>If omitted, then the I/O area must be specified on the GET/PUT/READ/WRITE macros.</p>"},{"location":"reference/file_services/#lrecl-record-length","title":"LRECL - Record length","text":"<p>LRECL DSECT=DCBLRECLF Type=F Default=0</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes</li> <li>Can this be set in the DCB after OPEN : Yes</li> <li>Maximum value is 2G-1.</li> <li>For RECFM=F or FB, sets the record size.</li> <li>For all other RECFM, sets the maximum record size.</li> <li>For RECFM=F, LRECL=0 is valid, provided that BLKSIZE is set.</li> <li>For RECFM=FB, LRECL must be a multiple of BLKSIZE.</li> <li>For variable records, include 4 for the RDW.</li> <li>The field DCBLRECL (Type=H) is retained for compatibility.</li> </ul>"},{"location":"reference/file_services/#blksize-block-size","title":"BLKSIZE - Block size","text":"<p>BLKSIZE DSECT=DCBBLKSIF Type=F Default=0</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes</li> <li>Can this be set in the DCB after OPEN : Yes</li> <li>Maximum value is 2G-1.</li> <li>LRECL and BLKSIZE cannot both be zero.</li> <li>For RECFM=F sets the record size if LRECL=0.</li> <li>For RECFM=FB, sets the block size and LRECL must be a multiple of BLKSIZE.</li> <li>For RECFM=VB, BLKSIZE must be at least 4 greater than LRECL.</li> <li>For all other RECFM, sets the maximum block size.</li> <li>The field DCBBLKSI (Type=H) is retained for compatibility.</li> </ul>"},{"location":"reference/file_services/#DCB-DCBE-PARM","title":"DCBE - Data control block extension","text":"<p>DCBE DSECT=DCBDCBE Type=A Default=0 (undefined)</p> <p>The DCBE is a control block defined by the DCBE macro.</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes</li> <li>Can this be set in the DCB after OPEN : Yes</li> <li>When defined, the addresses of the end-of-file (EODAD) and the I/O error routine (SYNAD)    may be defined.  When set, these addresses override the DCB EODAD and SYNAD parameters.</li> <li>The DSECT IHADCBE maps the DCBE control block.</li> </ul>"},{"location":"reference/file_services/#DCB-EODAD","title":"EODAD - End of file routine","text":"<p>EODAD DSECT=DCBEODAD Type=Address Default=0 (no routine defined)</p> <p>The address of the end-of-file routine.</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes</li> <li>Can this be set in the DCB after OPEN : Yes</li> <li>This may be overridden if DCBE is coded.</li> <li>If a further GET is done after end-of-file, then the program is terminated.</li> </ul>"},{"location":"reference/file_services/#DCB-SYNAD","title":"SYNAD - Error analysis routine","text":"<p>SYNAD DSECT=DCBSYNAD Type=Address Default=0 (no routine defined)</p> <p>The address of the uncorrectable I/O error routine.</p> <ul> <li>Can this be set in the DCB prior to OPEN: Yes</li> <li>Can this be set in the DCB after OPEN : Yes</li> <li>This may be overridden if DCBE is coded.</li> </ul>"},{"location":"reference/file_services/#dcbe-data-control-block-extended","title":"DCBE - Data Control Block Extended","text":"<pre><code>label    DCBE  EODAD=0,SYNAD=0,BLKSIZE=0\n</code></pre>"},{"location":"reference/file_services/#eodad-end-of-data-routine-address","title":"EODAD - End of data routine address","text":"<p>Address of End of data routine. </p> <p>Default=0 = no routine</p> <p>When set, will override address provided in the DCB EODAD parameter.</p>"},{"location":"reference/file_services/#synad-io-error-routine-address","title":"SYNAD - IO error routine address","text":"<p>Address of IO Error routine. </p> <p>Default=0 - no routine</p> <p>When set, will override address provided in the DCB SYNAD parameter.</p>"},{"location":"reference/file_services/#blksize-large-block-interface","title":"BLKSIZE - Large block interface","text":"<ul> <li>Default is zero meaning Large Block support is not enabled. </li> <li>When set, the large block interface (LBI) is enabled.</li> <li> <p>This causes BDW and RDW fields in variable length files to use an alternative    format:</p> <p>LLLL where high bit is on and the remaining 31 bits are length.</p> </li> </ul>"},{"location":"reference/file_services/#dtfsd","title":"DTFSD (VSE) - Data control block","text":"<p>VSE only</p> <p>DTFSD maps to the standard DCB as follows:</p> <pre><code>label    DTFSD BLKSIZE=n,                                              X\n               EOFADDR=\nlabel    DCB   DSORG=PS,                                               X\n               EODAD=,   maps from EOFADDR                             X\n               RECFM=F,                                                X\n               DDNAME=,  label if it exists, otherwise blank           X\n               MACRF=RW,                                               X\n               SYNAD=0,                                                X\n               BLKSIZE=, maps from BLKSIZE                             X\n               LRECL=,   maps from BLKSIZE                             X\n               DCBE=0,                                                 X\n               RECORD=0,                                               X\n               DSNAME=0\n</code></pre>"},{"location":"reference/file_services/#dtfpr","title":"DTFPR (VSE) - Data control block","text":"<p>VSE only</p> <p>DTFPR maps to the standard DCB as follows:</p> <pre><code>label    DTFPR BLKSIZE=n\nlabel    DCB   DSORG=PS,                                               X\n               EODAD=,   maps from EOFADDR                             X\n               RECFM=F,                                                X\n               DDNAME=,  label if it exists, otherwise blank           X\n               MACRF=RW,                                               X\n               SYNAD=0,                                                X\n               BLKSIZE=, maps from BLKSIZE                             X\n               LRECL=,   maps from BLKSIZE                             X\n               DCBE=0,                                                 X\n               RECORD=0,                                               X\n               DSNAME=0\n</code></pre>"},{"location":"reference/file_services/#open","title":"OPEN - Open file","text":"<p>Open one or more files.</p>"},{"location":"reference/file_services/#usage","title":"Usage","text":"<p>Open one file for INPUT</p> <pre><code>         OPEN  dcbname\n</code></pre> <p>Open one file for non-INPUT</p> <pre><code>         OPEN  (dcbname,type)\n</code></pre> <p>Open multiple files</p> <pre><code>         OPEN  (dcbname1,type,dcbname2,type)\n</code></pre> <p>The same, using register notation</p> <pre><code>         OPEN  ((reg),type)\n         OPEN  ((reg1),type,(reg2),type)\n</code></pre>"},{"location":"reference/file_services/#registers","title":"Registers","text":"<ul> <li>R0 = Flags</li> <li>R1 = DCB addresses</li> </ul>"},{"location":"reference/file_services/#abends","title":"Abends","text":"<ul> <li>S013 OPEN failed and no SYNAD exit provided</li> </ul>"},{"location":"reference/file_services/#open-vse","title":"OPEN (VSE) - Open file","text":"<p>Open one or more files for UPDATE.</p>"},{"location":"reference/file_services/#usage_1","title":"Usage","text":"<pre><code>         OPEN dtfname\n         OPEN (dtfname1,dtfname2,...)\n</code></pre>"},{"location":"reference/file_services/#registers_1","title":"Registers","text":"<ul> <li>R0 = Flags</li> <li>R1 = DTF addresses</li> </ul>"},{"location":"reference/file_services/#abends_1","title":"Abends","text":"<ul> <li>S013 OPEN failed and no SYNAD exit provided</li> </ul>"},{"location":"reference/file_services/#close","title":"CLOSE - Close file","text":"<p>Close one or more files.</p>"},{"location":"reference/file_services/#usage_2","title":"Usage","text":"<p>Close one file</p> <pre><code>         CLOSE dcbname\n</code></pre> <p>Close multiple files</p> <pre><code>         CLOSE (dcbname1,,dcbname2)\n</code></pre> <p>The same, using register notation</p> <pre><code>         CLOSE ((reg1),,(reg2))\n</code></pre>"},{"location":"reference/file_services/#registers_2","title":"Registers","text":"<ul> <li>R1 = DCB addresses</li> </ul>"},{"location":"reference/file_services/#abends_2","title":"Abends","text":"<ul> <li>S013 CLOSE failed and no SYNAD exit provided</li> </ul>"},{"location":"reference/file_services/#close-vse","title":"CLOSE (VSE) - Close file","text":"<p>Close one or more files.</p>"},{"location":"reference/file_services/#usage_3","title":"Usage","text":"<pre><code>         CLOSE (dtfname1,dtfname2,...)\n</code></pre>"},{"location":"reference/file_services/#registers_3","title":"Registers","text":"<ul> <li>R1 = DTF addresses</li> </ul>"},{"location":"reference/file_services/#abends_3","title":"Abends","text":"<ul> <li>S013 CLOSE failed and no SYNAD exit provided</li> </ul>"},{"location":"reference/file_services/#get","title":"GET - Read sequential record","text":"<p>Read a sequential record</p>"},{"location":"reference/file_services/#usage_4","title":"Usage","text":"<p>Read a record into an I/O area supplied on DCB RECORD=ioarea</p> <pre><code>         GET dcbname\n</code></pre> <p>Read a record into an I/O area</p> <pre><code>         GET dcbname,ioarea\n</code></pre> <p>The same, using register notation</p> <pre><code>         GET (reg)\n         GET (reg1),(reg2)\n</code></pre>"},{"location":"reference/file_services/#registers_4","title":"Registers","text":"<ul> <li>R0 = ioarea</li> <li>R1 = DCB address</li> </ul>"},{"location":"reference/file_services/#put","title":"PUT - Write a sequential record","text":"<p>Write a sequential record</p>"},{"location":"reference/file_services/#usage_5","title":"Usage","text":"<p>Write a record from an I/O area supplied on the DCB RECORD=ioarea</p> <pre><code>         PUT dcbname\n</code></pre> <p>Write a record from an I/O area</p> <pre><code>         PUT dcbname,ioarea\n</code></pre> <p>The same, using register notation</p> <pre><code>         PUT (reg)\n         PUT (reg1),(reg2)\n</code></pre>"},{"location":"reference/file_services/#registers_5","title":"Registers","text":"<ul> <li>R0 = ioarea</li> <li>R1 = DCB address</li> </ul>"},{"location":"reference/file_services/#read","title":"READ - Read block from file","text":"<p>Read a block from a file.</p> <ol> <li>If EODAD or SYNAD result from the READ, they will only be    processed by the CHECK macro.</li> <li>If the decbname parameter is specified in register notation,    no internal DECB is generated. It is the programmer's    responsibility to create and address the 16-byte DECB.</li> </ol>"},{"location":"reference/file_services/#usage_6","title":"Usage","text":"<p>Read a block using an internal DECB, into an I/O area supplied on the DCB RECORD=ioarea</p> <pre><code>         READ decbname,,dcbname\n</code></pre> <p>Read a block using an internal DECB into an I/O area. The I/O area must be at least as large as DCB BLKSIZE</p> <pre><code>         READ decbname,,dcbname,ioarea\n</code></pre> <p>The same, using register notation</p> <pre><code>         READ (reg1),,(reg2)\n         READ (reg1),,(reg2),(reg3)\n</code></pre>"},{"location":"reference/file_services/#registers_6","title":"Registers","text":"<ul> <li>R0 = work register</li> <li>R1 = DECB address</li> <li>R15= DCB address</li> </ul>"},{"location":"reference/file_services/#write","title":"WRITE - Write block to file","text":"<p>Write a block to a file.</p> <ol> <li>If SYNAD results from the WRITE, it will only be processed    by the CHECK macro.</li> <li>If the decbname parameter is specified in register notation,    no internal DECB is generated. It is the programmer's    responsibility to create and address the 16-byte DECB.</li> </ol>"},{"location":"reference/file_services/#usage_7","title":"Usage","text":"<p>Write a block using an internal DECB, from an I/O area supplied on the DCB RECORD=ioarea</p> <pre><code>         WRITE decbname,,dcbname\n</code></pre> <p>Write a block using an internal DECB from an I/O area</p> <pre><code>         WRITE decbname,,dcbname,ioarea\n</code></pre> <p>The same, using register notation</p> <pre><code>         WRITE (reg1),,(reg2)\n         WRITE (reg1),,(reg2),(reg3)\n</code></pre>"},{"location":"reference/file_services/#registers_7","title":"Registers","text":"<ul> <li>R0 = work register</li> <li>R1 = DECB address</li> <li>R15= DCB address</li> </ul>"},{"location":"reference/file_services/#check","title":"CHECK - Process EODAD/SYNAD","text":"<ul> <li>Process EODAD or SYNAD on READ.</li> <li>Process SYNAD on WRITE.</li> </ul>"},{"location":"reference/file_services/#usage_8","title":"Usage","text":"<pre><code>         CHECK decbname\n</code></pre> <p>The same, using register notation</p> <pre><code>         CHECK (reg)\n</code></pre>"},{"location":"reference/file_services/#registers_8","title":"Registers","text":"<ul> <li>R1 = DECB address</li> </ul>"},{"location":"reference/file_services/#abends_4","title":"Abends","text":"<ul> <li>S013 READ/WRITE failed and no SYNAD exit provided</li> </ul>"},{"location":"reference/file_services/#point","title":"POINT - Position file pointer","text":"<p>Position pointer for next READ or WRITE</p> <ol> <li>When register notation is used for rba or rel, the register points to a field     containing the value.</li> <li>rel is a fullword, maximum value 2,147,483,647 (2G - 1).    rel is multiplied by BLKSIZE to get the rba.</li> <li>rba is signed 64-bit value.</li> </ol>"},{"location":"reference/file_services/#usage_9","title":"Usage","text":"<p>Point to a record using relative record number</p> <pre><code>         POINT dcbname,rel\n</code></pre> <p>Point to a record using relative byte address</p> <pre><code>         POINT dcbname,,RBA=rba\n</code></pre> <p>The same, using register notation</p> <pre><code>         POINT (reg1),(reg2)\n         POINT (reg1),,RBA=(reg2)\n</code></pre>"},{"location":"reference/file_services/#registers_9","title":"Registers","text":"<ul> <li>R0 = rel or RBA</li> <li>R1 = DCB address</li> <li>R15= Blocksize</li> </ul>"},{"location":"reference/file_services/#terminology","title":"Terminology","text":"Term Definition dcbname the label on the DCB macro. reg general register, avoid 0, 1, 14 or 15. type INPUT, OUTPUT or UPDATE (default is INPUT). ioarea label of the I/O area for the record to be read/written. decbname internal or external DECB for controlling READ/WRITE. rel relative record number. rba relative byte address."},{"location":"reference/guam_services/","title":"GUAM services","text":"<p>http://www.z390.org/z390_GUAM_GUI_Access_Method_Guide.pdf</p> <p>The z390 GUAM Graphical User Access Method provides support for any  assembler program to interface with a user via a GUI window when the GUAM  option is specified as an ez390 execution option. </p> <p>Info</p> <p>z390 has the following GUAM GUI interface support and limits: </p> <ul> <li>Full support for the MCS console view for WTO and WTOR commands </li> <li>Full support for the TN3270 edit mode form of TGET and TPUT </li> <li>Full support for basic TN3270 data streams including WCC, SBA, SF, IC,  RA, EUA, and PT commands. A cursor is supported using blinking  underline character at the current cursor position. The arrow, backspace,  delete, and tab keys are supported to control the cursor. Entering data into  protected field or alpha into numeric field causes beep and status line error  message. The 3270 screen display can be resized and the font is  automatically adjusted to maximum size that will still allow display of full  screen if possible. </li> <li>Limited support for TN3270 extended data streams with SFE and SA  commands are supported. Color attributes are supported but highlighting  and underlining are not yet supported. </li> <li>Limited support for the GUAM macro graphics commands. (The GUI  WINDOW, VIEW, GRAPH command can be used to display the graph view  but the graphic commands are targeted for future release. </li> </ul>"},{"location":"reference/guam_services/#macro-reference","title":"Macro reference","text":""},{"location":"reference/guam_services/#wto","title":"WTO","text":"<p>Write to operator via GUAM GUI MCS console scrolling log view.</p> <p><pre><code>label    WTO   \u2018msg\u2019\n</code></pre> See WTO in SVC services</p>"},{"location":"reference/guam_services/#wtor","title":"WTOR","text":"<p>Write to operator with reply via GUAM GUI MCS console scrolling log view.</p> <p><pre><code>label    WTOR  \u2018msg\u2019,reply,reply_length,ecb\n</code></pre> See WTOR in SVC services</p>"},{"location":"reference/guam_services/#wait","title":"WAIT","text":"<p>Wait for WTOR reply from GUI interface and post ecb.</p> <pre><code>label    WAIT  ECB=ecb \n</code></pre> <p>See WAIT in SVC services</p>"},{"location":"reference/guam_services/#tget","title":"TGET","text":"<p>Read next line of text from TN3270 interface.</p> <p>The default is EDIT mode and WAIT for input from keyboard.</p> <pre><code>label    TGET  buffer,buffer_length,EDIT,WAIT  \n</code></pre> <p>read TN3270 data stream from TN3270 screen interface. </p> <p>The TN3270 input stream consists of action code, cursor buffer address, and any  modified input fields.</p> <pre><code>label    TGET  buffer,buffer_len,ASIS,WAIT\n</code></pre>"},{"location":"reference/guam_services/#tput","title":"TPUT","text":"<p>Write next line of text to TN3270 24x80 screen view (the default is EDIT mode)</p> <pre><code>label    TPUT  buffer,buffer_length\n</code></pre> <p>write TN3270 data stream to TN3270 screen interface. </p> <p>The write buffer must contain escape followed by valid TN3270 extended  data stream which may contain EBCDIC encoded data and the following commands: </p> <ul> <li>WCC</li> <li>SF</li> <li>SFE</li> <li>SA</li> <li>SBA</li> <li>IC</li> <li>PT </li> </ul> <pre><code>label    TPUT  buffer,buffer_len,FULLSCR\n</code></pre>"},{"location":"reference/guam_services/#tn3270","title":"TN3270","text":"<p>Macro to generate native TN3270 data streams including SBA addresses  using symbolic references for control codes. </p> <p>The following keyboard input keystrokes can be used to generate TN3270  compatible input data codes:</p> key hex alternate keys ENTER 7D PF1 to PF9 F1-F9 PF10 to PF12 7A-7C PF13 to PF21 C1-C9 Ctrl+Alt+F1 to Ctrl+Alt+F9 PF22 to PF24 4A-4C Ctrl+Alt+F10 to Ctrl+Alt+F12 PA1 6C Ctrl+F1 PA2 6E Ctrl+F2 PA3 6B Ctrl+F3 CLEAR 6D Ctrl+C"},{"location":"reference/guam_services/#guam","title":"GUAM","text":"<p>Macro to perform graphics display functions similar to GDDM.</p> <pre><code>         GUAM  WINDOW,TITLE,\u2019text\u2019    set window title \n         GUAM  WINDOW,LOC,x,y         set window location from upper left in pixels \n         GUAM  WINDOW,SIZE,width,height  set window size in pixels \n         GUAM  WINDOW,FONT,size       set window character font size (8-30) \n         GUAM  WINDOW,VIEW,MCS        set scrolling MCS console log view (default) \n         GUAM  WINDOW,VIEW,SCREEN,row,col,color   set text screen view \n         GUAM  WINDOW,VIEW,GRAPH,x,y,color        set graphic display view \n         GUAM  WINDOW,GETVIEW,view    get current view \n         GUAM  SCREEN,READ,buffer,buffer_len,WAIT/NOWAIT      read text \n         GUAM  SCREEN,WRITE,row,col,buffer,buffer_len,color   write text \n         GUAM  SCREEN,FIELD,row,col,length   define field \n         GUAM  SCREEN,CURSOR, type    set cursor type \n         GUAM  SCREEN,CURSOR,row,col  set cursor position \n         GUAM  GRAPH,POINT,x,y,color  draw point \n         GUAM  GRAPH,LINE,x1,y1,x2,y2,color  draw line \n         GUAM  GRAPH,FILL,x1,y1,x2,y2,color  fill area \n         GUAM  GRAPH,TEXT,x,y,\u2019text\u2019,color   draw text \n         GUAM  KEYBOARD,mode,char,WAIT/NOWAIT  read keyboard \n         GUAM  MOUSE,x,y,left,right   read mouse position on graph and buttons \n         GUAM  SOUND,START,wav_file   play wav sound file \n         GUAM  SOUND,STOP\n</code></pre> <p>When the ez390 GUAM option is specified for execution of a z390 assembler  program, a GUAM GUI window is opened in default MCS console view displaying  all WTO and WTOR messages issued by program in a scrolling window. </p> <p>Whenever TPUT, or TGET macros are executed the GUI window switches to TN3290 screen  view display mode. </p> <p>Whenever GUAM macro graphic commands are executed, the  GUI window switches to GRAPH display mode. </p> <p>When in SCREEN or GRAPH view, WTO and WTOR commands can continue to be executed  and displayed one at a time via the status line with command line replies as required. </p> <p>The user can switch between any of the 3 GUAM GUI views manually via view menu selection.  Assembler application programs can set window title, location, size, font, and view  mode at any time using the GUAM macros regardless of display view. </p> <p>Multiple user controlled GUAM GUI windows can be opened by executing different assembler  programs as separate tasks under control of master program using the z390  CMDPROC macro to launch separate program tasks each of which can invoke a  GUAM GUI interface. </p>"},{"location":"reference/guam_services/#demonstrations","title":"Demonstrations","text":"<p>The following GUI demonstration programs are included in the distribution in the <code>guam/demo</code> folder. </p> <ol> <li> <p>DEMOGUI1.MLC \u2013 Issue WTOR, wait for reply via WAIT, display reply  via WTO and repeat loop until END is entered. This program can be run in  any of the following modes: </p> <ul> <li>Windows command line mode \u2013 ASMLG DEMO\\DEMOGUI1 </li> <li>Windows GUI interface \u2013 ASMLG DEMO\\DEMOGUI1 GUI </li> </ul> </li> <li> <p>DEMOGUI2.MLC \u2013 Issue WTOR, execute 3 instruction loop until ECB is  posted, display reply via WTO along with date, time, instruction loop count  and calculated MIP rate for the 3 instruction loop. It is very interesting to  note that on a 3 GHZ Pentium 4 system, this demo runs at about 1.1 MIPS  using command line mode, and about 2.6 MIPS using the GUI mode. This  program can be run in any of the following modes: </p> <ul> <li>Windows command line mode \u2013 ASMLG DEMO\\DEMOGUI1 </li> <li>Windows GUI interface \u2013 ASMLG DEMO\\DEMOGUI1 GUI </li> </ul> </li> <li> <p>DEMOGUI3.MLC \u2013 issue TPUT and TGET with WAIT option in loop until  END is entered. This demo uses default EDIT mode of TPUT and TGET to  scroll the 24 lines of TN3270 screen view with wrap around after status line  prompt for input each time last line is written. </p> </li> <li> <p>DEMOGUI4.MLC \u2013 issue TN3270 data stream TPUT and TGET with  WAIT option in loop until END is entered. This demo writes text to fields at  specified screen buffer addresses, reads a field at specified address, displays  the input field at another address, and repeats the process waiting for screen  input until PF3 or END is entered. </p> </li> <li> <p>DEMOGUI5.MLC \u2013 This demo used GUI graphic commands to draw text  and graphics and read keyboard and mouse. (Note this program brings up  graphic display view but the graphics commands are not implemented yet. See RPI 137 </p> </li> <li> <p>DEMOGUI6.MLC \u2013 TN3270 application program to support entering name,  address, and numeric zip fields, displaying the current values, PF1 help  screen, display hex value of any unused AID keys entered, and PF3 for exit. </p> <p>Info</p> <p>There is an EXEC CICS version of this same demo that runs via local or remote GUAM  client TN3270 terminal connected to z390 CICS transaction manager.  The demo supports PF1 for help and PF3 for exit. It sounds alarm and displays  errors on status line. It also displays the hex AID code for any other  PF keys entered. </p> </li> <li> <p>DEMOAPL1.MLC \u2013 show use of APL graphics via X\u201908\u2019 insert APL  character command and also demo GUAM support of TN3270 color. </p> </li> </ol>"},{"location":"reference/guam_services/#reference","title":"Reference","text":"<p>For technical reference manual see IBM 3270 Data Stream Programmers Reference GA23-0059-07</p> <p>For tutorial on TN3270 extended data stream programming with examples  see http://www.tommysprinkle.com/mvs/P3270/start.htm.</p>"},{"location":"reference/program_services/","title":"Program Services","text":""},{"location":"reference/program_services/#save-area-and-linkage-conventions","title":"Save area and linkage conventions","text":"<p>Standard save area is defined as follows:</p> <pre><code>         DS   0CL72\n         DS   F         +0 reserved\n         DS   F         +4 address of calling savearea\n         DS   F         +8 address of called savearea\n         DS   15F       +12 callers GR14 through GR12\n</code></pre> <p>There are normally two save areas involved when a program is called by another  program:</p> <ul> <li>The save area for the calling program -- the caller</li> <li>The save area for the called program -- the callee</li> </ul> <p>Upon entry to the called program, GR13 contains the address of the caller's save area. </p> <p>The callee:</p> <ol> <li>Saves GR14 to GR12 (registers at entry to the called program) at +12 of the     caller's save area</li> <li>Obtains its own save area (the called program's save area)</li> <li>Stores the address of its save area at +8 of the caller's save area (caller's     forward chain)</li> <li>Stores the address of the caller's save area (GR13 at entry) at +4 of its     (the called program's) save area (called program's back chain)</li> <li>Loads GR13 with the address of its (the called program's) save area</li> </ol> <p>At this point the called program begins its processing. </p> <p>If it calls another program steps 1--5 are repeated; this time the \"caller\" is  the current program and there is a new called program.</p> <p>When the called program finishes processing, it returns to the caller as follows:</p> <ol> <li>The called program uses its back chain (+4 in its save area) to restore GR13     to caller's save area</li> <li>The called program restores GR14 to GR12 from that save area (restores     registers at entry); there are cases when GR15, GR0, and/or GR1 are not     restored -- depends on the program. </li> <li>The called program returns to the caller by doing an unconditional branch to     the address in GR14.</li> </ol> <p>This calling convention is explained in detail in the  IBM z/OS Version 2 Release 4 MVS Programming: Assembler Services Guide (SA23-1368-40). Refer to Chapter 2 - Linkage conventions.</p> <p>GR15 by convention may contain a return code upon exit.</p>"},{"location":"reference/program_services/#program-parameters","title":"Program parameters","text":"<p>There are two methods of passing parameters to a program.</p> <ul> <li>At assembly time using SYSPARM</li> <li>At run time using PARM</li> </ul> <p>In either case enclose the entire parm to be passed in double quotes.</p> <p>The double quotes are required to handle commas and spaces that otherwise cause  command processors to split the parm.</p> <p>The double quotes are not required if there are no commas or spaces in the text. </p>"},{"location":"reference/program_services/#assembly-time-sysparm","title":"Assembly time - SYSPARM","text":"<p>If single quotes are included in text, they are passed on to &amp;SYSPARM.</p> <p>There is a limit of 32767 bytes for the text. </p> <p>SYSPARM will be transferred to the macro variable &amp;SYSPARM.</p> <p><pre><code>mz390 ... \"SYSPARM(HELLO WORLD)\"\n</code></pre> Access the text by coding:</p> <pre><code>label    DC    C'&amp;SYSPARM'\n...... will translate to \nlabel    DC    C'HELLO WORLD'\n</code></pre>"},{"location":"reference/program_services/#run-time-parm","title":"Run time - PARM","text":"<p>PARM can be accessed via GR1 at program entry.</p> <p>GR1 will contain an address that points to a fullword in storage which points to  a storage location with the parm length in a halfword followed by the parm value.</p> <pre><code>ez390 ... \"PARM(HELLO WORLD)\"\n</code></pre> <p>The fullword pointed to by GR1 points to:</p> <pre><code>         DC   H'11',C'HELLO WORLD'`\n</code></pre> <p>If single quotes are included around text in PARM they are removed.</p> <pre><code>ez390 ... \"PARM('HELLO WORLD')\" \n</code></pre> <p>Will also result in the fullword pointed to by GR1 pointing to:</p> <pre><code>         DC   H'11',C'HELLO WORLD'`\n</code></pre>"},{"location":"reference/program_services/#usage","title":"Usage","text":"<p>The program is run with the parameter passed</p> <pre><code>ez390 myprog \"PARM('HELLO WORLD')\"\n</code></pre> <p>The program code:</p> <pre><code>         L     R2,0(,R1)       R2=address of parm length(HW)+value\n         LH    R3,0(,R2)       R3=length of parm value\n         BCTR  R3,0            Subtract 1 from R3 - length for use in machine code \n         EX    R3,MOVE         Execute MOVE instruction using length code from R3\n......\nMOVE     MVC   PARM(0),2(R2)   Move instruction used by EX\nPARM     DC    CL80' '         Work area for parm value\n</code></pre> <ul> <li>GR1 is populated by ez390 with the parm address pointer.</li> <li>GR2 is loaded with the address of the parm length and address - fullword    pointed to by GR1.</li> <li>GR3 is loaded with the parm length - halfword value pointed to by GR2.</li> <li>GR3 would contain decimal 11 which is the length of the parm \"HELLO WORLD\".</li> <li>GR3 is decremented by 1, making it a length code.</li> <li>The actual parm value of \"HELLO WORLD\" begins 2 bytes past the address in GR2.</li> <li>The <code>EX</code> instruction executes the instruction at label MOVE which will move    the parm to the storage at label PARM using the length code in R3.</li> </ul>"},{"location":"reference/program_services/#macro-reference","title":"Macro reference","text":""},{"location":"reference/program_services/#svc-functions","title":"SVC functions","text":"<p>The following is a list of the z390 SVC services that support the macros.</p> DEC HEX Service 3 03 EXIT 3 03 EXIT (VSE) 6 06 LINK 7 07 XCTL 8 08 LOAD 8 08 CDLOAD (VSE) 9 09 DELETE 9 09 CDDELETE (VSE) 13 0D ABEND"},{"location":"reference/program_services/#bldl","title":"BLDL - Build a directory list","text":"<pre><code>name     BLDL  0,list\n</code></pre> <p>Build a directory list for use with LOAD, DELETE, LINK and XCTL. </p> <p>After a BLDL, an individual table entry may be used in these macros via the DE=  parameter.</p>"},{"location":"reference/program_services/#parameters","title":"Parameters","text":""},{"location":"reference/program_services/#list","title":"list","text":"<p>May be a label or (reg) and points to a storage area in the following format:</p> format description H'count' The number of entries in the table. <p>The following data structure represents an entry.</p> Data Storage description H'entry length' The length of the following entry CL8'name' The name of the program XL2'00' TT (unused) X'00' R (1=found) X'00' K (unused) X'00' Z (1=program found in storage) X'00' C (unused) <ul> <li>Entry length must be a minimum of 12, which would omit the Z and C fields.</li> <li>Names must be in alphameric order, a suffix of .390 is assumed.</li> </ul>"},{"location":"reference/program_services/#register-usage","title":"Register Usage","text":"<ul> <li>R1 = BLDL list</li> <li>R15= Return code</li> </ul>"},{"location":"reference/program_services/#return_1","title":"Return","text":"<p>Return code is passed in GR15:</p> <ul> <li>0 - All programs found</li> <li>4 - Some programs not found</li> <li>8 - Invalid count or invalid entry length</li> </ul>"},{"location":"reference/program_services/#usage_1","title":"Usage","text":"<pre><code>         BLDL  0,LIST1\n         LOAD  DE=BLDL2\n......\nLIST1    DC    H'2'\nBLDL1    DC    H'14',CL8'MYPROG1',XL6'00'\nBLDL2    DC    H'14',CL8'MYPROG2',XL6'00'\n</code></pre> <p>Note</p> <p>In z390, there is no performance benefit in issuing a BLDL before a LOAD,  DELETE, LINK or XCTL.</p>"},{"location":"reference/program_services/#load","title":"LOAD - Load a program or module","text":"<p><pre><code>name     LOAD  EP=,EPLOC=,DDNAME=,DSNAME=,DE=,LOADPT=\n</code></pre> Load a program or module.</p>"},{"location":"reference/program_services/#parameters_1","title":"Parameters","text":"<p>See Common Program load parameters.</p>"},{"location":"reference/program_services/#register-usage_1","title":"Register usage","text":"<ul> <li>R0 = Pointer to program name or BLDL entry, returned address</li> <li>R1 = Returned length</li> <li>R15= Path pointer and return code</li> </ul>"},{"location":"reference/program_services/#return_2","title":"Return","text":"<p>GR0 returns the address of the loaded module.</p> <p>If LOADPT is used, then GR0 may be stored at a label, or the address contained  in a general register.</p> <p>GR1 returns the length as follows:</p> <ol> <li>For a program, the number of doublewords (8-byte units).</li> <li>For other modules, the length rounded up to the next doubleword boundary.</li> </ol> <p>GR15 has a return code:</p> <ul> <li>0 - Load ok</li> <li>4 - Module not found</li> </ul>"},{"location":"reference/program_services/#abends","title":"Abends","text":"<ul> <li>S80A - Out of memory</li> </ul>"},{"location":"reference/program_services/#cdload","title":"CDLOAD - Load a program or module (VSE)","text":"<pre><code>name     CDLOAD phasename  Maps to LOAD EP=phasename\nname     CDLOAD (reg)      Maps to LOAD EPLOC=(reg)\n</code></pre> <p>Load a program or module (VSE only).</p>"},{"location":"reference/program_services/#parameters_2","title":"Parameters","text":"<p>See Common Program load parameters.</p>"},{"location":"reference/program_services/#register-usage_2","title":"Register Usage","text":"<ul> <li>R0 = Pointer to program name, returned address</li> <li>R1 = Returned address</li> <li>R15= Return code</li> </ul>"},{"location":"reference/program_services/#return_3","title":"Return","text":"<p>GR0 and GR1 return the address of the loaded module. Length is not returned.</p> <p>GR15 has a return code:</p> <ul> <li>0 - Load ok</li> <li>4 - Module not found</li> </ul>"},{"location":"reference/program_services/#abends_1","title":"Abends","text":"<ul> <li>S80A - Out of memory</li> </ul>"},{"location":"reference/program_services/#delete","title":"DELETE - Delete a program or module","text":"<pre><code>name     DELETE EP=,EPLOC=,DDNAME=,DSNAME=,DE=\n</code></pre> <p>Delete a program or module.</p>"},{"location":"reference/program_services/#parameters_3","title":"Parameters","text":"<p>See Common Program load parameters.</p>"},{"location":"reference/program_services/#register-usage_3","title":"Register Usage","text":"<ul> <li>R0 = Pointer to program name or BLDL entry</li> <li>R15= Path pointer</li> </ul>"},{"location":"reference/program_services/#return_4","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - Load ok</li> <li>4 - Module not found</li> </ul>"},{"location":"reference/program_services/#cddelete","title":"CDDELETE - Delete a program or module (VSE)","text":"<pre><code>name     CDDELETE phasename       Maps to DELETE EP=phasename\nname     CDDELETE (reg)           Maps to DELETE EPLOC=(reg)\n</code></pre> <p>Delete a program or module. (VSE only)</p>"},{"location":"reference/program_services/#parameters_4","title":"Parameters","text":"<p>See Common Program load parameters.</p>"},{"location":"reference/program_services/#register-usage_4","title":"Register Usage","text":"<ul> <li>R0 = Pointer to program name</li> </ul>"},{"location":"reference/program_services/#return_5","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - Load ok</li> <li>4 - Module not found</li> </ul>"},{"location":"reference/program_services/#link","title":"LINK - Load and pass control","text":"<pre><code>name     LINK  EP=,EPLOC=,DDNAME=,DSNAME=,DE=,PARAM=,VL=\n</code></pre> <p>Load and pass control to another program. Return to 'linker'.</p>"},{"location":"reference/program_services/#parameters_5","title":"Parameters","text":"<p>See Common Program load parameters.</p>"},{"location":"reference/program_services/#register-usage_5","title":"Register Usage","text":"<ul> <li>R0 = Pointer to program name or BLDL entry</li> <li>R1 = Parameter list</li> <li>R15= Path pointer</li> </ul>"},{"location":"reference/program_services/#abends_2","title":"Abends","text":"<ul> <li>S806 - Module not found</li> <li>S80A - Out of memory</li> </ul>"},{"location":"reference/program_services/#xctl","title":"XCTL - Load and pass control","text":"<pre><code>name     XCTL  (fromreg,toreg),EP=,EPLOC=,DDNAME=,DSNAME=,DE=,PARAM=,VL=\n</code></pre> <p>Load and pass control to another program. Return to last 'linker' or terminate.</p>"},{"location":"reference/program_services/#parameters_6","title":"Parameters","text":"<p>See Common Program load parameters.</p> <p>(fromreg,toreg)</p> <p>Optional - Restores the specified register range from the savearea pointed to by GR13. The registers are restored from their conventional positions. The range must not specify or include the following general registers: 0, 1, 13, 15</p>"},{"location":"reference/program_services/#register-usage_6","title":"Register Usage","text":"<ul> <li>R0 = Pointer to program name or BLDL entry</li> <li>R1 = Parameter list</li> <li>R15= Path pointer</li> <li>All registers in the range fromreg-toreg</li> </ul>"},{"location":"reference/program_services/#abends_3","title":"Abends","text":"<ul> <li>S806 - Module not found</li> <li>S80A - Out of memory</li> </ul>"},{"location":"reference/program_services/#restore","title":"RESTORE - Restores registers","text":"<pre><code>name     RESTORE (fromreg,toreg)\n</code></pre> <p>Restores the specified register range from the save area pointed to by GR13. The registers are restored from their conventional positions.</p>"},{"location":"reference/program_services/#register-usage_7","title":"Register Usage","text":"<p>All registers in the range fromreg-toreg</p>"},{"location":"reference/program_services/#snap","title":"SNAP - Produces a component dump","text":"<pre><code>name     SNAP  STORAGE=(from,to),PDATA=(options, ... ),ID=,TEXT=\n</code></pre> <p>Produces a component dump on the z390 console without terminating the program.</p>"},{"location":"reference/program_services/#parameters_7","title":"Parameters","text":"<p>STORAGE=(from,to) or STORAGE=((reg1),(reg2))</p> <p>Optional parameter to dump some storage.</p> <ul> <li>Either 'from' or 'to' can be labels or register pointers.</li> <li>The first byte displayed is 'from' and the last is 'to'-1.</li> </ul> <p>PDATA=(options ... )</p> <p>Optional parameter to display registers and/or control blocks. Default is <code>PDATA=ALL</code>.</p> option description ALL Display all registers, control blocks and storage.  When the STORAGE parameter is present only that area of storage is displayed. REGS Display all general and floating point registers. GPR Display general registers. FPR Display floating point registers. CDE Display information related to loaded programs or modules. DCB Display information related to opened and closed files. <p>ID=nnnnn or ID=(reg)</p> <p>Numeric identifier, either numeric value or general register containing the  identifier.</p> <p>Specify values 0-32767, higher values are negative.</p> <p>TEXT=string or TEXT='a string' or TEXT=(reg)</p> <p>Character identifier.</p> <p>Specify either a string without blanks, a string constant enclosed by single  quotes or a general register pointing to a string terminated by X'00'. The string in all cases is limited to 60 bytes.</p>"},{"location":"reference/program_services/#register-usage_8","title":"Register Usage","text":"<ul> <li>R0 = ID and flags</li> <li>R1 = TEXT pointer</li> <li>R14= STORAGE from</li> <li>R15= STORAGE to</li> </ul>"},{"location":"reference/program_services/#abend","title":"ABEND - Terminate program","text":"<pre><code>name ABEND id,DUMP\n</code></pre> <p>Terminate the program.</p>"},{"location":"reference/program_services/#parameters_8","title":"Parameters","text":"<p>id</p> <ul> <li>Optional numeric identifier.</li> <li>Values from 0 to 4095.</li> <li>Displayed as abend <code>Unnnn</code>.</li> </ul> <p>DUMP</p> <p>A dump is always produced, overrides the NODUMP parm on ez390.</p> <p>All storage areas are dumped.</p>"},{"location":"reference/program_services/#register-usage_9","title":"Register Usage","text":"<ul> <li>R1 = id and flags</li> </ul>"},{"location":"reference/program_services/#estae","title":"ESTAE, ESTAEX - Define Abend exit processing","text":"<p>Info</p> <p>ESTAEX is provided for compatibility, only ESTAE is described here.</p> <pre><code>name     ESTAE  label,type,PARAM=\nname     ESTAE  (reg),type,PARAM=\nname     ESTAE  0\n</code></pre> <p>When a program abends, control is given to the label or address specified. </p>"},{"location":"reference/program_services/#parameters_9","title":"Parameters","text":"<p>0</p> <p>ESTAE 0 is used to cancel any previously established ESTAE routine.</p> <p>type</p> <p>Type is optional with default value of CT</p> <ul> <li>CT - adds a new exit</li> <li>OV - replaces an existing exit</li> </ul> <p>PARAM</p> <p>PARAM=label is optional PARAM=(reg) is optional</p> <p>When specified, the address of the label or the contents of the register are  made available in the ESTAE control block at ESTAPARM.</p>"},{"location":"reference/program_services/#exit-invocation","title":"Exit invocation","text":"<ul> <li>GR15 will contain the entry point, it is recommended that GR15 not be used as    the base for the ESTAE routine.</li> <li>GR1 contains the address of the SDWA control block.</li> <li>The DSECT for the SDWA is generated by macro IHASDWA.</li> <li>This area may also be addressed by using the ZCVT.</li> </ul> <p>After processing the abend, several options are available:</p> <ol> <li> <p>Cancel the exit and retry the failing instruction. Issue an ESTAE 0.     Load GR0 with the address of the failing instruction, which is in the      rightmost four bytes of the SDWA field SDWAEC1 and ensure that GR15=4, then      return via BR R14. This will cancel the ESTAE and re-execute the instruction      that caused the abend. If the instruction abends again, it will terminate      the program. </p> <p>Sample code snippet:</p> <pre><code>         USING SDWA,R1\n         L     R0,SDWAEC1+4\n         LA    R15,4\n         BR    R14\n</code></pre> </li> <li> <p>Enter a retry or cleanup routine.     Place the retry address in GR0 and ensure GR15=4.     If ESTAE 0 has not been issued, then the ESTAE routine     remains active.</p> </li> <li>Percolate through other recovery (ESTAE) routines.     The current ESTAE routine is automatically cancelled.     Set GR15=0 and return via BR R14.     This will invoke previous recovery routines or abend the     program.     When percolate happens all LINK stack entries at a lower level than the      latest ESTAE will be purged.</li> </ol> <p>Note</p> <ul> <li>In the z390 environment the abend code 0C5 may be caused by an internal    error as well as a genuine addressing exception.</li> <li>If an abend occurs after the ESTAE exit is invoked and before ESTAE 0 or    BR R14 are issued, then the program will be terminated.</li> </ul>"},{"location":"reference/program_services/#register-usage_10","title":"Register Usage","text":"<ul> <li>R0 = exit address and flags</li> <li>R1 = parameter list</li> <li>R15= return code</li> </ul>"},{"location":"reference/program_services/#return_6","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - ESTAE ok</li> </ul>"},{"location":"reference/program_services/#abends_4","title":"Abends","text":"<ul> <li>SFFF - ESTAE stack exceeded</li> </ul>"},{"location":"reference/program_services/#espie","title":"ESPIE - Interrupt exit processing","text":"<pre><code>name     ESPIE  SET,addr,list,PARAM=\nname     ESPIE  SET,(reg),list,PARAM=\nname     ESPIE  RESET\n</code></pre> <p>When a program interruption occurs eg. fixed point overflow, control is given to  the label or address specified. </p>"},{"location":"reference/program_services/#parameters_10","title":"Parameters","text":"<p>RESET </p> <p>Will reset any previous ESPIE settings.</p> <p>list</p> <p>Set interupts that should be processed.</p> <p>If any of the codes 8, 10, 13 or 14 are specified, then the appropriate bit is set on in the PSW using the SPM instruction.</p> <p>The following interruption codes can appear in the list.</p> <ul> <li>1 - operation</li> <li>2 - privilege</li> <li>3 - execute</li> <li>4 - protection</li> <li>5 - addressing</li> <li>6 - specification</li> <li>7 - data exception</li> <li>8 - fixed point overflow (SPM mask bit X'8')</li> <li>9 - fixed point divide</li> <li>10 - decimal overflow (SPM mask bit X'4')</li> <li>11 - decimal divide</li> <li>12 - HFP exponent overflow</li> <li>13 - HFP exponent underflow (SPM mask bit X'2')</li> <li>14 - HFP significance (SPM mask bit X'1')</li> <li>15 - HFP divide</li> </ul> <pre><code>         ESPIE SET,label,8              Single code\n         ESPIE SET,label,(1,4,6)        Multiple codes\n         ESPIE SET,label,((2,6))        Range of codes: 2 through 6\n         ESPIE SET,label,(3,5,(7,9),14) Mixed codes: 3,5,7,8,9,14\n</code></pre> <p>PARAM (optional)</p> <pre><code>PARAM=label\nPARAM=(reg)\n</code></pre> <p>When specified the address of the label or the contents of the register are made  available in the ESPIE control block.</p> <p>When the exit is invoked, GR1 contains the address of the EPIE control block.  The macro IHAEPIE generates the DSECT for the EPIE.</p> <p>The EPIE control block is located in the ZCVT and may also be addressed by the  ZCVT and EPIED macros.</p> <p>Note</p> <p>In the z390 environment, interruption code 5 may be caused by an internal error as well as a genuine addressing exception.</p>"},{"location":"reference/program_services/#register-usage_11","title":"Register Usage","text":"<ul> <li>R0 = program mask</li> <li>R1 = exit address</li> <li>R15= parameter list</li> </ul>"},{"location":"reference/program_services/#subentry","title":"SUBENTRY - Program entry","text":"<pre><code>name     SUBENTRY CSECT=,BASES=,RENT=,RWA=,RWALNG=,STACK=,PSTACK=,PCHECK=\n</code></pre> <p>Provides a standard entry for programs.</p>"},{"location":"reference/program_services/#parameters_11","title":"Parameters","text":"<p>name (optional)</p> <p>Although name is optional, care needs to be taken if it is omitted.  A CSECT or sub-program should be named.</p> <p>CSECT=</p> <p>This is useful for setting up sub-programs within the main program that are  invoked by the CALL macro.</p> <ul> <li>CSECT=YES (default) -  Generates: name CSECT Standard entry.</li> <li>CSECT=NO - Generates: name DS 0D</li> </ul> <p>BASES=</p> <p>Override and extend the base registers for this program. Default BASES=(13)</p> <p>RENT</p> <p>Defines a re-entrant program.</p> <p>RENT=NO (default)</p> <p>A standard savearea is built, and GR13 is set as the default base register. This also serves as the pointer to the program's savearea to facilitate further linkage.</p> <p>The default base register GR13 may be overridden by the BASES= parameter (qv).</p> <p>It is recommended that the first register specified is GR13, if it isn't then a program is generated with non-standard linkage and may cause problems.</p> <p>RENT=YES</p> <p>The GETMAINed area described below is defined in the SUBENTRY macro.</p> <p>BASES= must be specified and the first register must not be GR13.</p> <p>Storage is GETMAINed and GR13 is set to the savearea within this storage. </p> <p>The STACK= parameter can generate multiple saveareas.</p> <p>The first register specified must NOT be 13.</p> <p>Each additional register generates the code and USING at the standard 4K intervals. eg. BASES=(13,7,8) will cover 12K of code.</p> <p>STACK=n</p> <p>Requires RENT=YES, default 0.</p> <p>Generates an addition to the GETMAINed area acquired allowing for multiple  saveareas, each of these may have an additional read-only work area defined  by RWALNG.</p> <p>RWA=dsectname   (requires RENT=YES)</p> <p>RWA= defines the DSECT associated with this work area.</p> <p>RWALNG=n        (requires RENT=YES, default 0)</p> <p>RWALNG defines the length of an additional work area to each savearea defined by STACK=.</p> <p>PSAVE</p> <p>Causes extra instructions to save and restore GR14 and GR15 registers.</p> <ul> <li>PSAVE=YES (default) - Save and restore GR14 and GR15</li> <li>PSAVE=No - No save performed</li> </ul> <p>PSTACK=reg (requires RENT=YES, default=0)</p> <p>If PSTACK=0, then the user area address of each stack entry is stored at offset +80.</p> <p>Otherwise the user area address is not stored at offset +80, but loaded into the  register specified.</p> <p>PCHECK (requires RENT=YES, default=YES)</p> <ul> <li>PCHECK=YES clears the stack area and sets the senior bit of the front and end    pointers to 1.</li> </ul>"},{"location":"reference/program_services/#register-usage_12","title":"Register Usage","text":"<ul> <li>R0,1,2,13,14,15 have multiple uses</li> </ul>"},{"location":"reference/program_services/#subexit","title":"SUBEXIT - Program exit","text":"<pre><code>name     SUBEXIT RC=returncode\nname     SUBEXIT RC=(reg)\n</code></pre> <p>Provides a standard exit for programs. If SUBENTRY used the parameter RENT=YES then the whole stack area will be  FREEMAINed before GR15 is set.</p>"},{"location":"reference/program_services/#parameters_12","title":"Parameters","text":"<p>name (optional)</p> <p>RC will return the value in GR15, zero is the default. </p>"},{"location":"reference/program_services/#register-usage_13","title":"Register Usage","text":"<p>All registers may be affected</p>"},{"location":"reference/program_services/#perform","title":"PERFORM or PM - Branch to local procedure","text":"<pre><code>name     PERFORM procedure\nname     PM    procedure\n</code></pre> <p>Generate a branch to a local procedure with base addressability.</p> <p>PERFORM and PM are identical macros.</p> <p>Uses MVC and B if SUBENTRY RENT=NO or push/pop stack if RENT=YES.</p>"},{"location":"reference/program_services/#register-usage_14","title":"Register Usage","text":"<ul> <li>R14=Return address</li> <li>R15=Linkage register</li> </ul>"},{"location":"reference/program_services/#pentry","title":"PENTRY - Define local procedure","text":"<pre><code>name     PENTRY\n</code></pre> <p>Define local procedure using name.</p> <p>Generates an entry-point for a local procedure preceded with a branch instruction  if SUBENTRY RENT=NO.</p>"},{"location":"reference/program_services/#pexit","title":"PEXIT - Exit local procedure","text":"<pre><code>name     PEXIT\n</code></pre> <p>Branch to last caller of local procedure.</p> <p>Generate branch to last PENTRY name address - 4. If SUBENTRY RENT=NO or generate decrement stack pointer, load, and branch if  RENT=YES.</p>"},{"location":"reference/program_services/#register-usage_15","title":"Register Usage","text":"<ul> <li>R14=Stack address</li> <li>R15=Saved linkage register</li> </ul>"},{"location":"reference/program_services/#exit","title":"EXIT - Return to last caller","text":"<pre><code>name     EXIT\n</code></pre> <p>Returns immediately to the last caller.</p> <ul> <li>No registers are restored.</li> <li>Use of SUBEXIT is preferred.</li> </ul>"},{"location":"reference/program_services/#register-usage_16","title":"Register Usage","text":"<p>No registers affected</p>"},{"location":"reference/program_services/#eoj","title":"EOJ (VSE only)","text":"<pre><code>name     EOJ  RC=returncode\nname     EOJ  RC=(reg)\n</code></pre> <p>Returns immediately to the last caller.</p>"},{"location":"reference/program_services/#parameters_13","title":"Parameters","text":"<p>name is optional. RC will return the value in GR15, zero is the default.</p>"},{"location":"reference/program_services/#register-usage_17","title":"Register Usage","text":"<ul> <li>R15= Return code</li> </ul>"},{"location":"reference/program_services/#call-list","title":"CALL (list form) - Internal/external subroutine call","text":"<pre><code>name     CALL  ,(parm1,parm2,...),VL,MF=L\n</code></pre> <p>Generates a parameter list for use with the execute form of CALL. <code>name DC A(parm1,parm2...)</code></p>"},{"location":"reference/program_services/#parameters_14","title":"Parameters","text":"<p>(parm1,parm2,...)</p> <p>The parameters can be anything that is permitted in an A-type constant.  Note that register forms like (R5) are not  interpreted as general registers,  but as constants.</p> <p>VL (optional)</p> <p>If the called program can accept a variable parameter list, then VL will turn on  the senior bit (bit 0) of the last parameter.</p>"},{"location":"reference/program_services/#call-exec","title":"CALL (execute form) - Internal/external subroutine call","text":"<pre><code>name     CALL  routine,(parm1,parm2,...),VL,LINKINST=,MF=(E,parms)\nname     CALL  (reg),(parm1,parm2,...),VL,MF=(E,parms)\n</code></pre> <p>Provides a standard internal or external subroutine call.</p>"},{"location":"reference/program_services/#parameters_15","title":"Parameters","text":"<p>Parameters are addressed by GR1 and linkage by GR14 routine. If a label, it can be internal (resolved at assembly time) or external  (loaded and resolved by the linkage editor). If the routine is in register notation, it can be internal or separately loaded.</p> <p>(parm1,parm2,...)</p> <p>Modify a fixed or variable parameter list to be accessed by the called program. The parameter list must have initially been defined using the list form of the CALL.  The parameters specified here will overlay that parameter list. </p> <p>It is important that the number of parameters specified here does not exceed  those specified in the list form of the CALL.</p> <p>The parameters can be anything that is permitted in an A-type constant.  Any parameters bounded by parentheses, eg. (R5) are  assumed to be registers or  register equates.  The content of each register (fullword only) is stored at the parameter location.</p> <p>VL (optional)</p> <p>If the called program can accept a variable parameter list, then VL will turn on  the senior bit (bit 0) of the last parameter. </p> <p>Note</p> <p>This is the last parameter in the modified parameter list.</p> <p>LINKINST= (optional)</p> <p>Determines the calling instruction.</p> <p>Choose BALR (default) or BASR.</p> <p>MF=(E,label) or  MF=(E,(reg))</p> <p>The label or register points to a parameter list previously defined with the  list form of the CALL.</p>"},{"location":"reference/program_services/#usage_2","title":"Usage","text":"<p>Call subroutine MYSUBR, replace the two parameters and mark the last parameter.</p> <pre><code>MYCALL   CALL  MYSUBR,(8,MYDATA),VL,MF=(E,PARMS)\n......\nPARMS    CALL  ,(7,OLDDATA),VL,MF=L\n</code></pre>"},{"location":"reference/program_services/#call-std","title":"CALL (standard form) - Internal/external subroutine call","text":"<pre><code>name     CALL  routine,(parm1,parm2,...),VL,LINKINST=,MF=I\nname     CALL  (reg),(parm1,parm2,...),VL,LINKINST=,MF=I\n</code></pre> <p>Provides a standard internal or external subroutine call.</p>"},{"location":"reference/program_services/#parameters_16","title":"Parameters","text":"<p>Parameters are addressed by GR1 and linkage by GR14 routine.</p> <p>If a label, it can be internal (resolved at assembly time) or external (loaded  and resolved by the linkage editor).</p> <p>If the routine is in register notation, it can be internal or separately loaded.</p> <p>(parm1,parm2,...) (optional)</p> <p>Pass a fixed or variable parameter list to the called program. The parameters can be anything that is permitted in an A-type constant.  Any parameters bounded by parentheses, eg. (R5) are assumed to be registers or  register equates.  The content of each register (fullword only) is stored at the parameter location.</p> <p>VL (optional)</p> <p>If the called program can accept a variable parameter list, then VL will turn on  the senior bit (bit 0) of the last parameter.</p> <p>LINKINST= (optional)</p> <p>Determines the calling instruction. Choose BALR (default) or BASR.</p>"},{"location":"reference/program_services/#usage_3","title":"Usage","text":"<p>Call subroutine MYSUBR, pass two parameters and mark the last parameter.</p> <pre><code>MYCALL   CALL  MYSUBR,(8,MYDATA),VL\n</code></pre>"},{"location":"reference/program_services/#register-usage_18","title":"Register Usage","text":"<ul> <li>R0 = indirect parameter list</li> <li>R1 = parameter list</li> <li>R14= linkage</li> <li>R15= program location</li> </ul>"},{"location":"reference/program_services/#save","title":"SAVE - Save registers","text":"<pre><code>name     SAVE  (fromreg,toreg)\n</code></pre> <p>Saves the specified register range in the save area pointed to by GR13.  The registers are saved in their conventional positions.</p>"},{"location":"reference/program_services/#return","title":"RETURN - Restore registers","text":"<pre><code>name    RETURN (fromreg,toreg),flag,RC=\n</code></pre> <p>Restores the specified register range from the save area pointed to by GR13. The registers are restored from their conventional positions.</p> <p>Return is by the restored GR14.</p>"},{"location":"reference/program_services/#parameters_17","title":"Parameters","text":"<p>flag (optional)</p> <p><code>T</code> specifies that the byte at savearea+15 has the junior bit (bit 7)  turned on to indicate a return to a called program. </p> <p>This bit (rightmost bit of saved GR14) is set after GR14 has been loaded with  the return address.</p> <p>RC=nn or RC=(reg)</p> <p>If RC is omitted, GR15 is assumed to contain the return code.</p> <p>GR15 is loaded with this return code before returning via GR14. RC may have a numeric value or the value may be in GRreg.</p>"},{"location":"reference/program_services/#register-usage_19","title":"Register Usage","text":"<ul> <li>R15= Return code</li> <li>All registers in the range fromreg-toreg</li> </ul>"},{"location":"reference/program_services/#usage_4","title":"Usage","text":"<pre><code>MYRET    RETURN (14,12),T,RC=12\n</code></pre> <p>Restore registers 14 through 12. After the register restore, flag the savearea  to indicate return to caller and set return code to 12.</p>"},{"location":"reference/program_services/#psad","title":"PSAD - PSA structure","text":"<p>Provides a DSECT for the limited fields available in the first 8K of memory  (PSA). The CVT may be addressed from here.</p>"},{"location":"reference/program_services/#zcvt","title":"ZCVTD - ZCVT structure","text":"<p>Provides a DSECT for the limited fields available in the ZCVT. This follows the  PSA and may be addressed as follows:</p> <pre><code>         L     reg,ZCVT\n         USING IHAZCVT,reg\n......\n         ZCVTD\n</code></pre>"},{"location":"reference/program_services/#cvt","title":"CVTD - CVT structure","text":"<p>Provides a DSECT for the limited fields available in the Communications Vector  Table. This may be addressed as follows:</p> <pre><code>         L     reg,X'10'\n         USING IHACVT,reg\n......\n         CVTD\n</code></pre>"},{"location":"reference/program_services/#equregs","title":"EQUREGS - Register equates","text":"<pre><code>         EQUREGS REGS=option,TYPE=option\n</code></pre> <p>Generates standard equates for the general or floating point registers.</p> <p>No parameters passed: <pre><code>         EQUREGS    (defaults to REGS=GPR,TYPE=DEC)\nR0       EQU   0\n......\nR15      EQU   15\n</code></pre> TYPE=HEX: <pre><code>EQUREGS  TYPE=HEX\nR0       EQU   0\n......\nRF       EQU   15\n</code></pre></p> <p>REGS=FPR: <pre><code>EQUREGS  REGS=FPR\nF0       EQU   0\n......\nF15      EQU   15\n</code></pre></p> <p>REGS=FPR,TYPE=HEX <pre><code>EQUREGS  REGS=FPR,TYPE=HEX\nF0       EQU   0\n......\nFF       EQU   15\n</code></pre></p>"},{"location":"reference/program_services/#yregs","title":"YREGS - General register equates","text":"<p>YREGS is identical to EQUREGS with default parameters which will  generate general register equates.</p>"},{"location":"reference/program_services/#additional-information","title":"Additional information","text":""},{"location":"reference/program_services/#use-counts-and-parameter-passing","title":"Use counts and parameter passing","text":"<p>On the first invocation and after a LOAD, LINK or XCTL,  the program receiving control has its use count incremented.</p> <p>When a program is DELETEd, it terminates or loses control via an XCTL, then the  use count is decremented.  When the use count is zero, the storage for that  program is freed.  When passing parameters it is important to consider whether those parameters are  in a program whose storage may be reused. If in doubt, place parameters for  passing on, in a separate GETMAINed area.</p>"},{"location":"reference/program_services/#common-program-load-parameters","title":"Common program load parameters","text":"<p>The following parameter descriptions apply to the LOAD,  CDLOAD, DELETE, CDDELETE,  LINK, XCTL and RESTORE macros.</p> <p>When a program is loaded (with suffix .390) then relocation takes place.</p> <ul> <li>EP, EPLOC, DDNAME and DSNAME are used to locate the program or module.<ul> <li>EP, EPLOC and DE are mutually exclusive.</li> <li>DDNAME and DSNAME cannot both be present.</li> </ul> </li> </ul>"},{"location":"reference/program_services/#epprogram","title":"EP=program","text":"<p>Specify the program name, maximum 8 bytes.</p>"},{"location":"reference/program_services/#eploclabel-or-eplocreg","title":"EPLOC=label or EPLOC=(reg)","text":"<p>The label or the register must point to an 8-byte field containing the program name.</p>"},{"location":"reference/program_services/#delabel-or-dereg","title":"DE=label or DE=(reg)","text":"<p>The label or the register must point to a BLDL entry. In all the above cases as neither DDNAME nor DSNAME are specified, then the z390 search path is used. This may be overridden by the ez390 parameter SYS390.</p>"},{"location":"reference/program_services/#epeplocde-and-ddnamename-or-epeplocde-and-ddnamereg","title":"EP/EPLOC/DE and DDNAME=name or EP/EPLOC/DE and DDNAME=(reg)","text":"<p>DDNAME has or points to the name of an environment variable.</p> <p>This variable may contain:</p> <ul> <li>The complete path and filename. In this case EP, EPLOC or DE are ignored.</li> <li>A single path. Only this path will be searched.</li> <li>Multiple paths separated by plus signs.</li> </ul> <p>All paths will be searched in the order specified.</p> <pre><code>         LINK  EP=MYLINK,DDNAME=MYPATH ...\n</code></pre> <p>For execution, define a script file setting the environment variable <code>MYPATH</code></p> <p>Program specified with EP ignored</p> <pre><code>SET MYPATH=c:\\path\\to\\390\\file.390 \n</code></pre> <p>Single search path</p> <pre><code>SET MYPATH=c:\\path\\to\\folder\n</code></pre> <p>Multiple search paths</p> <pre><code>SET MYPATH=c:\\path\\to\\dir1+c:\\path2 \n</code></pre>"},{"location":"reference/program_services/#epeplocde-and-dsnamename-or-epeplocde-and-dsnamereg","title":"EP/EPLOC/DE and DSNAME=name or EP/EPLOC/DE and DSNAME=(reg)","text":"<p>DSNAME is or points to a label defined in the program which has the file spec.</p> <p>The file spec must terminate with X'00' or be defined as a double-quoted string  within the standard C-type constant.</p> <p>Either constant may contain:</p> <ul> <li>The complete path and filename. In this case EP, EPLOC or DE are ignored.</li> <li>A single path. Only this path will be searched.</li> <li>Multiple paths separated by semicolons or plus signs. All paths will be    searched in the order specified.</li> </ul> <pre><code>         LINK EP=MYLINK,DSNAME=MYPATH ...\n......\nMYPATH   DC C'c:\\path\\to\\file',X'00'\nMYPATH   DC C'\"c:\\path1;c:\\path2\"'\n</code></pre> <p>Note</p> <p>In the above cases where the filename is specified in the environment variable or  the DC constant, then the .390 suffix should be omitted. The exceptions to this are LOAD and DELETE, which may be  used to load or delete a non-program module and may have any suffix appended.</p>"},{"location":"reference/program_services/#param-and-vl","title":"PARAM= and VL=","text":"<p>Only available on LINK and XCTL.</p> <p>Used for passing a fixed or variable parameter list to a program.</p> <pre><code>PARAM=(parm1,parm2,...)\n</code></pre> <p>The parameters can be anything that is permitted in an A-type constant.  When the program is invoked GR1 points to the parameter list.</p> <p>See Use counts and parameter passing below  for special considerations.</p>"},{"location":"reference/program_services/#vl0-or-vl1","title":"VL=0 or VL=1","text":"<ul> <li>Default - VL=1</li> </ul> <p>If the called program can accept a variable parameter list, then VL=1 will turn  on the senior bit (bit 0) of the last parameter.</p>"},{"location":"reference/soa_services/","title":"SOA services","text":"<p>The z390 project supports low level Service Oriented Architecture (SOA) type  application generation and execution.</p> <p>The advantage of using the SOA architecture is that services are more easily shared across diverse applications and user networks and maintenance is simpler since server code does not need to be statically linked into client application code.</p> <p>Any z390 application program can open up to 10 different client TCP/IP ports and  10 different TCP/IP server ports. </p> <p>The server can support up to a total of 20 concurrent connections from client. </p> <p>z390 TCP/IP client and server programs can interact with clients or server  applications written in any language supporting compatible messaging via TCP/IP  sockets.</p>"},{"location":"reference/soa_services/#macro-reference","title":"Macro reference","text":""},{"location":"reference/soa_services/#svc-functions","title":"SVC functions","text":"<p>The z390 macro TCPIO invoking svc x\u20197C\u2019 supports TCP/IP sockets messaging between client and server components.</p>"},{"location":"reference/soa_services/#TCPIO","title":"TCPIO - TCP/IP operations","text":"<p>The TCPIO macro operations OPEN, CLOSE, SEND, and RECEIVE support messaging between client and server programs using TCP/IP sockets. </p> <ul> <li>Messages of any length can be exchanges between any client and server programs    on a TCP/IP network.</li> <li>The server program must first open a socket port. </li> <li>Up to 20 concurrent clients can open connections to any server port. </li> <li>The same program can have up to 10 server ports and 10 client ports open.</li> <li>This command is similar to the functions provided by the IBM z/OS Communication    Server macro <code>EZASMI</code></li> </ul>"},{"location":"reference/soa_services/#open","title":"OPEN","text":"<pre><code>label    TCPIO OPEN,PORT=port,HOST=host\n</code></pre> <ul> <li>The port can be any standard port number less than 1024 or any private port    number above 1024.</li> <li>The port number can be numeric constant, symbolic absolute value, or can be    specified in (register). </li> <li>The only requirement is that port numbers not conflict with other port numbers    being used on the same network with the same processor hosts. </li> <li>If the HOST= keyword parameter is coded specifying a specific host IP address    such as 162.692.1.3 or * for the current processor, then a client port will be    opened with a connection to the server port on the indicated processor. </li> <li>If a connection to the specified server port cannot be made, then a return    code of 12 will be set. </li> <li>If the HOST= parameter is omitted, then a server port will be opened on the    current processor which can handle up to 20 concurrent connections from client    ports on the network.</li> </ul>"},{"location":"reference/soa_services/#close","title":"CLOSE","text":"<pre><code>label    TCPIO CLOSE,PORT=port\n</code></pre> <p>Close the specified port. </p> <p>Info</p> <p>You cannot open a client and sever port with the same number so  there is no need to indicate which type it is. </p> <ul> <li>When a server port is closed, all associated port and connection threads are    also terminated. </li> <li>All ports are automatically closed at program termination if not closed    explicitly.</li> </ul>"},{"location":"reference/soa_services/#send","title":"SEND","text":"<pre><code>label    TCPIO SEND,PORT=port,MSG=addr,LMSG=length\n</code></pre> <p>Send the message with specified address and length to the specified port.</p> <ul> <li>The message starting address can be RX type label or can be specified as (register).</li> <li>The message length can be absolute value or (register).</li> <li>If the send fails, a return code of 12 will be set.</li> </ul>"},{"location":"reference/soa_services/#receive","title":"RECEIVE","text":"<pre><code>label    TCPIO RECEIVE[,NOWAIT],PORT=port,MSG=addr,LMSG=max-length[,CONN=id]\n</code></pre> <p>Receive a message from the specified port starting at address with length up to max length. </p> <ul> <li>The message starting address can be RX type label or can be specified as (register).</li> <li>The message maximum length can be absolute value or (register).</li> <li>If the optional second positional parameter NOWAIT is specified, a return code    of 4 will be returned if no message is ready otherwise the RECEIVE will wait    until at least 1 byte of the message is available.</li> <li>If the port is a server port then the optional keyword parameter CONN=id may    be specified indicating a specific connection that was previously returned by    prior TCPIO RECEIVE in register 2.</li> <li>If a CONN value of -1 is specified or the parameter is omitted, the next    message from any connection will be returned along with the connection id in    register 2.</li> <li>At least 1 byte will be returned on a successful RECEIVE with return code 0    along with the number of bytes returned in register 1. Up to the max-length    bytes may be returned. </li> <li>If more than one message arrives prior to RECEIVE, it is up to the user to    determine where one message ends and next message starts. <ul> <li>A 4 byte message length prefix can be used to determine each message length. </li> <li>If passing ASCII text, use ending line feed character (hex x\u20190A\u2019).</li> </ul> </li> </ul> <p>Note</p> <p>More than one RECEIVE operation may be required to retrieve an entire logical message since the TCP/IP network may not transfer the entire message in one packet on the network and a portion of the logical  message may be ready whereas the next RECEIVE may have to wait for the next  part of the message.</p> <p>The TCPIO service is not sensitive to any special characters and all byte values  are allowed anywhere in messages. </p> <p>If any TCPIO operation fails for any reason on the client or server, a non-zero return code is returned. </p> <p>The TCPIO server port support includes multiple threads to support concurrent connections. There is one thread for each open server port which waits for new connections on the server port, starts new connection thread, and then returns  to wait for another connection. </p> <p>Each connection thread waits for any current available messages to be read from  that connection input buffer by the main TPCIO user thread. </p> <p>When all messages have been retrieved, then the connection thread issues a  connection client socket read for first byte of the next input message. </p> <p>The connection thread will wait for the next message to arrive in the input  buffer or for a disconnect. If a disconnect occurs, the connection thread is  cancelled. </p> <p>If a pending RECEIVE is waiting on the connection which disconnected, a return  code of 12 is returned. </p> <p>If the read of first byte is successful the thread returns to wait for the main  TCPIO user thread to retrieve the full or partial message available in the connection input buffer. </p> <p>Since partial messages can arrive from multiple connections in any sequence, the  server must be sure to retrieve a complete message from a specific connection  prior to returning to non-specific RECEIVE for the next message.</p>"},{"location":"reference/soa_services/#SOAGEN","title":"SOAGEN - SOA app gen support","text":"<p>The macro SOAGEN can be used to generate customized client and server message  managers plus stubs for each service called by the client application. </p> <p>In addition the SOAGEN macro generates two batch commands to build the SOA  application and to execute the client server SOA application. </p> <p>The SOAGEN macro uses the z390 PUNCH extension operands <code>DSNAME=</code> and <code>FORMAT</code>  to generate 3 or more source MLC files plus the two BAT files in one macro  expansion execution. </p>"},{"location":"reference/soa_services/#parameters","title":"Parameters","text":"Parameter Usage Comments MAIN= name of main client program If specified, an assembly and link of the main program with the generated service call stubs will be generated. CTYPE=MLC/CBL define language type for client COBOL clients generate IBM standard EZASOKET calls to TCP/IP to connect to services. CLIENT= name of the generated client message manager called from stubs. SERVER= name of the generated service message manager which loads and calls services based on service request messages. HOST= IP address of server host processor or * for local processor PORT= port # for this application (must be greater than 1023) SERVICES= one or more sublists defining the name of each called service and the length of each parameter being passed to service. If the length is negative, that indicates the parameter is read only and the updated parameter will not be returned in response message. MACDIR= directory containing the SOAGEN macros GENDIR= directory to contain the generated source files and command files GENBLD= name of the generated build command file GENRUN= name of the generated run command file"},{"location":"reference/soa_services/#usage","title":"Usage","text":"<pre><code>             SOAGEN MAIN=DEMOMAIN,    MAIN CLIENT APPLICATION PGM          X\n                    CLIENT=DEMOCMGR,  SOA CLIENT MSG MGR NAME              X\n                    SERVER=DEMOSMGR,  SOA SERVER MSG MGR NAME              X \n                    HOST=*, (192.168.1.3)  HOST SERVER NAME (*=LOCAL)      X\n                    PORT=3900,        HOST SERVER PORT                     X\n                    SERVICES=((DEMOSUB1,-45,-45,45), SERVICES WITH PARM LENX\n                         (DEMOSUB2,-4,-4,4)), (NOTE -LENGTH FOR READ ONLY) X\n                    MACDIR=&lt;z390_path&gt;\\SOA\\MACLIB, SOA GEN MACRO DIRECTORY X\n                    GENDIR=&lt;z390_path&gt;\\SOA\\DEMO, DIRECTORY FOR SOA APPL    X\n                    GENBLD=DEMOBLD,   GENERATED BUILD BAT FILE             X\n                    GENRUN=DEMORUN    GENERATED RUN BAT FILE\n             END\n</code></pre> <p>The above SOA application generation macro call generates server message manager DEMOSMGR to run on the same host as client using HOST=*. </p> <p>To generate the same application to run server on a specific host, change the HOST= parameter to specify the IP address of the desired server. </p> <p>The above SOAGEN macro call generates the following source files  using z390 PUNCH extended operands DSNAME= and FORMAT to control PUNCH output  files:</p> <ul> <li>DEMOCMGR.MLC \u2013 source macro call to SOACMGR to generate SOA client message    manager for the demo application.</li> <li>DEMOSMGR.MLC \u2013 source macro call to SOASMGR to generate SOA server message    manager for the demo application.</li> <li>SOA_STUB_DEMOSUB1.MLC - source macro call to SOASTUB to generate SOA stub for    DEMOSUB1 service call.</li> <li>SOA_STUB_DEMOSUB2.MLC \u2013 source macro call to SOASTUB to generate SOA stub for    DEMOSUB2 service call.</li> <li>DEMOBLD.BAT \u2013 generated command file to build the SOA demo application.</li> <li>DEMORUN.BAT \u2013 generated command file to start the DEMOSMGR server on the same    processor and then run the DEMOMAIN client application.</li> </ul>"},{"location":"reference/soa_services/#technical-notes","title":"Technical Notes","text":"<p>The client message manager is generated using a call to the SOACMGR macro with the required parameters from the SOAGEN macro call.</p> <p>The client message manager performs the following functions when called from a client source call stub:</p> <ul> <li>On first call, dynamically allocate the required message buffer based on the   maximum service message required.</li> <li>On first call open a TCP/IP socket connection to the server message manager   using the port and IP address specified.</li> <li>Build a send message with message length, time stamp, service name, and all   the parameters required by the service. Note the service can only access the   parameters passed with the length specified. If a service needs to access   additional parameters such as control blocks in memory, they need to all be   passed to the service.</li> <li>Send the message from client to server message manager using specified port</li> <li>Wait for response from the server with matching time stamp and service   name plus updated parameters, and return code from service. Note the   generated client message manager has logic to issue more than 1 RECEIVE   to fetch the entire variable length response message if necessary.</li> <li>Move the returned updated parameters to the original calling list addresses.   exit to calling stub which exits to the calling client main application program.</li> </ul> <p>The server message manager is generated using a call to the SOASMGR macro with the required parameters from the SOAGEN macro call. The server message manager performs the following functions:</p> <ul> <li>Opens server socket for specified port which starts thread which listens for   new connections from clients and starts new connection threads as required.   The server port and listens for incoming messages from clients.</li> <li>Issues receive on the server port to receive all or part of a message from a   client on an open connection. The server logic fetches at least 4 bytes and   uses the message length in the first 4 bytes to determine how many bytes   must be read to complete the variable length message which may require   additional receive commands.</li> <li>Look up the service name specified. If service not found, an error is   generated on server log and server returns to get next message.</li> <li>Build call parameter address less pointing to the parameters in the received   message. Note this implies that all updates by the service will be made to   parameter areas in the message buffer.</li> <li>Load the service on the first call and save entry address.</li> <li>Call the service to update parameters in the message buffer.</li> <li>Store the service return code in the message buffer.</li> <li>Build return message truncated to just the updated parameters as indicated   by positive lengths in the SOAGEN SERVICES parameter.</li> <li>Send response message back to client message manager using same   connection as request message.</li> <li>Return to wait for next service request message from any client connection.</li> <li>If client disconnect occurs, the disconnect is logged and server returns to wait   for next request message from any other client connections.</li> </ul> <p>Stubs for each service name called by the client application are generated using calls to the macro SOASTUB. The functions performed by the generated stubs are:</p> <ul> <li>On first call load the client message manager and save address.</li> <li>Call the client message manager passing the name of the service and the   calling parameter list.</li> <li>Upon return, exit to caller with return code.</li> </ul> <p>If the GENBLD parameter specifies a name, then the SOAGEN macro will generate a batch command file which assembles each of the above source programs to create an executable SOA type client server application.</p> <p>If the GENRUN parameter specifies a name, then the SOAGEN macro will generate a batch command to start the named SOA server message manager on the same  processor, and then run the client application. If the HOST parameter specifies  a different processor, the generated server message manager will need to be  copied to that processor and started prior to running the client application.</p>"},{"location":"reference/soa_services/#demonstration","title":"Demonstration","text":"<p>z390 distribution includes <code>soa</code> directory with SOA generation macro library and  a demo application which can be generated and executed as either a classic  statically linked application or an SOA generated client server application  using TCP/IP sockets.</p> <p>Refer to README.TXT in SOA folder for more details.</p>"},{"location":"reference/soa_services/#references","title":"References","text":""},{"location":"reference/soa_services/#original-z390-soa-documents","title":"Original z390 SOA documents","text":"<ul> <li>http://www.z390.org/z390_SOA_User_Guide.pdf</li> <li>http://www.z390.org/z390_SOA_Support_for_COBOL_and_Assembler.htm</li> <li>http://www.z390.org/z390_SOA_Client_Server_Overview.pdf</li> </ul>"},{"location":"reference/soa_services/#tcpip","title":"TCP/IP","text":"<ul> <li>TCP/IP Transmission Control Protocol RFP</li> <li>J2SE ServerSocket Class</li> <li>J2SE Socket Class</li> <li>z/OS Communication server IP Sockets Application Programming Interface Guide and Reference</li> </ul>"},{"location":"reference/soa_services/#host-ip-addressing","title":"Host IP Addressing","text":"<ul> <li>J2SE InetAddress Class</li> <li>IP Addressing RFC</li> </ul>"},{"location":"reference/soa_services/#socket-ports","title":"Socket Ports","text":"<ul> <li>Registered Ports</li> <li>Register a Port</li> </ul>"},{"location":"reference/sort/","title":"zSORT","text":"<p>The zSORT internal sort facility is a component of z390 which supports sorting  of any number of fixed or variable length records of any size up to the limits  of memory and 64 bit file system.</p> <p>zSORT is implemented with the intent of being compatible with IBM\u00ae DFSORT.</p>"},{"location":"reference/sort/#sort-utility-program","title":"SORT utility program","text":"<p>SORT.MLC utility assembler program included in the sort and linklib folders  performs a sort with the following input files:</p> <ul> <li>SORTIN \u2013 unsorted input file with DCB options </li> <li>SORTOUT \u2013 sorted output file with DCB options</li> <li>SYSIN \u2013 sort field definitions</li> <li>SORTWK01/SORTWK02 - sort work files</li> </ul>"},{"location":"reference/sort/#macro-reference","title":"Macro Reference","text":"<p>The zSORT utility function can be called from z390 assembler programs using  standard call interface with full work parameters in list pointed to by  register 1.</p> <p>The first positional macro parameter contains the operation code and options.  </p> <p>The macro operations available:</p> <ul> <li>ISORT - initialize for internal sort using PUT to insert unsorted records and    GET to retrieve sorted records</li> <li>PUT - insert unsorted record following ISORT</li> <li>GET - return sorted record following last PUT, returns RC=4 at end of sorted    records</li> </ul>"},{"location":"reference/sort/#example-usage","title":"Example usage","text":"<pre><code>ZSORT    ISORT,LRECL=80,MEMORY=10000000,FIELDS=(1,80,CH,A)\n.......\nZSORT    PUT,REC=(R2)\n.......\nZSORT    GET,REC=(R2)\n         CHI   R15,4\n         BE    END_OF_FILE\n</code></pre>"},{"location":"reference/sort/#isort-parameters","title":"ISORT parameters","text":"<p>Note</p> <p>The PUT and GET operations only require the keyword REC= defining address of  record area.</p>"},{"location":"reference/sort/#fields","title":"FIELDS","text":"<p>Any number of key fields defined as </p> <pre><code>FIELDS=(offset,length,type,order,{.repeat.})\n</code></pre> <p>Offset to start of key starts at 1 and cannot be greater than LRECL. For variable length records the offset does not include the 4 byte prefix.</p> <p>Length of key plus offset must not exceed LRECL</p> <p>Type of sort key field:</p> <ul> <li>AC - ASCII characters (same as CH)</li> <li>BI - unsigned binary (same as CH)</li> <li>CH - EBCDIC characters (same as CH)</li> <li>FI - signed binary such as half word, full word, or quad word integers</li> <li>FL - floating point HFP, BFP, or DFP short, long, or extended</li> <li>PD - packed decimal</li> <li>ZD - zoned decimal</li> </ul> <p>Order</p> <ul> <li>A - Ascending</li> <li>D - Descending</li> </ul>"},{"location":"reference/sort/#lrecl","title":"LRECL","text":"<p>Length of record (may be maximum length of variable length records).</p>"},{"location":"reference/sort/#memory","title":"MEMORY","text":"<p>Amount of memory available for sort table. If no value is specified, the maximum available contiguous memory block within  the memory allocated to step by MEM option will be used.</p>"},{"location":"reference/sort/#execute-format","title":"Execute format","text":"<p>Alternatively the execute form <code>MF=(E,addr)</code> can be used.  See linklib\\SORT.MLC  for example.</p>"},{"location":"reference/sort/#technical-details","title":"Technical details","text":"<p>zSORT is implemented via SVC x'A1' which has 3 function calls:</p> <ul> <li>initialize internal sort request</li> <li>submit unsorted record</li> <li>retrieve sorted records.</li> </ul> <p>Unsorted records are loaded into a dynamically allocated table in memory and  sorted.</p> <p>If the unsorted records exceed the size of the table, then multiple blocks of  sorted records are written to a work file and then merged.</p> <p>If all the records fit in the table, then they are sorted and returned without  requiring use of sort work files.</p> <p>When required, the merging is performed using two dynamically allocated sort  work files with DDNAME's SORTWK01 and SORTWK02. </p> <p>The sorted strings are merged from one work file to another doubling the size of  the sorted strings on each pass until all the records are sorted on last merge  pass.</p> <p>All file I/O is blocked to minimize disk seeking on single disk systems.  </p> <p>User can define the location of SORTWK01 and SORTWK02 if multiple physical disk  drives are available.</p> <p>A million records can be sorted in 28 seconds. Statistics on each sort execution  are recorded on the statistics file if option STATS is specified.</p>"},{"location":"reference/storage_services/","title":"Storage services","text":""},{"location":"reference/storage_services/#macro-reference","title":"Macro reference","text":""},{"location":"reference/storage_services/#svc-functions","title":"SVC functions","text":"<p>The following is a list of the z390 SVC services that support the macros.</p> DEC HEX Service 4 04 GETMAIN 4 04 GETVIS (VSE) 5 05 FREEMAIN 5 05 FREEVIS (VSE)"},{"location":"reference/storage_services/#supporting-macros","title":"Supporting macros","text":"<ul> <li>STORAGE - Obtain/release storage</li> <li>CPOOL - Obtain a storage area</li> </ul>"},{"location":"reference/storage_services/#storage","title":"STORAGE - Obtain/release storage","text":"<pre><code>name     STORAGE OBTAIN,LENGTH=,LOC=,COND=  Acquire storage\nname     STORAGE RELEASE,ADDR=,LENGTH=      Free storage\n</code></pre> <p>An alternative to GETMAIN and FREEMAIN.</p> <ul> <li>LENGTH= becomes the GETMAIN/FREEMAIN parameter LV=</li> <li>LOC= is the same</li> <li>COND=NO (default) is the GETMAIN type R</li> <li>COND=YES is the GETMAIN type RC</li> <li>ADDR= becomes the GETMAIN/FREEMAIN parameter A</li> </ul>"},{"location":"reference/storage_services/#getmain","title":"GETMAIN - Acquire storage","text":"<pre><code>name     GETMAIN type,LV=,LOC=,A=\n</code></pre>"},{"location":"reference/storage_services/#parameters","title":"Parameters","text":""},{"location":"reference/storage_services/#type","title":"type","text":"Value Description R Obtain storage unconditionally. The default location is below 16M. RC Obtain storage conditionally. The default location is above 16M. The return code indicates whether the acquisition was successful. RU Obtain storage unconditionally. The default location is above 16M."},{"location":"reference/storage_services/#lv","title":"LV","text":"Value Description LV=n Obtain n bytes (maximum value of n is 2G-1) LV=nK Obtain nK bytes (maximum value of n is 2097151) LV=nM Obtain nM bytes (maximum value of n is 2047) LV=(reg) Length required is in GR reg <p>Note</p> <p>All storage requests will be rounded up to the next 8-byte boundary and is not initialized.</p>"},{"location":"reference/storage_services/#loc-optional","title":"LOC (optional)","text":"<p>If omitted:</p> <ul> <li>type=R default to LOC=ABOVE</li> <li>type=RC default to LOC=BELOW </li> <li>type=RU default to LOC=BELOW</li> </ul> Value Description LOC=BELOWLOC=RESLOC=24LOC=(24) Try to acquire storage below 16M. LOC=ABOVELOC=ANYLOC=31LOC=(31)LOC=(24,31) Try to acquire storage above 16M."},{"location":"reference/storage_services/#a-optional","title":"A (optional)","text":"<p>After successful completion GR1 will contain the address of the  acquired storage. This 4-byte address may be placed at label, or at the address in GRreg.</p> <p>The length will be returned in GR0, rounded as necessary.</p>"},{"location":"reference/storage_services/#usage","title":"Usage","text":"<p>GETMAIN 1024 bytes below 16M, unconditionally.</p> <pre><code>         GETMAIN R,LV=1024\n</code></pre> <p>GETMAIN number of bytes in GR3 below 16M, conditionally,</p> <pre><code>         GETMAIN RC,LV=(R3),LOC=BELOW\n</code></pre>"},{"location":"reference/storage_services/#memory-allocation","title":"Memory allocation","text":"<p>Storage is limited by the <code>MEM(nnn)</code> parameter on ez390 with nnn in megabytes.  The default is <code>MEM(1)</code>.</p> <p>When the value is 16 or less then all GETMAINs will allocate storage LOC=BELOW. </p> <p>When the value is above 16, then 16M bytes is available LOC=BELOW and the rest  LOC=ABOVE.</p> <p>There is a preset maximum of <code>MEM(50)</code> set by Java. If this is insufficient,  then code <code>-Xmx nnnnnnnnn</code> after the <code>-Xrs</code> option on ez390 to extend the MEM  limit.</p> <p>Warning</p> <p>Over-extending memory this way may degrade the performance of your operating system.</p>"},{"location":"reference/storage_services/#register-usage","title":"Register Usage","text":"<ul> <li>R0 = Input flags, output length</li> <li>R1 = Input length, output address</li> <li>R15= Return code</li> </ul>"},{"location":"reference/storage_services/#return","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - GETMAIN ok</li> <li>4 - Conditional request unsuccessful</li> </ul>"},{"location":"reference/storage_services/#abends","title":"Abends","text":"<ul> <li>S804 Invalid request - Can occur if LRECL/BLKSIZE on a DCB are both zero</li> <li>S80A Unconditional out of memory</li> </ul>"},{"location":"reference/storage_services/#getvis","title":"GETVIS - Acquire storage (VSE)","text":"<pre><code>name     GETVIS LENGTH=,ADDRESS=,LOC=\n</code></pre> <p>All forms map to GETMAIN R</p> <p>LENGTH and ADDRESS are mandatory.</p> <p>Parameters map to GETMAIN as follows:</p> <ul> <li>LENGTH=n Maps to LV=n</li> <li>LENGTH=(reg) Maps to LV=(reg)</li> <li>ADDRESS=label Maps to A=label</li> <li>ADDRESS=(reg) GR reg is not a pointer, the GETMAINd area</li> <li>address is placed in GR reg.</li> <li>LOC= Maps the same.</li> </ul>"},{"location":"reference/storage_services/#register-usage_1","title":"Register Usage","text":"<ul> <li>R0 = Input flags, output length</li> <li>R1 = Input length, output address</li> <li>R15= Return code</li> </ul>"},{"location":"reference/storage_services/#return_1","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - GETVIS ok</li> </ul>"},{"location":"reference/storage_services/#abends_1","title":"Abends","text":"<ul> <li>S804 Invalid request - Can occur if LRECL/BLKSIZE on a DCB are both zero</li> <li>S80A Unconditional out of memory</li> </ul>"},{"location":"reference/storage_services/#freemain","title":"FREEMAIN - Free storage","text":"<pre><code>name     FREEMAIN LV=,LA=,A=\n</code></pre> <p>Specify either LV= or LA=, if both are present LV= will be ignored.</p>"},{"location":"reference/storage_services/#parameters_1","title":"Parameters","text":""},{"location":"reference/storage_services/#lv_1","title":"LV","text":"Value Description LV=n Free n bytes (maximum value of n is 2G-1) LV=nK Free nK bytes (maximum value of n is 2097151) LV=nM Free nM bytes (maximum value of n is 2047) LV=label label must be an equated value LV=(reg) Length to be freed is in GRreg"},{"location":"reference/storage_services/#la","title":"LA","text":"Value Description LA=label The location of a 4-byte length LA=(reg) GR reg must point to a 4-byte length"},{"location":"reference/storage_services/#a-optional_1","title":"A (optional)","text":"<p>If A= is omitted then GR1 must contain the address of the storage to be freed.</p> Value Description A=label The location of the 4-byte address of the storage to be freed. A=(reg) The 4-byte address of the storage to be freed is in GR reg. <p>Note</p> <p>The storage address specified must be on a doubleword boundary. A section of a previous GETMAIN may be freed. It is the programmer's responsibility to manage the resulting fragmentation.</p>"},{"location":"reference/storage_services/#register-usage_2","title":"Register Usage","text":"<ul> <li>R0 = length</li> <li>R1 = address</li> <li>R15= return code</li> </ul>"},{"location":"reference/storage_services/#return_2","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - FREEMAIN ok</li> </ul>"},{"location":"reference/storage_services/#abends_2","title":"Abends","text":"<ul> <li>S804 Invalid request</li> <li>S90A Attempt to FREEMAIN an area which is not on a doubleword boundary</li> <li>SA0A Attempt to FREEMAIN an area already free</li> </ul>"},{"location":"reference/storage_services/#freevis","title":"FREEVIS - Free storage (VSE)","text":"<pre><code>name     FREEVIS LENGTH=,ADDRESS=\n</code></pre> <p>All forms map to FREEMAIN R</p> <p>Defaults are LENGTH=(0) and ADDRESS=(1).</p> <p>Parameters map to FREEMAIN as follows:</p> <ul> <li>LENGTH=n Maps to LV=n</li> <li>LENGTH=(reg) Maps to LV=(reg)</li> <li>ADDRESS=label Maps to A=label</li> <li>ADDRESS=(reg) Maps to A=(reg)</li> </ul>"},{"location":"reference/storage_services/#register-usage_3","title":"Register Usage","text":"<ul> <li>R0 = length</li> <li>R1 = address</li> <li>R15= return code</li> </ul>"},{"location":"reference/storage_services/#return_3","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - FREEVIS ok</li> </ul>"},{"location":"reference/storage_services/#abends_3","title":"Abends","text":"<ul> <li>S804 Invalid request</li> </ul>"},{"location":"reference/storage_services/#cpool","title":"CPOOL - Obtain a storage area","text":"<pre><code>         CPOOL BUILD,CPID=label,PCELLCT=nnn, SCELLCT=nnn,CSIZE=nnn,HDR='...'\n</code></pre> <p>BUILD obtains a storage area divided into cells. Each subsequent GET retrieves the next cell. </p> <p>Warning</p> <p>FREE and DELETE are not yet implemented.</p> <ul> <li>CPID will contain the address of the GET routine for this cell</li> <li>PCELLCT contains the primary number of cells</li> <li>SCELLCT contains the secondary number of cells </li> <li>CSIZE is the size of each cell</li> <li>HDR is an optional string to identify the pool</li> </ul> <p>The GETMAIN size will be (PCELLCT+SCELLCT)*CSIZE</p> <pre><code>         CPOOL GET,CPID=label\n</code></pre> <p>Get the next cell in this pool, GR1 contains the address or zero if all cells  have been read. </p>"},{"location":"reference/structured_program/","title":"Structured programming macros","text":"<p>Structured Programming Macros (SPM) provide a compatible subset of the macros  that IBM supplies as part of its licensed HLASM Toolkit product.</p> <p>These macros are based on the original 1978 public domain structure programming macros distributed as SHARE CBT tape #177. They have been enhanced to use  structured macro extensions.</p>"},{"location":"reference/structured_program/#macro-reference","title":"Macro reference","text":"<ul> <li>IF, ELSEIF, ELSE, ENDIF - alternate selection</li> <li>DO, ENDDO - iteration</li> <li>SELECT, WHEN, OTHRWISE, ENDSEL - selection by value using compares</li> <li>CASENTRY, CASE, ENDCASE - selection by value using branch table</li> <li> <p>PM, PENTRY, PEXIT - perform block of code and return to next instruction</p> </li> <li> <p>ASMMSP.CPY  - copybook for compatibility with HLASM Toolkit programs that    require this copybook</p> </li> <li>ZSTRGBL.CPY - copybook included in each structured programming macros (SPM) with    shared global variables</li> <li>ZSTREQU - macro called from ZSTRGBL to define shared EQU's for condition code    operands</li> </ul>"},{"location":"reference/structured_program/#hlasm-compatible-versions","title":"HLASM compatible versions","text":"<p>Also included are translated versions of all the structured SPM's in the  z390\\mac\\spm directory. The translated version are for use on systems with  HLASM or other mainframe assemblers which do not yet support the SPE's.</p> <p>The following regression test programs are included:</p> <ul> <li>rt\\test\\TESTSPM1.MLC - test IF, DO, SELECT, and CASENTRY structures</li> </ul> <p>The following z390 utilities are written in structured form using these  structured macro:</p> <ul> <li>linklib\\REPRO.MLC - VSAM load and unload utility</li> <li>linklib\\SUPERZAP.MLC - dump and path file utility</li> <li>linklib\\FPCONMFC.MLC - interface between z390 BFP/DFP/HFP regression tests and    the mainframe compatible  external format conversion routine    linklib\\FPCONVRT.MAC.</li> </ul>"},{"location":"reference/svc_services/","title":"SVC services","text":""},{"location":"reference/svc_services/#svc-functions","title":"SVC functions","text":"DEC HEX Service 1 01 WAIT 2 02 POST 11 0B TIME(and date) 11 0B GETIME (VSE) 40 28 GETENV 46 2E TTIMER 47 2F STIMER 52 34 CMDPROC 53 35 WTO 103 67 XLATE 160 A0 WTOR 170 AA CTD 171 AB CFD"},{"location":"reference/svc_services/#supporting-macros","title":"Supporting Macros","text":"<ul> <li>COMRG - Address Communications region (VSE)</li> </ul>"},{"location":"reference/svc_services/#macro-reference","title":"Macro reference","text":""},{"location":"reference/svc_services/#time-svc","title":"TIME(SVC) - Obtain the time and date","text":"<pre><code>name     TIME  type,addr,LINKAGE=SVC,DATETYPE=,CLOCKTYPE=\n</code></pre> <p>Obtain the time and/or date in various formats.</p>"},{"location":"reference/svc_services/#parameters","title":"Parameters","text":""},{"location":"reference/svc_services/#type","title":"Type","text":"<p>DEC - Decimal</p> <pre><code>name     TIME\nname     TIME  DEC\n</code></pre> <p>Returns: Time in GR0 as HHMMSSTH</p> <p>Hours, mins and secs to 2 decimal places.</p> <p>The values are unsigned packed decimal:</p> <pre><code>X'21420654' = 21:42:06.54\n</code></pre> <p>The MVO instruction can be used after storing the register to convert it to  standard packed decimal format.</p> <p>Date in GR1 as CCYYDDDF - Century, year, day number and sign. </p> <p>The values are signed decimal:</p> <ul> <li>CC is (almost) the century number.</li> <li>YY the year number.</li> <li>DDD the day number within the year.</li> <li> <p>F the positive sign.</p> <p>X'0106003F' = 3<sup>rd</sup> January 2006</p> </li> </ul> <p>After storing, <code>AP DATE,=P'1900000'</code> can be used to convert to a 4-digit year.</p> <p>BIN - Binary</p> <p><pre><code>name     TIME  BIN\n</code></pre> Returns: Time in GR0 in hundredths of a second since midnight in binary.</p> <p>Date in GR1 as CCYYDDDF - Century, year, day number and sign. </p> <p>TU - Time units</p> <p><pre><code>name     TIME  TU\n</code></pre> Returns: Time in GR0 in timer units of 26.04166\u00b5s since midnight in binary.</p> <p>Date in GR1 as CCYYDDDF - Century, year, day number and sign. </p> <p>INS - Instruction count</p> <p><pre><code>name     TIME  INS\n</code></pre> Returns: Instruction count in GR1 (64 bit value).</p> <p>MIC - Microseconds</p> <p><pre><code>name     TIME  MIC,label\nname     TIME  MIC,(reg)\n</code></pre> Returns: Time in units of 1\u00b5s in binary since midnight.</p> <p>The time is stored at the 8 bytes specified. Date in GR1 as CCYYDDDF - Century, year, day number and sign. </p> <p>NS - Nanoseconds</p> <p><pre><code>name     TIME  NS,label\nname     TIME  NS,(reg)\n</code></pre> Returns: Time in units of 1ns in binary since midnight.</p> <p>The time is stored at the 8 bytes specified.</p> <p>STCK - Microseconds bits 0-51</p> <p><pre><code>name     TIME  STCK,label\nname     TIME  STCK,(reg)\n</code></pre> Returns: Time in units of 1\u00b5s in binary since midnight.</p> <p>The time is stored at the 8 bytes specified and uses only bits 0-51 of the  8-byte field. Date in GR1 as above.</p> <p>TS - Timestamp</p> <p><pre><code>name     TIME  TS,label\nname     TIME  TS,(reg)\n</code></pre> Returns: A string of 29 bytes at the label or pointed to by reg.</p> <p>The format is \"YYYY-MM-DD HH:MM:SS.NNNNNNNNN\".</p> <p>CLOCK - Microseconds since 1/1/1900</p> <p>CLOCKTYPE=STCK</p> <p><pre><code>name     TIME  CLOCK,label,CLOCKTYPE=STCK\nname     TIME  CLOCK,(reg),CLOCKTYPE=STCK\n</code></pre> Returns: Time in units of 1\u00b5s in binary since 1<sup>st</sup> January 1900.</p> <p>The time is stored at the 8 bytes specified and uses only bits 0-51 of the  8-byte field.</p> <p>CLOCKTYPE=STCKE</p> <p><pre><code>name     TIME  CLOCK,label,CLOCKTYPE=STCKE\nname     TIME  CLOCK,(reg),CLOCKTYPE=STCKE\n</code></pre> Returns: Time in units of 1\u00b5s in binary since 1<sup>st</sup> January 1900.</p> <p>The time is stored at the 16 bytes specified:</p> <ul> <li>Byte 0 : Zero</li> <li>Bytes 1-13 : The time</li> <li>Bytes 14-15 : Programmable field set by the SCKPF instruction and not    currently implemented.</li> </ul> <p>The time uses only bits 8-111 of the 16-byte field with bits 8-59 being the  value in microseconds.</p> <p>CLOCKTYPE=JAVA</p> <p><pre><code>name     TIME  CLOCK,label,CLOCKTYPE=JAVA\nname     TIME  CLOCK,(reg),CLOCKTYPE=JAVA\n</code></pre> Returns: Time in units of 1ms in binary since 1<sup>st</sup> January 1970.</p> <p>The time is stored at the 8 bytes specified.</p>"},{"location":"reference/svc_services/#register-usage","title":"Register Usage","text":"<ul> <li>R0 = Code for units and date type</li> <li>R1 = Result area</li> </ul>"},{"location":"reference/svc_services/#return","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - TIME ok</li> <li>4 - Invalid request</li> </ul>"},{"location":"reference/svc_services/#time-system","title":"TIME(SYSTEM) - Obtain the time and date","text":"<pre><code>name     TIME  type,addr,LINKAGE=SYSTEM,DATETYPE=,CLOCKTYPE=\n</code></pre>"},{"location":"reference/svc_services/#parameters_1","title":"Parameters","text":""},{"location":"reference/svc_services/#datetype","title":"DATETYPE","text":"<p>Specify the date format returned.</p> <p>All the formats are 4 bytes and the values are unsigned packed decimal.</p> <p>The MVO instruction can be used to convert it to standard packed decimal format.</p> <ul> <li>YYYY the year number.</li> <li>DDD the day number within the year.</li> <li>DD the day number within the month.</li> <li>MM the month number.</li> </ul> <pre><code>YYYYDDD (default) stored as 0YYYYDDD\nMMDDYYYY\nDDMMYYYY\nYYYYMMDD\n</code></pre>"},{"location":"reference/svc_services/#type_1","title":"Type","text":"<p>DEC - Decimal</p> <pre><code>name     TIME  ,label,LINKAGE=SYSTEM\nname     TIME  ,(reg),LINKAGE=SYSTEM\nname     TIME  DEC,label,LINKAGE=SYSTEM\nname     TIME  DEC,(reg),LINKAGE=SYSTEM\n</code></pre> <p>Returns: Time as HHMMSSTH</p> <p>The time is stored at the 4 bytes specified.  Hours, mins and secs to 2 decimal places.</p> <p>The values are unsigned packed decimal:</p> <pre><code>X'21420654' = 21:42:06.54\n</code></pre> <p>The MVO instruction can be used to convert it to standard packed decimal format.</p> <p>The date is stored at label+8 or 8(reg).</p> <p>BIN - Binary</p> <p><pre><code>name     TIME  BIN,label,LINKAGE=SYSTEM\nname     TIME  BIN,(reg),LINKAGE=SYSTEM\n</code></pre> Returns: The time is stored at the 4 bytes specified in hundredths of a second  since midnight</p> <p>The date is stored at label+8 or 8(reg).</p> <p>MIC - Microseconds</p> <p><pre><code>name     TIME  MIC,label,LINKAGE=SYSTEM\nname     TIME  MIC,(reg),LINKAGE=SYSTEM\n</code></pre> Returns: Time in units of 1\u00b5s in binary since midnight.</p> <ul> <li>The time is stored at the 8 bytes specified.</li> <li>The date is stored at label+8 or 8(reg).</li> </ul> <p>STCK - Microseconds 0-51 bits only</p> <p><pre><code>name     TIME  STCK,label.LINKAGE=SYSTEM\nname     TIME  STCK,(reg),LINKAGE=SYSTEM\n</code></pre> Returns: Time in units of 1\u00b5s in binary since midnight.</p> <p>The time is stored at the 8 bytes specified and uses only bits 0-51 of the  8-byte field. The date is stored at label+8 or 8(reg).</p> <p>STCKE - Microseconds 16 byte</p> <pre><code>name     TIME  STCKE,label.LINKAGE=SYSTEM\nname     TIME  STCKE,(reg),LINKAGE=SYSTEM\n</code></pre> <p>Returns: Time in units of 1\u00b5s in binary since midnight.</p> <p>The time is stored at the 16 bytes specified:</p> <ul> <li>Byte 0 : Zero</li> <li>Bytes 1-13 : The time</li> <li>Bytes 14-15 : Programmable field set by the SCKPF instruction and not    currently implemented.</li> </ul> <p>The time uses only bits 8-111 of the 16-byte field with bits 8-59 being the  value in microseconds.</p> <p>Note</p> <p>The DATETYPE parameter is ignored.</p>"},{"location":"reference/svc_services/#register-usage_1","title":"Register Usage","text":"<ul> <li>R0 = Code for units and date type</li> <li>R1 = Result area</li> </ul>"},{"location":"reference/svc_services/#return_1","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - TIME ok</li> <li>4 - Invalid request</li> </ul>"},{"location":"reference/svc_services/#gettime","title":"GETIME - Obtain time and date (VSE)","text":"<pre><code>         GETIME type\n</code></pre> <p>Obtain the time in various formats (VSE only).  The time is stored in the GR0/GR1 register pair.</p>"},{"location":"reference/svc_services/#parameters_2","title":"Parameters","text":""},{"location":"reference/svc_services/#type-date-type","title":"type - date type","text":"<p>STANDARD (default)</p> <p>Time in GR1 as <code>0HHMMSSc</code>. Hours, mins and secs in packed format.</p> <p>BIN - Binary</p> <p>Time in GR1 in seconds since midnight in binary.</p> <p>TU - Time unit</p> <p>Time in GR1 in timer units of 26.04166\u00b5s since midnight in binary.</p> <p>MIC - Microseconds</p> <p>Time in units of 1\u00b5s in binary since midnight.</p>"},{"location":"reference/svc_services/#return_2","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - GETIME ok</li> <li>4 - Invalid request</li> </ul>"},{"location":"reference/svc_services/#stimer","title":"STIMER - Wait for an interval of time","text":"<p>Wait for an interval of time.</p> <pre><code>name     STIMER WAIT,BINTVL=label\nname     STIMER WAIT,DINTVL=label\nname     STIMER WAIT,MICVL=label\nname     STIMER WAIT,TUINTVL=label\n</code></pre> <p>Start a timer and continue. When the time expires the exit routine is invoked.</p> <p><pre><code>name     STIMER REAL,exit,BINTVL=label\nname     STIMER REAL,exit,DINTVL=label\nname     STIMER REAL,exit,MICVL=label\nname     STIMER REAL,exit,TUINTVL=label\n</code></pre> Only one STIMER can be waiting for expiry at any moment.</p> <p>In each case the label points to a number of timer units.</p> value effect Maximum value BINTVL Fullword with 100<sup>th</sup> of a second units. X'7FFFFFFF' is approx. 249 days. DINTVL Doubleword PL8'HHMMSSth', where th is 2 decimal positions of seconds. 99595999, approximately 4 days. MICVL Doubleword with microsecond units X'7FFFFFFFFFFFFFFF', or nearly 300000 years TUINTVL Fullword with 26.04166\u00b5s units X'7FFFFFFF', approximately 16 hours."},{"location":"reference/svc_services/#parameters_3","title":"Parameters","text":""},{"location":"reference/svc_services/#exit","title":"exit","text":"<p>Can be label or (reg).</p> <ul> <li>When the time expires, the exit routine is invoked.</li> <li>GR15 has the address of the exit routine.</li> <li>Other registers must be assumed to be destroyed.</li> </ul> <p>Note</p> <p>STIMER REAL is measuring clock time, and not the time that the Z390 program  is executing.</p>"},{"location":"reference/svc_services/#register-usage_2","title":"Register Usage","text":"<ul> <li>R0 = Code for timer units and exit address</li> <li>R1 = Address of the timer units</li> <li>R15 = By implication, exit routine address</li> </ul>"},{"location":"reference/svc_services/#ttimer","title":"TTIMER - Test or cancel STIMER REAL","text":"<p>Test or cancel a previously set STIMER REAL</p> <pre><code>name     TTIMER CANCEL,type,addr\n</code></pre>"},{"location":"reference/svc_services/#parameters_4","title":"Parameters","text":""},{"location":"reference/svc_services/#cancel","title":"CANCEL","text":"<p>CANCEL means that the STIMER timing is terminated.</p>"},{"location":"reference/svc_services/#type_2","title":"type","text":"<p>TU (default)</p> <p>Returns the remaining time in GR0 as 4 bytes in timer units of 26.04166\u00b5s.  addr is ignored.</p> <p>MIC,addr</p> <p>Using MIC requires addr which may be specified as label or (reg). The remaining  time is returned at the doubleword address in microseconds.</p>"},{"location":"reference/svc_services/#usage","title":"Usage","text":"<p>Cancel the current STIMER REAL, return the remaining time in GR0 in timer units.</p> <pre><code>         TTIMER CANCEL\n</code></pre> <p>Return the remaining time in microseconds at REMAIN.</p> <pre><code>         TTIMER ,MIC,REMAIN\n......\nREMAIN   DS     D\n</code></pre>"},{"location":"reference/svc_services/#register-usage_3","title":"Register Usage","text":"<ul> <li>R0 = Code for timer units, returned value</li> <li>R1 = Address of returned timer units</li> </ul>"},{"location":"reference/svc_services/#return_3","title":"Return","text":"<p>GR15 has a return code: * 0 TTIMER ok * 4 TU units remaining exceed 31 bits</p>"},{"location":"reference/svc_services/#cmdproc","title":"CMDPROC - execute host OS commands","text":"<p>Open, close, read and write from the host command processor or shell.</p> <p>With the CMDPROC macro, you can issue OS shell commands, receive the replies  from those commands line by line and start other programs.</p> <p>There is a limit of 10 command processors that can be open at any time. The  limit is only to protect the operating system from storage depletion. In all  cases below, ID may be defined as a numeric value or in a general register.  For example, ID=2 or ID=(R5).</p>"},{"location":"reference/svc_services/#parameters_5","title":"Parameters","text":""},{"location":"reference/svc_services/#id","title":"ID","text":"<ul> <li>ID may range from 0 (default) to 9.</li> <li>If the ID exceeds 9 then an abend SFFF will occur</li> </ul>"},{"location":"reference/svc_services/#subcommands","title":"Subcommands","text":""},{"location":"reference/svc_services/#start","title":"START","text":"<pre><code>name      CMDPROC START,ID=,CMDLOG=\n</code></pre> <p>Start a command processor and assign an identifier.</p> <p>If the memory queue exceeds the MAXQUE value (default 1000) then the memory  queue is written to the log and CMDPROC=YES is assumed. </p> <p>An error message is generated.</p> <p>CMDLOG</p> <ul> <li>CMDLOG=YES (Default) - All output from the command processor is written to    the log.</li> <li>CMDLOG=NO - All output is saved in a memory queue. Use this option if you    intend to use CMDPROC READ to retrieve command processor messages.</li> </ul>"},{"location":"reference/svc_services/#stop","title":"STOP","text":"<pre><code>name     CMDPROC STOP,ID=\n</code></pre> <p>Close a previously opened command processor.</p>"},{"location":"reference/svc_services/#write","title":"WRITE","text":"<p><pre><code>name     CMDPROC WRITE,label,ID=\nname     CMDPROC WRITE,literal,ID=\nname     CMDPROC WRITE,(reg),ID=\n</code></pre> Send a command to a previously opened command processor.</p> <p>label or (reg)</p> <p>Points to a constant which terminates with X'00' or is defined as a  double-quoted string within a standard C-type constant.</p> <p>literal</p> <p>Double-quoted string within a standard C-type constant preceded by an equals  sign.</p> <pre><code>name     CMDPROC WRITE,CMD1,ID=5\n......\nCMD1     DC    C'DIR /X',X'00'\n</code></pre> <pre><code>name     CMDPROC WRITE,CMD1,ID=5\n......\nCMD1     DC    C'\"DIR /X\"'\n</code></pre>"},{"location":"reference/svc_services/#read","title":"READ","text":"<pre><code>name     CMDPROC READ,label,len,ID=,WAIT=\n</code></pre> <p>Obtain the output, a line at a time, from the result of a command issued by  CMDPROC WRITE from a previously opened command processor. </p> <p>label is the receiving area and may be specified as (reg).</p> <p>len</p> <p>Maximum length that is passed to your program. </p> <ul> <li>The default is the implied length of the receiving field. Maximum value is    4095 bytes.</li> <li>len may be specified as (reg).</li> <li>Maximum register value is 2G - 1 bytes.</li> <li>If label is specified as (reg), then len is mandatory.</li> </ul> <p>WAIT=</p> <p>Time in milliseconds before the READ will terminate if no output from the  command processor is available to be read.</p> <ul> <li>Default is 500 milliseconds.</li> <li>Maximum value is 4095 (4 seconds).</li> <li>WAIT may be specified as (reg).  Maximum value is X'7FFFFFFF' (about 24 days).</li> </ul>"},{"location":"reference/svc_services/#register-usage_4","title":"Register Usage","text":"<ul> <li>R0 = Operation code and ID</li> <li>R1 = Command area</li> <li>R2 = Length</li> <li>R3 = Wait value</li> <li>R15 = Formation of ID and return code</li> </ul>"},{"location":"reference/svc_services/#return_4","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - CMDPROC ok</li> <li>4 - READ terminated as WAIT time has expired</li> <li>8 - READ terminated because the command processor has ended</li> <li>16 - Command Processor abnormally ended (see log message)</li> </ul>"},{"location":"reference/svc_services/#wto","title":"WTO - Write to operator","text":"<p>Display a message on the GUI console.</p> <p>The record descriptor word (RDW) defines the variable length text message  generated by the WTO macro.</p> <pre><code>         DC    AL2(len,0),C'text'\n</code></pre> <p>len includes the 4 bytes for the RDW.</p>"},{"location":"reference/svc_services/#formats","title":"Formats","text":""},{"location":"reference/svc_services/#text","title":"Text","text":"<pre><code>name     WTO   'text'\n</code></pre> <p>The RDW that describes the message is generated internally.</p>"},{"location":"reference/svc_services/#list","title":"List","text":"<pre><code>name     WTO   'text',MF=L\n</code></pre> <p>No text is written to the console; only the RDW and text is generated.</p> <p>This allows a 'collection' of messages to be constructed which can be used by  the execute form.</p>"},{"location":"reference/svc_services/#execute-1","title":"Execute 1","text":"<pre><code>name     WTO   MF=E\n</code></pre> <p>GR1 must be preloaded with the address of an RDW previously generated with the  list form of WTO.</p>"},{"location":"reference/svc_services/#execute-2","title":"Execute 2","text":"<pre><code>name     WTO   MF=(E,label)\nname     WTO   MF=(E,(reg))\n</code></pre> <p>label or (reg) points to an RDW previously generated with the list form of  the WTO.</p>"},{"location":"reference/svc_services/#register-usage_5","title":"Register Usage","text":"<ul> <li>R1 = Branch around RDW or parm pointer</li> </ul>"},{"location":"reference/svc_services/#xlate","title":"XLATE - EBCDIC to ASCII","text":"<pre><code>name     XLATE area,len,TO=\n</code></pre> <p>Translates data to EBCDIC or ASCII.</p>"},{"location":"reference/svc_services/#parameters_6","title":"Parameters","text":""},{"location":"reference/svc_services/#area","title":"area","text":"<p>area may be specified as label or (reg).</p>"},{"location":"reference/svc_services/#len","title":"len","text":"<p>len may be specified as a number or (reg).</p> <ul> <li>Maximum numeric value is 4095 bytes.</li> <li>Maximum register value is 2G - 1 bytes.</li> </ul>"},{"location":"reference/svc_services/#to","title":"TO","text":"<p>Type of conversion to perform:</p> <ul> <li>TO=A - convert area to ASCII.</li> <li>TO=E - convert area to EBCDIC.</li> </ul>"},{"location":"reference/svc_services/#register-usage_6","title":"Register Usage","text":"<ul> <li>R0 = Area address and codes</li> <li>R1 = Length</li> </ul>"},{"location":"reference/svc_services/#wtor","title":"WTOR - Write to operator","text":"<p>Display a message on the GUI console and receive a response.</p> <pre><code>name     WTOR  'text',reply,len,ecb\nname     WTOR  \"text\",reply,len,ecb\n</code></pre> <p>The RDW (see WTO) that describes the message is generated internally. The text  appears on the console.</p>"},{"location":"reference/svc_services/#parameters_7","title":"Parameters","text":""},{"location":"reference/svc_services/#reply","title":"reply","text":"<p>Specified as label or (reg), is the field into which the reply is put. The reply appears on the console.</p>"},{"location":"reference/svc_services/#len_1","title":"len","text":"<p>Maximum length of reply.</p> <ul> <li>If reply is specified as (reg) then len is mandatory.</li> <li>If len is omitted, then the implied length of reply is used. </li> </ul>"},{"location":"reference/svc_services/#ecb","title":"ecb","text":"<p>Specified as label or (reg), by convention defined as DC F'0'.</p> <p>After the WTOR macro, instruction execution can proceed until the reply is  completed by the user (commonly the Return key).</p> <p>Usage: Implied length, named ECB, wait for reply immediately.</p> <pre><code>         WTOR  'Enter your name',NAME,,MYECB\n         WAIT  ECB=MYECB\n......\nNAME     DC    CL40' '\nMYECB    DC    F'0'\n</code></pre> <p>Usage: Register notation, maximum length, no wait for reply.</p> <pre><code>         LA    R5,NAME\n         LA    R6,MYECB\n         WTOR  'Enter your name',(R5),40,(R6)\n......\n         TM    MYECB,X'40'\n         BO    GOTREPLY\n......\nNAME     DC    CL40' '\nMYECB    DC    F'0'\n</code></pre>"},{"location":"reference/svc_services/#register-usage_7","title":"Register Usage","text":"<ul> <li>R0 = Reply address</li> <li>R1 = Branch around RDW</li> <li>R14 = Reply length</li> <li>R15 = ECB address</li> </ul>"},{"location":"reference/svc_services/#wait","title":"WAIT - Wait for ECB completion","text":"<pre><code>name WAIT num,ECB=\nname WAIT num,ECBLIST=\n</code></pre> <p>ECB or ECBLIST must be specified.</p>"},{"location":"reference/svc_services/#parameters_8","title":"Parameters","text":""},{"location":"reference/svc_services/#num","title":"num","text":"<p>num is optional and defaults to 1.</p> <p>For ECB= num must be 1 or omitted.</p> <p>For ECBLIST= num is the minimum number of ECBs that must be posted before the  WAIT is complete. This value must, of course, be less or equal to the number of  ECBs in the list. An abend SF05 will occur if this is not the case.</p>"},{"location":"reference/svc_services/#ecb_1","title":"ECB=","text":"<p>Specified as label or (reg).</p> <p>The location of a single 4-byte ECB.</p>"},{"location":"reference/svc_services/#ecblist","title":"ECBLIST=","text":"<p>Specified as label or (reg). The location of a sequence of 4-byte addresses, each of which points to a 4-byte  ECB. The last 4-byte address must have bit 0 set to 1.</p> <p>Note</p> <p>For DECBs, use the CHECK macro rather than WAIT, otherwise error routines  may not be correctly invoked.</p>"},{"location":"reference/svc_services/#usage_1","title":"Usage","text":"<p>Wait for 2 out of 3 ECBs.</p> <pre><code>         WAIT  2,ECBLIST\n......\nECBLIST  DC    A(ECB1)\n         DC    A(ECB2)\n         DC    A(X'80000000'+ECB3)\nECB1     DC    F'0'\nECB2     DC    F'0'\nECB3     DC    F'0'\n</code></pre>"},{"location":"reference/svc_services/#register-usage_8","title":"Register Usage","text":"<ul> <li>R0 = Number of ECBs</li> <li>R1 = ECB address</li> </ul>"},{"location":"reference/svc_services/#post","title":"POST - Signal ECB completion","text":"<p>Signal the completion of one ECB.</p> <pre><code>name     POST  ecb,code\n</code></pre>"},{"location":"reference/svc_services/#parameters_9","title":"Parameters","text":""},{"location":"reference/svc_services/#ecb_2","title":"ecb","text":"<p>ecb is required. Specified as label or (reg). The location of a single 4-byte  ECB.</p>"},{"location":"reference/svc_services/#code","title":"code","text":"<p>code is optional and defaults to zero. Specified as a value (eg. 14 or X'123')  or as (reg).</p>"},{"location":"reference/svc_services/#return_5","title":"Return","text":"<p>The completion code is placed in bits 2-31 of the ECB.</p>"},{"location":"reference/svc_services/#register-usage_9","title":"Register Usage","text":"<ul> <li>R0 = Event completion code</li> <li>R1 = ECB address</li> </ul>"},{"location":"reference/svc_services/#ctd","title":"CTD - Convert binary or FP value","text":"<pre><code>name     CTD   type,IN=input,OUT=output,LINKAGE=\n</code></pre> <p>Convert a binary or floating point value to a printable format.</p>"},{"location":"reference/svc_services/#parameters_10","title":"Parameters","text":""},{"location":"reference/svc_services/#type_3","title":"type","text":"<p>This is a numeric value which determines the operation to be carried out.  Equates are automatically generated. The value of type also determines the  length of the input field.</p> <p>type may be specified in a register eg. (R5). </p> Value Equate Length Description 1 CTD_INT128 16 binary 2 CTD_EH 4 short HFP 3 CTD_EB 4 short BFP 4 CTD_DH 8 long HFP 5 CTD_DB 8 long BFP 6 CTD_LH 16 extended HFP 7 CTD_LB 16 extended BFP 8 CTD_DD 8 long DFP 9 CTD_ED 4 short DFP 10 CTD_LD 16 extended DFP"},{"location":"reference/svc_services/#in","title":"IN=","text":"<p>The input field may be specified as a literal eg. <code>IN==DH'3.8'</code>, a label, a  register pointer eg. <code>IN=(R4)</code> or a register eg. <code>IN=R4</code>.</p> <p>For some types, input from a register implies the use of a register pair as follows:</p> Value Equate Register specified 1 CTD_INT128 Any even general register, input is from the even/odd pair. 2 CTD_EH Any floating point register. 3 CTD_EB Any floating point register. 4 CTD_DH Any floating point register. 5 CTD_DB Any floating point register. 8 CTD_DD Any floating point register. 9 CTD_ED Any floating point register. 6 CTD_LH The first floating point register of a valid pair, input is from the the register pair. 7 CTD_LB The first floating point register of a valid pair, input is from the the register pair. 10 CTD_LD The first floating point register of a valid pair, input is from the the register pair."},{"location":"reference/svc_services/#out","title":"OUT=","text":"<p>The output field may be specified as a label or a register pointer eg. <code>OUT=(R4)</code>.</p> <p>The output field is always 45 bytes, and is initialized to blanks. Not all 45  bytes may be used.</p> <p>The output field will be ASCII if the ASCII option is used, otherwise EBCDIC  will be used.</p> <p>The output field has the following format in this sequence: </p> Output field Condition - If the value is negative n...n Digits preceding the decimal point. If the value is less than 1 and there is no exponent, then 0 is output. eg. 0.04 . Decimal point if there are decimal positions n...n Digits following the decimal point if the value is not a whole number E Indicates an exponent follows - Indicates a negative exponent nnnn The exponent value, 1-4 digits <p>Examples:</p> Value Output zero 0 root2 1.4142... -root2 -1.4142... 50! 3.0414...E64 2 power -50 8.8817...E-16"},{"location":"reference/svc_services/#linkage","title":"LINKAGE=","text":"<ul> <li>SVC (default) invokes SVC 170</li> <li>CALL generates a CALL to module FPCONMFC</li> </ul>"},{"location":"reference/svc_services/#register-usage_10","title":"Register Usage","text":"<ul> <li>R0 = Parameter formation</li> <li>R1 = Parameter list</li> <li>R14 = Subroutine call</li> <li>R15 = Subroutine address and return code</li> </ul>"},{"location":"reference/svc_services/#return_6","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - CTD ok</li> <li>8 - Invalid data address</li> </ul>"},{"location":"reference/svc_services/#cfd","title":"CFD - Convert to binary or FP value","text":"<p>Convert a printable format number to a binary or floating point value.</p> <pre><code>name     CFD   type,IN=input,OUT=output,LINKAGE=\n</code></pre>"},{"location":"reference/svc_services/#parameters_11","title":"Parameters","text":""},{"location":"reference/svc_services/#type_4","title":"type","text":"<p>This is a numeric value which determines the operation to be carried out.  Equates are automatically generated. The value of type also determines the  length of the output field. </p> <p>type may be specified in a register eg. (R5).</p> Value Equate Length Description 21 CFD_INT128 16 binary 22 CFD_EH 4 short HFP 23 CFD_EB 4 short BFP 24 CFD_DH 8 long HFP 25 CFD_DB 8 long BFP 26 CFD_LH 16 extended HFP 27 CFD_LB 16 extended BFP 28 CFD_DD 8 long DFP 29 CFD_ED 4 short DFP 30 CFD_LD 16 extended DFP"},{"location":"reference/svc_services/#in_1","title":"IN=","text":"<p>The input field may be specified as a label or a register pointer eg. (R4).</p> <p>The input field must be in ASCII if the ASCII option is used, otherwise EBCDIC.</p> <p>The input field is always 45 bytes, and has the following format in this sequence:</p> output field condition Optional preceding blanks - If the value is negative n...n Digits preceding the decimal point. . Decimal point if there are decimal positions n...n Digits following the decimal point if the value is not a whole number E Indicates an exponent follows - Indicates a negative exponent nnnn The exponent value, 1-4 digits <p>For CFD_INT128, all correct forms are accepted and any decimal places are discarded:</p> <pre><code>129E-1 = 12\n</code></pre>"},{"location":"reference/svc_services/#out_1","title":"OUT=","text":"<p>The output field may be specified as a label, a register pointer eg. <code>OUT=(R4)</code>  or a register eg. <code>OUT=R4</code></p> <p>For some types, output to a register implies the use of a register pair as follows:</p> Value Equate Register specified 21 CTD_INT128 Any even general register, input is from the even/odd pair. 22 CTD_EH Any floating point register. 23 CTD_EB Any floating point register. 24 CTD_DH Any floating point register. 25 CTD_DB Any floating point register. 28 CTD_DD Any floating point register. 29 CTD_ED Any floating point register. 26 CTD_LH The first floating point register of a valid pair, input is from the the register pair. 27 CTD_LB The first floating point register of a valid pair, input is from the the register pair. 30 CTD_LD The first floating point register of a valid pair, input is from the the register pair."},{"location":"reference/svc_services/#linkage_1","title":"LINKAGE=","text":"<ul> <li>SVC (default) invokes SVC 171</li> <li>CALL generates a CALL to module FPCONMFC</li> </ul>"},{"location":"reference/svc_services/#register-usage_11","title":"Register Usage","text":"<ul> <li>R1 = Parameter list</li> <li>R14 = Subroutine call</li> <li>R15 = Subroutine address and return code</li> </ul>"},{"location":"reference/svc_services/#return_7","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - CFD ok</li> <li>8 - Invalid data address</li> <li>12 - invalid input data or number too large for format type</li> </ul>"},{"location":"reference/svc_services/#getenv","title":"GETENV - Get environment variable","text":"<p>Get an environment variable from the OS command environment.</p> <p>GETENV extracts the string in a program.</p> <pre><code>name     GETENV setname\nname     GETENV (reg)\n</code></pre>"},{"location":"reference/svc_services/#parameters_12","title":"Parameters","text":""},{"location":"reference/svc_services/#setname","title":"setname","text":"<p>setname is the label of a null terminated string or the string can be pointed  to by reg.</p> <pre><code>SETNAME  DC    C'MYDATA',X'00'\n</code></pre> <p>GETENV acquires a storage area for the variable and sets the address in GR2. The  string is terminated with X'00'.</p>"},{"location":"reference/svc_services/#register-usage_12","title":"Register Usage","text":"<ul> <li>R0 = Function code</li> <li>R1 = setname pointer</li> <li>R2 = Address of variable</li> <li>R15 = Return code</li> </ul>"},{"location":"reference/svc_services/#return_8","title":"Return","text":"<p>GR15 has a return code:</p> <ul> <li>0 - GETENV ok</li> <li>4 - setname is null</li> <li>8 - variable is null</li> </ul>"},{"location":"reference/svc_services/#comrg","title":"COMRG - Comm region addressability","text":"<p>Note</p> <p>VSE only</p> <p>Establish addressability to the Communications region in the ZCVT.</p> <pre><code>         COMRG REG=(reg)\n</code></pre> <ul> <li>If REG is omitted it defaults to GR1.</li> <li>It is the users responsibility to provide a DSECT to map the COMRG.</li> </ul>"},{"location":"reference/svc_services/#register-usage_13","title":"Register Usage","text":"<ul> <li>R1 = Address the ZCVT</li> </ul> <p>reg used in REG parm.</p>"},{"location":"reference/svc_services/#time-periods","title":"Time periods","text":"<ul> <li>ms - milliseconds 0.001 seconds (one thousandth)</li> <li>\u00b5s - microseconds 0.000001 seconds (one millionth)</li> <li>ns - nanoseconds 0.000000001 seconds (one billionth)</li> </ul>"},{"location":"reference/svc_services/#event-control-block","title":"Event Control Block","text":""},{"location":"reference/svc_services/#bits-0-1","title":"Bits 0-1","text":"<ul> <li>00 - The initial state. WAIT requires both these bits to be zero.</li> <li>10 - When the WAIT macro is issued for the ECB, this wait bit is set and the    program enters the wait state.</li> <li>01 - Set to this state internally or by the POST macro indicates that the    event is complete or that the task in a wait state is to be resumed. It is    valid to test for this state using a bit test instruction like TM.  </li> <li>11 Invalid.</li> </ul>"},{"location":"reference/svc_services/#bits-2-31","title":"Bits 2-31","text":"<p>Completion code, set internally or by the POST macro.</p>"},{"location":"reference/vsam_file_services/","title":"zVSAM services","text":"<p>With the exception of the DDNAME parameter explained below, all supported  parameters are implemented compatibly with IBM's VSAM implementation. For  details, please refer to z/OS DFSMS Macro Instructions for Data Sets (SC23-6852-02).</p>"},{"location":"reference/vsam_file_services/#macro-reference","title":"Macro reference","text":""},{"location":"reference/vsam_file_services/#acb-access-control-block","title":"ACB - Access control block","text":"<pre><code>label    ACB   AM=VSAM,                                      X\n               DDNAME=ddname,                                X\n               PASSWD=ptr,                                   X\n               EXLST=ptr,                                    X\n               MACRF=(keyword list),                         X\n               BUFSP=nr,                                     X\n               BUFND=nr,                                     X\n               BUFNI=nr,                                     X\n               RMODE31=keyword,                              X\n               STRNO=1,                                      X\n               BSTRNO=nr,                                    X\n               MAREA=ptr,                                    X\n               MLEN=nr,                                      X\n               RLSREAD=keyword,                              X\n               SHRPOOL=nr\n</code></pre> <p>The ACB macro will generate an ACB and initialize it according to the parameters  specified on the macro invocation.</p> <p>Direct access to subfields in the ACB is discouraged. Use SHOWCB ACB=, TESTCB  ACB= and/or MODCB ACB= to inspect, test, and/or modify the ACB's content.</p> <p>All keywords on the ACB macro are optional. Before the cluster is opened, all  ACB values can be modified using MODCB ACB=, or by changing the ACB directly.  The latter is not recommended, as it is not guaranteed to be portable or  compatible with future versions of zVSAM.</p>"},{"location":"reference/vsam_file_services/#parameters","title":"Parameters","text":""},{"location":"reference/vsam_file_services/#am-access-method","title":"AM - Access method","text":"<p>Designates this ACB as a zVSAM ACB.</p>"},{"location":"reference/vsam_file_services/#ddname-data-name","title":"DDNAME - Data name","text":"<p>DDNAME refers to the name of an environment variable in the host OS. </p> <p>This variable in turn should contain the path and qualified filename of the  cluster to be opened. The qualifier is the name of an environment variable in  the host OS and is the path to the assembled catalog.</p> <pre><code>SET ddname=drive:\\path\\catalog.filename\nSET catalog=drive:\\path \n</code></pre> <p>Warning</p> <p>The ddname variable may only contain one dot</p>"},{"location":"reference/vsam_file_services/#passwd-password-pointer","title":"PASSWD - Password pointer","text":"<p>Pointer to password for the cluster. Points to a single byte length followed by the password. </p> <pre><code>X'05',C'ABCDE'\n</code></pre>"},{"location":"reference/vsam_file_services/#exlst-exit-list-pointer","title":"EXLST - Exit list pointer","text":"<p>Pointer to an exit list.  See EXLST macro for more details.</p>"},{"location":"reference/vsam_file_services/#macrf-processing-options","title":"MACRF - Processing options","text":"<p>A list of keywords is provided.</p> <pre><code>MACRF=(KEY,DIR)\n</code></pre> Keyword group Keyword Description [ADR, KEY, CNV] ADR Addressed access to ESDS by (X)RBA. Using (X)RBA to access a KSDS is not supported. KEY Keyed access to a KSDS. RRN access to an RRDS. CNV Not supported. Keyword is flagged with a warning message. [DFR | NDF] DFR Allow writes to be deferred NDF Do not defer writes [DIR, SEQ, SKP] DIR Direct access to ESDS, KSDS or RRDS SEQ Sequential access to ESDS, KSDS or RRDS SKP Skip sequential access to KSDS or RRDS. Only for keyed access. Allows the use of POINT. [IN, OUT] IN Read only access for ESDS, KSDS or RRDS OUT Both read and write access for ESDS, KSDS or RRDS [NIS | SIS] NIS Normal Insert Strategy for KSDS SIS Sequential Insert Strategy for KSDS [NRM | AIX] NRM DDNAME indicates cluster to be processed AIX DDNAME of a path to access an AIX directly, rather than using it to access records in the underlying base cluster. [NRS | RST] Not supported. Keyword is flagged with a warning message [LSR | GSR | NSR | RLS] Local, Global or no Shared Buffers. RLS is not supported [NUB | UBF] Not supported. Keyword is flagged with a warning message [CFX | NFX] Not supported. Keyword is flagged with a warning message [DDN | DSN] Not supported. Keyword is flagged with a warning message [ICI | NCI] Not supported. Keyword is flagged with a warning message [LEW | NLW] Not supported. Keyword is flagged with a warning message"},{"location":"reference/vsam_file_services/#bufsp-buffer-storage","title":"BUFSP - Buffer storage","text":"<p>Max amount of storage (in bytes) to use for buffers. </p> <p>Maximum buffer space in virtual storage for this cluster.</p> <p>This is the combined size in bytes of all buffers allocated for this cluster.  If (BUFND + BUFNI) * Block_size exceeds the value specified for BUFSP, then  BUFND and BUFNI will be reduced proportionally to keep the total allocation  below the limit specified in the BUFSP parameter.</p>"},{"location":"reference/vsam_file_services/#bufnd-data-buffers","title":"BUFND - Data buffers","text":"<p>Number of data buffers to allocate for this ACB.</p> <p>Specify a number between 1 and 65535.</p>"},{"location":"reference/vsam_file_services/#bufni-index-buffers","title":"BUFNI - Index buffers","text":"<p>Number of index buffers to allocate for this ACB.</p> <p>Specify a number between 1 and 65535.</p>"},{"location":"reference/vsam_file_services/#rmode31-above-the-line-storage-usage","title":"RMODE31 - Above the line storage usage","text":"<p>The default value for RMODE31 is NONE.</p> <p>Specifies whether buffers and/or control blocks should be allocated below or  above the 16M line:</p> option effect NONE Control Blocks and buffers below 16M CB Control Blocks above or below 16M, buffers below 16M BUFF Control Blocks below 16M, buffers above or below 16M ALL Control Blocks and buffers above 16M or below 16M"},{"location":"reference/vsam_file_services/#strno-concurrent-requests","title":"STRNO - Concurrent requests","text":"<p>Number of concurrent requests allowable for this ACB. </p> <p>Specify a number between 1 and 255.</p>"},{"location":"reference/vsam_file_services/#bstrno-initial-allocated-requests","title":"BSTRNO - Initial allocated requests","text":"<p>Beginning number of concurrent requests allocated to this ACB when a path is  opened. Only applies if MACRF=NSR. </p> <p>Specify a number between 0 and 255.</p>"},{"location":"reference/vsam_file_services/#unsupported-options","title":"Unsupported options","text":"<p>The following options are currently not supported. If used, the keyword is flagged as ignored with a warning message.</p> <ul> <li>MAREA</li> <li>MLEN</li> <li>RLSREAD</li> <li>SHRPOOL</li> </ul>"},{"location":"reference/vsam_file_services/#open-open-cluster","title":"OPEN - Open cluster","text":"<pre><code>label    OPEN  (entry[,entry]...),\n         MODE=,\n         MF=,\n</code></pre> <p>The open macro is used to open one or more clusters and/or one or more  sequential files in a single call.</p> <p>A cluster needs to be opened before it can be processed. </p>"},{"location":"reference/vsam_file_services/#parameters_1","title":"Parameters","text":""},{"location":"reference/vsam_file_services/#entry-acbdcb-address","title":"entry - ACB/DCB address","text":"<pre><code>addr[,options],[...]\n</code></pre> <p>The OPEN macro accepts a list of entries. Each entry consists of two consecutive  parameters, address and options.</p> <p>addr - Address of ACB or DCB</p> <p>The address can be specified as an A-type address or as a register. If a register  is coded the register number or name must be enclosed in parentheses. The address  can be either the address of a DCB or the address of an ACB</p> <p>options</p> <ul> <li>For DCB, options may be encoded according to the z390 File Services.</li> <li>For ACB, options list is ignored and should be coded as an omitted parameter.</li> </ul> <p>For ACB's, all options are taken from the ACB, not the open parm list.</p> <p>Open parameter list entries have two different formats depending on the  MODE parameter.</p> <ul> <li>MODE=24 <code>AL1(option),AL3(DCB/ACB address)</code> R1 points to the list.</li> <li>MODE=31 <code>AL1(option),XL3'00',AL4(DCB/ACB address)</code> R0 points to the list and R1=0.</li> </ul> <p>Available option values:</p> <ul> <li>INPUT - X'40'</li> <li>OUTPUT - X'20'</li> <li>UPDATE - X'60'</li> </ul> <p>The last entry has the X'80' bit on in option.</p>"},{"location":"reference/vsam_file_services/#mf-parm","title":"MF - Parm","text":"<p>Available options:</p> option effect MF=I or omitted An open parmlist is generated inline, plus a call to the OPEN SVC using the parmlist. MF=L An open parmlist is generated inline. MF=(E,addr) Code to modify/populate the open parameter list at the indicated address, which may be a relocatable constant or a (register), plus a call to the OPEN SVC using the parmlist."},{"location":"reference/vsam_file_services/#mode-residence-mode","title":"MODE - Residence mode","text":"<p>Residency mode of all control blocks involved. </p> <ul> <li>MODE=24 - Use below the line only </li> <li>MODE=31 (Default) - if any resides above the line.</li> </ul>"},{"location":"reference/vsam_file_services/#exlst-exit-list-control-block","title":"EXLST - Exit list control block","text":"<pre><code>label    EXLST AM=VSAM, \n         EODAD=(addr[,mod]),\n         LERAD=(addr[,mod]),\n         SYNAD=(addr[,mod]),\n         JRNAD=(addr[,mod]),\n         UPAD=(addr[,mod]),\n         RLSWAIT=(addr[,mod])\n</code></pre> <p>The EXLST macro will generate an exit list control block and initialize it  according to the parameters specified on the macro invocation.</p> <p>Info</p> <p>The structure and layout of the generated EXLST are not part of the  interface and are therefore not shown. Direct access to subfields in the  EXLST is discouraged. Use SHOWCB EXLST=, TESTCB EXLST= and/or MODCB EXLST=  to inspect, test, and/or modify the EXLST's content.</p> <p>All keywords on the EXLST macro are optional. Before the cluster is opened, all  EXLST values can be modified using MODCB EXLST=, or by changing the EXLST  directly. The latter is not recommended, as it is not guaranteed to be portable  or compatible with future versions of zVSAM.</p> <p>The AMODE for the exit routines is encoded in the address using the common  convention.</p> <p>For exit modifiers, if a routine is not active it will not be called by zVSAM.</p> <p>The secondary modifier of <code>L</code> (for Load from linklib) is not currently supported.</p>"},{"location":"reference/vsam_file_services/#parameters_2","title":"Parameters","text":""},{"location":"reference/vsam_file_services/#am-access-method_1","title":"AM - Access method","text":"<p>AM=VSAM - Designates this EXLST as a zVSAM EXLST.</p>"},{"location":"reference/vsam_file_services/#eodad-end-of-data-exit","title":"EODAD - End of data exit","text":"<pre><code>EODAD=(addr[,mod])\n</code></pre> <p>addr - entry address </p> <p>Optional parameter to specify the entry address of an exit that handles an  end-of-data condition during sequential access.</p> <p>mod - modifier</p> <ul> <li>A - Active </li> <li>N - Not active</li> </ul> <p>As long as the routine is not active it will not be called by zVSAM.</p> <p>The secondary modifier of <code>L</code> (for Load from linklib) is not currently supported.</p>"},{"location":"reference/vsam_file_services/#lerad-logical-error-analysis-exit","title":"LERAD - Logical error analysis exit","text":"<pre><code>LERAD=(addr[,mod])\n</code></pre> <p>addr - entry address </p> <p>Entry address of an exit routine that handles logic errors.</p> <p>The AMODE for the routine is encoded in the address using the common convention.</p> <p>mod - modifier</p> <ul> <li>A - Active </li> <li>N - Not active</li> </ul> <p>As long as the routine is not active it will not be called by zVSAM.</p> <p>The secondary modifier of <code>L</code> (for Load from linklib) is not currently supported.</p>"},{"location":"reference/vsam_file_services/#synad-physical-error-analysis-exit","title":"SYNAD - Physical error analysis exit","text":"<pre><code>SYNAD=(addr[,mod])\n</code></pre> <p>addr - entry address </p> <p>Optional parameter to specify the entry address of an exit that handles physical  errors.</p> <p>mod - modifier</p> <ul> <li>A - Active </li> <li>N - Not-active</li> </ul>"},{"location":"reference/vsam_file_services/#close-close-cluster","title":"CLOSE - Close cluster","text":""},{"location":"reference/vsam_file_services/#rpl-request-parameter-list","title":"RPL - Request parameter list","text":""},{"location":"reference/vsam_file_services/#point","title":"POINT","text":""},{"location":"reference/vsam_file_services/#get","title":"GET","text":""},{"location":"reference/vsam_file_services/#put","title":"PUT","text":""},{"location":"reference/vsam_file_services/#erase","title":"ERASE","text":""},{"location":"reference/vsam_file_services/#check","title":"CHECK","text":""},{"location":"reference/vsam_file_services/#endreq","title":"ENDREQ","text":""},{"location":"reference/vsam_file_services/#verify","title":"VERIFY","text":""},{"location":"reference/vsam_file_services/#gencb-generate-control-block","title":"GENCB - Generate control block","text":""},{"location":"reference/vsam_file_services/#modcb-modify-control-block","title":"MODCB - Modify control block","text":""},{"location":"reference/vsam_file_services/#testcb-test-control-block","title":"TESTCB - Test control block","text":""},{"location":"reference/vsam_file_services/#showcb-show-control-block","title":"SHOWCB - Show control block","text":""},{"location":"reference/zpar/","title":"zPAR and zPARTRS","text":"<ul> <li>zPAR - z390 and zCOBOL Program Analysis Reports</li> <li>zPARTRS - Source Execution Trace Utility</li> </ul> <p>http://www.z390.info/zpar/</p> <p>ZPAR - z390 and zcobol Program Analysis Reports ZPARTRS Source Execution Trace Utility</p>"},{"location":"reference/zpar/#zpartrs-trace-source-cobol-assembler-and-exec-cics-execution-report","title":"ZPARTRS - Trace Source COBOL, Assembler, and EXEC CICS Execution Report","text":"<p>ZPARTRS can be used to generate a z390 COBOL, Assembler, and EXEC CICS source  code execution trace report from an existing z390 instruction execution  TRE trace file and the associated program LST and PRN files.  </p> <p>zpar\\ZPARTRS dir\\pgm options - trace command for zcobol and z390 assembler dir\\pgm   -  the name and optional directory path of the TRE execution trace  file must be the first user parameter passed to ZPARTRS.BAT.  The output trace  file will be dir\\pgm.TRS with trace and any error messages.</p> <p>Options - up to 8 additional options separated by spaces can follow the dir\\pgm  parameter:</p> Option Description ASM/NOASM trace assembler program source statements (default is ASM).  (Note this ZPARTRS option to turn ASM source tracing on or off is different from the z390 NOASM option specified in the ZPARTRS.OPT file to suppress assembly and only execute the conditional macro code in ZPARTRS.MLC.) CBL/NOCBL trace zcobol source program statements (default is CBL) DETAIL/NODETAIL include both the TRE instruction trace with operand values and the corresponding source assembler program instruction line with operand names and comments (the default is NODETAIL to only include the assembler source line with PSW and CC) EXCLUDE(pgm1+pgm2+pgmn) list of program modules to exclude from trace (examples include EXCLUDE(DISPLAY) to suppress tracing of the COBOL DISPLAY support module.  Only the code to generate parameter list and call will be generated.) INCLUDE(pgm1+pgm2+pgmn) list of program modules to include in source trace (the default is to only include the first program loaded in the TRE trace if no INCLUDE parameter is included). LOADLIB(path) define optional path for all LST and PRN files.  The default is to use the path in the TRE trace loads for LST files and use the LST include paths for PRN files.  This is useful if you want to save a trace and associated source files seprate from normal execution environment. NOMSG exclude all messages such as WTO, TRACE and error messages (default is to include all messages from included source modules.  The trace also shows single line .... with count of skipped instructions and messages). NOTIME exclude any time-stamps found in TRE file (default is to include them)"},{"location":"reference/zpar/#examples","title":"Examples","text":"<p>Example EXEC CICS, COBOL, and Assembler source traces for the following:</p>"},{"location":"reference/zpar/#demomlc-assembler-wto-hello-world-demo-program","title":"DEMO.MLC - Assembler WTO \"Hello World\" demo program.","text":"<ul> <li><code>ASMLG demo\\DEMO TRACE</code> generates demo\\DEMO.TRE trace file for assembler demo    program with WTO 'Hello World'</li> <li><code>zpar\\ZPARTRS demo\\DEMO NOTIME</code> generate assembler source trace in demo\\DEMO.TRS.</li> <li><code>zpar\\ZPARTRS demo\\DEMO DETAIL NOTIME</code> generate detail assembler trace including    both the TRE instruction operand values and the assembler source lines in demo\\DEMO.TRS.</li> </ul>"},{"location":"reference/zpar/#hellocbl-cobol-program-with-display-hello-world","title":"HELLO.CBL - COBOL program with DISPLAY \"Hello World\".","text":"<ul> <li><code>CBLCLG zcobol\\demo\\HELLO TRACE(E)</code> generates zcobol\\demo\\HELLO.TRE trace file.</li> <li><code>zpar\\ZPARTRS zcobol\\demo\\HELLO NOTIME NOASM</code> generate COBOL only source trace    in zcobol\\demo\\HELLO.TRS.</li> <li><code>zpar\\ZPARTRS zcobol\\demo\\HELLO NOTIME</code> generate COBOL and assembler source    trace in zcobol\\demo\\HELLO.TRS</li> <li><code>zpar\\ZPARTRC zcobol\\demo\\HELLO NOTIME DETAIL</code> generate COBOL and detail    assembler trace with both TRE and assembler source in zcobol\\demo\\HELLO.TRS.</li> </ul>"},{"location":"reference/zpar/#testgui6mlc-assembler-exec-cics-transaction-program-with-form-to-enter-name-address-and-zip","title":"TESTGUI6.MLC - Assembler EXEC CICS transaction program with form to enter name, address, and zip.","text":"<ul> <li><code>cics\\Z390CICG</code> starts zCICS session using local terminal with client side    trace turned on in cics\\Z390CICS.INI file.  </li> <li>The commands entered for the TESTGUI6 trace were <code>CLEAR,GUI6,don,tab,9057 Waterash, tab, 33782, enter, F3, clear, CEMT P SHUT</code>.  </li> </ul> <ul> <li><code>ZPAR\\ZPARTRS cics\\DON0 INCLUDE(TESTGUI6) NOMSG NOTIME</code> (command for trace of    assembler EXEC CICS TESTGUI6.MLC assembler transaction source program lines    executed during session.  The assembler EXEC CICS source statements appear as    ECA= type messages with line breaks.)</li> <li><code>ZPAR\\ZPARTRS cics\\DON0 INCLUDE(TESTGUI6) DETAIL NOMSG NOTIME</code> (command for    detail trace of assembler EXEC CICS TESTGUI6.MLC assembler transaction source    program lines executed during session.  The original TRE lines with operand    hex values are followed by assembler source lines with labels and comments.   The assembler EXEC CICS source statements appear as ECA= type messages with    line breaks.)</li> <li><code>ZPAR\\ZPARTRS cics\\DON0 INCLUDE(TESTGUI6) NOASM NOMSG NOTIME</code> (command for    trace of just the assembler EXEC CICS statements in TESTGUI6.MLC assembler    transaction source program lines executed during session.  Note the use of    NOASM suppresses ASM instructions and only the EXEC CICS assembler statements    are traced.  The assembler EXEC CICS source statements appear as ECA= type    messages with line breaks.)</li> </ul>"},{"location":"reference/zpar/#testbec1cbl-exec-cics-cobol-program-to-display-lines-of-text-at-prompt","title":"TESTBEC1.CBL - EXEC CICS COBOL program to display lines of text at prompt.","text":"<p>The screen capture following execution of BEC1 transaction.</p> <p></p> <ul> <li><code>ZPAR\\ZPARTRS cics\\DON0 INCLUDE(TESTBEC1) NOASM NOMSG NOTIME</code> - generate trace    of COBOL source program lines executed during session.</li> <li><code>ZPAR\\ZPARTRS cics\\DON0 INCLUDE(TESTBEC1) NOMSG NOTIME</code> - generate trace of    COBOL and assembler source program lines executed during session.</li> </ul>"},{"location":"reference/zpar/#zpartrs-user-guide","title":"ZPARTRS User Guide","text":"<p>The program zpar\\ZPARTRS.MLC reads the linker listing LST file for every z390  load module executed in the trace via LINK, LOAD, or XCTL in order to find the  PRN file for every included module in each load module.</p> <p>If LOADLIB(path) is specified, all the LST and PRN files will be loaded from  that directory otherwise the LST files will be loaded from path specified in the  TRE trace for each LOAD svc, and the PRN files will be loaded from the path  specified on the INCLUDE statements in each LST file.</p> <p>If no INCLUDE option is specified, the first loaded program is the only program  source traced.  The source code for each statically linked PRN is loaded into  memory and cross referenced to the PSW-ADDR corresponding to current load  address using HLASM created macro variables which store source code by PSW  address name.</p> <p>Note the same source program may be loaded multiple times at different addresses  during execution. The output source trace file is created with same path and  name as TRE file but with suffix TRS.</p> <p>If no corresponding PRN source line is found when generating all assembler, the  original TRE instruction trace line with opcode and operands is generated  instead as message. This can occur due to missing LST or PRN files or due to  generation of instructions using DC hex values for multiple instructions, use of  ORG to overlay instructions, etc.  </p>"},{"location":"reference/zpar/#source-assembler-lines","title":"Source assembler lines","text":"<ul> <li>PSW-ADDR - instruction PSW trace address with high bit indicating 31 or 24 bit    AMODE from TRE file</li> <li>PSW-CC - condition code at start of instruction from TRE file</li> <li>MODULE-NAME - source module name included in 390 load module (case sensitive)</li> <li>MOD-ADDR - relative module address from PRN listing</li> <li>LINE - source assembler line with comments</li> </ul>"},{"location":"reference/zpar/#source-cobol-lines","title":"Source COBOL lines","text":"<ul> <li>LINE # - line number of source statement</li> <li>MOD_NAME - source module name included in 390 load module (case sensitive)</li> <li>LINE - COBOL or EXEC CICS source line with comments (note assembler EXEC CICS    lines show up as ECA= instead of CBL=) </li> </ul>"},{"location":"reference/zpar/#zpartrs-debugging","title":"ZPARTRS Debugging","text":"<p>Tips on debugging problems with ZPARTRS:</p> <p>The generated TRS file contains all the generated error messages starting with  ERR=.  These messages also appear on the zpar\\zpartrs.err log as mnotes with  4, 8, or 16 error level.  </p> <p>The total error count and max level is displayed at end of report.  </p> <p>The zpartrs return code is set to highest MNOTE error level.</p> <p>The file zpar\\ZPARTRS.OPT contains default options. You can turn on TRACEM to  generate apar\\ZPARTRS.TRM trace file to help debug any conditional macro errors  occurring.  Note this really slows down the execution so cut down test TRE files  are best.</p> <p>INCLUDE and EXCLUDE are mutually exclusive so only specify one or the other.</p> <p>If no source code is found in an included PRN file, an error is generated. This  can occur if the PRN listing has PRINT NOGEN or PRINT OFF.  ZPARTRS is dependent  on PRN file containing source code listing with zcobol statement comments (*ZC)  and/or assembler instruction listing.</p>"},{"location":"reference/zpar/#zpartrs-source-components","title":"ZPARTRS source components","text":"<p>The source code for the 3 files requires to run ZPARTRS are here:</p> <ul> <li>ZPARTRS.MLC - structured conditional macro assembler source program</li> <li>ZPARTRS.BAT = batch command with up to 9 user parameters</li> <li>ZPARTRS.OPT - default options for execution of ZPARTRS referenced by BAT file</li> </ul>"},{"location":"user_guide/z390/commands/","title":"Commands","text":"<p>The following is a list of commands available as part of the z390 toolkit.</p> <p>These commands are scripts that are included in the z390 source and distribution and can be enabled by including the script directory in your system path.</p> <p>Alternatively you can reference the scripts directly from the command line by specifying the full path.</p> WindowsMacOS/Unix <p><code>(z390 install dir)\\bat</code></p> <p><code>(z390 install dir)/bash</code></p>"},{"location":"user_guide/z390/commands/#command-reference","title":"Command reference","text":""},{"location":"user_guide/z390/commands/#z390","title":"z390","text":"<p>Start the GUI interface with optional startup command file input.</p>"},{"location":"user_guide/z390/commands/#mac","title":"mac","text":"<p>Run mz390 macro processor to expand macro source file to BAL assembler source file. \\ The default extension for the input source file is MLC.</p>"},{"location":"user_guide/z390/commands/#asm","title":"asm","text":"<p>Run mz390 and az390 assembler to expand macro assembler source file and generate relocatable OBJ relocatable object file. \\ The default extension for the input source file is MLC.</p> <p>Note</p> <p>The default object file format is binary 80 byte record mainframe compatible format. \\ Use option OBJHEX for ASCII text format containing hex format for object code.  The OBJHEX format supports single CSECT\u2019s over 16 MB and you can read the OBJ file for debugging purposes. See Z390 options for more details.</p>"},{"location":"user_guide/z390/commands/#asml","title":"asml","text":"<p>Run mz390, az390, and lz390 to expand macro assembler source, assemble, and link to generate 390 load module. \\ The default extension for the input source file is MLC.</p>"},{"location":"user_guide/z390/commands/#asmlg","title":"asmlg","text":"<p>Run mz390, az390, lz390 and ez390 to expand macro source, assemble, link, and execute 390 load module. \\ The default extension for the input source file is MLC.</p>"},{"location":"user_guide/z390/commands/#link","title":"link","text":"<p>Run lz390 linker to read one or more relocatable OBJ files and create binary relocatable 390 load module file.</p> <p>If the linker option AUTOLINK is on, the linker will search SYSLIB OBJ file directory for external references to be statically linked.</p> <p>See z390 options for more details.</p> <p>The linker includes options for AMODE and RMODE to control loading and execution modes.</p> <p>The linker also has optional input command file (with default suffix LKD) which may contain explicit INCLUDE, ENTRY, ALIAS, and NAME commands.</p>"},{"location":"user_guide/z390/commands/#exec","title":"exec","text":"<p>Run ez390 emulator to execute 390 load module.</p>"},{"location":"user_guide/z390/commands/#interactive-debugger","title":"Interactive debugger","text":"<p>The ez390 emulator supports the following interactive test commands when the TEST option is specified:</p> <ul> <li><code>addr=sdt</code> \u2013 set memory value  (i.e. <code>1r?=x'80'</code> changes mem at (r1) 31 bit</li> <li><code>reg=sdt</code> - set register value (i.e. <code>15r=8</code> changes reg 15 to 8)</li> <li><code>A addr</code> \u2013 set or reset up to 100 instruction address stops with hex address or relative expression such as <code>*+4</code></li> <li><code>AR nn</code> \u2013 display specified access register else all AR 0-15</li> <li><code>B=addr</code> - set base for rel addr (i.e. <code>B=15r%</code> sets base to (r15) 24 bit</li> <li><code>D</code> \u2013 display DCB file information from TIOT</li> <li><code>E</code> \u2013 toggle between EBCDIC and ASCII mode</li> <li><code>F nn</code> \u2013 display floating point register else FPC and all FPR 0-15</li> <li><code>FPC</code> \u2013 display floating-point-control register</li> <li><code>FPC+</code> \u2013 display floating-point-control register in verbose mode</li> <li><code>G</code> - nn/addr/opcode - exec nn instr. or until specified instruction address or opcode is found with no trace.    One instruction is always executed before next opcode break even if it's the same instruction such as a <code>BCT 1,*</code>.    Addresses are distinguished from count by hex . or relative expression term such as <code>*</code>, <code>+</code>, or <code>-</code>.</li> <li><code>H</code>  -  list help command summary</li> <li><code>J addr</code> -  jump to new addr and trace instruction</li> <li><code>L</code>  - list all regs and trace current instruction</li> <li><code>L reg</code> - list contents of register (ie <code>l 1r</code> dumps register 1</li> <li><code>L addr len</code> - list contents of memory area (i.e. <code>l 10. 4</code> dumps cvt addr</li> <li><code>M</code> \u2013 display total memory in MB and total allocate and free bytes</li> <li><code>P</code> \u2013 display current loaded program information from CDE including name, entry and length</li> <li><code>PSW</code> \u2013 display current PSW</li> <li><code>PSW+</code> \u2013 display current PSW in verbose mode</li> <li><code>PSW16</code> \u2013 display 16 byte current PSW</li> <li><code>Q</code> - quit execution now</li> <li><code>R nn</code> \u2013 display specified general purpose register else all GPR 0-15</li> <li><code>S</code>  - clear register, address, and memory breaks</li> <li><code>S reg??sdt</code>  - set break on register change</li> <li><code>S addr??sdt</code> - set break on memory change</li> <li><code>T nn/addr/opcode</code> - trace nn instr. or until specified instruction address or opcode is found.    One instruction is always executed before next opcode break even if it's the same instruction such as a <code>BCT 1,*</code>.    Addresses are distinguished from count by hex . or relative expression term such as <code>*</code>, <code>+</code>, or <code>-</code>.    The symbol EPA may be used in place of address to refer to last program load point address.</li> <li><code>V</code> - validate/verify</li> <li> <ul> <li><code>V * nn</code> - validate nn bytes starting at PSW address</li> </ul> </li> <li> <ul> <li><code>V psw.subfield</code> - validate PSW subfield</li> </ul> </li> <li> <ul> <li><code>V nnr</code> - validate GPR nn</li> </ul> </li> <li><code>Z</code>  - exit test and run to end of program without trace</li> <li><code>* addr</code> = <code>hex.</code>,<code>+-hex</code>, <code>*+-hex</code>, <code>dec</code>, <code>nnr%</code> (24 bit), <code>nnr?</code> (31 bit)</li> <li><code>* reg</code> = nnr where nn = 0-15</li> <li><code>* sdt</code> = self defining term (<code>b'01'</code>, <code>c'ab'</code>, <code>f'1'</code>, <code>h'2'</code>, <code>x'ff'</code>)</li> <li><code>* ??</code> = break compare operator (<code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>)</li> </ul>"},{"location":"user_guide/z390/structured_macro/","title":"Structured Macro Extensions","text":"<p>z390 has extended the HLASM macro syntax to add support for structured macro  code. This is sometimes referred to as Structured Programming Extensions or  SPE.</p> <p>Warning</p> <p>z390 structured macro extensions are not supported by IBM HLASM. You need to translate the macros from structured to standard first.</p>"},{"location":"user_guide/z390/structured_macro/#instructions","title":"Instructions","text":""},{"location":"user_guide/z390/structured_macro/#alternate-selection-of-code-blocks","title":"Alternate selection of code blocks","text":"<ul> <li>AIF  (expression) - execute the following block of code if expression is true</li> <li>AELSEIF (expression) - end prior block and execute following block if    expression is true</li> <li>AELSE - end prior block and execute following block if prior AIF and AELSEIF    false</li> <li>AEND - end last block for AIF at current level of nesting</li> </ul>"},{"location":"user_guide/z390/structured_macro/#repeat-execution-of-code-block","title":"Repeat execution of code block","text":"<ul> <li>AWHILE (expression) - repeat following code block while expression is true    (test at beginning)</li> <li>AEXIT AWHILE - exit to end of inner most AWHILE (for exceptions within nested AIF)</li> <li>AEND - end block of code for AWHILE at current level of nesting</li> <li>AUNTIL (expression) - repeat following code block until expression is true (test at end)</li> <li>AEXIT AUNTIL - exit to end of inner most AUNTIL (for exceptions within nested AIF)</li> <li>AEND - end block of code for AUNTIL at current level of nesting</li> </ul>"},{"location":"user_guide/z390/structured_macro/#perform-code-block","title":"Perform code block","text":"<ul> <li>ACALL name - call the named code block and return to next instruction</li> <li>AENTRY name - define start of performed block of code (skip over if entered    sequentially)</li> <li>AEXIT AENTRY - exit from AENTRY block of code (for exceptions within nested AIF)</li> <li>AEND - end the current performed code block and exit to next statement after APM</li> </ul>"},{"location":"user_guide/z390/structured_macro/#perform-selection-of-code-blocks-based-on-index-from-0-to-255","title":"Perform selection of code blocks based on index from 0 to 255","text":"<ul> <li>ACASE (expression) - execute selected block based on value of index expression</li> <li>AWHEN values - define end of previous block and start of code block for index values<ul> <li>values can be decimal (0-255), character C'?', or hex X'??'</li> <li>one or more values may be specified separated by commas</li> <li>a range of values may be specified as (value1,value2)</li> <li>for example AWHEN (C'0',C'9') defines EBCDIC digits 240-249</li> </ul> </li> <li>AEXIT ACASE - exit to end of current ACASE (for exceptions within nested AIF)</li> <li>AELSE - define optional code block if no AWHEN block defined for current index</li> <li> <p>AEND - end code block for ACASE</p> </li> <li> <p>Additional extension to indent label field by preceding with colon (:)</p> </li> </ul>"},{"location":"user_guide/z390/structured_macro/#translating-to-standard","title":"Translating to standard","text":"<p>The following items are included for general use:</p> <ul> <li> zstrmac - script to convert macro to standard HLASM format</li> <li>bldzstrmacs - script to translate all the SPM's in z390\\mac    directory to HLASM compatible format </li> <li>rt\\test\\ZSTRMAC2.ZSM - structured translator which can be translated to standard    HLASM compatible code using itself.</li> <li>rt\\test\\ZSTRMAC1.MLC - bootstrap structured translator which is HLASM compatible.  </li> <li> linklib\\zstrmac.txt - the generated HLASM compatible translator.</li> </ul>"},{"location":"user_guide/z390/structured_macro/#regression-tests","title":"Regression tests","text":"<p>You can execute the regression tests by using the script <code>runzstrmactests</code>.</p> <p>The following regression test programs are included:</p> <ul> <li>rt\\test\\ZSTRMAC1.MLC - bootstrap version of translator written in standard HLASM.</li> <li>rt\\test\\ZSTRMAC2.ZSM - structured version of the translator which uses all the structures.</li> <li>rt\\test\\TESTSPE1.ZSM - test program for ZSTRMAC1 with all the basic structures.</li> <li>rt\\test\\TESTSPE2.ZSM - test program for ZSTRMAC2 with all the basic structures in lower case</li> <li>rt\\test\\TESTSPE3.ZSM - test of all 256 ACASE values using all forms of AWHEN operands</li> <li>rt\\test\\TESTSPE4.ZSM - test error messages</li> <li>rt\\test\\TESTSPM1.MLC - test program for structured programming macros</li> </ul>"},{"location":"user_guide/z390/structured_macro/#demo","title":"Demo","text":"<p>The following demo programs using the macro extensions are include:</p> <ul> <li>demo\\DEMOM8Q1.MLC - solve 8 queens chess problem suing recursive structured macro</li> </ul>"},{"location":"user_guide/z390/structured_macro/#utilities","title":"Utilities","text":"<p>The following z390 utility programs using the macro extensions are included:</p> <ul> <li>linklib\\RTGENDIR.MLC - read file system directory and create list of file names</li> <li>linklib\\RTGENCMP.MLC - read merged list of files from 2 directories and    generate compare commands</li> <li>linklib\\RTGENDIF.MLC - read difference files and generate erase commands for    identical files</li> </ul> <p>The following system macros use the macro extensions:</p> <ul> <li>EQUREGS.MAC - generate EQU symbols if not already generated for GPR and FPR registers</li> <li>ZCLOSE.MAC - close files (called from CLOSE and other user macros in concatenated directories)</li> <li>ZOPEN.MAC - open files (called from OPEN and other user macros in concatenated directories)</li> </ul>"},{"location":"user_guide/z390/z390_filetypes/","title":"z390 File types","text":"<p>Note: The file types documented here are used by z390 when it creates a file whose extension is not specified explicitly, or when it is passed a file whose extension is not specified explicitly. Other extensions are allowed and supported, but have to be specified explicitly.</p> <p>The scope value details where the option is used.</p> <ul> <li>M - mz390 macro processor which reads ASCII assembler source and generates expanded BAL</li> <li>A - az390 assembler which reads BAL and generated OBJ relocatable object code</li> <li>L - lz390 linker which reads OBJ relocatable object files and generates 390 load module</li> <li>E - ez390 emulator runtime which loads and executes 390 load module</li> </ul> Extension Scope Format File Description File or Report Format Description BAL MA-- ASCII Basic Assembly Language generated ASCII source file generated by mz390 when option BAL is specified. 71 characters with optional label starting in position 1 followed by opcode followed by operands if any. A non-space character in position 72 indicates continuation. Positions 73-80 may be used for sequence numbering. CPY MA-- ASCII Copybook source included in source programs, macros, or other copybooks. Same format as BAL. CPZ M--- ASCII Copybook source using z390 extension for structured macro code. Use ZSTRMAC.BAT file1 file2 to translate ZSM type file to standard HLASM compatible MLC type source file. DAT M--- ASCII Input files read via AREAD statements in macro processor. Same format as BAL except text records can be any length with no continuation format required when option ALLOW is specified. ERR MALE ASCII Output log of all START and ENDED messages plus any errors plus any error file references. Text file with messages showing start and stop statistics for each step and any error messages issued by those steps. A cross reference of all macro and copybook files with errors is included at the end. LOG ---E ASCII Output log for GUI or batch command execution controlled by CON option. Test file with messages issued during program execution including start and stop statistics plus any errors and any WTO write to operator messages. LKD --L- ASCII Optional input command for linker (INCLUDE, ENTRY, ALIAS, NAME). Same format as BAL. MAC M--- ASCII Macro source files. Same format as BAL. MLC M--- ASCII Macro assembler source programs read by mz390. Same format as BAL. MOD --LE Binary Binary code output from linker with no header and no RLD records. Can be loaded by Micro Focus CICS. Binary file with all CSECT binary data. OBJ -AL- EBCDIC Relocatable object code file for macro assembler when option NOOBJHEX is requested or defaulted. Mainframe linker compatible relocatable object code 80 byte records (ESD, TXT, RLD, and END). OBJ -AL- ASCII Relocatable object code file for macro assembler when option OBJHEX is requested or defaulted. ASCII readable text extended format supporting 31 bit long sections. The z390 linker can read either format (ASCII / EBCDIC) by examining the file. OPT MALE ASCII Optional options files referenced via @file option from command line or other option files. Text file with z390 options entered in free format delimited by spaces. PCH M--- ASCII Output text files written via PUNCH statements in macro processor. May use extended parameters. Text file output which is not limited to 80 byte BAL format when using ALLOW. Any macro program generating BAL output must format continuations. PRN -A-- ASCII Output assembly language listing from az390. Text file with assembly listing - subject to PRINT directive. STA MALE ASCII Output statistics file listing options set, program statistics, and file references. Text file with detail statistics on each step including all option settings, complete macro and copybook cross reference for mz390, and execution statistics. TRA -A-- ASCII Trace output file for assembler (lists each line being assembled during each pass). Text file with az390 assembler trace output including source file name, relative line, generated line, relative hex offset, and source statement for each assembler pass which may be 2 or more. TRE ---E ASCII Trace output file for emulator (lists each instruction, address, and operand values). Text file with ez390 emulator execution trace output showing hex PSW address, condition code, hex instruction, mnemonic, operand register and storage values at the start of each instruction. TRL --L- ASCII Trace output file for linker (lists each OBJ record processed). Text file with lz390 linker trace output including ESD external symbol hex addresses and lengths, TXT text records and RLD relocation records. TRM M--- ASCII Trace output file for macro process as dictated by TRACE/TRACEP options. Text file with mz390 macro processor trace output. TRS ---E ASCII Report from ZPARTRS utility. Trace CBL and ASM source execution. ZSM M--- ASCII ZSTRMAC Structured Conditional Macro source programs. Use ZSTRMAC.BAT file1 file2 to translate ZSM type file to standard HLASM compatible MLC type source file. 390 --LE Binary Executable z390 load modules created by linker from OBJ files and loaded by emulator. The 390 load modules contain 20 byte header. The code for all CSECT's follows the header. The RLD table follows the code if any. Each RLD field in load module is relocated by the load address determined at load time."},{"location":"user_guide/z390/z390_filetypes/#additional-explanations","title":"Additional explanations:","text":""},{"location":"user_guide/z390/z390_filetypes/#bal","title":"BAL","text":"<p>Basic Assembly Language generated ASCII source file generated by mz390 when option BAL is specified. When option ASM is on (the default), mz390 starts az390 as a separate process running in parallel and passes generated BAL statements directly to it. This allows the first pass of assembler processing to be overlapped with macro expansion and eliminates need to write this file to external disk.</p> <p>Basic Assembler format is free form within first 71 characters with optional label starting in position 1 followed by opcode followed by operands if any. If continuation is required a non-space character appears in position 72. Positions 73-80 may be used for sequence numbering. The <code>ICTL</code> assembler directive may be used to change these default settings but it is not recommended as the macro and copybook files are all in the default format. Embedded AREAD records longer than 71 characters must be in standard continuation format for preloading of MLC and MAC files (a z390 restriction).</p> <p>Note: the default NOALLOW option limits AREAD and PUNCH records to maximum of 80. With the ALLOW option this restriction does  not apply.</p>"},{"location":"user_guide/z390/z390_filetypes/#cpy","title":"CPY","text":"<p>Copybook source included in source programs, macros, or other copybooks.</p>"},{"location":"user_guide/z390/z390_filetypes/#dat","title":"DAT","text":"<p>Text data input files read via AREAD statements in macro processor specifying ID=, DDNAME= or DSNAME= extended parameters. AREAD with no extended parameters reads the next statement in the input stream.</p> <p>Same format as BAL except text records can be any length with no continuation format required when option ALLOW is specified.</p>"},{"location":"user_guide/z390/z390_filetypes/#err","title":"ERR","text":"<p>Output log of all START and ENDED messages plus any errors plus any error file references.</p> <p>Text file with messages showing start and stop statistics for each step and any error messages issued by those steps. A cross reference of all macro and copybook files with errors is included at the end. For full cross reference of all macros and copybooks used see STA file.</p>"},{"location":"user_guide/z390/z390_filetypes/#log","title":"LOG","text":"<p>Output log for GUI or batch command execution controlled by CON option.</p> <p>Test file with messages issued during program execution including start and stop statistics plus any errors and any WTO write to operator messages.</p>"},{"location":"user_guide/z390/z390_filetypes/#lkd","title":"LKD","text":"<p>Optional input SOURCE for linker. Binder commands INCLUDE, ENTRY, ALIAS, NAME are supported. Other commands are silently ignored. Same format as BAL.</p>"},{"location":"user_guide/z390/z390_filetypes/#mac","title":"MAC","text":"<p>Macro source files.</p> <p>Same format as BAL.</p>"},{"location":"user_guide/z390/z390_filetypes/#mlc","title":"MLC","text":"<p>Macro assembler source programs read by mz390.</p> <p>Same format as BAL.</p>"},{"location":"user_guide/z390/z390_filetypes/#mod","title":"MOD","text":"<p>Binary code output from linker with no header and no RLD records. This type file can be created using option MOD and can be loaded as a data table by Micro Focus CICS.</p> <p>Binary file with all CSECT binary data. For example DC C'ABC' using option MOD will result in 3 byte MOD file containing x'C1C2C3'.</p>"},{"location":"user_guide/z390/z390_filetypes/#obj","title":"OBJ","text":"<p>Output relocatable object code file for macro assembler when option NOOBJHEX is requested or defaulted.</p> <p>The default format is mainframe linker compatible relocatable object code 80 byte records (ESD, TXT, RLD, and END). When OBJHEX option is specified for assembler, ASCII readable text extended format supporting 31 bit long sections is generated.</p> <p>The z390 linker can read either format by examining the file.</p>"},{"location":"user_guide/z390/z390_filetypes/#opt","title":"OPT","text":"<p>Optional options files referenced via @file option from command line or other option files.</p> <p>Text file with z390 options entered in free format delimited by spaces. An * will terminate options on a line and start comments on that line.</p>"},{"location":"user_guide/z390/z390_filetypes/#pch","title":"PCH","text":"<p>Output text files written via PUNCH statements in macro processor using optional ID=, DDNAME=, or DSNAME= extended parameters. The default is pgm.PCH.</p> <p>Text file output which is not limited to 80 byte BAL format when using ALLOW. Any macro program generating BAL output must format continuations.</p>"},{"location":"user_guide/z390/z390_filetypes/#prn","title":"PRN","text":"<p>Output assembly language listing from az390.</p> <p>Text file with the following listing fields:</p> <p>1) hex relative offset to instruction 2) hex bytes in instruction or data with up to 8 bytes per line. Directive PRINT DATA will force listing all data 8 bytes per line. 3) (file #/file-line #) generated-line # identifies the file # and the relative file line # for the MLC, MAC, or CPY file that the generated line came from followed by the sequential generated line #. 4) Flag field has + for macro generated lines, and = for line from copybook. 5) BAL line with label, opcode, and operands.</p>"},{"location":"user_guide/z390/z390_filetypes/#sta","title":"STA","text":"<p>Output statistics file listing options set, program statistics, and file references.</p> <p>Text file with detail statistics on each step including all option settings, complete macro and copybook cross reference for mz390, and execution statistics.</p>"},{"location":"user_guide/z390/z390_filetypes/#tra","title":"TRA","text":"<p>Trace output file for assembler (lists each line being assembled during each pass).</p> <p>Text file with az390 assembler trace output including source file name, relative line, generated line, relative hex offset, and source statement for each assembler pass which may be 2 or more depending on usage of LOCTR.</p>"},{"location":"user_guide/z390/z390_filetypes/#tre","title":"TRE","text":"<p>Trace output file for emulator (lists each instruction, address, and operand values).</p> <p>Text file with ez390 emulator execution trace output showing hex PSW address, condition code, hex instruction, mnemonic, operand register and storage values at the start of each instruction. Blank line inserted for each branch to non sequential address. The high bit of PSW hex address indicates 24 or 31 bit address mode.</p>"},{"location":"user_guide/z390/z390_filetypes/#trl","title":"TRL","text":"<p>Trace output file for linker (lists each OBJ record processed).</p> <p>Text file with lz390 linker trace output including ESD external symbol hex addresses and lengths, TXT text records with relative offset within ESD and hex data. RLD relocation records showing hex offset, field length, and ESD symbol.</p>"},{"location":"user_guide/z390/z390_filetypes/#trm","title":"TRM","text":"<p>Trace output file for macro process: - TRACEM lists each macro line executed - TRACEP lists every macro pseudo code instruction executed showing the current value of local and global variables used in SET statements and AIF statements etc</p> <p>Text file with mz390 macro processor trace output file which is typically generated in parallel with the generation of the first pass information in the TRA file since mz390 and az390 run as concurrent tasks. This file includes source file name, relative line number, and source macro statement. For generated BAL output lines the source file# and relative line# cross reference is also include.</p> <p>If the TRACEP option is specified, this file also includes listing of the generation and execution of macro pseudo code instructions.</p>"},{"location":"user_guide/z390/z390_filetypes/#trs","title":"TRS","text":"<p>Report from ZPARTRS utility</p> <p>Trace CBL AND ASM source execution.</p>"},{"location":"user_guide/z390/z390_filetypes/#zsm","title":"ZSM","text":"<p>ZSTRMAC Structured Conditional Macro source programs.</p> <p>Use ZSTRMAC.BAT file1 file2 to translate ZSM type file to standard HLASM compatible MLC type source file.</p>"},{"location":"user_guide/z390/z390_filetypes/#390","title":"390","text":"<p>Executable z390 load modules created by linker from OBJ files and loaded by emulator.</p> <p>The 390 load modules contain 20 byte header with the following:</p> <p>1) 4 byte ASCII character version '1002' 2) 1 byte flag AMODE31 'T' or 'F' 3) 1 byte flag RMODE31 'T' or 'F' 4) 2 bytes reserved '??' 5) 4 byte length of code 6) 4  byte offset to entry 7) 4 byte count of RLD's following code</p> <p>The code for all CSECT's follows the header. The RLD table follows the code if any. Each RLD field in load module is relocated by the load address determined at load time.</p> <p>The 5 byte RLD records are as follows:</p> <p>1) 4 byte offset to RLD field in code 2) 1 byte field length</p> <p>See option MOD and file type MOD to create code without header or any RLD's.</p>"},{"location":"user_guide/z390/z390_options/","title":"z390 Options","text":"<p>The scope value details where the option is used.</p> <ul> <li>M - mz390 macro processor which reads ASCII assembler source and generates expanded BAL</li> <li>A - az390 assembler which reads BAL and generated OBJ relocatable object code</li> <li>L - lz390 linker which reads OBJ relocatable object files and generates 390 load module</li> <li>E - ez390 emulator runtime which loads and executes 390 load module</li> </ul> <p>!!! Note: most options can be prefixed with NO to turn the feature off.</p> <p>Use of parameters with parentheses in *nix shells</p> <p>Unix shells like sh and bash interpret parentheses if not quoted. For this reason, if you need to specify a parameter that contains parentheses, then that parameter should be quoted. </p> <p>For example, the SYSMAC parameter is quoted as it uses parentheses, whereas the ALIGN parameter is not.</p> <p><code>\"SYSMAC(foldername)\" ALIGN</code></p> Option Scope Default Description @filename MALE Options in Z390.OPT file if found Retrieve additional options from free form text file with default suffix OPT. Options can be specified delimited by spaces on as many lines as required. All characters on a line following * are ignored as comments. The @file option can be nested. The default path is the program path. If a file named Z390.OPT exists in the z390 install directory, these options will be applied first as default options. ALIGN A YES Align DS/DC data fields based on type unless explicit length is specified. If duplication factor is 0, then NOALIGN is ignored. ALLOW M NO Allow extensions to HLASM syntax. See note below this table for details. The default of NOALLOW insures HLASM compatibility. AMODE24 LE NO Set 390 load module options to start in 24 bit address mode. AMODE31 LE YES Set 390 load module options to start in 31 bit address mode. ASCII AE NO Generate ASCII versus EBCDIC DC character constants, compare character strings in ASCII versus EBCDIC in macro processor, generate ASCII versus EBCDIC output for UNPK, ED, and EDMK. See note following this table. ASM MA YES Run az390 assembler as subtask of mz390 passing BAL. Note NOASM is for use in pure text processing programs which only use conditional macro code and AREAD/PUNCH with extensions to process ASCII text files. NOASM does not support ordinary symbol attribute tests, OPSYN, or lookahead mode, and requires CHKMAC(0) and CHKSRC(0-2). ASSIST MAE NO Enable assembly and execution of ASSIST I/O and debugging instructions. This option also sets NOLOADHIGH. See ASSIST Support. AUTOLINK L YES Search for unresolved external references in SYSOBJ directory list which defaults to linklib. BAL M NO Generate BAL expanded assembler source file. BS2000 MA NO Support Siemens BS2000 assembler global variables. CHKMAC(0-2) M 0 Check macros during loading. See note below this table for details. CHKSRC(0-3) MA 1 Check input source files. See note below this table for details. CICS MA NO Support EXEC CICS pre-processor expansion and constants. If this option is not on during macro expansion, PROLOG and EPILOG option settings will be ignored. CODEPAGE MALE CODEPAGE(ISO-8859-1+IBM1047) Values: ebcdic+ascii[+LIST]. If +LIST is added the mapping of the 2 codepages along with printable character and Unicode values are displayed on ERR file. A hex dump of the tables and a list of the valid ASCII and EBCDIC Unicode Charset codepages are listed. You can replace the EBCDIC codepage name with a file specification such as IBM1047.HCP (example included) which is in hex dump format. The above defaults match z/OS. CON MALE YES Console output for all start/stop, error, trace, MNOTE's with level &gt; 4, and WTO messages. When the TRACE??? option is specified, the CON option is turned off so only start/stop and abort error messages appear on console log. You can specify CON after last TRACE option to turn it back on if you want all display, trace, and error messages displayed on console log. All the trace messages appear on corresponding TR? file for each z390 program executed. DUMP E NO Generate full memory dump on LOG or TRE if abort. EDF M YES CICS Execution Diagnostic Facility. EPILOG M YES Generate epilog macro call DFHEIEND for CICS program at END statement if CICS option and EPILOG option are on. ERR(100) MALE 100 Terminate process if total errors for program exceeds limit. Use ERR(0) to eliminate any error limit and always generate PRN file. ERRSUM M NO Generate critical error summary on console and ERR file listing missing macros and copybooks. This option requires ASM option and is turned on automatically if missing macros or copybooks are found in the executed macro code path. When ERRSUM is on, ERR(0) is set to prevent abort prior to finding all macro and copybook references. All errors are listed on ERR file along with summary report. Note several iterations may be required to identify and resolve all missing macros and copybooks. GUAM E NO Support one or more GUI Graphical User Access Method dialogs for MCS, TN3270, or graphics user interface. INIT E YES Initialize all registers to hex x'F4', all memory to hex x'F5', and all uninitialized load module areas to x'F6' for easier identification of access to uninitialized registers, memory or program fields. Use NOINIT to perform low value initialization. INSTALL(dir) MALE NO Define alternate z390 install directory to run batch command. The default is set from Java property \"user.dir\". IPL(pgm) E none Execute 390 program at startup. LIST ALE YES Generate PRN, LST, and LOG files for assembler, linker, and execution respectively. LISTCALL MA YES Generate level macro call and exit comments in BAL file which are used by assembler to format first level macro calls preceding assembler lines with \"+\" for macro generated source. LISTUSE A YES List active USING definitions each time USING or DROP changes status in the PRN assembly listing file. LOADHIGH E YES Load programs and allocate memory for GETMAIN/STORAGE from high end of first FQE large enough to satisfy request. The ASSIST option changes this option to NOLOADHIGH causing initial program to load starting at X'8000' which simplifies relative address calculations. LOG(file) MALE pgm Set file name for ERR, TR?, and LOG files. The default is the program name. This option is required when running multiple copies of the same program via CMD startup in order to create separate unique ERR, TR?, and LOG files. Otherwise duplicate programs running in parallel will mod the same ERR, TR?, and LOG file. MACHINE A -- MACHINE / OPTABLE options determine which opcode table is used during assembly. See table below for details, MAXCALL(num) M 50 Set limit for nested macro calls. MAXDISPLAY(num) M 80 Use to increase zCOBOL DISPLAY line size up to 256 characters. MAXESD(num) AL 1000 Set limit for ESD sections or entries in one program. MAXFILE(num) M 1000 Maximum macro and copybook files. MAXGBL(num) M 100000 Maximum global macro variables. MAXHEIGHT(num) E 600 Maximum pixel height for GUI dialog windows. MAXLCL(num) M 100000 Maximum local macro variables. MAXLINE(num) MA 200000 Maximum MLC, MAC, CPY, and BAL source lines that can be loaded into memory during an assembly. MAXLOG(num) MALE 1000000 Maximum GUI log file output before truncation begins by removing 50% to limit memory consumption. The only limit on size of log file is MAXSIZE. MAXPARM(num) M 10000 Maximum length of any string during macro processing. This is an extension as HLASM limit is currently 1024. MAXPASS(num) A 2 Maximum passes of the BAL source by assembler to resolve forward nested symbol references prior to final pass to generate object code. The number of LOCTR statements is added to this limit in order to resolve the final address of each LOCTR section. MAXPC(num) M 50000 Maximum pseudo code instructions held in cache before LRU replacement begins. MAXQUE(num) E 1000 Maximum output queue length from any CMD started task before queue messages are automatically copied to GUI output log to conserve memory and prevent stall. MAXRLD(num) L 10000 Maximum RLD relocation records allowed in a program. MAXSIZE(num) MALE 50 Maximum size of any output file in MB. MAXSYM(num) MA 50000 Maximum symbols in one macro assembly. MAXWARN(num) MA 4 Maximum MNOTE warning level without generating error. MAXWIDTH(num) E 800 Maximum pixel width for GUI dialog windows. MCALL A NO List each macro call and exit on the PRN assembly listing in addition to first level calls if LISTCALL option is also on. MEM(num) E 1 Memory allocated for 390 program execution in MB. Note for RMODE31 loads and GETMAIN's memory above the 16 MB line must be allocated. For example MEM(32) would provide 16 MB below the line and 16 MB above. MINHEIGHT(num) E 150 Minimum pixel height for GUI dialog windows. MINWIDTH(num) E 150 Minimum pixel width for GUI dialog windows. MNOTE(num) MA 0 Control MNOTE error/warning messages during macro expansion and assembly. See note below this table for details. MOD L NO Generate raw code file from lz390 with .MOD suffix and no header or trailer and no RLD's. OBJ A YES Generate relocatable object code file. OBJHEX A NO Generate ASCII readable form of OBJ file with support for 31 bit long sections. The default is to generate binary OBJ file which is compatible with mainframe linkers but is limited to 24 bit long sections. OPTABLE A z390 MACHINE / OPTABLE options determine which opcode table is used during assembly. See table below for details. PARM('text') E '' Define character string parm passed to executable program via address in R1 at startup pointing to a fullword pointing to a halfword length followed by EBCDIC characters. When the length is zero, no PARM is present. PC M YES Generate macro pseudo code in cache memory for speeding up macro code that is executed more than once during macro expansion. PCOPT M YES Optimize macro pseudo code by looking for push, add/sub, store sequences and replacing them with inc/dec pseudo code opcodes. These pseudo codes are maintained in a cache in memory during macro execution only and have no effect on generated object code. PRINTALL A NO Suppress PRINT OFF and PRINT NOGEN commands to force all source lines on PRN listing. PDSMEM8 M NO If PDSMEM8 option is specified, error messages will be issued for any macro or copybook file names with length greater than 8. This option is available to provide compatibility with mainframe PDS libraries that are limited to 8 character names. Note zCOBOL and zCICS use names longer than 8 characters such as zcobol\\IDENTIFICATION.MAC and cics\\CICS_INQUIRE.MAC. PROFILE(file) M NO Insert COPY file in front of MLC source file. PROLOG M YES Generate CICS prolog macro calls DFHEIGBL, DFHEISTG, and DFHEIENT if CICS option and PROLOG options are on. PROTECT E YES Prevent modification of PSA in low memory 8K block. REFORMAT M NO Reformat expanded BAL code to align all opcodes at column 10 and operands at column 16 if possible. REGS E NO Generate GPR register trace before and after each instruction if TRACE option on. RMODE24 LE YES Set 390 load module options to load module below the 16MB line. RMODE31 LE NO Set 390 load module options to load module above the 16MB line. Note this load module option requires option MEM to be set to include enough memory above the 16MB line. STATS[(file)] MALE NO Generate statistics file STA with final options listing, macro and copybook file listing, plus all program statistics. If file is omitted the program path and file name are used with STA suffix. SYS390(dir) LE pgm dir Define directory for storing and retrieving 390 load modules. SYSBAL(dir) MA pgm dir Define directory for storing and retrieving generated BAL files. This option may also override file name and/or suffix (*.sfx overrides just the suffix in the pgm directory). SYSCPY(dir) MA pgm dir Define one or more directories for retrieving CPY source input files. If the option starts with + the directories listed will be concatenated with current list. Multiple directories are always separated by +. This option may also override suffix by adding *.sfx. SYSDAT(dir) M pgm dir Define directory for retrieving DAT source input files for AREAD. Set to SYSDAT(.) for current directory when no path is specified on DSNAME parm for AREAD. SYSERR(dir) MALE pgm dir Define directory for output ERR files. This option may also override file name and/or suffix (*.sfx overrides just the suffix in the pgm directory). SYSLKD(file) L pgm dir Define input source file for linker commands such as INCLUDE, ALIAS, ENTRY, and NAME. SYSLOG(dir) E pgm dir Define directory for output LOG file. This option may also override file name and/or suffix (*.sfx overrides just the suffix in the pgm directory). SYSLST(dir) AL pgm dir Define directory for output LST files. This option may also override file name and/or suffix (*.sfx overrides just the suffix in the pgm directory). SYSMAC(dir) M mac dir Define one or more directories for source MAC files. If the option starts with + the directories listed will be appended to the maclib list. Multiple directories can be specified in one parameter and are always separated by +. When you specify this option more than once and want previous parameter instructions to remain in place, ensure that you start parameter with a <code>+</code> otherwise it will drop prior directories. This option may also override suffix by adding *.sfx. SYSMLC(dir) MA pgm dir Define directory for source input MLC files. SYSOBJ(dir) AL pgm dir Define directory for OBJ relocatable object files. SYSOPT(dir) MALE pgm dir Define directory for @file option files. This option may override suffix using *.sfx. SYSPARM('txt') M none Define text string which can be accessed by mz390 global macro variable &amp;SYSPARM. SYSPCH(dir) M pgm dir Define directory for PCH output files from PUNCH. This option may also override file name and/or suffix (*.sfx overrides just the suffix in the pgm directory). Note PUNCH output is in ASCII source format and is not directed to the OBJ file. These files may be used as linker input commands via SYSLKD(file) option. Set to SYSPCH(.) for current directory when no path is specified on DSNAME parm for PUNCH. SYSPRN(dir) A pgm dir Define directory for assembler listing PRN output files. This option may also override file name and/or suffix (*.sfx overrides just the suffix in the pgm directory). SYSTERM(file) MALE pgm.ERR Define alternate file for all start/end messages plus any error messages, plus related source file statistics for each file containing errors. The default is the program name with ERR suffix. SYSTRC(dir) MALE pgm dir Define directory for output TRACE TR? files. TEST E NO Start execution with interactive TEST mode active which prompts for commands such as T opcode or G opcode to trace or execution to the next occurrence of opcode name. TEST(ddname) E NO Define input command file to run TEST commands.ddname is an environment variable set to the name of the command file. THREAD A NO Assign continuing CSECT addresses for multiple CSECT's assembled in the same module to help identify location of instruction and data labels. TIME[(num)] MALE YES Limit execution time of each program to the number of seconds specified. The default is 15 seconds. NOTIME and NOTIMING both turn off this option. Use NOTIME to allow tasks such as SOA servers like z390CICS to run continuously while still supporting application use of timing functions. TIMING MALE YES Calculate elapsed time and instructions per second statistics for display on START/END messages and STA statistics. TIMING also displays current z390 and J2SE version on start message and memory usage on ended message. Note NOTIMING is used in regression tests to force generated files to be identical by using fixed data/time stamp using GregorianCalendar(2005,0,2,22,33,44). NOTIMING suppresses versions on start message and memory usage on ended message. NOTIMING also sets NOTIME which prevents application from using time functions. TRACE E NO Turn on ez390 execution trace generation on TRE file and turn off CON. TRACE will display every instruction executed along with address and value of each operand. Any combination of the following trace options can be set using the TRACE(...) option: AEGILMPQTV. TRACE(*) will also set TRACEALL. Note the &amp;SYSTRACE global SETC variable can be used to turn any trace options on or off during execution. See table below for details. TRACEALL MALE NO Turn on all trace options generating TRM, TRA, TRL, and TRE files and turn off CON. See table below for details. TRAP E YES Trap any unexpected J2SE program exceptions and generate emulator 0C5 exception which can be handled by SPIE/STAE exits if defined. NOTRAP can be used with Eclipse source debugger to stop at J2SE statement causing exception. TS MALE NO Generate JDBC compatible time-stamp on all TRACE and ERR file records for use in debugging time dependent issue. VCB E YES Generate VSAM cache buffer for improving VSAM performance by storing most recently accessed records and indexes. WRITENONPRINTABLE MA NO Write non-printable characters to PRN, BAL and PCH files. The default value NOWRITENONPRINTABLE replaces all non-printable characters with the '.' character. This avoids issues caused by writing control characters such as 0x0A (Line Feed) or 0x0D (Carriage Return). XREF A YES Cross reference symbols to source lines in PRN assembly listing. ZSTRMAC M YES Support expansion of ZSTRMAC structured conditional macro code instructions during loading of MLC, MAC, and CPY files. Note z390 macros in z390\\mac directory now are using zstrmac for structured coding. NOZSTRMAC can only be used with MVS, VSE, or other non-structured macro libraries. ZVSAM E 0 ZVSAM 0=no vsam, 1=zvsam1 support <p>Note on ALLOW mode: The following features are enabled in allow mode: 1. No quotes required for SETC variables 2. Duplication factor does not require (..) 3. Array declarations with variables in expression accepted 4. Substring starting beyond end returns null string 5. Quoted strings allowed in SETA and SETB expressions 6. Allow &amp;var as null string if not found during substitution 7. Allow duplicate local and global variable declarations 8. Allow AREAD and PUNCH file records greater than 80 characters.</p> <p>Note on ASCII mode: ASCII mode is not mainframe compatible and requires careful review of program to insure no EBCDIC immediate compare constants such as X'40', 64, X'F0', 240 etc. are used and that there are no assumptions about EBCDIC versus ASCII collating sequences which have numbers and letters reversed, and EBCDIC letters are non-contiguous. Typically HLASM compatible programs are run in default EBCDIC mode and DCB RECFM=FT|VT or some other translation option is used to convert between EBCDIC and ASCII where necessary. Note there are a few instructions affected by ASCII mode: 1. ED/EDMK generate ASCII versus EBCDIC but the mask must always be in EBCDIC (masks are usually coded in X'...' format) 2. UNPK generates X'3' versus X'F' in zone field (high order nibble).</p> <p>Note on CHKMAC options: - 0 - no checking - 1 - check for missing AGO and AIF labels and issue warning - 2 - also check missing labels and also check for non comment text after MEND</p> <p>Note on CHKSRC options: - 0 - no checking - 1 - check MLC or BAL input source files for any non-ASCII characters and issue error - 2 - check MLC, MAC, CPY, and BAL input source files for any non-ASCII characters and issue error - 3 - also check for out of sequence characters in 73-80 or any non-blank characters beyond 80 and issue error - - Note this should detect any EBCDIC literal character strings containing non-ASCII characters such as binary 0 byte which must be changed to hex X'00' type strings for portability.</p> <p>Note  on MNOTE options: - 0 - default generates MNOTE error/warning during mz390 and az390 - 1 - suppress mz390 error/warning and only pass MNOTE to az390 - 2 - generates MNOTE error/warning during mz390 and suppresses passing them on to az390</p>"},{"location":"user_guide/z390/z390_options/#tracing-options-and-equivalences","title":"Tracing options and equivalences","text":"<p>TRACE will display every instruction executed along with address and value of each operand. Any combination of the following trace options can be set using the TRACE(...) option. TRACE(*) will also set TRACEALL. Note the &amp;SYSTRACE global SETC variable can be used to turn any trace options on or off during execution.</p> Option Scope Default Description TRACE E NO Turn on ez390 execution trace generation on TRE file and turn off CON. TRACE will display every instruction executed along with address and value of each operand. TRACEA or TRACE(A) A NO Turn on az390 assembly trace generation on TRA file and turn off CON. TRACEA will display each BAL statement during each pass of the assembler. TRACEC or TRACE(C) M NO Trace copy file code for TRACEM and TRACEP. The default is NOTRACEC to eliminate redundant code that usually just contains global variable declarations. TRACEG or TRACE(G) E NO Turn on ez390 emulator trace generation on TRE file with trace of GETMAIN/FREEMAIN FQE memory management control block changes and turn off CON. TRACEI or TRACE(I) M NO TRACEI will trace each AINSERT showing source on the TRM trace file. TRACEL or TRACE(L) L NO Turn on lz390 linker trace generation on TRL file and turn off CON. TRACEL shows each CSECT, ENTRY, EXTRN and OBJ file being loaded. TRACEM or TRACE(M) M NO Turn on mz390 macro processor trace generation on TRM file and turn off CON. TRACEM displays each conditional macro statement executed plus stored values and AIF compare values. TRACEP or TRACE(P) M NO Turn on mz390 macro processor pseudo code generation and execution trace on TRM file and turn off CON. TRACEP shows each conditional macro pseudo operation performed for each conditional macro statement and the values of all variables. TRACEQ or TRACE(Q) E NO Turn on ez390 emulator QSAM/BSAM DCB I/O trace generation on TRE file and turn off CON. TRACES or TRACE(S) M NO Display MLC source lines on console regardless of CON setting to help locate any loops, waits, or hangs in large macro process. If MCALL is also on, then *MCALL and *MEXIT comments will also be displayed to show location with nested macros. TRACET or TRACE(T) E NO Turn on ez390 emulator TGET/TPUT and TCP/IO trace generation on TRE file and turn off CON. TRACEV or TRACE(V) E NO Turn on ez390 emulator VSAM ACB/RPL I/O trace generation on TRE file and turn off CON. TRACEALL MALE NO Turn on all trace options generating TRM, TRA, TRL, and TRE files and turn off CON."},{"location":"user_guide/z390/z390_options/#machine-and-optable-options-and-equivalences","title":"Machine and optable options and equivalences","text":"Machine Machine Optable Optable Description S360-20 360-20 z390 extension: S360-20 specific subset of DOS instructions DOS S370 370 S370XA ARCH-0 XA S370ESA ARCH-1 ESA Synonyms for ESA S390 ARCH-2 ESA S390E ARCH-3 ESA ARCH-4 ESA zSeries ZSeries-1 ZS1 ZOP Synonyms for ZOP ZS ZS-1 ZS1 ZOP z800 z900 ZS1 ZOP ARCH-5 ZS1 ZOP z890 z990 ZS2 YOP Synonyms for YOP zSeries-2 ZS-2 ZS2 YOP ARCH-6 ZS2 YOP zSeries-3 ZS-3 ZS3 Z9 Synonyms for Z9 z9 ARCH-7 ZS3 Z9 zSeries-4 ZS-4 ZS4 Z10 Synonyms for Z10 z10 ARCH-8 ZS4 Z10 zSeries-5 ZS-5 ZS5 Z11 Synonyms for Z11 z114 z196 ZS5 Z11 z11 ARCH-9 ZS5 Z11 zSeries-6 ZS-6 ZS6 Z12 Synonyms for Z12 zBC12 zEC12 ZS6 Z12 z12 ARCH-10 ZS6 Z12 zSeries-7 ZS-7 ZS7 Z13 Synonyms for Z13 z13 ARCH-11 ZS7 Z13 zSeries-8 ZS-8 ZS8 Z14 Synonyms for Z14 z14 ARCH-12 ZS8 Z14 zSeries-9 ZS-9 ZS9 Z15 Synonyms for Z15 z15 ARCH-13 ZS9 Z15 zSeries-10 ZS-10 ZSA Z16 Synonyms for Z16 z16 ARCH-14 ZSA Z16 UNI All current instructions from optables above [DFLT] Cannot be specified, same as UNI plus one z390 directive for zCobol support z390 UNI plus all z390 instructions; not compatible with HLASM <p>Remark: there is no machine option keyword equivalent for optable(DOS).</p> <p>Remark: option allow adds z390 instructions to specified optable.</p> <p>Remark: option assist adds ASSIST instructions to specified optable.</p>"},{"location":"user_guide/zCICS/","title":"Manuals","text":"<ul> <li>http://www.z390.org/cics/z390_EXEC_CICS_Assembler_and_COBOL_Support.pdf</li> <li>http://www.z390.org/cics/zCICS_Readme.pdf</li> <li>zCICS Application Programming Guide</li> <li>http://www.z390.org/cics/zCICS_Basic_Mapping_Support.pdf</li> <li>http://www.z390.org/cics/zCICS_Diagnosis_Reference.pdf</li> <li>http://www.z390.org/cics/zCICS_History.pdf</li> <li>http://www.z390.org/cics/zCICS_Sequential_Terminal_Support.pdf</li> <li>http://www.z390.org/cics/zCICS_Supplied_Transactions.pdf</li> <li>http://www.z390.org/cics/zCICS_System_Programmers_Guide.pdf</li> <li>http://www.z390.org/cics/zCICS_VSAM_Guide.pdf</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/","title":"zCICS Application Programming Guide","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#introduction","title":"Introduction","text":"<p>The EXEC CICS commands and parameters listed here are the only ones currently supported in the zCICS environment.</p> <p>Differences between mainframe operation and zCICS are explained.</p> <p>For the operation of each command and parameter please refer to the Manuals listed in the Reference section at the end of this document.</p> <p>If you create your own zCICS applications, it would be wise to create a .BAT file that re-assembles them all in one go. The internal interfaces are volatile at present and this will be a frequent instruction.</p> <p>The current zCICS environment and all test programs can be re-assembled using DFHALL.BAT. The test VSAM catalog and files can be rebuilt using DFHALLV.BAT. Assembly notes</p> <p>The <code>CICS</code> option must be used when executing <code>mz390</code> command.</p> <p>PROLOG and EPILOG are defaults.</p> <p>NOEPILOG is supported but not fully tested, testing and correct usage is scheduled for a future release of zCICS.</p> <p>PROLOG inserts the following:</p> DFHEISTG Define the prefix areas of the Dynamic Storage Area (DSA). DFHEIEND Replaces the END statement and defines the end of the DSA. DFHEIENT Replaces the first CSECT statement Establish linkage and base registers GETMAIN the DSA Establish addressability to the EIB and TCTTE Some COMMAREA management"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#other-macros","title":"Other macros","text":"<ul> <li>DFHEIBLK - EIB DSECT</li> <li>DFHPCT - Transaction definition</li> <li>DFHFCT \u2013 File definitions and options</li> <li>EXEC - Converts EXEC CICS statements into a unique macro call with a parameter list</li> <li>DFHREGS \u2013 A synonym for EQUREGS</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#copy-books","title":"Copy books","text":"<ul> <li>DFHAID - Standard CICS equates for AID keys</li> <li>DFHBMSCA - Mapping support equates</li> <li>DFHPCTUS - User transaction codes</li> <li>DFHFCTUS - User file definitions</li> </ul> <p>Inclusion of the macro DFHREGS/EQUREGS is mandatory.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#register-usage","title":"Register Usage","text":"<ul> <li>R0 - Reserved for internal use</li> <li>R1 - Reserved for internal use</li> <li>R10 - TCTTE address, must not be modified</li> <li>R11 - EIB address, must not be modified</li> <li>R12 - Default base register</li> <li>R13 - DSA address, must not be modified</li> <li>R14 - Reserved for internal use</li> <li>R15 - Reserved for internal use</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#multiple-base-registers-assembler-only","title":"Multiple base registers (assembler only)","text":"<p>The standard entry for a CICS program is as follows: e.g. DFHEISTG DSECT</p> <pre><code>MYFIELD  DS    CL100 demo user field\n......\nMYPROG   CSECT\n</code></pre> <p>This standard method with the PROLOG option (default) will generate a single code base of R12 and a single DSA base of R13.</p> <p>If you want to extend the code base and/or the DSA base registers, convert your code in line with the sample given and include the <code>NOPROLOG</code> option in mz390 command.</p> <p>e.g. DFHEISTG</p> <pre><code>MYFIELD  DS    CL100 demo user field\n......\nMYPROG   DFHEIENT CODEREG=(R8,R5),DATAREG=(R13,R6,R7)\n</code></pre> <p>Note</p> <p>You cannot override the first DATAREG value, it will always be R13. i.e. if you code <code>DATAREG=(R6,R7)</code> you will get <code>DATAREG=(R13,R7)</code>.</p> <p>There is no cross-checking for register conflicts.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#assembler-exec-cics-command-syntax","title":"Assembler EXEC CICS command syntax","text":"<p>There is no formal definition of an EXEC CICS command in any IBM CICS\u00ae Manual.</p> <p>These assembler syntaxes are currently supported.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#in-line-space-separated","title":"In-line space separated","text":"<pre><code>name     EXEC  CICS function subfunction parm parm()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#in-line-comma-separated","title":"In-line comma separated","text":"<pre><code>name     EXEC  CICS function,subfunction,parm,parm(), parm ()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#split-space-separated","title":"Split, space separated","text":"<p>Non-blank in column 72 is assumed for all lines except the last.</p> <p>Comments are only allowed following a dot or comma delimiter on the last line. <pre><code>name     EXEC  CICS function                                          X\n         subfunction                                                  X\n         parm                                                         X\n         parm() parm (). a nice comment\n</code></pre></p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#split-comma-separated","title":"Split, comma separated","text":"<p>Comments are allowed on all lines that end with comma+space.</p> <pre><code>name     EXEC  CICS function, some                                    X\n         subfunction, very                                            X\n         parm, nice                                                   X\n         parm(),parm (), comments\n</code></pre> <p>name is supported and optional.</p> <p><code>EXEC CICS</code> is expected, <code>EXECUTE CICS</code> is not currently supported.</p> <p><code>subfunction</code> is optional and depends on the function but must follow function,  e.g. <code>EXEC CICS WRITEQ TS</code></p> <p><code>parm()</code> without spacing and <code>parm ()</code> with spacing are allowed.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#vsam-support","title":"VSAM support","text":"<p>See the zCICS VSAM Guide for guidance in the setup of a VSAM environment.</p> <p>This document also contains extensions to the VSAM facilities currently available.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#basic-mapping-support","title":"Basic Mapping Support","text":"<p>The <code>EXEC CICS</code> commands <code>RECEIVE MAP</code>, <code>SEND MAP</code> and <code>SEND CONTROL</code> are documented here.</p> <p>For general BMS documentation and the mapping macros DFHMSD, DFHMDI and DFHMDF see the zCICS BMS Guide.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#zcobol-support","title":"zCOBOL support","text":"<p>EXEC CICS command format follows the rules for COBOL.</p> <p>Each command must end END-EXEC (a following dot may affect the logic).</p> <p>Parameters like <code>SET()</code> which address imported structures may use the ADDRESS OF special register.</p> <p><code>LENGTH</code>, <code>FLENGTH</code> and <code>KEYLENGTH</code> which would normally allow a numeric option may use the <code>LENGTH OF</code> special register.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#extra-parameters","title":"Extra Parameters","text":"<p>You can add <code>NOEDF</code> to any <code>EXEC CICS</code> command if you wish that command to be excluded from a CEDF session.</p> <p>You can add <code>NOEDF</code> to the mz390 command if you wish all CEDF intercepts in that program excluded.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-general-commands","title":"Command reference - General Commands","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#handle-aid","title":"HANDLE AID","text":"<pre><code>name     EXEC  CICS HANDLE AID key(label) key\n</code></pre> <p>Warning</p> <p>The following parameters are not supported.</p> <ul> <li>CLRPARTN</li> <li>LIGHTPEN</li> <li>OPERID</li> <li>TRIGGER</li> </ul> <p>Note</p> <p>ANYKEY (no label) clears all settings for CLEAR, PA and PF keys.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#key","title":"key","text":"<p>The key</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#label","title":"label","text":"<p>label may take three forms:</p> <ul> <li>Direct reference</li> <li>Indirect reference</li> <li>Adcon literal</li> </ul> <pre><code>         EXEC  CICS HANDLE AID PA1(GOPA1) PA2(INDGOPA1) PA3(=A(GOPA1))\n......\nGOPA1    DS    0H\n......\nINDGOPA1 DC    A(GOPA1)\n</code></pre> <p>Info</p> <p>There is a current limit of 30 AIDs.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors","title":"Errors","text":"<ul> <li>AN INTERNAL ERROR HAS OCCURRED</li> <li>NO PARAMETERS SPECIFIED</li> <li>NUMBER OF AIDS EXCEEDS 30</li> <li>BAD PARM</li> <li>HANDLE TYPE NOT RECOGNISED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#handle-condition","title":"HANDLE CONDITION","text":"<pre><code>name     EXEC  CICS HANDLE CONDITION condition(label) condition\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_1","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#condition","title":"condition","text":"<p>Name of the condition to handle</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#label_1","title":"label","text":"<p>Location in program to branch to when condition occurs.</p> <p>label may take three forms:</p> <ul> <li>Direct reference</li> <li>Indirect reference</li> <li>Adcon literal</li> </ul> <pre><code>         EXEC  CICS HANDLE CONDITION EOF(ISEOF)\n......\nISEOF    DS    0H\n</code></pre> <p>Note</p> <p>There is a current limit of 30 conditions. <code>DSIDERR</code> is supported as a synonym to <code>FILENOTFOUND</code>.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_1","title":"Errors","text":"<ul> <li>AN INTERNAL ERROR HAS OCCURRED</li> <li>NUMBER OF CONDITIONS EXCEEDS 30</li> <li>BAD PARM</li> <li>HANDLE TYPE NOT RECOGNISED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#ignore-condition","title":"IGNORE CONDITION","text":"<pre><code>name     EXEC  CICS IGNORE CONDITION condition\n</code></pre> <p>Warning</p> <p>Ignoring an error may lead to unpredictable abends. There is a current limit of 30 conditions.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_2","title":"Parameters","text":"<p>INVREQ, PGMIDERR or ERROR by default.</p> <p>The EXEC CICS command treated as never existed. INVREQ on EXEC CICS RETURN will abend the task ASRA as z390 cannot ignore a RETURN.</p> <p>LENGERR or ERROR by default... NOHANDLE and any outstanding HANDLE AID will not invoke this condition. DSIDERR is supported as a synonym to FILENOTFOUND.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_2","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>IGNORE TYPE NOT RECOGNISED</li> <li>AN INTERNAL ERROR HAS OCCURRED</li> <li>NO PARAMETERS SPECIFIED</li> <li>NUMBER OF CONDITIONS EXCEEDS 30</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#pop-handle","title":"POP HANDLE","text":"<pre><code>name     EXEC  CICS POP HANDLE\n</code></pre> <p>For the HANDLE ABEND, a POP is the equivalent of a HANDLE ABEND RESET.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_3","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>POP TYPE NOT RECOGNISED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/0</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#push-handle","title":"PUSH HANDLE","text":"<pre><code>name     EXEC  CICS PUSH HANDLE\n</code></pre> <p>For the HANDLE ABEND, a PUSH is the equivalent of a <code>HANDLE ABEND CANCEL</code>.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_4","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>PUSH TYPE NOT RECOGNISED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#address","title":"ADDRESS","text":"<pre><code>name     EXEC  CICS ADDRESS                                           X\n                    COMMAREA(label)                                   X\n                    CWA(label)                                        X\n                    EIB(label)\n</code></pre> <p>CWA has a different implementation in zCICS.</p> <p>See CWA Management in zCICS Diagnosis Reference for more information.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_5","title":"Errors","text":"<ul> <li>BAD PARM</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#assign","title":"ASSIGN","text":"<pre><code>name     EXEC  CICS ASSIGN\n</code></pre> <p>The following parameters are not supported:</p> <p>ACTIVITY,ACTIVITYID,ALTSCRNHT,ALTSCRNWD,APPLID,ASRAINTRPT,ASRAKEY,ASRASPC,ASRASTG,BRIDGE, DELIMITER,DESTCOUNT,DESTID,DESTIDLENG,GCHARS,GCODES,INITPARM,INITPARMLEN,INPARTN, LDCMNEM,LDCNUM,NETNAME,NUMTAB,OPCLASS,OPERKEYS,OPID,OPSECURITY,ORGABCODE,PAGENUM, PARTNPAGE,PARTNPAGE,PRINSYSID,PROCESS,PROCESSTYPE,QNAME,SIGDATA,STATIONID,SYSID, TELLERID,USERID,USERNAME</p> <p>Note</p> <p>zCICS allows a CWA size greater than 32K. If the CWA does exceed 32K, then ASSIGN CWALENG() will return an incorrect value.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_1","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/2</li> <li>INVREQ/5 </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_6","title":"Errors","text":"<ul> <li>BAD PARM</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-terminal-control","title":"Command reference - Terminal Control","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#receive","title":"RECEIVE","text":"<pre><code>name     EXEC  CICS RECEIVE                                           X\n                    INTO(label)                                       X\n                    LENGTH(label)                                     X\n                    NOHANDLE\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_3","title":"Parameters","text":"<ul> <li>INTO(label) and LENGTH(label) are mandatory.</li> <li>LENGTH must point to a 2-byte field.</li> <li>Although MAXLENGTH is not implemented yet, there is an internal    maximum length set to the implied length of the INTO label.</li> <li>NOHANDLE is optional.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_2","title":"Conditions (RESP/RESP2)","text":"<ul> <li>NOTALLOC/0</li> <li>LENGERR/0</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_7","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH INTO AND LENGTH ARE REQUIRED</li> <li>LENGTH ERROR</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#send","title":"SEND","text":"<pre><code>name     EXEC  CICS SEND\n                    FROM(label)\n                    LENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_4","title":"Parameters","text":"<p>FROM(label) is mandatory.</p> <p>label must point to a 2-byte hex value.</p> <p>label may take three forms:</p> <ul> <li>Direct reference</li> <li>Indirect reference</li> <li>Adcon literal</li> </ul> <p>LENGTH can be specified as LENGTH(value) or LENGTH(label) </p> <p>LENGTH(value) supports the use of the length attribute.</p> <p>The parameters TERMINAL, WAIT, DEFAULT and TEXT are discarded.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_3","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/0 - Attempt to execute this in a non-terminal attached task.   This is not documented in the IBM CICS\u00ae Manuals.</li> <li>LENGERR/E1</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_8","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>FROM IS MANDATORY</li> <li>LENGTH IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#send-control","title":"SEND CONTROL","text":"<pre><code>name     EXEC  CICS SEND CONTROL\n                    CURSOR/CURSOR()\n                    ERASE/ERASEAUP\n                    ALARM\n                    FREEKB\n                    FRSET\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_5","title":"Parameters","text":"<ul> <li>TERMINAL and WAIT are accepted and discarded.</li> <li>ACCUM and SET are not supported.</li> <li>CURSOR() refers to the 24x80 screen.</li> <li>CURSOR is not documented.</li> <li>SEND CONTROL CURSOR ERASEAUP means erase all input fields   and don't move the cursor.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_4","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/0 - Attempt to execute this in a non-terminal attached task.   This is not documented in the IBM CICS\u00ae Manual.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_9","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>CURSOR POSITION AND SYMBOLIC CURSOR SPECIFIED</li> <li>ERASE AND ERASEAUP SPECIFIED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-file-control","title":"Command reference - File control","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#read","title":"READ","text":"<pre><code>name     EXEC  CICS READ\n                    FILE()/DATASET()\n                    INTO()/SET()\n                    LENGTH()/FLENGTH()\n                    RIDFLD()\n                    RBA/XRBA/RRN/GENERIC\n                    GTEQ/EQUAL\n                    KEYLENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_6","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length","title":"LENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength","title":"FLENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 2G-1.</li> <li>A literal or label must be 4 bytes and must not exceed 2G-1.</li> </ul> </li> </ul> <p>Info</p> <p>LENGTH/FLENGTH:</p> <ul> <li>If SET is specified, LENGTH/FLENGTH are ignored and LENGERR   cannot occur.</li> <li>If INTO is specified and LENGTH/FLENGTH are not, then the implied   length of INTO is used. This may raise the LENGERR condition if the   data length is larger.</li> <li>If LENGTH/FLENGTH is numeric then it specifies the maximum data   length that can be received. LENGERR can be raised if the data length   is larger.</li> <li>If LENGTH/FLENGTH is a label then it specifies the maximum data   length that can be received. LENGERR can be raised if the data length   is larger. The true data length is returned in label.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#keylength","title":"KEYLENGTH","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 32767.</li> <li>A label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>Keylengths greater than 128 are ignored.</li> <li>The parameter is ignored for ESDS and RRDS.</li> <li>KEYLENGTH and GENERIC must be paired.</li> <li>If KEYLENGTH is zero by constant or label then parameters are   changed internally:     <pre><code>GENERIC/EQUAL or GENERIC/GTEQ\nBecomes \nKEYLENGTH(1) Key=X'00' GENERIC GTEQ\n</code></pre></li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rba","title":"RBA","text":"<p>RIDFLD has a 4-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#xrba","title":"XRBA","text":"<p>RIDFLD has an 8-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rrn","title":"RRN","text":"<p>RIDFLD has a 4-byte relative record number</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#gteqequal","title":"GTEQ/EQUAL","text":"<p>The parameter is ignored for ESDS and RRDS.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#generic","title":"GENERIC","text":"<p>KEYLENGTH must be specified. The parameter is ignored for ESDS and RRDS.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_10","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FILE AND DATASET ARE SPECIFIED</li> <li>BOTH GTEQ AND EQUAL ARE SPECIFIED</li> <li>BOTH INTO AND SET ARE SPECIFIED</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>BOTH RBA AND XRBA ARE SPECIFIED</li> <li>BOTH RRN AND (X)RBA ARE SPECIFIED</li> <li>FILE OR DATASET MUST BE SPECIFIED</li> <li>GENERIC CANNOT BE SPECIFIED WITH RRN OR (X)RBA</li> <li>GENERIC REQUIRES KEYLENGTH</li> <li>INTO OR SET MUST BE SPECIFIED</li> <li>INVALID FILE OR DATASET</li> <li>KEYLENGTH REQUIRES GENERIC</li> <li>RIDFLD IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_5","title":"Conditions (RESP/RESP2)","text":"<ul> <li>FILENOTFOUND/1</li> <li>DISABLED/50</li> <li>ILLOGIC/110</li> <li>INVREQ/20</li> <li>INVREQ/25</li> <li>INVREQ/42</li> <li>LENGERR/E1</li> <li>NOTFND/80</li> <li>NOTOPEN/60</li> </ul> <p>Note</p> <p>FLENGTH and XRBA are extensions; do not use these parameters if the source code is likely to be ported back to a mainframe environment. RBA access to a KSDS is not supported.</p> <p>DATASET is supported for legacy applications. It is noted that this parameter no longer appears in the IBM CICS\u00ae Manuals.</p> <p>When conditions are raised as a result of a VSAM error, the RPL feedback codes (2<sup>nd</sup> and 4<sup>th</sup> bytes) are placed in EIBRCODE +1 and +2.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#startbr","title":"STARTBR","text":"<pre><code>name     EXEC  CICS STARTBR\n                    FILE()/DATASET()\n                    RIDFLD()\n                    REQID()\n                    RBA/XRBA/RRN/GENERIC\n                    GTEQ/EQUAL\n                    KEYLENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_7","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#reqid","title":"REQID","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>If omitted, zero is assumed.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rba_1","title":"RBA","text":"<p>RIDFLD has a 4-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#xrba_1","title":"XRBA","text":"<p>RIDFLD has an 8-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rrn_1","title":"RRN","text":"<p>RIDFLD has a 4-byte relative record number</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#keylength_1","title":"KEYLENGTH","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 32767.</li> <li>A label must be 2 bytes and must not exceed 32767.</li> <li>Keylengths greater than 128 are ignored.</li> </ul> </li> <li>The parameter is ignored for ESDS and RRDS.</li> <li>KEYLENGTH and GENERIC must be paired.</li> <li>If KEYLENGTH is zero by constant or label then parameters are   changed internally:     <pre><code>  GENERIC/EQUAL or GENERIC/GTEQ\n  Becomes \n  KEYLENGTH(1) Key=X'00' GENERIC GTEQ\n</code></pre></li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#gteqequal_1","title":"GTEQ/EQUAL","text":"<p>The parameter is ignored for ESDS and RRDS.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#generic_1","title":"GENERIC","text":"<p>KEYLENGTH must be specified.</p> <p>The parameter is ignored for ESDS and RRDS.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_6","title":"Conditions (RESP/RESP2)","text":"<ul> <li>DISABLED/50</li> <li>FILENOTFOUND/1</li> <li>ILLOGIC/110</li> <li>INVREQ/20</li> <li>INVREQ/25</li> <li>INVREQ/33</li> <li>INVREQ/42</li> <li>NOTFND/80</li> <li>NOTOPEN/60</li> </ul> <p>Note</p> <p>NOTFND cannot occur for an ESDS or RRDS</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_11","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FILE AND DATASET ARE SPECIFIED</li> <li>BOTH GTEQ AND EQUAL ARE SPECIFIED</li> <li>BOTH RBA AND XRBA ARE SPECIFIED</li> <li>BOTH RRN AND (X)RBA ARE SPECIFIED</li> <li>FILE OR DATASET MUST BE SPECIFIED</li> <li>GENERIC CANNOT BE SPECIFIED WITH RRN OR (X)RBA</li> <li>GENERIC REQUIRES KEYLENGTH</li> <li>INVALID FILE OR DATASET</li> <li>KEYLENGTH REQUIRES GENERIC</li> <li>RIDFLD IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#readnext","title":"READNEXT","text":"<pre><code>name     EXEC  CICS READNEXT\n                    FILE()/DATASET()\n                    INTO()/SET()\n                    LENGTH()/FLENGTH()\n                    RIDFLD()\n                    REQID()\n                    RBA/XRBA/RRN\n                    KEYLENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_8","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_1","title":"LENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength_1","title":"FLENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 2G-1.</li> <li>A literal or label must be 4 bytes and must not exceed 2G-1.</li> </ul> </li> </ul> <p>Info</p> <p>LENGTH/FLENGTH</p> <p>If either is not a label then:</p> <ul> <li>If INTO is specified, then the length received is the implied length of   INTO. This may raise the LENGERR condition if the data length is   larger.</li> <li>If SET is specified, the complete record is returned and LENGERR   cannot occur.</li> </ul> <p>If either is a label then:</p> <ul> <li>If INTO or SET is specified, then it specifies the maximum data   length that can be received. LENGERR can be raised if the data   length is larger. The true data length is returned in label.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#reqid_1","title":"REQID","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>If omitted, zero is assumed.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rba_2","title":"RBA","text":"<p>RIDFLD has a 4-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#xrba_2","title":"XRBA","text":"<p>RIDFLD has an 8-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rrn_2","title":"RRN","text":"<p>RIDFLD has a 4-byte relative record number</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#keylength_2","title":"KEYLENGTH","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 32767.</li> <li>A label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>Keylengths greater than 128 are ignored.</li> <li>The parameter is ignored for ESDS and RRDS.</li> <li>If KEYLENGTH is zero by constant or label then parameters are   changed internally:     <pre><code>GENERIC/EQUAL or GENERIC/GTEQ\nBecomes \nKEYLENGTH(1) Key=X'00' GENERIC GTEQ\n</code></pre></li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_12","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FILE AND DATASET ARE SPECIFIED</li> <li>BOTH INTO AND SET ARE SPECIFIED</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>BOTH RBA AND XRBA ARE SPECIFIED</li> <li>BOTH RRN AND (X)RBA ARE SPECIFIED</li> <li>FILE OR DATASET MUST BE SPECIFIED</li> <li>INTO OR SET MUST BE SPECIFIED</li> <li>INVALID FILE OR DATASET</li> <li>RIDFLD IS MANDATORY</li> <li>THIS TYPE OF INTO REQUIRES LENGTH/FLENGTH</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_7","title":"Conditions (RESP/RESP2)","text":"<ul> <li>DISABLED/50</li> <li>ENDFILE/90</li> <li>FILENOTFOUND/1</li> <li>ILLOGIC/110</li> <li>INVREQ/20</li> <li>INVREQ/25</li> <li>INVREQ/26</li> <li>INVREQ/34</li> <li>INVREQ/42</li> <li>LENGERR/E1</li> <li>NOTFND/80</li> <li>NOTOPEN/60</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#readprev","title":"READPREV","text":"<pre><code>name     EXEC  CICS READPREV\n                    FILE()/DATASET()\n                    INTO()/SET()\n                    LENGTH()/FLENGTH()\n                    RIDFLD()\n                    REQID()\n                    RBA/XRBA/RRN\n                    KEYLENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_9","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_2","title":"LENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength_2","title":"FLENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 2G-1.</li> <li>A literal or label must be 4 bytes and must not exceed 2G-1.</li> </ul> </li> </ul> <p>Info</p> <p>LENGTH/FLENGTH</p> <p>If either is not a label then:</p> <ul> <li>If INTO is specified, then the length received is the implied length of   INTO. This may raise the LENGERR condition if the data length is   larger.</li> <li>If SET is specified, the complete record is returned and LENGERR   cannot occur.</li> </ul> <p>If either is a label then:</p> <ul> <li>If INTO or SET is specified, then it specifies the maximum data   length that can be received. LENGERR can be raised if the data   length is larger. The true data length is returned in label.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#reqid_2","title":"REQID","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>If omitted, zero is assumed.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rba_3","title":"RBA","text":"<p>RIDFLD has a 4-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#xrba_3","title":"XRBA","text":"<p>RIDFLD has an 8-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rrn_3","title":"RRN","text":"<p>RIDFLD has a 4-byte relative record number</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#keylength_3","title":"KEYLENGTH","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 32767.</li> <li>A label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>Keylengths greater than 128 are ignored.</li> <li>The parameter is ignored for ESDS and RRDS.</li> <li>If KEYLENGTH is specified, the value must be equal to the keylength   defined for the file.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_13","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FILE AND DATASET ARE SPECIFIED</li> <li>BOTH INTO AND SET ARE SPECIFIED</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>BOTH RBA AND XRBA ARE SPECIFIED</li> <li>BOTH RRN AND (X)RBA ARE SPECIFIED</li> <li>FILE OR DATASET MUST BE SPECIFIED</li> <li>INTO OR SET MUST BE SPECIFIED</li> <li>INVALID FILE OR DATASET</li> <li>RIDFLD IS MANDATORY</li> <li>THIS TYPE OF INTO REQUIRES LENGTH/FLENGTH</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_8","title":"Conditions (RESP/RESP2)","text":"<ul> <li>DISABLED/50</li> <li>ENDFILE/90</li> <li>FILENOTFOUND/1</li> <li>ILLOGIC/110</li> <li>INVREQ/20</li> <li>INVREQ/24</li> <li>INVREQ/26</li> <li>INVREQ/41</li> <li>LENGERR/E1</li> <li>NOTFND/80</li> <li>NOTOPEN/60</li> </ul> <p>Note</p> <p>ENDFILE can occur when a READPREV attempts to read past the beginning of the file.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#endbr","title":"ENDBR","text":"<pre><code>name     EXEC  CICS ENDBR                                             X\n                    FILE()/DATASET()                                  X\n                    REQID()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_10","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#reqid_3","title":"REQID","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>If omitted, zero is assumed.</li> </ul> <p>Note</p> <p>In real CICS, ENDBR cannot cause a file to open, but it will in zCICS.</p> <p>The ENDBR command will be invalid, and may result in a transaction abend.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_14","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FILE AND DATASET ARE SPECIFIED</li> <li>FILE OR DATASET MUST BE SPECIFIED</li> <li>INVALID FILE OR DATASET</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_9","title":"Conditions (RESP/RESP2)","text":"<ul> <li>DISABLED/50</li> <li>FILENOTFOUND/1</li> <li>ILLOGIC/110</li> <li>INVREQ/20</li> <li>INVREQ/35</li> <li>NOTOPEN/60</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#resetbr","title":"RESETBR","text":"<pre><code>name     EXEC  CICS RESETBR\n                    FILE()/DATASET()\n                    RIDFLD()\n                    REQID()\n                    RBA/XRBA/RRN/GENERIC\n                    GTEQ/EQUAL\n                    KEYLENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_11","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#reqid_4","title":"REQID","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>If omitted, zero is assumed.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rba_4","title":"RBA","text":"<p>RIDFLD has a 4-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#xrba_4","title":"XRBA","text":"<p>RIDFLD has an 8-byte RBA</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#rrn_4","title":"RRN","text":"<p>RIDFLD has a 4-byte relative record number</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#keylength_4","title":"KEYLENGTH","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 32767.</li> <li>A label must be 2 bytes and must not exceed 32767.</li> </ul> </li> <li>Keylengths greater than 128 are ignored.</li> <li>The parameter is ignored for ESDS and RRDS.</li> <li>KEYLENGTH and GENERIC must be paired.</li> <li>If KEYLENGTH is zero by constant or label then parameters are   changed internally:     <pre><code>GENERIC/EQUAL or GENERIC/GTEQ\nBecomes \nKEYLENGTH(1) Key=X'00' GENERIC GTEQ\n</code></pre></li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#gteqequal_2","title":"GTEQ/EQUAL","text":"<p>The parameter is ignored for ESDS and RRDS.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#generic_2","title":"GENERIC","text":"<p>KEYLENGTH must be specified.</p> <p>The parameter is ignored for ESDS and RRDS.</p> <p>Note</p> <p>In real CICS, RESETBR cannot cause a file to open, but it will in zCICS. The RESETBR command will be invalid, and may result in a transaction abend.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_15","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FILE AND DATASET ARE SPECIFIED</li> <li>BOTH GTEQ AND EQUAL ARE SPECIFIED</li> <li>BOTH RBA AND XRBA ARE SPECIFIED</li> <li>BOTH RRN AND (X)RBA ARE SPECIFIED</li> <li>FILE OR DATASET MUST BE SPECIFIED</li> <li>GENERIC CANNOT BE SPECIFIED WITH RRN OR (X)RBA</li> <li>GENERIC REQUIRES KEYLENGTH</li> <li>INVALID FILE OR DATASET</li> <li>KEYLENGTH REQUIRES GENERIC</li> <li>RIDFLD IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_10","title":"Conditions (RESP/RESP2)","text":"<ul> <li>DISABLED/50</li> <li>FILENOTFOUND/1</li> <li>ILLOGIC/110</li> <li>INVREQ/20</li> <li>INVREQ/25</li> <li>INVREQ/36</li> <li>INVREQ/42</li> <li>NOTFND/80</li> <li>NOTOPEN/60</li> </ul> <p>Note</p> <p>NOTFND cannot occur for an ESDS or RRDS</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-storage-control","title":"Command reference - Storage Control","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#freemain","title":"FREEMAIN","text":"<pre><code>name     EXEC  CICS FREEMAIN                                          X\n                    DATA()/DATAPOINTER()                              X\n                    DATA(label)\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_12","title":"Parameters","text":"<p>label may only be an indirect reference to the address.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#datapointer","title":"DATAPOINTER","text":"<p>Must be specified as a permitted general register value.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_16","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH DATA AND DATAPOINTER ARE SPECIFIED</li> <li>DATA OR DATAPOINTER MUST BE SPECIFIED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_11","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/1</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#getmain","title":"GETMAIN","text":"<pre><code>name     EXEC  CICS GETMAIN                                           X\n                    SET()                                             X\n                    LENGTH()/FLENGTH()                                X\n                    INITIMG()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_13","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#set","title":"SET","text":"<ul> <li>SET is mandatory</li> <li>Must be specified as a permitted general register value.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_3","title":"LENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 32767.</li> <li>A literal or label must be 2 bytes and must not exceed 32767.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength_3","title":"FLENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.</li> <li>A constant must not exceed 2G-1.</li> <li>A literal or label must be 4 bytes and must not exceed 2G-1.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#initimg","title":"INITIMG","text":"<ul> <li>Is optional</li> <li>If omitted, the storage contents are not predictable.</li> <li>Can be specified as a constant, literal or label.</li> </ul> <p>Info</p> <p>zCOBOL supports all 3 data types, but for mainframe COBOL programs only label is supported.</p> <p>Only the first byte generated by the parameter is used.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_17","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>LENGTH OR FLENGTH MUST BE SPECIFIED</li> <li>SET IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-temporary-storage-control","title":"Command reference - Temporary Storage Control","text":"<p>Note</p> <p>FLENGTH is an extension; do not use this parameter if the source code is likely to be ported back to a mainframe environment.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#deleteq","title":"DELETEQ","text":"<pre><code>name     EXEC  CICS DELETEQ TS\n                    QUEUE()/QNAME()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_14","title":"Parameters","text":"<p>The parameters MAIN and AUXILIARY are accepted and discarded.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#queue","title":"QUEUE","text":"<p><code>QUEUE</code> may be specified as:</p> <ul> <li>A quoted string which must not exceed 8 bytes.</li> <li>A label which points to an 8-byte field.</li> <li>A literal not exceeding 8 bytes.</li> </ul> <p>Only label or literal may be used to specify a QUEUE with hex characters.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#qname","title":"QNAME","text":"<p><code>QNAME</code> may be specified as:</p> <ul> <li>A quoted string which must not exceed 16 bytes.</li> <li>A label which points to a 16-byte field.</li> <li>A literal not exceeding 16 bytes.</li> </ul> <p>Only label or literal may be used to specify a QNAME with hex characters.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_18","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH QUEUE AND QNAME ARE SPECIFIED</li> <li>DELETEQ TYPE NOT RECOGNIZED</li> <li>INVALID QUEUE OR QNAME</li> <li>QUEUE OR QNAME MUST BE SPECIFIED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_12","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/0</li> <li>QIDERR/0</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#readq","title":"READQ","text":"<pre><code>name     EXEC  CICS READQ TS\n                    QUEUE()/QNAME()\n                    INTO()/SET()\n                    LENGTH()/FLENGTH()\n                    NUMITEMS()\n                    ITEM()/NEXT\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_15","title":"Parameters","text":"<p>The parameters MAIN and AUXILIARY are accepted and discarded.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#queue_1","title":"QUEUE","text":"<p><code>QUEUE</code> may be specified as:</p> <ul> <li>A quoted string which must not exceed 8 bytes.</li> <li>A label which points to an 8-byte field.</li> <li>A literal not exceeding 8 bytes.</li> </ul> <p>Only label or literal may be used to specify a QUEUE with hex characters.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#qname_1","title":"QNAME","text":"<p>QNAME may be specified as:</p> <ul> <li>A quoted string which must not exceed 16 bytes.</li> <li>A label which points to a 16-byte field.</li> <li>A literal not exceeding 16 bytes.</li> </ul> <p>Only label or literal may be used to specify a QNAME with hex characters.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_4","title":"LENGTH","text":"<ul> <li>May be specified as LENGTH(value) or LENGTH(label)<ul> <li>LENGTH(value) supports the use of the length attribute.</li> <li>label must point to a 2-byte hex value.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength_4","title":"FLENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 2G-1.</li> <li>A literal or label must be 4 bytes and must not exceed 2G-1.</li> </ul> </li> <li>LENGTH/FLENGTH can be omitted. When they are, the implied length   of INTO is used. LENGTH/FLENGTH is mandatory when SET is used.   ITEM</li> <li>May be specified as ITEM(value) or ITEM(label)<ul> <li>label must point to a 2-byte hex value.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_19","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH INTO AND SET ARE SPECIFIED</li> <li>BOTH ITEM AND NEXT ARE SPECIFIED</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>BOTH QUEUE AND QNAME ARE SPECIFIED</li> <li>INTO OR SET MUST BE SPECIFIED</li> <li>INVALID QUEUE OR QNAME</li> <li>ITEM OR NEXT MUST BE SPECIFIED</li> <li>QUEUE OR QNAME MUST BE SPECIFIED</li> <li>READQ TYPE NOT RECOGNIZED</li> <li>SET REQUIRES LENGTH</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_13","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/0</li> <li>LENGERR/0</li> <li>ITEMERR/0</li> <li>QIDERR/0</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#writeq","title":"WRITEQ","text":"<pre><code>name     EXEC  CICS WRITEQ TS\n                    QUEUE()/QNAME()\n                    FROM()\n                    LENGTH()/FLENGTH()\n                    NUMITEMS()\n                    ITEM()\n                    REWRITE\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_16","title":"Parameters","text":"<p>The parameters MAIN and AUXILIARY are accepted and discarded.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#queue_2","title":"QUEUE","text":"<p>QUEUE may be specified as:</p> <ul> <li>A quoted string which must not exceed 8 bytes.</li> <li>A label which points to an 8-byte field.</li> <li>A literal not exceeding 8 bytes.</li> </ul> <p>Only label or literal may be used to specify a QUEUE with hex characters.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#qname_2","title":"QNAME","text":"<p>QNAME may be specified as:</p> <ul> <li>A quoted string which must not exceed 16 bytes.</li> <li>A label which points to a 16-byte field.</li> <li>A literal not exceeding 16 bytes.</li> </ul> <p>Only label or literal may be used to specify a QNAME with hex characters.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#from","title":"FROM","text":"<p><code>FROM(label)</code> is mandatory.</p> <p>label may take three forms:</p> <ul> <li>Direct reference</li> <li>Indirect reference</li> <li>Adcon literal</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_5","title":"LENGTH","text":"<ul> <li>May be specified as LENGTH(value) or LENGTH(label)<ul> <li>LENGTH(value) supports the use of the length attribute.</li> <li>label must point to a 2-byte hex value.</li> </ul> </li> <li>LENGTH can be omitted. When they are, the implied length of FROM is used. </li> <li>LENGTH is mandatory when FROM is an indirect reference.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength_5","title":"FLENGTH","text":"<ul> <li>Can be specified as a constant, literal or label.<ul> <li>A constant must not exceed 2G-1.</li> <li>A literal or label must be 4 bytes and must not exceed 2G-1.</li> </ul> </li> <li>FLENGTH can be omitted. When they are, the implied length of FROM is used. </li> <li>FLENGTH is mandatory when FROM is an indirect reference.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#item","title":"ITEM","text":"<ul> <li>May be specified as ITEM(value) or ITEM(label)</li> <li>label must point to a 2-byte hex value.</li> </ul> <p>Info</p> <p>For compatibility with old releases of CICS, ITEM is accepted without REWRITE and becomes NUMITEMS. ITEM must be a label in this case.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_20","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>BOTH QUEUE AND QNAME ARE SPECIFIED</li> <li>FROM IS MANDATORY</li> <li>IF NUMITEMS IS SPECIFIED, ITEM AND REWRITE ARE INVALID</li> <li>INVALID QUEUE OR QNAME</li> <li>LENGTH/FLENGTH IS MANDATORY FOR INDIRECT FROM</li> <li>LENGTH WITHOUT FROM</li> <li>NUMITEMS MUST BE A LABEL (MAY HAVE ORIGINATED AS ITEM)</li> <li>QUEUE OR QNAME MUST BE SPECIFIED</li> <li>REWRITE REQUIRES ITEM</li> <li>WRITEQ TYPE NOT RECOGNIZED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_14","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/0</li> <li>LENGERR/0</li> <li>ITEMERR/0</li> <li>QIDERR/0</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-program-control","title":"Command reference - Program Control","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#abend","title":"ABEND","text":"<pre><code>name     EXEC  CICS ABEND\n                    ABCODE()\n                    CANCEL\n                    NODUMP\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_17","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#abcode","title":"ABCODE","text":"<ul> <li>ABCODE can be specified as ABCODE('xxxx') or ABCODE(label)</li> <li>label must point to a 4-byte field.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_21","title":"Errors","text":"<ul> <li>ABCODE MUST NOT BEGIN WITH 'A'</li> <li>ABCODE IS INVALID</li> <li>BAD PARM</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#handle-abend","title":"HANDLE ABEND","text":"<pre><code>name     EXEC  CICS HANDLE ABEND CANCEL\nname     EXEC  CICS HANDLE ABEND RESET\nname     EXEC  CICS HANDLE ABEND LABEL(label)\nname     EXEC  CICS HANDLE ABEND PROGRAM()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_18","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#label_2","title":"LABEL","text":"<p>label may take three forms:</p> <ul> <li>Direct reference</li> <li>Indirect reference</li> <li>Adcon literal</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#program","title":"PROGRAM","text":"<ul> <li>Can be specified as PROGRAM('xxxxxxxx') or PROGRAM(label)<ul> <li>label must point to an 8-byte field.</li> </ul> </li> <li>Any received COMMAREA when the EXEC CICS HANDLE ABEND is   issued is passed to the handling program when an abend occurs.</li> </ul> <p>Note</p> <p>When an XCTL is executed, any HANDLE ABEND LABEL at the current logical level is cleared as the current program is no longer in use. HANDLE ABEND PROGRAMs are not cleared.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_22","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>HANDLE TYPE NOT RECOGNISED</li> <li>INVALID PROGRAM</li> <li>NO PARAMETERS SPECIFIED </li> <li>PARMS MISSING OR TOO MANY PARMS</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#link","title":"LINK","text":"<pre><code>name     EXEC  CICS LINK\n                    PROGRAM()\n                    COMMAREA(label)\n                    LENGTH()\n                    CHANNEL()\n</code></pre> <p>Executes another CICS program.</p> <ul> <li>Return is to the linker.</li> </ul> <p>In zCICS both CHANNEL and COMMAREA may be specified. A warning MNOTE is issued.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_19","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#program_1","title":"PROGRAM","text":"<ul> <li>PROGRAM is mandatory</li> <li>Can be specified as PROGRAM('xxxxxxxx') or PROGRAM(label)<ul> <li>label must point to an 8-byte field.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#commarea","title":"COMMAREA","text":"<ul> <li>COMMAREA(label) is optional</li> <li>If COMMAREA is present, the address/length are passed.</li> <li>label may take three forms:<ul> <li>Direct reference</li> <li>Indirect reference</li> <li>Adcon literal</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_6","title":"LENGTH","text":"<ul> <li>Can be specified as LENGTH(value) or LENGTH(label)<ul> <li>LENGTH(value) supports the use of the length attribute.</li> <li>label must point to a 2-byte hex value.</li> </ul> </li> <li>LENGTH can be omitted. When it is, the implied length of the   COMMAREA is used. LENGTH is mandatory when COMMAREA is an   indirect reference.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_23","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>INVALID CHANNEL</li> <li>INVALID PROGRAM</li> <li>PROGRAM IS MISSING</li> <li>LENGTH IS MANDATORY FOR INDIRECT COMMAREA</li> <li>LENGTH WITHOUT COMMAREA</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#warning","title":"Warning","text":"<ul> <li>CHANNEL and COMMAREA specified</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_15","title":"Conditions (RESP/RESP2)","text":"<ul> <li>CHANNELERR/1</li> <li>PGMIDERR/3</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#load","title":"LOAD","text":"<pre><code>name     EXEC  CICS LOAD\n                    PROGRAM()\n                    ENTRY()/SET()\n                    LENGTH(label)\n                    FLENGTH(label)\n</code></pre> <p>Loads a module.</p> <p>The intention in the zCICS environment is to load a table or some other data, not an executable program.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_20","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#program_2","title":"PROGRAM","text":"<ul> <li>PROGRAM is mandatory</li> <li>Can be specified as PROGRAM('xxxxxxxx') or PROGRAM(label)<ul> <li>label must point to an 8-byte field.</li> </ul> </li> <li>At present, only modules with a suffix of .390 may be LOADed.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#entryset","title":"ENTRY/SET","text":"<ul> <li>ENTRY and SET are optional</li> <li>Must be specified as a permitted general register value.<ul> <li>Both are equivalent in zCICS.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_7","title":"LENGTH","text":"<ul> <li>LENGTH is optional</li> <li>LENGTH(label) is the only format.</li> <li>label must point to a 2-byte field.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength_6","title":"FLENGTH","text":"<ul> <li>FLENGTH is optional</li> <li>FLENGTH(label) is the only format.</li> <li>label must point to a 4-byte field.</li> </ul> <p>Note</p> <p>At task end the LOADed module is not RELEASEd.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_24","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>INVALID PROGRAM</li> <li>LENGTH AND FLENGTH SPECIFIED</li> <li>PROGRAM IS MISSING</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_16","title":"Conditions (RESP/RESP2)","text":"<ul> <li>PGMIDERR/3</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#release","title":"RELEASE","text":"<p><pre><code>name     EXEC  CICS RELEASE\n                    PROGRAM()\n</code></pre> Releases a previously loaded module.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_21","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#program_3","title":"PROGRAM","text":"<ul> <li>PROGRAM is mandatory</li> <li>Can be specified as PROGRAM('xxxxxxxx') or PROGRAM(label)<ul> <li>label must point to an 8-byte field.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_25","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>INVALID PROGRAM</li> <li>PROGRAM IS MISSING</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_17","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/5</li> <li>INVREQ/6</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#return","title":"RETURN","text":"<p><pre><code>name     EXEC  CICS RETURN\n                    TRANSID()\n                    COMMAREA(label)\n                    LENGTH()\n                    CHANNEL()\n                    IMMEDIATE\n</code></pre> Returns to the last caller.</p> <p>In zCICS both CHANNEL and COMMAREA may be specified. A warning MNOTE is issued.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_22","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#transid","title":"TRANSID","text":"<ul> <li>Optional, but when COMMAREA is specified, TRANSID is mandatory.</li> <li>Can be specified as TRANSID('xxxx') or TRANSID(label)<ul> <li>label must point to a 4-byte field.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#commarea_1","title":"COMMAREA","text":"<p>COMMAREA(label) is optional</p> <p>label may take three forms:</p> <pre><code>* Direct reference\n* Indirect reference\n* Adcon literal\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_8","title":"LENGTH","text":"<ul> <li>Can be specified as LENGTH(value) or LENGTH(label)</li> <li>LENGTH(value) supports the use of the length attribute.<ul> <li>label must point to a 2-byte hex value.</li> </ul> </li> <li>LENGTH can be omitted. When it is, the implied length of the   COMMAREA is used. LENGTH is mandatory when COMMAREA is an    indirect reference.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_26","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>IMMEDIATE REQUIRES TRANSID</li> <li>INVALID CHANNEL</li> <li>INVALID TRANSID</li> <li>TRANSID IS MISSING</li> <li>LENGTH IS MANDATORY FOR INDIRECT COMMAREA</li> <li>LENGTH WITHOUT COMMAREA</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#warning_1","title":"Warning","text":"<ul> <li>CHANNEL and COMMAREA specified</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_18","title":"Conditions (RESP/RESP2)","text":"<p>See the section on IGNORE CONDITION for these conditions.</p> <ul> <li>CHANNELERR/1</li> <li>INVREQ/1 </li> <li>INVREQ/2 </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#xctl","title":"XCTL","text":"<pre><code>name     EXEC  CICS XCTL\n                    PROGRAM()\n                    COMMAREA(label)\n                    LENGTH()\n                    CHANNEL()\n</code></pre> <p>Executes another CICS program.</p> <p>In zCICS both CHANNEL and COMMAREA may be specified. A warning MNOTE is issued.</p> <p>If COMMAREA is present and both the address and length are the same as passed to the current program, then address/length are passed to the new program.</p> <p>If the address or length differs, then a copy of the COMMAREA is taken and the new address/length are passed to the new program.</p> <p>Return is to the last linker.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_23","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#program_4","title":"PROGRAM","text":"<ul> <li>PROGRAM is mandatory</li> <li>Can be specified as PROGRAM('xxxxxxxx') or PROGRAM(label)<ul> <li>label must point to an 8-byte field.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#commarea_2","title":"COMMAREA","text":"<ul> <li>COMMAREA(label) is optional</li> <li>label may take three forms:<ul> <li>Direct reference</li> <li>Indirect reference</li> <li>Adcon literal</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_9","title":"LENGTH","text":"<ul> <li>Can be specified as LENGTH(value) or LENGTH(label)<ul> <li>LENGTH(value) supports the use of the length attribute.</li> <li>label must point to a 2-byte hex value.</li> </ul> </li> <li>LENGTH can be omitted. When it is, the implied length of the   COMMAREA is used. LENGTH is mandatory when COMMAREA is an   indirect reference.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_27","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>INVALID CHANNEL</li> <li>INVALID PROGRAM</li> <li>PROGRAM IS MISSING</li> <li>LENGTH IS MANDATORY FOR INDIRECT COMMAREA</li> <li>LENGTH WITHOUT COMMAREA</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#warning_2","title":"Warning","text":"<ul> <li>CHANNEL and COMMAREA specified</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_19","title":"Conditions (RESP/RESP2)","text":"<ul> <li>CHANNELERR/1 </li> <li>PGMIDERR/3</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-interval-control","title":"Command reference - Interval control","text":"<p>Note</p> <p>FLENGTH is an extension; do not use this parameter if the source code is  likely to be ported back to a mainframe environment.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#asktime","title":"ASKTIME","text":"<pre><code>name     EXEC  CICS ASKTIME                                           X\n                    ABSTIME()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_28","title":"Errors","text":"<ul> <li>BAD PARM</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#delay","title":"DELAY","text":"<pre><code>name     EXEC  CICS DELAY\n                    REQID()\n                    INTERVAL()/TIME()\n                    FOR/UNTIL\n                    HOURS()\n                    MINUTES()\n                    SECONDS()\n                    INTERVAL\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_24","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#interval","title":"INTERVAL","text":"<ul> <li>Can be specified as INTERVAL(s) through to INTERVAL(hhmmss).<ul> <li><code>INTERVAL(234)</code> means wait for 2 minutes 34 seconds.</li> </ul> </li> <li>INTERVAL(label) is also permitted (extension).<ul> <li>label must point to a 6-byte character field with leading character zeros   as needed.   <pre><code>name     EXEC  CICS DELAY\n                    INTERVAL(MYTIME)\n......\nMYTIME DC C'000234'\n</code></pre></li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#time","title":"TIME","text":"<ul> <li>Can be specified as TIME(s) through to TIME(hhmmss).<ul> <li><code>TIME(234)</code> means resume the task at 2 minutes 34 seconds after   midnight. Expiration time rules apply; see the IBM CICS\u00ae Application   Programming Guide.</li> </ul> </li> <li>TIME(label) is also permitted (extension).<ul> <li>label must point to a 6-byte character field with leading character zeros   as needed.   <pre><code>name     EXEC  CICS DELAY\n                    TIME(MYTIME)\n......\nMYTIME   DC    C'000234'\n</code></pre></li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#for-hours-minutes-seconds","title":"FOR HOURS() MINUTES() SECONDS()","text":"<ul> <li>FOR is an alternative to INTERVAL.</li> <li>HOURS/MINUTES/SECONDS must be numeric values.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#until-hours-minutes-seconds","title":"UNTIL HOURS() MINUTES() SECONDS()","text":"<ul> <li>UNTIL is an alternative to TIME.</li> <li>HOURS/MINUTES/SECONDS must be numeric values.</li> <li>The result from the parameters is a time-of-day.<ul> <li><code>UNTIL SECONDS(10000)</code> means resume the task at 02:46:40.</li> </ul> </li> <li>Expiration time rules apply; see the IBM CICS\u00ae Application Programming Guide.</li> <li>If no parameters are specified, then DELAY INTERVAL(0) is assumed.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_29","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FOR AND UNTIL ARE SPECIFIED</li> <li>BOTH INTERVAL AND TIME ARE SPECIFIED</li> <li>FOR/UNTIL SPECIFIED, BUT NO TIME PARMS</li> <li>HOURS/MINUTES/SECONDS ARE INVALID WITH INTERVAL OR TIME</li> <li>HOURS/MINUTES/SECONDS ARE SPECIFIED WITHOUT FOR/UNTIL</li> <li>INTERVAL/TIME CANNOT BE SPECIFIED WITH FOR/UNTIL</li> <li>INTERVAL/TIME MUST BE 1 TO 6 BYTES</li> <li>INVALID REQID</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_20","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/4</li> <li>INVREQ/5</li> <li>INVREQ/6</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#formattime","title":"FORMATTIME","text":"<pre><code>name     EXEC  CICS FORMATTIME\n</code></pre> <p>Refer to IBM CICS\u00ae Application Programming reference for available parameters.</p> <p>Note</p> <ul> <li>STRINGFORMAT is discarded as there is only one option.</li> <li>DATESEP(label) and TIMESEP(label) are added as extensions.   Only the first byte is used.</li> <li>DATESTRING returns the following 25-byte string.   \"Mon, 17 Dec 2007 10:20:30\". The time zone (e.g. GMT) is not returned.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_30","title":"Errors","text":"<ul> <li>ABSTIME IS MANDATORY</li> <li>BAD PARM</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_21","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/1</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#start","title":"START","text":"<pre><code>name     EXEC  CICS START\n                    TRANSID()\n                    INTERVAL()/TIME()\n                    TERMID()\n                    REQID()\n                    FROM()\n                    LENGTH()/FLENGTH()\n                    CHANNEL()\n                    QUEUE()\n                    RTRANSID()\n                    RTERMID()\n                    AFTER/AT\n                    HOURS()\n                    MINUTES()\n                    SECONDS()\n</code></pre> <p>Warning</p> <ul> <li>USERID is not supported.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_25","title":"Parameters","text":"<ul> <li>In zCICS both CHANNEL and other parms may be specified.<ul> <li>A warning MNOTE is issued.</li> </ul> </li> <li>INTERVAL and TIME follow the same syntax and rules as for DELAY.</li> <li>AFTER and AT follow the same syntax and rules as FOR and UNTIL in   DELAY above.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_31","title":"Errors","text":"<ul> <li>AFTER/AT SPECIFIED, BUT NO TIME PARAMETERS</li> <li>BAD PARM</li> <li>BOTH AFTER AND AT ARE SPECIFIED</li> <li>BOTH INTERVAL AND TIME ARE SPECIFIED</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>FROM/(F)LENGTH MUST BOTH BE MISSING OR BOTH SPECIFIED</li> <li>HOURS/MINUTES/SECONDS ARE INVALID WITH INTERVAL OR TIME</li> <li>HOURS/MINUTES/SECONDS ARE SPECIFIED WITHOUT AFTER/AT</li> <li>INTERVAL/TIME CANNOT BE SPECIFIED WITH AFTER/AT</li> <li>INTERVAL/TIME MUST BE 1 TO 6 BYTES</li> <li>INVALID CHANNEL</li> <li>INVALID QUEUE</li> <li>INVALID REQID</li> <li>INVALID RTERMID</li> <li>INVALID RTRANSID</li> <li>INVALID TERMID</li> <li>INVALID TRANSID</li> <li>TRANSID IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#warning_3","title":"Warning","text":"<ul> <li>CHANNEL AND OTHER PARMS SPECIFIED BUT ALLOWED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_22","title":"Conditions (RESP/RESP2)","text":"<ul> <li>CHANNELERR/1</li> <li>INVREQ/0</li> <li>INVREQ/4</li> <li>INVREQ/5</li> <li>INVREQ/6</li> <li>IOERR</li> <li>LENGERR</li> <li>TERMIDERR</li> <li>TRANSIDERR</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#retrieve","title":"RETRIEVE","text":"<pre><code>name     EXEC  CICS RETRIEVE\n                    INTO()/SET()\n                    LENGTH()/FLENGTH()\n                    RTRANSID()\n                    RTERMID()\n                    QUEUE()\n</code></pre> <p>Warning</p> <p>WAIT is not supported.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_32","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH INTO AND SET ARE SPECIFIED</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>INTO OR SET MUST BE SPECIFIED</li> <li>INVALID QUEUE</li> <li>INVALID RTERMID</li> <li>INVALID RTRANSID</li> <li>LENGTH OR FLENGTH MUST BE A LABEL</li> <li>SET REQUIRES LENGTH OR FLENGTH</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_23","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ/0</li> <li>ENDDATA</li> <li>ENVDEFERR</li> <li>LENGERR</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#cancel","title":"CANCEL","text":"<pre><code>name     EXEC  CICS CANCEL\n                    REQID()\n</code></pre> <p>Warning</p> <p>TRANSID is not supported.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_33","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>INVALID REQID</li> <li>REQID IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_24","title":"Conditions (RESP/RESP2)","text":"<ul> <li>INVREQ</li> <li>NOTFND</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-task-control","title":"Command reference - Task Control","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#enq","title":"ENQ","text":"<pre><code>name     EXEC  CICS ENQ\n                    RESOURCE()\n                    LENGTH()\n                    NOSUSPEND\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_26","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_10","title":"LENGTH","text":"<ul> <li>Can be specified as LENGTH(value) or LENGTH(label)</li> <li>LENGTH(value) supports the use of the length attribute.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_34","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>RESOURCE IS MANDATORY</li> </ul> <p>Warning</p> <p>ENQ on address may not work in zCICS but the command will be processed.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_25","title":"Conditions (RESP/RESP2)","text":"<ul> <li>ENQBUSY</li> <li>LENGERR/1</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#deq","title":"DEQ","text":"<pre><code>name     EXEC  CICS DEQ\n                    RESOURCE()\n                    LENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_27","title":"Parameters","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_11","title":"LENGTH","text":"<ul> <li>Can be specified as LENGTH(value) or LENGTH(label)</li> <li>LENGTH(value) supports the use of the length attribute.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_35","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>RESOURCE IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_26","title":"Conditions (RESP/RESP2)","text":"<ul> <li>LENGERR/1</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-bms","title":"Command reference - BMS","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#receive_1","title":"RECEIVE","text":"<pre><code>name     EXEC  CICS RECEIVE MAP()\n                    MAPSET()\n                    INTO()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_28","title":"Parameters","text":"<p>Warning</p> <ul> <li>TERMINAL and ASIS are accepted and discarded.</li> <li>SET, FROM and LENGTH are not supported.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#map","title":"MAP","text":"<ul> <li>MAP can be a quoted string, maximum 7 characters or a label pointing to a   7-byte field.</li> <li>If MAP is a label, then INTO is mandatory.<ul> <li>The map structure will not be cleared before the mapping takes   place.</li> </ul> </li> <li>If MAP is a string, then INTO is optional.<ul> <li>If INTO is omitted, the default is map.I</li> <li>The map structure will be cleared before the mapping takes place.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#mapset","title":"MAPSET","text":"<p>MAPSET can be a quoted string, maximum 7 characters or an address pointing to an 8-byte field containing no more than 7 characters.</p> <p>If MAPSET is omitted, then the MAPname is used.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_36","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>FROM NOT SUPPORTED</li> <li>INTO IS REQUIRED WHEN MAP IS A LABEL</li> <li>INVALID MAP NAME</li> <li>INVALID MAPSET NAME</li> <li>LENGTH NOT SUPPORTED</li> <li>MAP IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_27","title":"Conditions (RESP/RESP2)","text":"<p>Note</p> <p>EIBRESP2 is an extension for MAPFAIL;  please see the zCICS BMS Guide for more information.</p> <p>Many of the conditions can arise through a mismatch of map and structure. Typically a map is re-assembled but the programs using it are not.</p> <ul> <li>INVMPSZ/0</li> <li>MAPFAIL/1 The map cannot be found in the mapset.</li> <li>MAPFAIL/2 A short read key (CLEAR or PA) has been pressed or there   are no modified fields.</li> <li>MAPFAIL/3 Data has been received, but there are no named fields in the map.</li> <li>MAPFAIL/4 An SBA has been located, but there is no field in the map that matches.</li> <li>MAPFAIL/5 An SBA has been located, but it matches an unnamed field.</li> <li>MAPFAIL/6 The data received for this field is longer than the DFHMDF   LENGTH= parameter.</li> <li>MAPFAIL/7 There has been a mismatch between the physical map and   the DSECT.</li> <li>MAPFAIL/8 <ul> <li>Data to be processed by PICIN is over 31 digits.</li> <li>Data is not numeric after being PACKed.</li> <li>Data length is greater than the edit pattern allows.</li> </ul> </li> <li>INVREQ/0</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#send_1","title":"SEND","text":"<pre><code>name     EXEC  CICS SEND MAP()\n                    MAPSET()\n                    CURSOR/CURSOR()\n                    DATAONLY/MAPONLY\n                    ERASE/ERASEAUP\n                    FROM()\n                    LENGTH()\n                    ALARM\n                    FREEKB\n                    FRSET\n                    SET()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_29","title":"Parameters","text":"<p>Warning</p> <ul> <li>TERMINAL and WAIT are accepted and discarded.</li> <li>ACCUM is not supported.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#map_1","title":"MAP","text":"<ul> <li>MAP can be a quoted string, maximum 7 characters or a label pointing to a   7-byte field.</li> <li>If MAP is a label, then FROM is mandatory.</li> <li>If MAP is a string, then FROM and/or LENGTH are optional.<ul> <li>If FROM is omitted, the default is map.O</li> <li>If LENGTH is omitted, the default is map.L</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_12","title":"LENGTH","text":"<ul> <li>LENGTH is supported but the value used is always that of the structure length. </li> <li>Can be specified as LENGTH(value) or LENGTH(label)</li> <li>LENGTH(value) supports the use of the length attribute.</li> <li>label must point to a 2-byte hex value.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#mapset_1","title":"MAPSET","text":"<ul> <li>MAPSET can be a quoted string, maximum 7 characters or a label pointing   to an 8-byte field containing no more than 7 characters.</li> <li>If MAPSET is omitted, then MAP is used.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#set_1","title":"SET","text":"<p>SET() is currently intended to be an internal parameter.</p> <p>Warning</p> <p>SET does not conform to the standard used for BMS PAGING.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_37","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>CONTROL IS NOT COMPATABLE WITH SEND MAP</li> <li>CURSOR POSITION AND SYMBOLIC CURSOR SPECIFIED</li> <li>DATAONLY AND MAPONLY SPECIFIED</li> <li>ERASE AND ERASEAUP SPECIFIED</li> <li>FROM IS REQUIRED WHEN MAP IS A LABEL</li> <li>INVALID MAP NAME</li> <li>INVALID MAPSET NAME</li> <li>MAP IS MANDATORY</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_28","title":"Conditions (RESP/RESP2)","text":"<p>Note</p> <p>EIBRESP2 is an extension for MAPFAIL See zCICS BMS Guide for more information.</p> <ul> <li>INVMPSZ/0</li> <li>MAPFAIL/1 The map cannot be found in the mapset.</li> <li>MAPFAIL/8 <ul> <li>Data to be processed by PICOUT is over 31 digits.</li> <li>Data is not numeric after being PACKed.</li> <li>Data length is greater than the edit pattern allows.</li> </ul> </li> <li>MAPFAIL/9 Override field or colour attribute is invalid</li> <li>INVREQ/0<ul> <li>Attempt to execute this in a non-terminal attached task.   This is not documented in the IBM CICS\u00ae Manuals.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#send-control-cursorcursor-eraseeraseaup-alarm-freekb-frset","title":"SEND CONTROL CURSOR/CURSOR() ERASE/ERASEAUP ALARM FREEKB FRSET","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-dump-control","title":"Command reference - Dump Control","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#dump","title":"DUMP","text":"<pre><code>name     EXEC  CICS DUMP\n                    TRANSACTION\n                    DUMPCODE()\n                    COMPLETE\n                    FROM()\n                    LENGTH()/FLENGTH()\n                    SEGMENTLIST()\n                    LENGTHLIST()\n                    NUMSEGMENTS()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_30","title":"Parameters","text":"<ul> <li>TRANSACTION is mandatory.</li> <li>DUMPCODE is mandatory and can be a constant or label.<ul> <li>label must point to a 4-byte field.</li> <li>No syntax checking is done.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#complete","title":"COMPLETE","text":"<ul> <li>If there are no storage area parameters then COMPLETE is the default.</li> <li>Produces a SNAP dump ID=997,TEXT='DUMP dddd COMPLETE'</li> <li>If there are storage area parameters and COMPLETE is not specified,   only the storage areas are dumped.</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#from-lengthflength","title":"FROM() LENGTH()/FLENGTH()","text":"<p>Produces a SNAP dump ID=997,TEXT='DUMP dddd AREA'</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#length_13","title":"LENGTH","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 32767.</li> <li>A label must be 2 bytes and must not exceed 32767.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#flength_7","title":"FLENGTH","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 2G-1.</li> <li>A label must be 4 bytes and must not exceed 2G-1.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#segmentlistlengthlistnumsegments","title":"SEGMENTLIST/LENGTHLIST/NUMSEGMENTS","text":"<p>Produces multiple SNAP dumps ID=997,TEXT='DUMP dddd SEGMENT nnn'</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#numsegments","title":"NUMSEGMENTS","text":"<ul> <li>Can be specified as a constant or label.<ul> <li>A constant must not exceed 2G-1.</li> <li>A label must be 4 bytes and must not exceed 2G-1.</li> </ul> </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_38","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH LENGTH AND FLENGTH ARE SPECIFIED</li> <li>DUMPCODE IS GREATER THAN 4 BYTES</li> <li>DUMPCODE MUST BE SPECIFIED</li> <li>LENGTH OR FLENGTH REQUIRES FROM</li> <li>LENGTH OR FLENGTH MUST BE SPECIFIED</li> <li>SEGMENTLIST, LENGTHLIST AND NUMSEGMENTS MUST ALL BE SPECIFIED OR ALL ABSENT</li> <li>TRANSACTION MUST BE SPECIFIED </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-inquire","title":"Command reference - Inquire","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#inquire-file","title":"INQUIRE FILE","text":"<pre><code>name     EXEC  CICS INQUIRE FILE START\nname     EXEC  CICS INQUIRE FILE START AT()\nname     EXEC  CICS INQUIRE FILE END\nname     EXEC  CICS INQUIRE FILE() NEXT ...\nname     EXEC  CICS INQUIRE FILE() ...\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_31","title":"Parameters","text":"<p>The following parameters are supported:</p> <ul> <li>ACCESSMETHOD</li> <li>ADD</li> <li>BASEDSNAME</li> <li>BROWSE</li> <li>DELETE</li> <li>DSNAME</li> <li>ENABLESTATUS</li> <li>KEYLENGTH</li> <li>KEYPOSITION</li> <li>OBJECT</li> <li>OPENSTATUS</li> <li>READ</li> <li>RECORDFORMAT</li> <li>RECORDSIZE</li> <li>TYPE</li> <li>UPDATE</li> <li>BASEDSNAME()</li> <li>DSNAME()</li> </ul> <p>The length of data returned is the implied length of the data area to a maximum of 128 bytes.</p>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_39","title":"Errors","text":"<ul> <li>AT() IS SPECIFIED WITHOUT START</li> <li>BAD PARM</li> <li>FILE DOES NOT PRECEDE END</li> <li>FILE DOES NOT PRECEDE START</li> <li>FILE() CANNOT BE A STRING WHEN NEXT IS SPECIFIED</li> <li>FILE() IS MISSING</li> <li>INQUIRE TYPE NOT RECOGNIZED</li> <li>INVALID AT()</li> <li>INVALID FILE()</li> <li>NEXT AND END ARE SPECIFIED</li> <li>START AND END ARE SPECIFIED</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#set-file","title":"SET FILE","text":"<pre><code>name     EXEC  CICS SET FILE()/DATASET() ...\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#parameters_32","title":"Parameters","text":"<p>The following parameters are supported:</p> <ul> <li>ADD()</li> <li>ADDABLE</li> <li>NOTADDABLE</li> <li>BROWSE()</li> <li>BROWSABLE</li> <li>NOTBROWSABLE</li> <li>DELETE()</li> <li>DELETABLE</li> <li>NOTDELETABLE</li> <li>ENABLESTATUS()</li> <li>ENABLED</li> <li>DISABLED</li> <li>OPENSTATUS()</li> <li>OPEN</li> <li>CLOSED</li> <li>READ()</li> <li>READABLE</li> <li>NOTREADABLE</li> <li>UPDATE()</li> <li>UPDATABLE</li> <li>NOTUPDATABLE</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_40","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH FILE AND DATASET SPECIFIED</li> <li>FILE OR DATASET MUST BE SPECIFIED</li> <li>INVALID FILE OR DATASET</li> <li>MORE THAN ONE ADD PARAMETER</li> <li>MORE THAN ONE BROWSE PARAMETER</li> <li>MORE THAN ONE DELETE PARAMETER</li> <li>MORE THAN ONE ENABLESTATUS PARAMETER</li> <li>MORE THAN ONE OPEN STATUS PARAMETER</li> <li>MORE THAN ONE READ PARAMETER</li> <li>MORE THAN ONE UPDATE PARAMETER</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_29","title":"Conditions (RESP/RESP2)","text":"<ul> <li>FILENOTFOUND</li> <li>INVREQ/2</li> <li>INVREQ/3</li> <li>INVREQ/4</li> <li>INVREQ/5</li> <li>INVREQ/7</li> <li>INVREQ/12</li> <li>INVREQ/14</li> <li>INVREQ/16</li> <li>INVREQ/17</li> <li>IOERR</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#command-reference-channel-and-containers","title":"Command reference - Channel and containers","text":""},{"location":"user_guide/zCICS/zcics_app_prog_guide/#get","title":"GET","text":"<pre><code>name     EXEC  CICS GET\n                    CONTAINER()\n                    CHANNEL()\n                    INTO()/FLENGTH()\n                    SET()/FLENGTH()\n                    NODATA/FLENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_41","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BOTH INTO AND SET SPECIFIED</li> <li>CONTAINER IS MANDATORY </li> <li>INTO AND NODATA SPECIFIED</li> <li>INTO OR SET OR NODATA IS REQUIRED</li> <li>INVALID CHANNEL</li> <li>INVALID CONTAINER </li> <li>NODATA REQUIRES FLENGTH</li> <li>SET AND NODATA SPECIFIED</li> <li>SET OR NODATA REQUIRES FLENGTH AS LABEL</li> <li>SET REQUIRES FLENGTH</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_30","title":"Conditions (RESP/RESP2)","text":"<ul> <li>CHANNELERR/2</li> <li>INVREQ/4</li> <li>LENGERR/11 </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#put","title":"PUT","text":"<pre><code>name     EXEC  CICS PUT\n                    CONTAINER()\n                    CHANNEL()\n                    FROM()/FLENGTH()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_42","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>CONTAINER IS MANDATORY </li> <li>FLENGTH IS MANDATORY FOR INDIRECT FROM</li> <li>FLENGTH WITHOUT FROM</li> <li>FROM IS MANDATORY</li> <li>INVALID CHANNEL</li> <li>INVALID CONTAINER </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_31","title":"Conditions (RESP/RESP2)","text":"<ul> <li>CHANNELERR/1</li> <li>CONTAINERERR/18</li> <li>INVREQ/4</li> <li>LENGERR/1 </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#delete","title":"DELETE","text":"<pre><code>name     EXEC  CICS DELETE\n                    CONTAINER()\n                    CHANNEL()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_43","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>CONTAINER IS MANDATORY </li> <li>INVALID CHANNEL</li> <li>INVALID CONTAINER </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_32","title":"Conditions (RESP/RESP2)","text":"<ul> <li>CHANNELERR/2</li> <li>CONTAINERERR/10</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#move","title":"MOVE","text":"<pre><code>name     EXEC  CICS MOVE\n                    CONTAINER()\n                    AS()\n                    CHANNEL()\n                    TOCHANNEL()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_44","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>CONTAINER AND/OR AS ARE MISSING </li> <li>INVALID AS</li> <li>INVALID CHANNEL</li> <li>INVALID CONTAINER </li> <li>INVALID TOCHANNEL</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_33","title":"Conditions (RESP/RESP2)","text":"<ul> <li>CHANNELERR/1</li> <li>CHANNELERR/2 </li> <li>CONTAINERERR/10</li> <li>CONTAINERERR/18 </li> <li>INVREQ/4</li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#startbrowse","title":"STARTBROWSE","text":"<pre><code>name     EXEC  CICS STARTBROWSE\n                    CONTAINER\n                    CHANNEL()\n                    BROWSETOKEN()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_45","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>INVALID CHANNEL </li> <li>BROWSETOKEN IS MANDATORY</li> <li>STARTBROWSE TYPE NOT RECOGNISED </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_34","title":"Conditions (RESP/RESP2)","text":"<ul> <li>ACTIVITYERR/2 </li> <li>CHANNELERR/2 </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#getnext","title":"GETNEXT","text":"<pre><code>name     EXEC  CICS GETNEXT\n                    CONTAINER()\n                    BROWSETOKEN()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_46","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BROWSETOKEN IS MANDATORY</li> <li>CONTAINER IS MANDATORY </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#conditions-respresp2_35","title":"Conditions (RESP/RESP2)","text":"<ul> <li>END/2 </li> <li>TOKENERR/3 </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#endbrowse","title":"ENDBROWSE","text":"<pre><code>name     EXEC  CICS ENDBROWSE\n                    CONTAINER\n                    BROWSETOKEN()\n</code></pre>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#errors_47","title":"Errors","text":"<ul> <li>BAD PARM</li> <li>BROWSETOKEN IS MANDATORY</li> <li>ENDBROWSE TYPE NOT RECOGNISED </li> </ul>"},{"location":"user_guide/zCICS/zcics_app_prog_guide/#condition-respresp2","title":"Condition (RESP/RESP2)","text":"<ul> <li>TOKENERR/3 </li> </ul>"},{"location":"user_guide/zCOBOL/commands/","title":"Commands","text":"<p>The following is a list of commands available as part of zCOBOL.</p> <p>These commands are scripts that are included in the z390 source and distribution and can be enabled by including the script directory in your system path.</p> <p>Alternatively you can reference the scripts directly from the command line by specifying the full path.</p> WindowsMacOS/Unix <p><code>(z390 install dir)\\bat</code></p> <p><code>(z390 install dir)/bash</code></p>"},{"location":"user_guide/zCOBOL/commands/#command-reference","title":"Command reference","text":""},{"location":"user_guide/zCOBOL/commands/#zc390","title":"zc390","text":"<p>Convert CBL source file to macro assembler MLC source file</p>"},{"location":"user_guide/zCOBOL/commands/#cblc","title":"cblc","text":"<p>Compile CBL to HLASM BAL and assemble to relocatable object code</p>"},{"location":"user_guide/zCOBOL/commands/#cblcl","title":"cblcl","text":"<p>Compile CBL to HLASM BAL, assemble, and link to z390 load module</p>"},{"location":"user_guide/zCOBOL/commands/#zc390clg","title":"zc390clg","text":"<p>Compile CBL to HLASM BAL, assemble, link, and execute z390 load module</p>"},{"location":"user_guide/zCOBOL/zCOBOL_NIST_COBOL_1985_Test_Results/","title":"zCOBOL NIST COBOL 1985 Test Results","text":""},{"location":"user_guide/zCOBOL/zCOBOL_NIST_COBOL_1985_Test_Results/#Overview","title":"Overview","text":"<p>The NIST COBOL Tests have been downloaded and are being used as an initial test of zCOBOL compliance with the COBOL 1985 Standard.  There are 459 COBOL test programs of which 409 are currently being tested with zcoboL. See the summary statistics showing translation, assembly, and execution by 2 character program name prefix. Currently, they all translate without errors.</p> <p>See the translation statistics showing the frequency of each generated zCOBOL macro call listed in descending order by frequency followed by alphabetical list. The zCOBOL translator program zc390.java/class in z390.jar consists of 1625 lines of java code and uses regular expression parsing support to translate COBOL programs into equivalent HLASM compatible macro assembler calls.</p> <p>It's interesting to note that out of about 440,000 lines of COBOL code, the following make up over 80% of all verbs: PERIOD, MOVE, WS, PERFORM, LABEL, GO, IF, ADD, ELSE, and EXIT. - PERIOD is the name of the macro generated to process end of sentence closing   structures etc. - WS is the name of the generated macro to handle all data definitions in   working-storage and linkage section with unique qualified names. - LABEL is the generated macro to handle creating unique qualified paragraph names. The translator also maps dashes in names to underscores, double quotes to single quotes, START to ZCSTART, and END DECLARATIVES to END_DECLARATIVES to avoid assembler conflicts.</p> <p>See the Generated HLASM Assembler Instructions showing the frequency of each generated HLASM assembler instruction listed in descending order by frequency followed by alphabetical list. The zCOBOL directory currently contains 119 macros corresponding to COBOL verbs and reserved section names plus 9 copybooks totaling 7470 lines of conditional structured macro code.</p> <p>The zcobol directory macros in turn call code generation macros for the target language environment. The zcobol\\z390 directory contains 44 code generation macros and 4 copybooks totaling 13,250 lines of conditional structured macro code. Of the million plus lines of generated HLASM assembler code generated, over 80% consist of the following: DS, LARL, EQU, L, MVC, BASR, DC, MVI, LAY, USING, ORG, DROP, and BRC. - The LARL is used to address single literal pool without requiring base register.</p> <p>Much work has been done and the zCOBOL compiler does compile and execute programs including a number of EXEC CICS COBOL programs and also a number of demo and zCOBOL regression test COBOL programs. However, there is still much work to do to complete the NIST COBOL 1985 test suite. See the pending priority list and join the zCOBOL user email group to participate in future direction of zCOBOL and the setting of priorities going forward.</p> <p>The HLASM generation macros could now be copied to other target language directories for Java, C, and MASM and then modified to generate the appropriate equivalent source code. However, the current focus will remain on HLASM and since the zCOBOL generic language macros which call the code generation macros are still subject to change, delaying the start of other target language macro libraries is recommended. There are existing example generation macros already included which support compiling the zcobol\\demo\\HELLO.CBL program into executable J2SE Java, Microsoft Visual C, and Intel MASM assembler.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_NIST_COBOL_1985_Test_Results/#Summary","title":"Summary Statistics","text":"<p>The following summary report shows the current progress toward translating, assembling, and executing 409 NIST test programs for COBOL 1985 using zCOBOL and z390 version v1.5.01. This report was generated automatically using the following set of ZPAR utility commands:</p> <pre><code>call zpar\\ZPARGEN  zpar\\ZCCLG \\work\\nist\\src\\*.CBL\ncall zpar\\ZPARSUM2            \\work\\nist\\src\\*.ERR\n</code></pre> ID TOT XLATRC=0 XLAT RC&gt;0 ASM RC&lt;=4 ASM RC=8 ASM RC&gt;8 EXEC RC=0 EXEC RC&gt;0 CM 7 7 0 0 7 0 0 0 DB 10 10 0 0 10 0 0 0 EX 1 1 0 0 1 0 0 0 IC 35 35 0 26 9 0 7 7 IF 42 42 0 0 42 0 0 0 IX 38 38 0 0 38 0 0 0 NC 92 92 0 18 72 0 2 18 OB 9 9 0 3 6 0 0 2 RL 32 32 0 0 32 0 0 0 RW 4 4 0 0 4 0 0 0 SG 10 10 0 0 10 0 0 0 SM 7 7 0 1 6 0 0 1 SQ 82 82 0 0 82 0 0 0 ST 39 39 0 0 39 0 0 0 Total 408 408 0 48 358 0 9 28 <p>Notes:</p> <ol> <li>The total NIST COBOL 1985 test suite includes 459 programs.</li> <li>SM201A and SM206A have been removed pending completion of RPI 1068 support    for split pseudo literal for COPY REPLACING.</li> <li>IC223a thru IC237A (11) have been removed pending RPI 1070 to add support    for batch compiles from single CBL source with END PROGRAM statements.</li> <li>Removed 31 programs of the form IDNNNM which intentionally raise flags to test    for error checking.</li> <li>Removed SM201A through SM208A until RPI 1006 is implemented to support    the REPLACE verb.</li> <li>All of the remaining 408 programs translate and assemble without any abnormal    terminations in 30 minutes which is an average of about 4 seconds per program    on Dell 3 GHZ duo core Windows Vista system..</li> <li>The next step will be to add missing functions identified by MNOTEs in order    to assemble and execute successfully.</li> </ol>"},{"location":"user_guide/zCOBOL/zCOBOL_NIST_COBOL_1985_Test_Results/#Translation","title":"Translation to zcobol Macro Calls","text":"<p>All of the generated MLC files for the 409 NIST COBOL programs were read to produce this report using the command:</p> <pre><code>zpar\\ZPARMLC \\work\\NIST\\SRC\\*.MLC\n</code></pre> Statistics ZPARMLC TOTAL OPCODES = 99 ZPARMLC TOTAL LINES = 777169 ZPARMLC CURRENT DATE=08/22/09 TIME=06.11 Frequency OPCODE 339044 @_COMMENT 129509 PERIOD 78200 MOVE 70231 WS 46035 PERFORM 43839 LABEL 20826 GO 14095 IF 7932 ADD 5752 ELSE 2053 EXIT 1717 WRITE 1198 CLOSE 1196 OPEN 997 READ 932 SET 932 DATA 917 PROCEDURE 883 SELECT 842 FD 661 COMPUTE 487 STOP 474 END 466 IDENTIFICATION 462 ENVIRONMENT 451 ZCOBOL 451 PROGRAM_ID 451 CONFIGURATION 427 FILE 422 INPUT_OUTPUT 422 FILE_CONTROL 418 WORKING_STORAGE 409 COPY 342 SUBTRACT 296 WHEN 296 REWRITE 269 ACCEPT 219 DIVIDE 218 NEXT 186 ZCSTART 154 NOT 152 MULTIPLY 150 RETURN 147 SEARCH 134 USE 125 CALL 111 INSPECT 103 DISPLAY 96 ALTER 95 EVALUATE 94 CONTINUE 90 END_DECLARATIVES 64 SEND 47 END_IF 42 SORT 40 ZCSD 37 RELEASE 34 UNSTRING 34 STRING 31 DELETE 30 I_O_CONTROL 30 END_DIVIDE 29 ENABLE 28 SPECIAL_NAMES 22 LINKAGE 22 @ERROR@ 21 END_READ 20 ALPHABET 19 DISABLE 19 CD 18 END_SUBTRACT 18 END_ADD 14 GENERATE 14 CLASS 13 RECEIVE 12 END_MULTIPLY 11 INITIALIZE 11 COMMUNICATION 11 CANCEL 9 END_EVALUATE 7 END_PERFORM 6 TERMINATE 6 SYMBOLIC 6 REPORT 6 RD 6 MERGE 6 INITIATE 3 DATE_COMPILED 2 SOURCE_COMPUTER 2 OBJECT_COMPUTER 2 DECIMAL_POINT 2 CURRENCY 1 SECURITY 1 SD 1 ORDER 1 INSTALLATION 1 DATE_WRITTEN 1 AUTHOR 1 @_BLANK OPCODE Frequency @_BLANK 1 @_COMMENT 339044 @ERROR@ 22 ACCEPT 269 ADD 7932 ALPHABET 20 ALTER 96 AUTHOR 1 CALL 125 CANCEL 11 CD 19 CLASS 14 CLOSE 1198 COMMUNICATION 11 COMPUTE 661 CONFIGURATION 451 CONTINUE 94 COPY 409 CURRENCY 2 DATA 932 DATE_COMPILED 3 DATE_WRITTEN 1 DECIMAL_POINT 2 DELETE 31 DISABLE 19 DISPLAY 103 DIVIDE 219 ELSE 5752 ENABLE 29 END 474 END_ADD 18 END_DECLARATIVES 90 END_DIVIDE 30 END_EVALUATE 9 END_IF 47 END_MULTIPLY 12 END_PERFORM 7 END_READ 21 END_SUBTRACT 18 ENVIRONMENT 462 EVALUATE 95 EXIT 2053 FD 842 FILE 427 FILE_CONTROL 422 GENERATE 14 GO 20826 I_O_CONTROL 30 IDENTIFICATION 466 IF 14095 INITIALIZE 11 INITIATE 6 INPUT_OUTPUT 422 INSPECT 111 INSTALLATION 1 LABEL 43839 LINKAGE 22 MERGE 6 MOVE 78200 MULTIPLY 152 NEXT 218 NOT 154 OBJECT_COMPUTER 2 OPEN 1196 ORDER 1 PERFORM 46035 PERIOD 129509 PROCEDURE 917 PROGRAM_ID 451 RD 6 READ 997 RECEIVE 13 RELEASE 37 REPORT 6 RETURN 150 REWRITE 296 SD 1 SEARCH 147 SECURITY 1 SELECT 883 SEND 64 SET 932 SORT 42 SOURCE_COMPUTER 2 SPECIAL_NAMES 28 STOP 487 STRING 34 SUBTRACT 342 SYMBOLIC 6 TERMINATE 6 UNSTRING 34 USE 134 WHEN 296 WORKING_STORAGE 418 WRITE 1717 WS 70231 ZCOBOL 451 ZCSD 40 ZCSTART 186 <p>Notes:</p> <ol> <li>@COMMENT@ counts comment lines. Note unless NOCOMMENT option is specified    every COBOL line is also included as assembler comment.</li> <li>@BLANK@ counts blank lines.</li> <li>@ERROR@ counts any lines without valid assembler opcode.</li> <li>LABEL counts macro to generate unique procedure labels.</li> <li>PERIOD counts macro to end sentence.</li> <li>WS counts macro to define working-storage and linkage section.</li> <li>ZCSD counts SD sort definition sections (SD is an assembler instuction)</li> <li>ZCSTART counts START macro (START is an assembler control instruction)</li> </ol>"},{"location":"user_guide/zCOBOL/zCOBOL_NIST_COBOL_1985_Test_Results/#generated","title":"Generated HLASM Assembler Instructions","text":"<p>The following report showing all the generated HLASM opcodes for all 409 of the NIST COBOL programs assembled using option BAL was generated using the following command:</p> <pre><code>zpar\\ZPARMLC \\work\\NIST\\src\\*.BAL\n</code></pre> Statistics ZPARMLC TOTAL OPCODES = 142 ZPARMLC TOTAL LINES = 1588292 ZPARMLC CURRENT DATE=08/22/09 TIME=06.16 Frequency OPCODE 433584 @_COMMENT 199445 DS 158158 LARL 126601 EQU 106991 L 92823 MVC 92819 BASR 70291 DC 24827 MVI 24727 LAY 22338 USING 22170 ORG 20563 DROP 19095 BRC 18763 PACK 11704 MNOTE 11028 CLC 9423 LA 9151 UNPK 8656 ST 8143 OI 7681 AP 7067 ZAP 6951 ED 6490 SVC 6412 JNM 6296 MVHI 5911 AFI 5809 CFI 5290 LR 2220 LOCTR 2150 LH 1583 IILF 1558 CLI 1387 DSECT 1367 PRINT 1353 BRAS 1333 CSECT 1322 LTR 1241 SR 1162 CP 1120 STH 1001 BR 973 LHI 934 MSFI 900 LTORG 884 LGFI 871 BRZ 841 CVB 787 BCTR 735 CVD 701 STM 687 LG 603 STG 565 JNE 551 SP 527 LRL 525 ASI 521 PFPO 469 LMG 459 END 451 PUSH 451 POP 451 JZ 451 CNOP 451 BNE 442 CXSTR 409 COPY 304 A 291 AR 274 SGR 262 MVHHI 259 AHI 247 LGR 236 CVBG 195 EDMK 182 STMG 180 DP 166 AG 165 CHI 149 CVDG 141 MVGHI 117 SGFR 116 D 114 SRP 114 LT 110 SRL 95 CG 75 AGF 69 MVCL 67 CGR 61 LGF 52 AGFR 44 JM 33 S 27 MP 26 IILL 26 IILH 25 SLL 25 JL 25 JH 25 B 24 CLCL 23 LGH 22 @ERROR@ 21 SRAG 21 DXTR 16 MVZ 14 ALG 14 ALCG 13 LTG 13 AH 11 MEXIT 11 MEND 11 MACRO 11 CD 10 LPR 10 LD 10 JNO 10 AGFI 9 DR 8 CH 8 C 7 SLGR 7 SLBGR 6 MSG 5 DSGR 4 TM 4 STD 4 SH 4 SG 4 MS 4 LDR 4 CLGR 2 MSR 1 SD 1 MXTR 1 LPGR 1 JO 1 JNL 1 AGSI 1 @_BLANK OPCODE Frequency @_BLANK 1 @_COMMENT 433584 @ERROR@ 22 A 304 AFI 5911 AG 166 AGF 75 AGFI 10 AGFR 52 AGSI 1 AH 13 AHI 259 ALCG 14 ALG 14 AP 7681 AR 291 ASI 525 B 25 BASR 92819 BCTR 787 BNE 451 BR 1001 BRAS 1353 BRC 19095 BRZ 871 C 8 CD 11 CFI 5809 CG 95 CGR 67 CH 8 CHI 165 CLC 11028 CLCL 24 CLGR 4 CLI 1558 CNOP 451 COPY 409 CP 1162 CSECT 1333 CVB 841 CVBG 236 CVD 735 CVDG 149 CXSTR 442 D 116 DC 70291 DP 180 DR 9 DROP 20563 DS 199445 DSECT 1387 DSGR 5 DXTR 21 ED 6951 EDMK 195 END 459 EQU 126601 IILF 1583 IILH 26 IILL 26 JH 25 JL 25 JM 44 JNE 565 JNL 1 JNM 6412 JNO 10 JO 1 JZ 451 L 106991 LA 9423 LARL 158158 LAY 24727 LD 10 LDR 4 LG 687 LGF 61 LGFI 884 LGH 23 LGR 247 LH 2150 LHI 973 LMG 469 LOCTR 2220 LPGR 1 LPR 10 LR 5290 LRL 527 LT 114 LTG 13 LTORG 900 LTR 1322 MACRO 11 MEND 11 MEXIT 11 MNOTE 11704 MP 27 MS 4 MSFI 934 MSG 6 MSR 2 MVC 92823 MVCL 69 MVGHI 141 MVHHI 262 MVHI 6296 MVI 24827 MVZ 16 MXTR 1 OI 8143 ORG 22170 PACK 18763 PFPO 521 POP 451 PRINT 1367 PUSH 451 S 33 SD 1 SG 4 SGFR 117 SGR 274 SH 4 SLBGR 7 SLGR 7 SLL 25 SP 551 SR 1241 SRAG 21 SRL 110 SRP 114 ST 8656 STD 4 STG 603 STH 1120 STM 701 STMG 182 SVC 6490 TM 4 UNPK 9151 USING 22338 ZAP 7067 <p>Notes:</p> <ol> <li>@COMMENT@ count comments.</li> <li>@MAC_COMMENT@ count macro comments.</li> <li>@BLANK@ count blank lines.</li> <li>@ERROR@ count any lines without valid assembler opcode.</li> </ol>"},{"location":"user_guide/zCOBOL/zCOBOL_NIST_COBOL_1985_Test_Results/#Pending","title":"Pending Priority List for zcobol Development","text":"<p>The following priorities for the open source zCOBOL portable COBOL compiler are based on user feedback. Special thanks to Bill Klein for starting the process.</p> <ul> <li>Nucleus<ul> <li>Data Division (fix a few remaining unsupported clauses such as JUSTIFIED RIGHT)</li> <li>IF (add support for expressions using ZC_CALC shared with COMPUTE)</li> <li>MOVE CORRESPONDING</li> <li>Functions<ul> <li>Date functions</li> <li>Ordering  (MIN, MAX, ORD-MIN, and ORD-MAX)</li> <li>Misc ORD, CHAR, UPPER-/LOWER-CASE</li> <li>Math functions (SQRT, SIN, COS, etc.)</li> </ul> </li> </ul> </li> <li>Debugging<ul> <li>EXHIBIT (READY/RESET TRACE already done)</li> </ul> </li> <li>File Access<ul> <li>Sequential (ESDS, QSAM,LINE SEQUENTIAL already done)</li> <li>Random (RRDS, BDAM)</li> <li>Indexed (KSDS)</li> </ul> </li> <li>Source text management<ul> <li>REPLACE (COPY REPLACING already supported)</li> </ul> </li> <li>SORT and MERGE</li> <li>Last priority after everything else is done<ul> <li>Segmentation</li> <li>Communications</li> </ul> </li> </ul> <p>To submit your priorities, refer to Contributing  and post your requests:</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/","title":"zCOBOL System Programmer's Guide","text":"<p>Warning</p> <p>There are still a number of missing functions in zCOBOL, and until such time as zCOBOL successfully passes the NIST ANSI COBOL 1985 Test Suite, zCOBOL should be considered to still be in a beta test state.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#zcobol-internals","title":"zCOBOL internals","text":"<p>The zCOBOL compiler translates COBOL source language programs into executable code using the following 3 major components:</p> <ul> <li> <p>The java program <code>zc390.class</code> in z390.jar reads COBOL language source program   with file extension CBL and generates a z390 HLASM compatible mainframe assembler   source program with MLC extension.</p> </li> <li> <p>Each COBOL verb becomes a macro call opcode and all the words following up to   the next verb or period become positional parameters for the macro call.</p> </li> <li>Periods generate a PERIOD macro call to terminate all structures which may be   missing the optional END-IF type words.</li> <li>All dashes in words are converted to underscores unless in quotes.</li> <li> <p>The level numbers in data division statements are mapped to WS macro call with   level as first positional operand.</p> </li> <li> <p>The macros in COBOL verb macro library <code>zcobol/*.mac</code> parse the parameters   for each verb, access global macro symbol table, and call code generation macros   to generated executable code. For example the IF macro issues calls to GEN_COMP   macro to generate executable source code to compare two fields,   and issues call to GEN_BC to generate executable source code to branch on condition.</p> </li> <li>There are currently 4 optional zCOBOL executable code generation macro libraries.   The <code>zcobol/z390</code> HLASM code generation library is the primary focus currently.   There is a COBOL demo program <code>zcobol/demo/HELLO.CBL</code> which can be   compiled and executed in all 4 different target language environments using   the initial zCOBOL release. The following libraries are available:<ul> <li><code>zcobol/z390</code> - zCOBOL code generation macros for HLASM native z9/10 code</li> <li><code>zcobol/java</code> - zCOBOL code generation macros for J2SE Java</li> <li><code>zcobol/vce</code> - zCOBOL code generation macros for MS Visual Express C++</li> <li><code>zcobol/i586</code> - zCOBOL code generation macros for HLA and MASM native Intel code</li> </ul> </li> </ul> <p>Once the z390 HLASM code generation macros are complete and all the NIST COBOL 1985 standards tests have been completed successfully as a first milestone, then these macros can be copied to the other libraries and modified to replace HLASM source code model statements with the other target language statements.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#zc390-translator","title":"zc390 Translator","text":"<p>The zc390 translator is a java regular expression based parser which reads COBOL source program and generates HLASM compatible mainframe assembler source program in one pass. </p> <p>Each recognized COBOL verb starts a new assembler macro call statement with all  the parameters up to the next verb, period, or paragraph label passed as positional  parameters. Periods generate a separate macro call to PERIOD to generate end to all  the structures in the previous sentence.</p> <p>Paragraph and section labels generate call to LABEL with the name and type of label to generate. All hyphens in names are translated to underscores for HLASM compatibility.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#cobol-language-verb-macros","title":"COBOL Language Verb Macros","text":"<p>All the macros for the COBOL language verbs and section headings are stored in the macro library <code>zcobol/mac</code>. These macros parse the parameters, validate them for any syntax errors, and issue calls to generation macros in separate directory as described below. For example, the <code>zcobol/mac/IF.MAC</code> macro generates multiple calls to the generation macros <code>GEN_COMP</code>, <code>GEN_BC</code>,  <code>GEN_B</code>, and <code>GEN_LABEL</code>.</p> <p>There are no language specific code generation macros in the zCOBOL directory so it is shared across multiple target language environments. All the macros are written in structured form using the z390 ZSTRMAC SPE structured programming extensions such as AIF, AELSEIF, AELSE, AEND, AWHILE, etc. As a result there are no explicit AGO or AIF labels in these macros.  See Structured Macro Entensions documentation for more details.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#compute-statement-example","title":"COMPUTE Statement Example","text":"<p>The COBOL compute statement is a good example to study to understand how the zCOBOL  compiler works. The steps followed to compile the following MOVE and COMPUTE  statements are as follows:</p> <pre><code>77 FLT-SRT USAGE FLOAT-SHORT OCCURS 2.\nMOVE 1.1 TO FLT-SRT(2).\nCOMPUTE FLT-SRT(2) = FLT-SRT(2)+2.2.\n</code></pre> <ol> <li>zc390 translator generates the following 2 zCOBOL verb macro call statements: <pre><code>MOVE  1.1,'TO',FLT_SRT,\"(',2,')'`   \nCOMPUTE FLT_SRT,'(',2,')',=,FLT_SRT,'(\",2,')',+,2.2\n</code></pre></li> <li>The MOVE macro uses shared copybook routine GET_FIELD_PARM to parse the two fields for MOVE and store resulting field name and symbol table index. For the literal 1.1 the index is 0, for the subscripted field, the name is set to explicit register reference including length offset(length,register) and the code is generated to set the register to address of the subscripted field.</li> <li>The MOVE macro next issues call to GEN_MOVE with the source and target field names and system table indexes.</li> <li>The GEN_MOVE macro checks the type of each field and generates appropriate code to move value from source to target field. In this case it uses LARL to set register to address of DFP short value of 1.1 in literal table and then generates MVC to move the literal to the target subscripted field.</li> <li>The COMPUTE uses GET_FIELD_PARM to obtain name and index of target field and then extracts parms in expression following the = and then calls ZC_CALC macro to generate code for expression and store result in specified target field. This macro can be used by IF and other verb macros to calculate expression for loop etc.</li> </ol> <p>The ZC_CALC macro parses the expression parameters into Backus Normal Form using two stacks. One stack has the operators in expression and the other has the field parm index pointers. Following the rules of precedence, the operators and associated parameter pointers are removed from the stacks and stored sequentially in an operation table containing the operators, 2 operands, and the target field for each operation.   </p> <p>Temporary storage fields are represented using negative indexes instead of position and a table of temporary fields created along with their type is maintained. A queue of free temporary fields is maintained and once a temporary field has been used in an operation, that temporary field is on the free queue for reuse rather than allocating a new temporary storage field.</p> <p>Once the expression has been parsed and all the operation table entries have been generated, the last target field is replaced with the result field passed to ZC_CALC and then the operation table is scanned and the generation macros for each operation are called to generate code to perform the operation.</p> <p>Just prior to generating code for an operation, the two input parameter types are used to determine the required type of result to minimize any loss of precision during the calculations. A call to GEN_MOVE is made to move the first operand field to the target field prior to performing add, subtract, etc. on the target field for operation. If the first operand is the same as the target field, the move can be omitted but that is not always possible to determine in the case of subscripting and indexing where different variables may just happen to have the same value.</p> <p>The called generation macros GEN_ADD, GEN_SUB, GEN_MPY, and GEN_DIV check the field types and perform the necessary conversion when types do not match.</p> <p>See demo added in <code>zcobol/demo/callcomp</code> directory which contains CALLCALC.MLC main assembler program which calls subroutine COMPSUM.CBL which uses COMPUTE statement to calculate sum of 15 different numeric data field types and returns sum as packed decimal for editing and display by calling program.</p> <p>There is a paper about this demo here: zcobol_COMPUTE.pdf -- Dead link</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#zcobol-target-source-language-generation-macros","title":"zCOBOL Target Source Language Generation Macros","text":"<p>All the target source language generation macros called by the COBOL verb macros in z390/zcobol are stored in the following directories by target language:</p> Directory Notes zcobol/z390 Generate HLASM compatible mainframe assembler source program zcobol/java Generate J2SE java compatible source program zcobol/vce Generate MS Visual Express C compatible source program zcobol/i586 Generate HLA/MASM Intel assembler compatible source program <p>Current only the z390 HLASM compatible source generation macros are being fully developed along with the required runtime support functions stored in the <code>zcobol/lib/ZC390LIB.390</code> dynamically loaded runtime module.</p> <p>zCOBOL demos include a hello world COBOL program which can be compiled and executed in each of the target environments form the same <code>zcobol/demo/HELLO.CBL</code> source program.   </p> <p>The following commands generate the corresponding source language equivalent and executable:</p> Command Generated Source Code Target Generated Executable Code Notes cblclg zcobol/demo/HELLO zcobol/demo/HELLO.MLC/BAL zcobol/demo/HELLO.390 requires z390 and J2SE on Windows/Linux ZCJAVCLG zcobol/demo/HELLO zcobol/demo/HELLO.java zcobol/demo/HELLO.class requires J2SE on Windows/Linux ZCVCECLG zcobol/demo/HELLO zcobol/demo/HELLO.ccp zcobol/demo/HELLO.exe requires MS VCE runtime on Windows ZC586CLG zcobol/demo/HELLO zcobol/demo/HELLO.HLA/ASM zcobol/demo/HELLO.exe requires HLA, MASM, and MS VCE runtime on Windows <p>If you are interested in joining in the open source zCOBOL development effort in any of the 4 target language environments or want to add another target language environment, join the zcobol development email discussion group and make your interests known. Melvyn Maltz is currently developing additional EXEC CICS support for zCOBOL programs.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#zc390lib-runtime-library","title":"ZC390LIB Runtime Library","text":"<p>The <code>zcobol\\lib</code> code generation macro directory also contains all the source code and the ZC390CVT.CPY copybook required to build the <code>linklib\\ZC390LIB.390</code> runtime load module which is dynamically loaded by all generated z390 zCOBOL programs. </p> <p>This module contains the following components:</p> <ul> <li>The ZC390CVT.CPY copybook is used in every zCOBOL generated program   to define the DSECT addressed by register 9.</li> <li>The same copybook is also used in ZC390LIB.MLC to generate   the CVT at the beginning of the ZC390LIB.390 runtime load module   with addresses of all the entries followed by work areas used by   the code generation macros.</li> </ul> Library Element Notes ZC390LIB.MLC Contains ZC390LIB CSECT and COPY ZC390CVT to include all object modules following the CVT at the beginning ZC390NUC.MLC Included module with system function routines such as CALL, GOBACK, STOPRUN, PERFORM, and PMCHECK to check for end of current performed paragraph or section ABORT.MLC Contains module called to abort execution with reason code ACCEPT.MLC Contains support for ACCEPT date, time, day of week DISPLAY.MLC Display any type field or literal INSPECT.MLC Inspect field tallying, replacing, or transforming"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#base-free-code-generation","title":"Base Free Code Generation","text":"<p>The zCOBOL code generation macros in <code>zcobol/lib</code> generate base free code for the procedure division using relative instructions for both branch addressing and for literal addressing as required.</p> <p>The only address constants generated in zCOBOL programs are for statically linked CALL's to other zCOBOL or assembler programs. The only limit on the combined size of working storage and the procedure division is 16MB. In order to use relative addressing for literals, all odd length literals are padded to even lengths.   </p> <p>The LARL instruction is used to set address of data field or literal field as required for use in following RX type instructions. To address working storage and linkage section data fields, conventional base registers are dynamically allocated as required for use in RX type instructions.   </p> <p>Since R13 always points to the beginning of working-storage, no dynamic base registers are required for access to data items in the first 4K of working storage.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#zcobol-exec-cics-support","title":"zCOBOL EXEC CICS Support","text":"<p>When the option CICS is specified on the command line for ZC390C, ZC390CL, or ZC390CLG, then the zcobol\\ZCOBOL MAC global option &amp;ZC_CICS is set on and the following changes in code generation are made:</p> <ol> <li>The CICS option will generate call to DFHEIENT to initialize CICS prior to executing user code starting at the first program CSECT.</li> <li>A DFHEISTG DSECT is generated at the beginning of working-storage instead of WSLOC LOCTR and warnings are generated for any data VALUE clauses defined in working-storage section.</li> </ol>"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#zcobol-data-types","title":"zCOBOL Data Types","text":"<ol> <li>The zCOBOL option FLOAT(HEX/BINARY/DECIMAL) can be used to change the default from DECIMAL to HEX or BINARY for the generic types FLOAT-SHORT, FLOAT-LONG, and FLOAT-EXTENDED. 2  COMP-3 packed and also zoned decimal are limited to 18 digits per COBOL standard unless option EXTEND is set allowing up to 31 digits for both packed decimal and zoned decimal fields.</li> </ol> USAGE PICTURE Z390 Assembler Type Description COMP S9(4) H 16 bit binary COMP S9(9) F 32 bit binary COMP S9(18) G 64 bit binary COMP S9(39) Q 128 bit binary FLOAT-HEX-7 COMP-1 EH HFP short 7 digits FLOAT-HEX-15 COMP-2 DH HFP long - 15 digits FLOAT-HEX-30 LH HFP extended - 30 digits FLOAT-BINARY-7 EB BFP short 7 digits FLOAT-BINARY-16 DB BFP long - 16 digits FLOAT-BINARY-34 LB BFP extended - 34 digits FLOAT-DECIMAL-7 FLOAT-SHORT EB DFP short 7 digits FLOAT-DECIMAL-16 FLOAT-LONG DB DFP long - 16 digits FLOAT-DECIMAL-34 FLOAT-EXTENDED LB DFP extended - 34 digits FLOAT-DECIMAL-7 FLOAT-SHORT EB DFP short 7 digits FLOAT-DECIMAL-16 FLOAT-LONG DB DFP long - 16 digits FLOAT-DECIMAL-34 FLOAT-EXTENDED D LB COMP-3 S9(31) P(3) Packed decimal up to 31 digits with option EXTEND S9(31) Z(3) Zoned Decimal up to 31 digits with option EXTEND (uses PD support) X X Characters FLOAT-SHORT EH,EB,ED Use option FLOAT(HFP/BFP/DFP) FLOAT-LONG DH,DB,DD Use option FLOAT(HFP/BFP/DFP) FLOAT-EXTENDED LH,LB,LD Use option FLOAT(HFP/BFP/DFP)"},{"location":"user_guide/zCOBOL/zCOBOL_System_Programmer_Guide/#command-line-options-for-zcobol-compiler","title":"Command Line options for zCOBOL Compiler","text":"<p>Options are passed to the zCOBOL macro stage via CBL macro call with the options defined as positional parameters.</p> <p>To turn off an option that is on, prefix the option name with NO on command line or in OPT options file.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/","title":"zCOBOL User Guide","text":"<p>Warning</p> <p>There are still a number of missing functions in zCOBOL, and until such time as zCOBOL successfully passes the NIST ANSI COBOL 1985 Test Suite, zCOBOL should be considered to still be in a beta test state.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/#overview","title":"Overview","text":"<p>zCOBOL is an open source portable mainframe COBOL compiler available as part of the z390 open source portable mainframe assembler.</p> <p>The zCOBOL compiler has been developed as a flexible tool for testing and modernizing COBOL applications without requiring rewriting existing programs.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/#getting-started","title":"Getting Started","text":"<p>First, you will need to install z390</p> <p>Next, try the zCOBOL Quickstart which walks through  how to create and run your first zCOBOL program.</p> <p>You can compile and run the provided <code>HELLO</code> COBOL program by using the following command:</p> WindowsMacOS/Unix <pre><code>cblclg zcobol\\demo\\HELLO\n</code></pre> <pre><code>cblclg zcobol/demo/HELLO\n</code></pre> <p>The above command uses the zCOBOL to HLASM compile, link, and execute command to compile the COBOL hello world program <code>HELLO.CBL</code> into an executable HLASM compatible assembler program <code>HELLO.MLC</code> which is assembled using zCOBOL macro libraries zcobol+zcobol\\z390 and linked into z390 executable load module <code>HELLO.390</code> which is then executed to generate WTO display of \"Hello World\" on the display log and on the console log file <code>HELLO.LOG</code>.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/#running-your-program","title":"Running your program","text":"<p>You can compile, link, and execute a COBOL program in any directory by specifying the path and name of the program in the <code>cblclg</code> command.</p> <p>The source COBOL program must be in ASCII format and have the extension of <code>CBL</code>.</p> <p>Use the compiler command <code>cblc</code> to compile to relocatable object form. Use the compiler command <code>cblcl</code> to compile and link to 390 load module form with statically linked z390 and/or zCOBOL programs included.</p> <p>Once the programs have been successfully linked, then you can use the z390 <code>exec</code> command to execute a load module.</p> <p>For more about all the options available for z390 executable programs see the z390 User Guide</p>"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/#debugging-your-program","title":"Debugging your program","text":"<p>Once you have successfully compiled a COBOL program into a z390 load module, you can run it with the command <code>EXEC &lt;filename&gt;</code>.</p> <p>If the program aborts or fails to produce the expected results, the next step is to debug the problem.</p> <p>The zCOBOL option TRACE can be specified  to generate a WTO display of the name of each COBOL paragraph when it is entered.  Along with listing of the program, this is sometimes enough to figure out why the  program did not work.</p> <p>If it is necessary to examine the generated HLASM compatible assembler code, there are several steps that can be taken:</p> <ul> <li>First the assembly listing with suffix <code>PRN</code> produced by the zCOBOL compiler   can be examined to see if the generated assembler instructions to   perform the correct operation specified in the COBOL statement   which precedes the generated code as a comment statement.   See <code>zcobol/demo/HELLO.PRN</code> as an example.  </li> <li>Next an execution trace of every assembler instruction executed along   with the data values associated with each instruction can be produced   by adding the option <code>TRACE(E)</code> which results in file with TRE suffix.   If you also specify TRACE option, the WTO for every paragraph will also appear   in the TRE trace file which can be handy for finding the start of code   in a particular paragraph. For example, if you run the command   <code>cblclg zcobol/demo/POWERS TRACE(E)</code> then you can view the resulting executing   trace file <code>zcobol/demo/POWERS.TRE</code> as well as the log file <code>zcobol/demo/POWERS.LOG</code>.</li> <li>If the execution trace fails to pinpoint the problem, another option is   to include debug test and display statements in the program to further   isolate where the problem is occurring.</li> </ul>"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/#zcobol-demos-and-regression-tests","title":"zCOBOL demos and regression tests","text":"<p>To run all the zCOBOL demo programs, you can execute the script <code>runcbldemos</code> (located in bash and bat folders) which will compile and execute them. You can  then view the log file for each demo program to see the output produced. </p> <p>You can also run all the zCOBOL regression tests using the command <code>runcbltests</code> (located in bash and bat folders) and look at the source code and generated output.</p>"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/#demo-programs","title":"Demo Programs","text":"<p>The following zCOBOL demo programs can be found in <code>zcobol/demo</code></p> Program Notes HELLO Display \"Hello World\" and STOP RUN DATETIME ACCEPT current date and time and display month, day of week, and year COPYFILE Read line sequential ASCII file and copy it to new output line sequential file POWERS Calculate and display powers of 2 up to 2^31^"},{"location":"user_guide/zCOBOL/zCOBOL_User_Guide/#regression-test-programs","title":"Regression test programs","text":"<p>The following zCOBOL regression test programs can be found in <code>zcobol/test</code></p> Program Notes TESTADD1 Test 225 combinations of ADD TESTADD2 Test 225 combinations of ADD with different implied decimals TESTASM4 Assembler module statically linked with TESTCAL3.CBL TESTBFP1 Test Binary Floating Point support TESTCAL1 CALL TESTCAL2 statically linked TESTCAL2 CALL TESTCAL3 dynamically TESTCAL3 Dynamically loaded zcobol module which calls statically linked TESTASM4 assembler routine TESTCMP1 ADD, SUBTRACT, MULTIPLY, and DIVIDE all formats TESTCMP2 Test ADD, SUBTRACT, MULTIPLY, and DIVIDE TESTCMP3 Test COMPUTE with implied decimal points for data type F, G, H, P, Q, and Z TESTCMP4 Test COMPUTE with literals and different numberic values and implied decimals TESTCMP5 Test 225 combinations of COMPUTE TESTCMP6 Test 225 combinations of COMPUTE with different implied decimals TESTCPY1 COPY TESTCPY2 nested COPY TESTDFP1 Test Decimal Floating Point )DFP) support TESTDIV1 Test 225 combinations of DIVIDE TESTDIV2 Test 225 combinations of DIVIDE with different implied decimals TESTDSP1 DISPLAY all formats TESTFIL1 Test file access TESTFIL2 Test file access TESTFUN1 ACCEPT, TRANSFORM, NUMERIC, etc. TESTGO1 GO TO DEPENDING ON TESTHFP1 Test Hexidecimal Floating Point (HFP) support TESTIF1 Compound IF requiring use of intermediate T/F flags TESTIF2 Test IF with omitted operands such as IF A = B OR C TESTIF3 Test IF with parenthesis TESTINT1 Test integer data types H, F, G, Q, P, and Z TESTISP1 INSPECT TALLYING, REPLACING, TRANSFORMING TESTMOV1 MOVE all formats TESTMOV2 Test alignment for non-floating point moves TESTMOV3 Test scaling for implied decimal for non-floating point moves TESTMPY1 Test 225 combinations of MULTIPLY TESTMPY2 Test 225 combinations of MULTIPLY with different implied decimals TESTPM1 PERFORM VARYING and PERFORM TIMES TESTPM2 Test PERFORM with duplicate paragraph names in different sections TESTPM3 Test reading file using nested PERFORM VARYING TESTRMD1 Test move reference modification of the form MOVE F1(var1+lit1:len1) TO F2(var2+lit2:len2) TESTSIX1 Test multiple subscripts TESTSIX2 Test SET and INDEXED form of subscripting TESTSUB1 Test 225 combinations of SUBTRACT TESTSUB2 Test 225 combinations of SUBTRACT with different implied decimals TESTTRC1 TRUNC TESTTRC2 NOTRUNC with ONSIZE TESTTRC3 TRUNC and NOR64 to test use of DXR versus DSG TESTWS1 Working storage REDEFINE and OCCURS with padding"},{"location":"user_guide/zCOBOL/zCOBOL_filetypes/","title":"zCOBOL file types","text":"TYPE Format File Description File or Report Format Description CBL ASCII COBOL source program 1-6 sequence #, 7 comment if not space, 8-11 area A, 12-72 area B. CPZ ASCII COBOL copy book member 1-6 sequence #, 7 comment if not space, 8-11 area A, 12-72 area B. MLC ASCII Macro assembler source program generated by phase 1 of the zCOBOL compiler which uses <code>zcobol.class</code> regular expression based parser in z390.jar to read CBL source file and create MLC source file in one pass.\u00a0 Macro call for each COBOL statement starting in area A and for each COBOL verb found in area B.\u00a0 Working storage data items are mapped to WS macro call with level as first parameter.\u00a0 Each macro call name is followed by positional\u00a0parameters found following verb up to next verb or period.\u00a0Periods are mapped to PERIOD macro call.\u00a0 Parameters of the form keyword(..) are passed as single parameter.\u00a0 Other ( and ) are passed as separate parameter in quotes. BAL ASCII HLASM compatible source code generated by phase 2 of the zCOBOL compiler when using CBLC, CBLCL or CBLCLG commands. HLASM compatible source statements generated by the zCOBOL macros during expansion of the generated MLC file. CPY ASCII Generated copy file containing macro calls to define labels defined in a zCOBOL program. LABEL generated zCOBOL name."},{"location":"user_guide/zCOBOL/zCOBOL_options/","title":"zCOBOL options","text":"<p>Use of parameters with parentheses in *nix shells</p> <p>Unix shells like sh and bash interpret parentheses if not quoted. For this reason, if you need to specify a parameter that contains parentheses, then that parameter should be quoted. </p> <p>For example, the FLOAT parameter is quoted as it uses parentheses, whereas the COMMENT parameter is not.</p> <p><code>\"FLOAT(BINARY)\" COMMENT</code></p> Option Default Description @file NO Retrieve additional options from free form text file with default suffix OPT.\u00a0 Options can be specified delimited by spaces on as many lines as required.\u00a0 All characters on a line following * are ignored as comments. The @file option can be nested.\u00a0 The default path is the program path. CICS NO Parse COBOL EXEC CICS commands into z390 EXEC CICS compatible macro calls and also rename working storage to DFHEISTG. COMMENT YES Generate MLC comments showing original COBOL statement preceding each macro call statement. EXTEND YES Support up to 31 digits for DISPLAY (Z) and COMP-3 (P) type data items rather than limiting precision to ANSI 1985 standard of 18. FLOAT(DECIMAL) YES Set type of floating point for usage FLOAT-SHORT, FLOAT-LONG, and FLOAT-EXTENDED.\u00a0 The choices are FLOAT(HEX) for Hexadecimal Floating Point (HFP) like COMP-1 and COMP-2, FLOAT(BINARY) for Binary Floating Point (BFP), or the default FLOAT(DECIMAL) for Decimal Floating Point (DFP). R64 YES Generate 64 bit instructions for the 16 GPR registers where appropriate.\u00a0 NOR64 restricts code generation to only use lower 32 bits of 16 GPR registers as required by z/VSE and some other operating environments.\u00a0 (Note option TRUNC and NOR64 results in use of DXR instead of DGR which is more efficient.) TRACE NO Generate WTO display of paragraph name at entry to each new paragraph in procedure division.\u00a0 This provides high level trace as opposed to using the z390 TRACE(E) option which generates instruction level trace. TRUNC NO Truncate binary data types F, G, and H to specified number of digits in PICTURE. WARN YES Generate level 4 MNOTE warnings from zCOBOL macros."}]}